{"version":3,"sources":["webpack:///./source/src/app/components/Shared/ScopeValidation.jsx","webpack:///./source/src/app/data/Validation.jsx","webpack:///./source/src/app/data/Subscription.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ImportExternalApp.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/AppConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/KeyConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewCurl.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewKeys.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/WaitingForApproval.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManagerSummary.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenExchangeKeyConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManager.jsx","webpack:///./source/src/app/components/Shared/GenericDisplayDialog.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/OriginalDevportalDetails.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/SubscriptionTableRow.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/Credentials.jsx"],"names":["resourcePaths","APIS","SINGLE_API","API_SWAGGER","API_WSDL","API_GW_CONFIG","API_THUMBNAIL","API_COPY","API_LC_HISTORY","API_CHANGE_LC","API_LC","API_LC_PENDING_TASK","API_DEF","API_VALIDATE_DEF","API_DOCS","API_DOC","API_DOC_CONTENT","APPLICATIONS","SINGLE_APPLICATION","APPLICATION_GENERATE_KEYS","APPLICATION_GENERATE_KEY_TYPE","EXPORT_APIS","IMPORT_APIS","SUBSCRIPTION","SINGLE_SUBSCRIPTION","SUBSCRIPTIONS","BLOCK_SUBSCRIPTION","UNBLOCK_SUBSCRIPTION","POLICIES","POLICY","ENDPOINTS","ENDPOINT","LABLES","WORKFLOW","SERVICE_DISCOVERY","resourceMethods","POST","PUT","GET","DELETE","ScopeValidation","React","Component","constructor","props","super","this","state","componentDidMount","resourcePath","resourceMethod","hasScope","AuthManager","hasScopes","then","haveScope","setState","render","children","propTypes","PropTypes","node","isRequired","string","definition","number","Joi","integer","url","uri","allow","ipAddress","ip","version","cidr","Subscription","Resource","client","APIClientFactory","getAPIClient","Utils","getEnvironment","label","getSubscriptions","apiId","applicationId","limit","apis","get_subscriptions","getSubscription","subscriptionUUID","get_subscriptions__subscriptionId_","subscriptionId","getMonetizationInvoice","get_subscriptions__subscriptionId__usage","deleteSubscription","delete_subscriptions__subscriptionId_","updateSubscription","throttlingPolicy","status","requestedThrottlingPolicy","subscriptionData","payload","Subscriptions","put_subscriptions__subscriptionId_","requestBody","ImportExternalApp","consumerKey","consumerSecret","onChange","isUserOwner","key","provideOAuthKeySecret","importDisabled","intl","useIntl","open","setOpen","useState","handleClose","handleChange","event","Button","variant","color","startIcon","onClick","disabled","defaultMessage","id","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","Grid","container","spacing","direction","item","xs","TextField","name","formatMessage","value","e","margin","fullWidth","FormControl","FormHelperText","DialogActions","Typography","shape","func","bool","defaultProps","AppConfiguration","classes","config","previousValue","selectedValue","setSelectedValue","handleAppRequestChange","target","currentTarget","AppConfigLabels","defineMessages","application_access_token_expiry_time","user_access_token_expiry_time","refresh_token_expiry_time","id_token_expiry_time","pkceMandatory","pkceSupportPlain","bypassClientCredentials","AppConfigToolTips","getAppConfigLabel","getAppConfigToolTip","tooltip","useEffect","TableRow","TableCell","component","scope","className","leftCol","Box","maxWidth","type","multiple","root","removeHelperPadding","select","helperText","values","map","MenuItem","Array","isArray","formControl","InputLabel","Select","labelId","displayEmpty","input","Input","renderValue","selected","chips","Chip","chip","Checkbox","checked","indexOf","ListItemText","primary","notFound","instanceOf","Object","any","injectIntl","withStyles","theme","paddingTop","paddingBottom","paddingLeft","width","FormControlOdd","padding","button","marginLeft","quotaHelp","position","checkboxWrapper","display","checkboxWrapperColumn","flexDirection","group","KeyConfiguration","urlCopied","setUrlCopied","callbackHelper","setCallbackHelper","keyManagerConfig","updateKeyRequest","keyRequest","updateHasError","callbackError","mode","selectedGrantTypes","callbackUrl","applicationConfiguration","availableGrantTypes","description","additionalProperties","enableMapOAuthConsumerApps","enableOAuthAppCreation","enableTokenEncryption","enableTokenGeneration","revokeEndpoint","tokenEndpoint","userInfoEndpoint","field","newRequest","cloneDeep","newGrantTypes","keyManager","includes","Validation","validate","error","filter","clonedAdditionalProperties","onCopy","setTimeout","getPreviousValue","isPreviousValueSet","defaultValue","default","ResourceNotFound","grantTypeDisplayListMap","grantTypes","grantTypeDisplayNameMap","modifiedGrantTypes","forEach","grantType","getGrantTypeDisplayList","Settings","alignItems","Table","table","TableBody","Tooltip","title","placement","iconStyle","text","IconButton","aria-label","iconButton","Icon","keys","FormControlLabel","control","placeholder","length","validating","array","isKeysAvailable","setGenerateEnabled","flexWrap","whiteSpace","cursor","fontSize","titleColumn","fontWeight","keyInfoTable","marginBottom","borderCollapse","borderBottom","useStyles","makeStyles","code","background","palette","grey","flex","command","encodeVisible","textDecoration","contentWrapper","ViewCurl","jwtToken","defaultTokenEndpoint","bas64Encoded","window","btoa","showReal","setShowReal","tokenCopied","setTokenCopied","applyReal","alias","Fragment","ViewKeys","accessTokenRequest","that","elementName","data","preventDefault","showToken","keyType","keyMappingId","selectedTab","applicationPromise","application","regenerateSecret","response","console","log","showSecretGen","secretGenResponse","catch","showCurl","isKeyJWT","isUpdating","generateToken","timeout","scopesSelected","tokenResponse","token","accessToken","tokenScopes","tokenValidityTime","validityTime","Alert","body","message","selectedApp","hashEnabled","keyCopied","secretCopied","showCS","copyWrapper","InputProps","readOnly","endAdornment","InputAdornment","handleSecretRegenerate","handleShowHidden","onMouseDown","handleMouseDownGeneric","appId","Application","get","subscriptionScopes","getKeys","componentDidUpdate","prevProps","fullScreen","tokenType","summary","initialToken","initialValidityTime","initialScopes","Loading","csCkKeys","size","accessTokenScopes","validityPeriod","tokenDetails","dialogHead","gutterBottom","viewKeyAndSecret","supportedGrantTypes","supportedGrantTypesUnchanged","inputWrapper","dialogWrapper","DialogContentText","Tokens","updateAccessTokenRequest","ViewToken","isOauth","ViewSecret","secret","CircularProgress","generateAccessToken","autoFocus","tokenSection","find","a","handleClickOpen","handleClickOpenCurl","getContrastText","paper","marginTop","marginRight","keyState","states","REJECTED","TokenManagerSummary","keyStates","emptyBox","CREATED","WaitingForApproval","keyGrantTypes","reducer","newValue","TokenExchangeKeyConfiguration","setShowCS","setShowToken","setShowCurl","setShowSecretGen","setNotFound","setIsUpdating","isResidenceTokenAvailable","setIsResidenceTokenAvailable","initialState","tokenScope","externalIDPToken","externalIDPTokenError","initialExecution","dispatch","useReducer","validateExternalIDPToken","selectedIdPType","tableHeader","selectedIdpType","allowedAudience","rows","FormHelperTextProps","helperTextError","textField","data-testid","isTokenExchange","generateWrapper","bottomInfo","owner","stepLabel","alignSelf","stepContent","keyLabel","idpGrid","textAlign","avatar","height","border","copyIconStyle","hr","divCenter","lineHeight","TabPanel","index","other","role","hidden","p","indicator","justifyContent","backgroundColor","transition","flexContainer","borderLeft","Tabs","TabIndicatorProps","textTransform","typography","fontWeightRegular","pxToRem","opacity","borderRight","Tab","disableRipple","TokenManager","newSelectedTab","keyManagers","selectedKM","x","selectedGrantsByDefault","gt","push","getDefaultAdditionalProperties","promisedKeyManagers","API","getKeyManagers","promisedGetKeys","Promise","all","responseKeyManagerList","list","enabled","selectdKM","validatingState","hasError","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","isLoading","scopes","providedConsumerKey","providedConsumerSecret","isExchangeTokenError","COMPLETED","APPROVED","bind","generateKeys","updateKeys","cleanUpKeys","handleOnChangeProvidedOAuth","loadApplication","nextProps","nextKeyType","prevKeyType","confItem","isTokenExchangeEnabled","isEnabled","keymanager","updateSubscriptionData","getKeyManagerIdentifier","newKeys","Map","set","info","finally","applicationKey","provideKeys","getKeyManagerDescription","selectedKMObject","isKeyManagerAllowed","mb","keyTitle","toTitleCase","InlineMessage","dialogContainer","username","getUser","Progress","isResidentKeyManagerTokensAvailable","has","cleanUpInfoText","cleanUpButton","AppBar","handleTabChange","indicatorColor","textColor","scrollButtons","displayName","tabPanel","subTitle","ml","m","enableTokenHashing","setValidating","warningIcon","kmName","RadioGroup","style","Radio","main","keyConfigWrapper","muiFormGroupRoot","appContent","genericDisplayDialog","handleClick","heading","caption","buttonText","OriginalDevportalDetails","originalDevPortalUrl","Paper","elevation","Link","rel","href","originalDevPortalLink","launchIcon","subscriptionTableRow","loadInfo","handleSubscriptionDelete","selectedAppId","selectedKeyType","app","applicationOwner","td","policy","actionColumn","to","CustomIcon","strokeColor","icon","classNames","activeLink","colSpan","selectedWrapper","A200","withTheme","Credentials","api","applicationsAvailable","context","subscriptionRequest","newSubscriptionRequest","throttlingPolicyList","tiers","tierName","expanded","apiType","Api","isSubscribing","subscribe","updateData","history","result","subscribedApplications","user","isOnlyMutualSSL","securityScheme","isOnlyBasicAuth","isSetAllorResidentKeyManagers","md","lg","advertiseInfo","advertised","originalDevportalUrl","handleExpandClick","titleSub","isSubscriptionAvailable","pointerEvents","addLinkWrapper","RouterLink","descWrapper","GenericDisplayDialog","goToWizard","generateCredentialWrapper","credentialBoxWrapper","credentialBox","buttonElm","SubscribeToApi","updateSubscriptionRequest","renderSmall","handleSubscribe","subsListTitle","subsListDesc","tableMain","th","SubscriptionTableRow","renderCredentialInfo","contextType","ApiContext","custom","contentAreaWidth","listView","tableBodyEvenBackgrund","tableBodyOddBackgrund","tableHeadBackground","borderTop","expansion","boxShadow","subscribeRoot","A100","appBar","toolbar","subscribeTitle","borderRadius"],"mappings":"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","file":"APICredentials.d241a84f1f640f4da6bd.bundle.js","sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AuthManager from '../../data/AuthManager';\n\nconst resourcePaths = {\n    APIS: '/apis',\n    SINGLE_API: '/apis/{apiId}',\n    API_SWAGGER: '/apis/{apiId}/swagger',\n    API_WSDL: '/apis/{apiId}/wsdl',\n    API_GW_CONFIG: '/apis/{apiId}/gateway-config',\n    API_THUMBNAIL: '/apis/{apiId}/thumbnail',\n    API_COPY: '/apis/copy-api',\n    API_LC_HISTORY: '/apis/{apiId}/lifecycle-history',\n    API_CHANGE_LC: '/apis/change-lifecycle',\n    API_LC: '/apis/{apiId}/lifecycle',\n    API_LC_PENDING_TASK: '/apis/{apiId}/lifecycle/lifecycle-pending-task',\n    API_DEF: '/apis/import-definition',\n    API_VALIDATE_DEF: '/apis/validate-definition',\n    API_DOCS: '/apis/{apiId}/documents',\n    API_DOC: \"'/apis/{apiId}/documents/{documentId}'\",\n    API_DOC_CONTENT: \"'/apis/{apiId}/documents/{documentId}/content'\",\n    APPLICATIONS: '/applications',\n    SINGLE_APPLICATION: '/applications/{applicationId}',\n    APPLICATION_GENERATE_KEYS: '/applications/{applicationId}/generate-keys',\n    APPLICATION_GENERATE_KEY_TYPE: '/applications/{applicationId}/keys/{keyType}',\n    EXPORT_APIS: '/export/apis',\n    IMPORT_APIS: '/import/apis',\n    SUBSCRIPTION: '/subscriptions',\n    SINGLE_SUBSCRIPTION: '/subscriptions/{subscriptionId}',\n    SUBSCRIPTIONS: '/subscriptions',\n    BLOCK_SUBSCRIPTION: '/subscriptions/block-subscription:',\n    UNBLOCK_SUBSCRIPTION: '/subscriptions/unblock-subscription',\n    POLICIES: \"'/policies/{tierLevel}'\",\n    POLICY: \"'/policies/{tierLevel}/{tierName}'\",\n    ENDPOINTS: '/endpoints',\n    ENDPOINT: '/endpoints/{endpointId}',\n    LABLES: '/labels',\n    WORKFLOW: '/workflows/{workflowReferenceId}',\n    SERVICE_DISCOVERY: '/external-resources/services',\n};\n\nconst resourceMethods = {\n    POST: 'post',\n    PUT: 'put',\n    GET: 'get',\n    DELETE: 'delete',\n};\n\n/**\n * Show element iff user has proper scope for the view/action\n * @class ScopeValidation\n * @extends {React.Component}\n */\nclass ScopeValidation extends React.Component {\n    /**\n     * Creates an instance of ScopeValidation.\n     * @param {any} props @inheritDoc\n     * @memberof ScopeValidation\n     */\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    /**\n     * @inheritDoc\n     * @memberof ScopeValidation\n     */\n    componentDidMount() {\n        const { resourcePath, resourceMethod } = this.props;\n        const hasScope = AuthManager.hasScopes(resourcePath, resourceMethod);\n        if (hasScope) {\n            hasScope.then((haveScope) => {\n                this.setState({ haveScope });\n            });\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @returns {React.Component} Return react component\n     * @memberof ScopeValidation\n     */\n    render() {\n        const { children } = this.props;\n        if (this.state.haveScope) {\n            return children || null;\n        }\n        return null;\n    }\n}\n\nScopeValidation.propTypes = {\n    children: PropTypes.node.isRequired,\n    resourcePath: PropTypes.string.isRequired,\n    resourceMethod: PropTypes.string.isRequired,\n};\n\nexport {\n    ScopeValidation,\n    resourceMethods,\n    resourcePaths,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Joi from '@hapi/joi';\n\nconst definition = {\n    number: Joi.number().integer(),\n    url: Joi.string().uri().allow(''),\n    ipAddress: Joi.string().ip({\n      version: [\n        'ipv4',\n        'ipv6'\n      ],\n      cidr: 'optional'\n    }),\n};\n\nexport default definition;\n","/**\n * Copyright (c) 2018, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\nimport APIClientFactory from \"./APIClientFactory\";\nimport Resource from \"./Resource\";\nimport Utils from \"./Utils\";\n\n/***\n * Class to expose Subscription {Resource} related operations\n */\n\nexport default class Subscription extends Resource {\n\n    constructor() {\n        super();\n        this.client = new APIClientFactory().getAPIClient(Utils.getEnvironment().label).client;\n    }\n\n    /**\n     * Get all Subscriptions\n     * @param apiId id of the API\n     * @param applicationId id of the application \n     * @param limit subscription count to return\n     * @returns {promise} With all subscription for given applicationId or apiId.\n     */\n    getSubscriptions(apiId, applicationId, limit = 25) {\n        var promise_get = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions(\n                { apiId: apiId, applicationId: applicationId, limit });\n        }\n        );\n        return promise_get;\n    }\n\n    /**\n     * Get a single subscription\n     * @param subscriptionUUID subscription UUID\n     */\n    getSubscription(subscriptionUUID) {\n        var promised_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions__subscriptionId_(\n                { subscriptionId: subscriptionUUID });\n        }\n        );\n        return promised_subscription;\n    }\n\n    /**\n    * Get pending invoice if available * @param {*} subscriptionUUID\n    */\n    getMonetizationInvoice(subscriptionUUID) {\n        const promiseInvoice = this.client.then(client => {\n            return client.apis['API Monetization'].get_subscriptions__subscriptionId__usage( \n                {\n                    subscriptionId: subscriptionUUID \n                }\n            );\n        });\n        return promiseInvoice;\n    }\n\n    /**\n    * Delete subscription\n    * @param subscriptionId id of the subscription\n    * @returns {promise} With 200 OK.\n    */\n    deleteSubscription(subscriptionId) {\n        const promised_delete_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].delete_subscriptions__subscriptionId_(\n                {\n                    subscriptionId: subscriptionId,\n                }\n            );\n        });\n        return promised_delete_subscription;\n    }\n\n   /**\n    * Update subscription\n    * @param subscriptionId id of the subscription\n    * @param throttlingPolicy throttling tier\n    * @returns {promise} With 200 OK.\n    */\n    updateSubscription(applicationId, apiId, subscriptionId, throttlingPolicy, status, requestedThrottlingPolicy) {\n        const promised_update_subscription = this.client.then((client) => {\n        let subscriptionData = null;\n\n            subscriptionData = {\n                applicationId, apiId, subscriptionId, throttlingPolicy: throttlingPolicy, status, requestedThrottlingPolicy\n            };\n\n            const payload = { \n                subscriptionId: subscriptionId,\n            };\n            return client.apis.Subscriptions.put_subscriptions__subscriptionId_(\n                payload,\n                { requestBody: subscriptionData },\n                { 'Content-Type': 'application/json' });\n        });\n        return promised_update_subscription;\n    }\n}\n\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Typography from '@material-ui/core/Typography';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PlayForWorkIcon from '@material-ui/icons/PlayForWork';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nfunction ImportExternalApp(props) {\n    const {\n        consumerKey, consumerSecret, onChange, isUserOwner, key, provideOAuthKeySecret, importDisabled,\n    } = props;\n    const intl = useIntl();\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n    /**\n     * Handle onChange of provided consumer key and secret\n     *\n     * @param event\n     */\n    function handleChange(event) {\n        if (onChange) {\n            onChange(event);\n        }\n    }\n    return (\n        <>\n            <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                startIcon={<PlayForWorkIcon />}\n                onClick={handleClickOpen}\n                disabled={importDisabled}\n            >\n                <FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                />\n            </Button>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\"><FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                /></DialogTitle>\n                <DialogContent>\n\n                    <Grid container spacing={3} direction='column'>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-key'\n                                name='providedConsumerKey'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Key',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.key',\n                                })}\n                                value={consumerKey}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl>\n                                <FormHelperText id='consumer-key-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.key.title'\n                                        defaultMessage='Consumer Key of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-secret'\n                                name='providedConsumerSecret'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Secret',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.secret',\n                                })}\n                                value={consumerSecret}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl>\n                                <FormHelperText id='consumer-secret-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.secret.of.application'\n                                        defaultMessage='Consumer Secret of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        <FormattedMessage\n                            defaultMessage='Cancel'\n                            id='Shared.AppsAndKeys.ImportExternalApp.cancel'\n                        />\n                    </Button>\n                    <ScopeValidation\n                        resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                        resourceMethod={resourceMethods.POST}\n                    >\n                        {!isUserOwner ? (\n                            <>\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                    disabled={!isUserOwner}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.\n                                                    oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        defaultMessage='Only owner can provide keys'\n                                        id='Shared.AppsAndKeys.ImportExternalApp.key.provide.user.owner'\n                                    />\n                                </Typography>\n                            </>\n                        ) : (\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                            )}\n                    </ScopeValidation>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\nImportExternalApp.propTypes = {\n    intl: PropTypes.shape({}).isRequired,\n    onChange: PropTypes.func.isRequired,\n    consumerKey: PropTypes.string,\n    consumerSecret: PropTypes.string,\n    isUserOwner: PropTypes.string,\n    key: PropTypes.shape({}).isRequired,\n    provideOAuthKeySecret: PropTypes.func.isRequired,\n    importDisabled: PropTypes.bool,\n};\n\nImportExternalApp.defaultProps = {\n    consumerKey: '',\n    consumerSecret: '',\n    isUserOwner: false,\n    importDisabled: false,\n};\n\nexport default ImportExternalApp;\n\n\n\n\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Chip from '@material-ui/core/Chip';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport Box from '@material-ui/core/Box';\n\n\nconst styles = theme => ({\n    FormControl: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    checkboxWrapper: {\n        display: 'flex',\n    },\n    checkboxWrapperColumn: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    removeHelperPadding: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n});\n\n/**\n *\n *\n * @class AppConfiguration\n * @extends {React.Component}\n */\nconst AppConfiguration = (props) => {\n\n    const {\n        classes, config, isUserOwner, previousValue, handleChange,\n    } = props;\n\n    const [selectedValue, setSelectedValue] = useState(previousValue);\n\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleAppRequestChange = (event) => {\n        const { target: currentTarget } = event;\n        setSelectedValue(currentTarget.value);\n        handleChange('additionalProperties', event);\n    }\n\n    const AppConfigLabels = defineMessages({\n        application_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.application.access.token.expiry.time',\n          defaultMessage: 'Application Access Token Expiry Time',\n        },\n        user_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.user.access.token.expiry.time',\n          defaultMessage: 'User Access Token Expiry Time',\n        },\n        refresh_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.refresh.token.expiry.time',\n           defaultMessage: 'Refresh Token Expiry Time',\n        },\n        id_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.id.token.expiry.time',\n           defaultMessage: 'Id Token Expiry Time',\n        },\n        pkceMandatory: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.mandatory',\n            defaultMessage: 'Enable PKCE',\n          },\n        pkceSupportPlain: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.support.plain',\n            defaultMessage: 'Support PKCE Plain text',\n        },\n        bypassClientCredentials: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.bypass.client.credentials',\n            defaultMessage: 'Public client',\n        }\n    });\n\n    const AppConfigToolTips = defineMessages({\n        application_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.application.access.token.expiry.time.tooltip',\n          defaultMessage: 'Type Application Access Token Expiry Time',\n        },\n        user_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.user.access.token.expiry.time.tooltip',\n          defaultMessage: 'Type User Access Token Expiry Time',\n        },\n        refresh_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.refresh.token.expiry.time.tooltip',\n           defaultMessage: 'Type Refresh Token Expiry Time',\n        },\n        id_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.id.token.expiry.time.tooltip',\n           defaultMessage: 'Type ID Token Expiry Time',\n        },\n        pkceMandatory: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.mandatory.tooltip',\n            defaultMessage: 'Enable PKCE',\n          },\n        pkceSupportPlain: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.support.plain.tooltip',\n            defaultMessage: 'S256 is recommended, plain text too can be used.',\n        },\n        bypassClientCredentials: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.bypass.client.credentials.tooltip',\n            defaultMessage: 'Allow authentication without the client secret.',\n        }\n    });\n\n    const getAppConfigLabel = () => {\n        return AppConfigLabels[config.name]\n            ? props.intl.formatMessage(AppConfigLabels[config.name])\n            : config.label\n    }\n\n    const getAppConfigToolTip = () => {\n        return AppConfigToolTips[config.name]\n            ? props.intl.formatMessage(AppConfigToolTips[config.name])\n            : config.tooltip\n    }\n\n    /**\n     * Update the state when new props are available\n     */\n    useEffect(() => {\n        setSelectedValue(previousValue);\n    }, [previousValue])\n\n    const setCheckboxValue = () => {\n        return ( typeof selectedValue === 'string' && selectedValue === 'true' )\n            || ( typeof selectedValue !== 'string' && selectedValue === true );\n    }\n\n    return (\n        <>\n            <TableRow>\n                <TableCell component='th' scope='row' className={classes.leftCol}>\n                    {getAppConfigLabel()}\n                </TableCell>\n                <TableCell>\n                    <Box maxWidth={600}>\n\n                        {config.type === 'select' && config.multiple === false ? (\n                            <TextField\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                select\n                                label={getAppConfigLabel()}\n                                value={selectedValue}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                disabled={!isUserOwner}\n                            >\n                                {config.values.map(key => (\n                                    <MenuItem key={key} value={key}>\n                                        {key}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        ) : (config.type === 'select' && config.multiple === true && Array.isArray(selectedValue)) ? (\n                            <>\n                                <FormControl variant=\"outlined\" className={classes.formControl} fullWidth>\n                                    <InputLabel id=\"multi-select-label\">{config.label}</InputLabel>\n                                    <Select\n                                        labelId=\"multi-select-label\"\n                                        id=\"multi-select-outlined\"\n                                        margin='dense'\n                                        displayEmpty\n                                        name={config.name}\n                                        multiple\n                                        value={selectedValue}\n                                        onChange={e => handleAppRequestChange(e)}\n                                        input={<Input id='multi-select-outlined'/>}\n                                        renderValue={selected => (\n                                            <div className={classes.chips}>\n                                                {selected.map(value => (\n                                                    <Chip key={value} label={value} className={classes.chip}/>\n                                                ))}\n                                            </div>\n                                        )}\n                                        helperText={\n                                            <Typography variant='caption'>\n                                                {getAppConfigToolTip()}\n                                            </Typography>\n                                        }\n                                        label={getAppConfigLabel()}\n                                    >\n                                        {config.values.map(key => (\n                                            <MenuItem key={key} value={key}>\n                                                <Checkbox checked={selectedValue.indexOf(key) > -1}/>\n                                                <ListItemText primary={key}/>\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n\n\n                                <Typography variant='caption'>\n                                    {getAppConfigToolTip()}\n                                </Typography>\n                            </>\n                        ) : (config.type === 'input') ? (\n                            <TextField\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                label={getAppConfigLabel()}\n                                value={selectedValue}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                disabled={!isUserOwner}\n                            />\n                        ) : (config.type === 'checkbox') ? (\n                            <Checkbox\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                label={getAppConfigLabel()}\n                                checked={setCheckboxValue()}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                disabled={!isUserOwner}\n                            />\n                        ) : (\n                            <TextField\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                label={getAppConfigLabel()}\n                                value={selectedValue}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                disabled={!isUserOwner}\n                            />\n                        )}\n                    </Box>\n                </TableCell>\n            </TableRow>\n        </>\n    );\n};\n\nAppConfiguration.defaultProps = {\n    notFound: false,\n};\n\nAppConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    previousValue: PropTypes.any.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    config: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(AppConfiguration));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport cloneDeep from 'lodash.clonedeep';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Settings from 'Settings';\nimport PropTypes from 'prop-types';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Validation from 'AppData/Validation';\nimport AppConfiguration from './AppConfiguration';\n\nconst styles = (theme) => ({\n    FormControl: {\n        paddingTop: 0,\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    checkboxWrapper: {\n        display: 'flex',\n    },\n    checkboxWrapperColumn: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        flexDirection: 'row',\n        whiteSpace: 'nowrap',\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    removeHelperPadding: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n    iconStyle: {\n        cursor: 'pointer',\n        padding: '0 0 0 10px',\n    },\n    iconButton: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n    titleColumn: {\n        width: 150,\n        fontWeight: 500,\n    },\n    keyInfoTable: {\n        marginBottom: 20,\n        borderCollapse: 'collapse',\n        '& td': {\n            paddingBottom: 5,\n            borderBottom: 'solid 1px #cccc',\n        },\n    },\n    leftCol: {\n        width: 180,\n    },\n});\n/**\n *\n *\n * @class KeyConfiguration\n * @extends {React.Component}\n */\nconst KeyConfiguration = (props) => {\n    const [urlCopied, setUrlCopied] = useState(false);\n    const [callbackHelper, setCallbackHelper] = useState(false);\n    const intl = useIntl();\n    const {\n        classes, notFound, isUserOwner, keyManagerConfig, updateKeyRequest, keyRequest, updateHasError, callbackError,mode,\n    } = props;\n    const {\n        selectedGrantTypes, callbackUrl,\n    } = keyRequest;\n    const {\n        applicationConfiguration, availableGrantTypes, description, additionalProperties,\n        enableMapOAuthConsumerApps, enableOAuthAppCreation, enableTokenEncryption, enableTokenGeneration,\n        id, name, revokeEndpoint, tokenEndpoint, type, userInfoEndpoint,\n    } = keyManagerConfig;\n\n    /**\n     * Get the display names for the supported grant types\n     * @param grantTypes\n     * @param grantTypeDisplayNameMap\n     */\n    const getGrantTypeDisplayList = (grantTypes, grantTypeDisplayNameMap) => {\n        const modifiedGrantTypes = {};\n        grantTypes.forEach((grantType) => {\n            modifiedGrantTypes[grantType] = grantTypeDisplayNameMap[grantType];\n            if (!grantTypeDisplayNameMap[grantType]) {\n                modifiedGrantTypes[grantType] = grantType;\n            }\n        });\n        return modifiedGrantTypes;\n    };\n    const callBackHasErrors = (callbackUrlLocal) => {\n        if (callbackUrlLocal === '') {\n            updateHasError(true);\n            setCallbackHelper(intl.formatMessage({\n                defaultMessage: 'Call back URL can not be empty when Implicit or Authorization Code grants are selected.',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.Invalid.callback.empty.error.text',\n            }));\n        } else if (Validation.url.validate(callbackUrl).error) {\n            updateHasError(true);\n            setCallbackHelper(intl.formatMessage({\n                defaultMessage: 'Invalid URL. Please enter a valid URL.',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.Invalid.callback.url.error.text',\n            }));\n        }else {\n            setCallbackHelper(false);\n            updateHasError(false);\n        }\n    };\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleChange = (field, event) => {\n        const newRequest = cloneDeep(keyRequest);\n        const { target: currentTarget } = event;\n        let newGrantTypes = [...newRequest.selectedGrantTypes];\n        newRequest.keyManager = name;\n\n        switch (field) {\n            case 'callbackUrl':\n                if (newGrantTypes.includes('implicit') || newGrantTypes.includes('authorization_code')) {\n                    callBackHasErrors(currentTarget.value);\n                }\n                newRequest.callbackUrl = currentTarget.value;\n                break;\n            case 'grantType':\n                if (currentTarget.checked) {\n                    newGrantTypes = [...newGrantTypes, currentTarget.id];\n                } else {\n                    newGrantTypes = newRequest.selectedGrantTypes.filter((item) => item !== currentTarget.id);\n                    if (currentTarget.id === 'implicit' || currentTarget.id === 'authorization_code') {\n                        newRequest.callbackUrl = '';\n                        setCallbackHelper(false);\n                        updateHasError(false);\n                    }\n                }\n                newRequest.selectedGrantTypes = newGrantTypes;\n                break;\n            case 'additionalProperties':\n                const clonedAdditionalProperties = newRequest.additionalProperties;\n                if(currentTarget.type === 'checkbox') {\n                    clonedAdditionalProperties[currentTarget.name] = currentTarget.checked + \"\";\n                } else {\n                    clonedAdditionalProperties[currentTarget.name] = currentTarget.value;\n                }\n                newRequest.additionalProperties = clonedAdditionalProperties;\n                break;\n            default:\n                break;\n        }\n        updateKeyRequest(newRequest);\n    };\n\n    const onCopy = () => {\n        setUrlCopied(true);\n\n        const caller = function () {\n            setUrlCopied(false);\n        };\n        setTimeout(caller, 2000);\n    };\n\n    const getPreviousValue = (config) => {\n        const { additionalProperties } = keyRequest;\n        let isPreviousValueSet;\n        if (config.type == 'input' && !config.multiple) {\n            isPreviousValueSet = !!(additionalProperties && (additionalProperties[config.name]\n                || additionalProperties[config.name] === ''));\n        } else {\n            isPreviousValueSet = !!(additionalProperties && (additionalProperties[config.name]));\n        }\n        let defaultValue = config.default;\n        if (config.multiple && typeof defaultValue === 'string' && defaultValue === '') {\n            defaultValue = [];\n        }\n        return isPreviousValueSet ? additionalProperties[config.name] : defaultValue;\n    };\n    /**\n     *\n     *\n     * @returns {Component}\n     * @memberof KeyConfiguration\n     */\n\n    if (notFound) {\n        return <ResourceNotFound />;\n    }\n    const grantTypeDisplayListMap = getGrantTypeDisplayList(\n        availableGrantTypes,\n        Settings.grantTypes,\n    );\n\n    // Check for additional properties for token endpoint and revoke endpoints.\n    return (\n        <>\n            <Box display='flex' alignItems='center'>\n                <Table className={classes.table}>\n                    <TableBody>\n                        {(tokenEndpoint && tokenEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Token Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.token.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {tokenEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={tokenEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(revokeEndpoint && revokeEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Revoke Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.revoke.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {revokeEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={revokeEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(userInfoEndpoint && userInfoEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='User Info Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.userinfo.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {userInfoEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={userInfoEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {mode !== 'MAPPED' && (<><TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.KeyConfiguration.grant.types'\n                                    defaultMessage='Grant Types'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <div className={classes.checkboxWrapperColumn}>\n                                    {Object.keys(grantTypeDisplayListMap).map((key) => {\n                                        const value = grantTypeDisplayListMap[key];\n                                        return (\n                                            <FormControlLabel\n                                                control={(\n                                                    <Checkbox\n                                                        id={key}\n                                                        checked={!!(selectedGrantTypes\n                                                                && selectedGrantTypes.includes(key))}\n                                                        onChange={(e) => handleChange('grantType', e)}\n                                                        value={value}\n                                                        disabled={!isUserOwner}\n                                                        color='primary'\n                                                    />\n                                                )}\n                                                label={value}\n                                                key={key}\n                                            />\n                                        );\n                                    })}\n                                </div>\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        defaultMessage={`The application can use the following grant types to generate \n                            Access Tokens. Based on the application requirement,you can enable or disable \n                            grant types for this application.`}\n                                        id='Shared.AppsAndKeys.KeyConfiguration.the.application.can'\n                                    />\n                                </FormHelperText>\n\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    defaultMessage='Callback URL'\n                                    id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <Box maxWidth={600}>\n                                    <TextField\n                                        margin='dense'\n                                        id='callbackURL'\n                                        label={(\n                                            <FormattedMessage\n                                                defaultMessage='Callback URL'\n                                                id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                            />\n                                        )}\n                                        value={callbackUrl}\n                                        name='callbackURL'\n                                        onChange={(e) => handleChange('callbackUrl', e)}\n                                        helperText={callbackHelper || (\n                                            <FormattedMessage\n                                                defaultMessage={`Callback URL is a redirection URI in the client\n                            application which is used by the authorization server to send the\n                            client's user-agent (usually web browser) back after granting access.`}\n                                                id='Shared.AppsAndKeys.KeyConfCiguration.callback.url.helper.text'\n                                            />\n                                        )}\n                                        variant='outlined'\n                                        disabled={!isUserOwner\n                                            || (selectedGrantTypes && !selectedGrantTypes.includes('authorization_code')\n                                                && !selectedGrantTypes.includes('implicit'))}\n                                        error={callbackError}\n                                        placeholder={intl.formatMessage({\n                                            defaultMessage: 'http://url-to-webapp',\n                                            id: 'Shared.AppsAndKeys.KeyConfiguration.url.to.webapp',\n                                        })}\n                                        fullWidth\n                                    />\n                                </Box>\n                            </TableCell>\n                        </TableRow>\n                        {applicationConfiguration.length > 0 && applicationConfiguration.map((config) => (\n                            <AppConfiguration\n                                config={config}\n                                previousValue={getPreviousValue(config)}\n                                isUserOwner={isUserOwner}\n                                handleChange={handleChange}\n                            />\n                        ))}\n                        </>)}\n                    </TableBody>\n                </Table>\n            </Box>\n        </>\n    );\n};\nKeyConfiguration.defaultProps = {\n    notFound: false,\n    validating: false,\n    mode: null,\n};\nKeyConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    keyRequest: PropTypes.shape({\n        callbackUrl: PropTypes.string,\n        selectedGrantTypes: PropTypes.array,\n    }).isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    isKeysAvailable: PropTypes.bool.isRequired,\n    keyManagerConfig: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    setGenerateEnabled: PropTypes.func.isRequired,\n    updateKeyRequest: PropTypes.func.isRequired,\n    validating: PropTypes.bool,\n    mode: PropTypes.string,\n};\n\n\nexport default withStyles(styles)(KeyConfiguration);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst useStyles = makeStyles(theme => ({\n    code: {\n        padding: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n        background: theme.palette.grey[200],\n        color: '#da2316',\n        flex: 1,\n    },\n    command: {\n        color: '#2b62b0',\n    },\n    encodeVisible: {\n        cursor: 'pointer',\n        textDecoration: 'underline',\n    },\n    contentWrapper: {\n        display: 'flex',\n    },\n}));\n\n/**\n *\n * @param {*} props\n */\nfunction ViewCurl(props) {\n    const classes = useStyles();\n\n    const {\n        keys: { consumerKey, consumerSecret },\n        intl,\n        keyManagerConfig,\n        jwtToken,\n        defaultTokenEndpoint,\n    } = props;\n    const bas64Encoded = window.btoa(consumerKey + ':' + consumerSecret);\n    const [showReal, setShowReal] = useState(false);\n    const [tokenCopied, setTokenCopied] = useState(false);\n    const onCopy = () => {\n        setTokenCopied(true);\n        const caller = function () {\n            setTokenCopied(false);\n        };\n        setTimeout(caller, 4000);\n    };\n\n    const applyReal = () => {\n        setShowReal(!showReal);\n    };\n    // Check for additional properties for token endpoint and revoke endpoints.\n    let { tokenEndpoint } = keyManagerConfig;\n    if (keyManagerConfig.alias === null ) {\n        return (\n            <React.Fragment>\n                <Typography>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewCurl.help'\n                        defaultMessage='The following cURL command shows how to generate an access token using\n                            the Password Grant type.'\n                    />\n                </Typography>\n\n                <div className={classes.contentWrapper}>\n                    <div className={classes.code}>\n                        <div>\n                            <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                            <span className={classes.command}> -d </span>{' '}\n                            {'\"grant_type=password&username=Username&password=Password\"'}\n                        </div>\n                        <div>\n                            <span className={classes.command}> -H </span>\n                            {'\"Authorization: Basic'}\n                            <a onClick={applyReal} className={classes.encodeVisible}>\n                                {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                            </a>\n                            {'\"'}\n                        </div>\n                    </div>\n                    <div>\n                        <Tooltip\n                            title={\n                                tokenCopied\n                                    ? intl.formatMessage({\n                                        defaultMessage: 'Copied',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                    })\n                                    : intl.formatMessage({\n                                        defaultMessage: 'Copy to clipboard',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                    })\n                            }\n                            placement='right'\n                        >\n                            <CopyToClipboard\n                                text={`curl -k -X POST ${tokenEndpoint} -d ` +\n                                '\"grant_type=password&username=Username&password=Password\" -H ' +\n                                `\"Authorization: Basic ${bas64Encoded}\"`}\n                                onCopy={onCopy}\n                            >\n                                <FileCopy color='secondary'/>\n                            </CopyToClipboard>\n                        </Tooltip>\n                    </div>\n                </div>\n                <Typography>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewCurl.help.in.a.similar'\n                        defaultMessage={`In a similar manner, you can generate an access token using the\n                    Client Credentials grant type with the following cURL command.`}\n                    />\n                </Typography>\n                <div className={classes.contentWrapper}>\n                    <div className={classes.code}>\n                        <div>\n                            <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                            <span className={classes.command}> -d </span>{' '}\n                            {'\"grant_type=client_credentials\"'}\n                        </div>\n                        <div>\n                            <span className={classes.command}> -H </span>\n                            {'\"Authorization: Basic'}\n                            <a onClick={applyReal} className={classes.encodeVisible}>\n                                {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                            </a>\n                            {'\"'}\n                        </div>\n                    </div>\n                    <div>\n                        <Tooltip\n                            title={\n                                tokenCopied\n                                    ? intl.formatMessage({\n                                        defaultMessage: 'Copied',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                    })\n                                    : intl.formatMessage({\n                                        defaultMessage: 'Copy to clipboard',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                    })\n                            }\n                            placement='right'\n                        >\n                            <CopyToClipboard\n                                text={`curl -k -X POST ${tokenEndpoint} -d ` +\n                                '\"grant_type=client_credentials\" -H' +\n                                `\"Authorization: Basic ${bas64Encoded}\"`}\n                                onCopy={onCopy}\n                            >\n                                <FileCopy color='secondary'/>\n                            </CopyToClipboard>\n                        </Tooltip>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    } else {\n        if (consumerKey === false) {\n            return (\n                    <Typography>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.ViewCurl.error'\n                            defaultMessage='Please generate the Consumer Key and Secret for Residence Key Manager with selecting the urn:ietf:params:oauth:grant-type:token-exchange grant type in\n                                             order to use the token Exchange Approach. '\n                        />\n                    </Typography>\n                )\n        } else {\n            return (\n                <React.Fragment>\n                    <Typography>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.ViewCurl.TokenExchange.help'\n                            defaultMessage='The following cURL command shows how to generate an access token using the\n                        token exchange grant type'\n                        />\n                    </Typography>\n\n                    <div className={classes.contentWrapper}>\n                        <div className={classes.code}>\n                            <div>\n                                <span className={classes.command}>curl -k -X POST </span> {defaultTokenEndpoint}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"grant_type=urn:ietf:params:oauth:grant-type:token-exchange\"'}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"subject_token_type=urn:ietf:params:oauth:token-type:jwt\"'}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"requested_token_type=urn:ietf:params:oauth:token-type:jwt\" '}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"subject_token=\"'}\n                                <a onClick={applyReal} className={classes.encodeVisible}>\n                                    {showReal ? ' ' + jwtToken : 'jwtToken'}\n                                </a>\n                            </div>\n                            <div>\n                                <span className={classes.command}> -H </span>\n                                {'\"Authorization: Basic'}\n                                <a onClick={applyReal} className={classes.encodeVisible}>\n                                    {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                                </a>\n                                {'\"'}\n                            </div>\n                        </div>\n                        <div>\n                            <Tooltip\n                                title={\n                                    tokenCopied\n                                        ? intl.formatMessage({\n                                            defaultMessage: 'Copied',\n                                            id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                        })\n                                        : intl.formatMessage({\n                                            defaultMessage: 'Copy to clipboard',\n                                            id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                        })\n                                }\n                                placement='right'\n                            >\n                                <CopyToClipboard\n                                    text={`curl -k -X POST ${defaultTokenEndpoint} -d ` +\n                                    '\"grant_type=urn:ietf:params:oauth:grant-type:token-exchange\" -d ' +\n                                    '\"subject_token_type=urn:ietf:params:oauth:token-type:jwt\" -d ' +\n                                    '\"requested_token_type=urn:ietf:params:oauth:token-type:jwt\" -d ' +\n                                    `\"subject_token=${jwtToken}\"  -H ` +\n                                    `\"Authorization: Basic ${bas64Encoded}\"`}\n                                    onCopy={onCopy}\n                                >\n                                    <FileCopy color='secondary'/>\n                                </CopyToClipboard>\n                            </Tooltip>\n                        </div>\n                    </div>\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nViewCurl.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    keys: PropTypes.shape({}).isRequired,\n    apis: PropTypes.shape({}).isRequired,\n    jwtToken: PropTypes.string,\n    defaultTokenEndpoint: PropTypes.string,\n};\n\nexport default injectIntl(ViewCurl);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport ResourceNotFound from '../../Base/Errors/ResourceNotFound';\nimport Loading from '../../Base/Loading/Loading';\nimport Application from '../../../data/Application';\nimport Tokens from './Tokens';\nimport ViewToken from './ViewToken';\nimport ViewSecret from './ViewSecret';\nimport ViewCurl from './ViewCurl';\n\nconst styles = (theme) => ({\n    button: {\n        margin: theme.spacing(3),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    inputWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    copyWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    tokenSection: {\n        marginTop: 0,\n        marginBottom: theme.spacing(0.5),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    dialogWrapper: {\n        '& label,& h5, & label, & td, & li, & input, & h2, & p.MuiTypography-root,& p.MuiFormHelperText-root': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    iconButton: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n});\n\n/**\n * Class used to displays in key generation UI\n */\nclass ViewKeys extends React.Component {\n    /**\n     * @param {*} props properties\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp } = this.props;\n        let appId;\n        if (selectedApp) {\n            appId = selectedApp.appId || selectedApp.value;\n        }\n        this.applicationPromise = Application.get(appId);\n        this.state = {\n            showCS: false,\n            open: false,\n            showToken: false,\n            showCurl: false,\n            showSecretGen: false,\n            accessTokenRequest: {\n                timeout: 3600,\n                scopesSelected: [],\n                keyType: '',\n            },\n            subscriptionScopes: [],\n            isUpdating: false,\n        };\n    }\n\n    /**\n     * Fetch Application object by ID coming from URL path params and fetch related keys to display\n     */\n    componentDidMount() {\n        const { accessTokenRequest } = this.state;\n        const { keyType } = this.props;\n        this.applicationPromise\n            .then((application) => {\n                application.getKeys().then(() => {\n                    const newRequest = { ...accessTokenRequest, keyType };\n                    const subscriptionScopes = application.subscriptionScopes\n                        .map((scope) => { return scope.key; });\n                    this.setState({ accessTokenRequest: newRequest, subscriptionScopes });\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     * Adding this here becasue it is not possible to add in the render method becasue isKeyJWT in state is used\n     * to close the dialog box and render method will casue this to be always true and cannot close the box.\n     * Rule is ignored becasue according to react docs its ok to setstate as long as we are checking a condition\n     * This is an ani pattern to be fixed later.\n     *  wso2/product-apim#5293\n     * https://reactjs.org/docs/react-component.html#componentdidupdate\n     * @param {*} prevProps previous props\n     * @memberof ViewKeys\n     */\n    componentDidUpdate(prevProps) {\n        const { isKeyJWT } = this.props;\n        if (isKeyJWT && !prevProps.isKeyJWT) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({ isKeyJWT: true });\n        }\n    }\n\n    /**\n     * Set accesstoken request in state\n     * @param {*} accessTokenRequest access token request object\n     * @memberof ViewKeys\n     */\n    updateAccessTokenRequest = (accessTokenRequest) => {\n        this.setState({ accessTokenRequest });\n    }\n\n    /**\n     * Handle onClick of the copy icon\n     * @param {*} name name of what is copied\n     * */\n    onCopy = (name) => {\n        this.setState({\n            [name]: true,\n        });\n        const that = this;\n        const elementName = name;\n        const caller = () => {\n            that.setState({\n                [elementName]: false,\n            });\n        };\n        setTimeout(caller, 4000);\n    };\n\n    /**\n     * Handle onClick of the show consumer secret icon\n     * @param data\n     * */\n    handleShowHidden = (data) => {\n        this.setState({ [data]: !this.state[data] });\n    };\n\n    /**\n     * Avoid conflict with `onClick`\n     * @param event\n     */\n    handleMouseDownGeneric = (event) => {\n        event.preventDefault();\n    };\n\n    /**\n     * Handle onCLick of generate access token\n     * */\n    handleClickOpen = () => {\n        this.setState({ open: true, showToken: false });\n    };\n\n    /**\n     * Handle onCLick of regenerate consumer secret\n     * */\n    handleSecretRegenerate = (consumerKey, keyType, keyMappingId, selectedTab) => {\n        this.applicationPromise\n            .then((application) => application.regenerateSecret(consumerKey, keyType, keyMappingId, selectedTab))\n            .then((response) => {\n                console.log('consumer secret regenerated successfully ' + response);\n                this.setState({\n                    open: true,\n                    showSecretGen: true,\n                    secretGenResponse: response,\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    };\n\n    /**\n     * Handle onClick of get curl\n     * */\n    handleClickOpenCurl = () => {\n        this.setState({ open: true, showCurl: true });\n    };\n\n    /**\n     * Handle on close of dialog for generating access token and get curl\n     * */\n    handleClose = () => {\n        this.setState({\n            open: false, showCurl: false, isKeyJWT: false, showSecretGen: false,\n        });\n    };\n\n    /**\n     * Generate access token\n     * */\n    generateAccessToken = () => {\n        const { accessTokenRequest, isUpdating } = this.state;\n        const { selectedTab, intl } = this.props;\n        this.setState({ isUpdating: true });\n        this.applicationPromise\n            .then((application) => application.generateToken(\n                selectedTab,\n                accessTokenRequest.keyType,\n                accessTokenRequest.timeout,\n                accessTokenRequest.scopesSelected,\n            ))\n            .then((response) => {\n                console.log('token generated successfully ' + response);\n                this.setState({\n                    showToken: true,\n                    tokenResponse: response,\n                    token: response.accessToken,\n                    tokenScopes: response.tokenScopes,\n                    tokenValidityTime: response.validityTime,\n                });\n                this.setState({ isUpdating: false });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 400) {\n                    Alert.error(error.description\n                         || intl.formatMessage({\n                             id: 'Shared.AppsAndKeys.TokenManager.key.generate.bad.request.error',\n                             defaultMessage: 'Error occurred when generating Access Token',\n                         }));\n                }\n                this.setState({ isUpdating: false });\n                const { response } = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            });\n    };\n\n    viewKeyAndSecret = (consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner) => {\n        const {\n            classes, intl, selectedApp: { hashEnabled }, keyType,\n        } = this.props;\n        const { keyCopied, secretCopied, showCS } = this.state;\n        return (\n            <>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        <TextField\n                            id='consumer-key'\n                            value={consumerKey}\n                            margin='dense'\n                            label={(\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.key'\n                                    defaultMessage='Consumer Key'\n                                />\n                            )}\n                            fullWidth\n                            variant='outlined'\n                            InputProps={{\n                                readOnly: true,\n                                endAdornment: (\n                                    <InputAdornment position='end'>\n                                        <Tooltip\n                                            title={\n                                                keyCopied\n                                                    ? intl.formatMessage({\n                                                        defaultMessage: 'Copied',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                    })\n                                                    : intl.formatMessage({\n                                                        defaultMessage: 'Copy to clipboard',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copy.to',\n                                                    })\n                                            }\n                                            placement='right'\n                                        >\n                                            <CopyToClipboard\n                                                text={consumerKey}\n                                                onCopy={() => this.onCopy('keyCopied')}\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <IconButton aria-label='Copy to clipboard'\n                                                            classes={{root: classes.iconButton}}>\n                                                    <Icon color='secondary'>\n                                                        file_copy\n                                                    </Icon>\n                                                </IconButton>\n                                            </CopyToClipboard>\n                                        </Tooltip>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                    </div>\n                    <FormControl>\n                        <FormHelperText id='consumer-key-helper-text'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ViewKeys.consumer.key.title'\n                                defaultMessage='Consumer Key of the application'\n                            />\n                        </FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        {!hashEnabled ? (\n                            <TextField\n                                id='consumer-secret'\n                                label={(\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.secret'\n                                        defaultMessage='Consumer Secret'\n                                    />\n                                )}\n                                type={showCS || !consumerSecret ? 'text' : 'password'}\n                                value={consumerSecret}\n                                margin='dense'\n                                fullWidth\n                                variant='outlined'\n                                InputProps={{\n                                    readOnly: true,\n                                    endAdornment: (\n                                        <InputAdornment position='end'>\n                                            <IconButton\n                                                classes={{ root: classes.iconButton }}\n                                                onClick={() => this.handleShowHidden('showCS')}\n                                                onMouseDown={this.handleMouseDownGeneric}\n                                            >\n                                                {showCS ? <Icon>visibility_off</Icon> : <Icon>visibility</Icon>}\n                                            </IconButton>\n                                            <Tooltip\n                                                title={\n                                                    secretCopied\n                                                        ? intl.formatMessage({\n                                                            defaultMessage: 'Copied',\n                                                            id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                        })\n                                                        : intl.formatMessage({\n                                                            defaultMessage: 'Copy to clipboard',\n                                                            id: 'Shared.AppsAndKeys.ViewKeys.copy.to.clipboard',\n                                                        })\n                                                }\n                                                placement='right'\n                                            >\n                                                <CopyToClipboard\n                                                    text={consumerSecret}\n                                                    onCopy={() => this.onCopy('secretCopied')}\n                                                    classes={{ root: classes.iconButton }}\n                                                >\n                                                    <IconButton aria-label='Copy to clipboard' classes={{ root: classes.iconButton }}>\n                                                        <Icon color='secondary'>file_copy</Icon>\n                                                    </IconButton>\n                                                </CopyToClipboard>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        ) : (\n                            <Button\n                                variant='contained'\n                                color='primary'\n                                className={classes.button}\n                                onClick={() => this.handleSecretRegenerate(consumerKey, keyType, keyMappingId, selectedTab)}\n                                disabled={!isUserOwner}\n                            >\n                                <FormattedMessage\n                                    defaultMessage='Regenerate Consumer Secret'\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.button.regenerate'\n                                />\n                            </Button>\n                        )}\n                    </div>\n                    {!hashEnabled && (\n                        <FormControl>\n                            <FormHelperText id='consumer-secret-helper-text'>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.of.application'\n                                    defaultMessage='Consumer Secret of the application'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    )}\n                </Grid>\n            </>\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            notFound, showToken, showCurl, showSecretGen, tokenCopied, open,\n            token, tokenScopes, tokenValidityTime, accessTokenRequest, subscriptionScopes,\n            isKeyJWT, tokenResponse, secretGenResponse, isUpdating,\n        } = this.state;\n        const {\n            intl, keyType, classes, fullScreen, keys, selectedApp: { tokenType }, selectedGrantTypes, isUserOwner, summary,\n            selectedTab, hashEnabled, keyManagerConfig, initialToken, initialValidityTime, initialScopes, mode,\n        } = this.props;\n\n        if (notFound) {\n            return <ResourceNotFound />;\n        }\n        if (!keys) {\n            return <Loading />;\n        }\n\n        const csCkKeys = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        const consumerKey = csCkKeys && csCkKeys.consumerKey;\n        const consumerSecret = csCkKeys && csCkKeys.consumerSecret;\n        const keyMappingId = csCkKeys && csCkKeys.keyMappingId;\n\n        let accessToken;\n        let accessTokenScopes;\n        let validityPeriod;\n        let tokenDetails;\n\n        if (token) {\n            accessToken = token;\n            accessTokenScopes = tokenScopes;\n            validityPeriod = tokenValidityTime;\n        } else if (keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType && keys.get(selectedTab).token) {\n            ({ accessToken } = keys.get(selectedTab).token);\n            accessTokenScopes = keys.get(selectedTab).token.tokenScopes;\n            validityPeriod = keys.get(selectedTab).token.validityTime;\n            tokenDetails = keys.get(selectedTab).token;\n            if (tokenDetails && !tokenDetails.accessToken) {\n                tokenDetails.accessToken = initialToken;\n                tokenDetails.validityTime = initialValidityTime;\n                tokenDetails.tokenScopes = initialScopes;\n            }\n        }\n\n        let dialogHead;\n        if (showCurl) {\n            dialogHead = 'Get CURL to Generate Access Token';\n        } else if (showSecretGen) {\n            dialogHead = 'Generate Consumer Secret';\n        } else {\n            dialogHead = 'Generate Access Token';\n        }\n        if (!consumerKey) {\n            return (\n                <Typography variant='caption' gutterBottom>\n                    {keyType === 'PRODUCTION' ? 'Production ' : 'Sandbox '}\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewKeys.key.secret.title'\n                        defaultMessage='Key and Secret is not generated for this application'\n                    />\n                </Typography>\n            );\n        }\n        if (summary) {\n            return (\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                </Grid>\n            );\n        }\n\n        // Get the grant types for the generated keys\n        const { supportedGrantTypes: supportedGrantTypesUnchanged } = keys.get(selectedTab);\n        return consumerKey && (\n            <div className={classes.inputWrapper}>\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                    <Grid item xs={12}>\n                        <Dialog\n                            fullScreen={fullScreen}\n                            open={(open || (isKeyJWT && tokenDetails))}\n                            onClose={this.handleClose}\n                            aria-labelledby='responsive-dialog-title'\n                            className={classes.dialogWrapper}\n                        >\n                            <DialogTitle id='responsive-dialog-title'>\n                                {dialogHead}\n                            </DialogTitle>\n                            <DialogContent>\n                                {!showCurl && !isKeyJWT && !showSecretGen && (\n                                    <DialogContentText>\n                                        {!showToken && (\n                                            <Tokens\n                                                updateAccessTokenRequest={this.updateAccessTokenRequest}\n                                                accessTokenRequest={accessTokenRequest}\n                                                subscriptionScopes={subscriptionScopes}\n                                            />\n                                        )}\n                                        {showToken && <ViewToken token={{ ...tokenResponse, isOauth: true }} />}\n                                    </DialogContentText>\n                                )}\n                                {showCurl && (\n                                    <DialogContentText>\n                                        <ViewCurl\n                                            keys={{ consumerKey, consumerSecret }}\n                                            keyType={keyType}\n                                            keyManagerConfig={keyManagerConfig}\n                                        />\n                                    </DialogContentText>\n                                )}\n                                {showSecretGen && (\n                                    <DialogContentText>\n                                        <ViewSecret secret={{ ...secretGenResponse }} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} consumerSecret={consumerSecret} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && !hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} />\n                                    </DialogContentText>\n                                )}\n                            </DialogContent>\n                            <DialogActions>\n                                {isUpdating && <CircularProgress size={24} />}\n                                {!showToken && !showCurl && !isKeyJWT && !showSecretGen && (\n                                    <Button onClick={this.generateAccessToken} color='primary' disabled={isUpdating}>\n                                        <FormattedMessage\n                                            id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n                                            defaultMessage='Generate'\n                                        />\n                                    </Button>\n                                )}\n                                <Button onClick={this.handleClose} color='primary' autoFocus>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                        defaultMessage='Close'\n                                    />\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                        {!hashEnabled && (\n                            <div className={classes.tokenSection}>\n                                {(keyManagerConfig.enableTokenGeneration && supportedGrantTypesUnchanged\n                                    && supportedGrantTypesUnchanged.find((a) => a.includes('client_credentials')))\n                                    && mode !== 'MAPPED'\n                                    && (\n                                        <Button\n                                            variant='outlined'\n                                            size='small'\n                                            color='primary'\n                                            className={classes.margin}\n                                            onClick={this.handleClickOpen}\n                                            disabled={!supportedGrantTypesUnchanged.includes('client_credentials')}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.generate.access.token'\n                                                defaultMessage='Generate Access Token'\n                                            />\n                                        </Button>\n                                    )}\n                                <Button\n                                    id='curl-to-generate-access-token-btn'\n                                    variant='outlined'\n                                    size='small'\n                                    color='primary'\n                                    className={classes.margin}\n                                    onClick={this.handleClickOpenCurl}\n                                >\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.curl.to.generate'\n                                        defaultMessage='CURL to Generate Access Token'\n                                    />\n                                </Button>\n                            </div>\n                        )}\n                        {supportedGrantTypesUnchanged && !supportedGrantTypesUnchanged.includes('client_credentials') && !hashEnabled && (\n                            <Typography variant='caption' gutterBottom>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.client.enable.client.credentials'\n                                    defaultMessage={'Enable Client Credentials grant '\n                                        + 'type to generate test access tokens'}\n                                />\n                            </Typography>\n                        )}\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\nViewKeys.defaultProps = {\n    fullScreen: false,\n    summary: false,\n    mode: null,\n};\nViewKeys.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    fullScreen: PropTypes.bool,\n    isKeyJWT: PropTypes.bool.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    summary: PropTypes.bool,\n    mode: PropTypes.string,\n};\n\nexport default injectIntl(withStyles(styles)(ViewKeys));\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { injectIntl } from 'react-intl';\n\nconst styles = theme => ({\n    root: {\n        padding: theme.spacing(3),\n    },\n});\n\nconst waitingForApproval = (props) => {\n    const {\n        classes, keyState, states, intl,\n    } = props;\n    let message = intl.formatMessage({\n        defaultMessage: 'A request to register this application has been sent and is pending approval.',\n        id: 'Shared.AppsAndKeys.WaitingForApproval.msg.ok',\n    });\n    if (keyState === states.REJECTED) {\n        message = intl.formatMessage({\n            defaultMessage: 'This application has been rejected from generating keys',\n            id: 'Shared.AppsAndKeys.WaitingForApproval.msg.reject',\n        });\n    }\n    return <div className={classes.root}>{message}</div>;\n};\n\nexport default injectIntl(withStyles(styles)(waitingForApproval));\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { app } from 'Settings';\nimport WaitingForApproval from './WaitingForApproval';\nimport ViewKeys from './ViewKeys';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n}));\n\n/**\n * Render a compressed view of the key gneration view.\n * @param {JSON} props Input params.\n * @returns {JSX} Rendered output.\n */\nexport default function TokenManagerSummary(props) {\n    const classes = useStyles();\n    const { keys, keyStates, key, selectedApp, keyType, isKeyJWT, isUserOwner, selectedTab } = props;\n    if (keys.size > 0 && key && key.keyState === 'APPROVED' && !key.consumerKey) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant=\"h5\" component=\"h3\">\n                    Error\n                </Typography>\n                <Typography variant='body2'>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.TokenManagerSummary'\n                        defaultMessage='Error! You have partially-created keys. Use `Clean Up` option.'\n                    />\n                </Typography>\n            </div>\n        );\n    }\n    if (key && (key.keyState === keyStates.CREATED || key.keyState === keyStates.REJECTED)) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant='body2'>\n                    <WaitingForApproval keyState={key.keyState} states={keyStates} />\n                </Typography>\n            </div>\n        );\n    }\n    const keyGrantTypes = key ? key.supportedGrantTypes : [];\n\n    return (\n        <ViewKeys\n            selectedApp={selectedApp}\n            selectedTab={selectedTab}\n            keyType={keyType}\n            keys={keys}\n            isKeyJWT={isKeyJWT}\n            selectedGrantTypes={keyGrantTypes}\n            isUserOwner={isUserOwner}\n            summary\n        />\n    );\n}\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {useReducer, useState} from 'react';\nimport Box from '@material-ui/core/Box';\nimport {withStyles} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport PropTypes from 'prop-types';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Link from \"@material-ui/core/Link\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport ViewCurl from \"AppComponents/Shared/AppsAndKeys/ViewCurl\";\nimport ViewToken from \"AppComponents/Shared/AppsAndKeys/ViewToken\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport Application from \"AppData/Application\";\nimport Loading from \"AppComponents/Base/Loading/Loading\";\nimport Alert from \"AppComponents/Shared/Alert\";\nimport Tokens from \"AppComponents/Shared/AppsAndKeys/Tokens\";\nimport {TableBody, TableCell, TableRow} from \"@material-ui/core\";\nimport Table from \"@material-ui/core/Table\";\n\nconst styles = (theme) => ({\n        FormControl: {\n            paddingTop: 0,\n            paddingBottom: theme.spacing(2),\n            paddingLeft: 0,\n            width: '100%',\n        },\n        FormControlOdd: {\n            padding: theme.spacing(2),\n            width: '100%',\n        },\n        button: {\n            marginLeft: theme.spacing(1),\n        },\n        quotaHelp: {\n            position: 'relative',\n        },\n        checkboxWrapper: {\n            display: 'flex',\n        },\n        generateWrapper: {\n            padding: '10px 0px',\n            marginLeft: theme.spacing(1.25),\n        },\n        checkboxWrapperColumn: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            flexDirection: 'row',\n            whiteSpace: 'nowrap',\n        },\n        group: {\n            flexDirection: 'row',\n        },\n        removeHelperPadding: {\n            '& p': {\n                margin: '8px 0px',\n            },\n        },\n        iconStyle: {\n            cursor: 'pointer',\n            padding: '0 0 0 10px',\n        },\n        iconButton: {\n            padding: '0 0 0 10px',\n            '& .material-icons': {\n                fontSize: 16,\n            },\n        },\n        titleColumn: {\n            width: 150,\n            fontWeight: 500,\n        },\n        keyInfoTable: {\n            marginBottom: 20,\n            borderCollapse: 'collapse',\n            '& td': {\n                paddingBottom: 5,\n                borderBottom: 'solid 1px #cccc',\n            },\n        },\n        leftCol: {\n            width: 180,\n        },\n        stepLabel: {\n            color: \"#5567d5\",\n            alignSelf: 'center',\n        },\n        stepContent: {\n            color: '#1D2028',\n            fontSize: '0.75rem',\n        },\n        keyLabel: {\n            color: '#222228',\n            fontSize: '0.75rem',\n            marginLeft: theme.spacing(1)\n        },\n        idpGrid: {\n            textAlign: 'left',\n            margin: theme.spacing(0),\n            alignSelf: 'center',\n        },\n        helperTextError: {\n            display: \"flex\",\n            alignItems: \"center\",\n            fontSize: 10.5\n        },\n        input: {\n            marginLeft: theme.spacing(1),\n            flex: 1,\n        },\n        avatar: {\n            width: 30,\n            height: 30,\n            background: 'transparent',\n            border: `solid 1px ${theme.palette.grey[300]}`\n        },\n        copyIconStyle: {\n            cursor: 'pointer',\n            margin: '-10px 0',\n            padding: '0 0 0 5px',\n            '& .material-icons': {\n                fontSize: 18,\n                color: '#9c9c9c',\n            },\n        },\n        hr: {\n            border: 'solid 1px #efefef',\n        },\n        divCenter: {\n            alignSelf: 'center',\n            width: 180\n        },\n        tableHeader: {\n            borderBottom: 'none',\n\n        },\n        helperText: {\n            marginLeft: 0,\n            color: '#8D91A3',\n            lineHeight: 1.6,\n            maxWidth: 410\n        },\n        dialogWrapper: {\n            '& label,& h5, & label, & td, & li, & input, & h2, & p.MuiTypography-root,& p.MuiFormHelperText-root': {\n                color: theme.palette.getContrastText(theme.palette.background.paper),\n            },\n        },\n        margin: {\n            marginRight: theme.spacing(2),\n        },\n        tokenSection: {\n            marginTop: 0,\n            marginBottom: theme.spacing(0.5),\n        },\n        inputWrapper: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            '& span, & h5, & label, & td, & li, & div, & input': {\n                color: theme.palette.getContrastText(theme.palette.background.paper),\n            },\n        },\n        bottomInfo: {\n            fontSize: 12,\n            marginBottom: '10px',\n        }\n    }\n);\n\nfunction reducer(state, newValue) {\n    const {field, value} = newValue;\n    switch (field) {\n        case 'tokenResponse':\n        case 'token':\n        case 'tokenScopes':\n        case 'tokenValidityTime':\n        case 'accessTokenRequest':\n        case 'subscriptionScopes':\n        case 'externalIDPToken':\n        case 'externalIDPTokenError':\n        case 'isKeyJWT':\n        case 'initialExecution':\n            return {...state, [field]: value};\n        case 'all':\n            return value;\n        default:\n            return newValue;\n    }\n}\n\n\n/**\n *\n *\n * @class TokenExchangeKeyConfiguration\n * @extends {React.Component}\n */\nconst TokenExchangeKeyConfiguration = (props) => {\n    const [urlCopied, setUrlCopied] = useState(false);\n    const [showCS, setShowCS] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [showToken, setShowToken] = useState(false);\n    const [showCurl, setShowCurl] = useState(false);\n    const [showSecretGen, setShowSecretGen] = useState(false);\n    const [notFound, setNotFound] = useState(false);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [isResidenceTokenAvailable, setIsResidenceTokenAvailable] = useState(true);\n\n\n    const [initialState] = useState({\n        tokenResponse: '',\n        token: '',\n        tokenScope: '',\n        tokenValidityTime: '',\n        accessTokenRequest: {\n            timeout: 3600,\n            scopesSelected: [],\n            keyType: '',\n        },\n        subscriptionScopes: [],\n        externalIDPToken: '',\n        externalIDPTokenError: '',\n        isKeyJWT: false,\n        initialExecution: true,\n    });\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const {\n        tokenResponse, accessTokenRequest, externalIDPToken, externalIDPTokenError, subscriptionScopes,\n        tokenValidityTime, token, isKeyJWT, initialExecution\n    } = state\n\n    const intl = useIntl();\n\n    const {\n        classes,  keyManagerConfig,\n        defaultTokenEndpoint, selectedApp, selectedTab, selectedApp: {hashEnabled}, keys, fullScreen, keyType\n    } = props;\n\n    let appId;\n    if (selectedApp) {\n        appId = selectedApp.appId || selectedApp.value;\n    }\n\n    const applicationPromise = Application.get(appId);\n\n    if (initialExecution) {\n        applicationPromise\n            .then((application) => {\n                application.getKeys().then(() => {\n                    const newRequest = {...accessTokenRequest, keyType};\n                    const subscriptionScopes = application.subscriptionScopes\n                        .map((scope) => {\n                            return scope.key;\n                        });\n                    dispatch({field: 'accessTokenRequest', value: newRequest});\n                    dispatch({field: 'subscriptionScopes', value: subscriptionScopes});\n                    dispatch({field: 'initialExecution', value: false});\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const {status} = error;\n                if (status === 404) {\n                    setNotFound(true)\n                }\n                dispatch({field: 'initialExecution', value: false});\n            });\n    }\n\n    const generateAccessToken = () => {\n        setIsUpdating(true);\n        applicationPromise.then((application) => application.generateToken(\n            selectedTab,\n            accessTokenRequest.keyType,\n            accessTokenRequest.timeout,\n            accessTokenRequest.scopesSelected,\n            true,\n            externalIDPToken,\n        ))\n            .then((response) => {\n                console.log('token generated successfully ' + response);\n                setShowToken(true);\n                dispatch({field: 'tokenResponse', value: response});\n                dispatch({field: 'token', value: response.accessToken});\n                dispatch({field: 'tokenScopes', value: response.tokenScopes})\n                dispatch({field: 'tokenValidityTime', value: response.validityTime})\n                setIsUpdating(false);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const {status} = error;\n                if (status === 404) {\n                    setNotFound(true)\n                } else if (status === 400) {\n                    Alert.error(error.description\n                        || intl.formatMessage({\n                            id: 'Shared.AppsAndKeys.TokenManager.key.generate.bad.request.error',\n                            defaultMessage: 'Error occurred when generating Access Token',\n                        }));\n                }\n                setIsUpdating(false);\n                const {response} = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            });\n    };\n\n    const onCopy = () => {\n        setUrlCopied(true);\n        const caller = function () {\n            setUrlCopied(false);\n        };\n        setTimeout(caller, 2000);\n    };\n\n    let dialogHead;\n    if (showCurl) {\n        dialogHead = 'Get CURL to Generate Access Token';\n    } else if (showSecretGen) {\n        dialogHead = 'Generate Consumer Secret';\n    } else {\n        dialogHead = 'Generate Access Token';\n    }\n\n    const validateExternalIDPToken = (token) => {\n        if (token === \"\") {\n            return (\n                <FormattedMessage\n                    id='application.productionKeys.oAuth.externalIdp.tokenGeneration.token.empty.helperText'\n                    defaultMessage={`{selectedIdPType} token cannot be empty`}\n                    values={{selectedIdPType: keyManagerConfig.type}}\n\n                />\n            );\n        }\n        {\n            return \"\";\n        }\n    };\n\n    const onExternalIDPTokenChange = (event) => {\n        const externalIDPToken = event.target.value;\n        dispatch({field: 'externalIDPTokenError', value: validateExternalIDPToken(externalIDPToken)})\n        dispatch({field: 'externalIDPToken', value: externalIDPToken})\n    };\n\n\n    if (notFound) {\n        return <ResourceNotFound/>;\n    }\n    if (!keys) {\n        return <Loading/>;\n    }\n\n\n    /**\n     * Set accesstoken request in state\n     * @param {*} accessTokenRequest access token request object\n     * @memberof ViewKeys\n     */\n    const updateAccessTokenRequest = (accessTokenRequest) => {\n        dispatch({field: 'accessTokenRequest', value: accessTokenRequest})\n    }\n\n    /**\n     * Handle on close of dialog for generating access token and get curl\n     * */\n    const handleClose = () => {\n        setOpen(false);\n        setShowCurl(false);\n        setShowSecretGen(false);\n        dispatch({field: \"isKeyJWT\", value: false})\n\n    };\n\n    /**\n     * Handle on open of dialog for generating access token\n     * */\n    const handleClickOpen = () => {\n            setOpen(true);\n    };\n    /**\n     * Handle on open of dialog for generating access token and get curl\n     * */\n    const handleClickOpenCurl = () => {\n        setOpen(true);\n        setShowCurl(true)\n    };\n\n\n    const csCkKeys = keys.size > 0 && keys.get(\"Resident Key Manager\") && (keys.get(\"Resident Key Manager\").keyType === keyType)\n        && keys.get(\"Resident Key Manager\") || false;\n    const consumerKey = csCkKeys && csCkKeys.consumerKey;\n    const consumerSecret = csCkKeys && csCkKeys.consumerSecret;\n    return (\n        <>\n                    <Box display='flex' alignItems='center'>\n                        <Table className={classes.table}>\n                            <TableBody>\n                                <TableRow>\n                                    <TableCell component='th' scope='row'\n                                               className={[classes.leftCol, classes.tableHeader]}>\n                                        <FormattedMessage\n                                            id=\"application.productionKeys.oAuth.externalIdp.tokenGeneration.step1\"\n                                            defaultMessage=\"Step 1:\"\n                                        />\n                                    </TableCell>\n                                    <TableCell className={classes.tableHeader}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.externalIdp.tokenGeneration.step1.description'\n                                            defaultMessage={`Obtain an access token from {selectedIdpType}. `}\n                                            values={{selectedIdpType: keyManagerConfig.type}}\n\n                                        />\n\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.externalIdp.tokenGeneration.audience'\n                                            defaultMessage='Use the audience value \"{allowedAudience}\", '\n                                            values={{allowedAudience: <b>{keyManagerConfig.alias}</b>}}\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell className={classes.leftCol}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.tokenEndpoint'\n                                            defaultMessage='Token Endpoint'\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.tokenEndpoint.value'\n                                            defaultMessage={'{tokenEndpoint}'}\n                                            values={{tokenEndpoint: keyManagerConfig.tokenEndpoint}}\n                                        />\n\n                                        <Tooltip\n                                            title={\n                                                urlCopied\n                                                    ? intl.formatMessage({\n                                                        defaultMessage: 'Copied',\n                                                        id: 'Shared.AppsAndKeys.TokenExchangeKeyConfiguration.copied',\n                                                    })\n                                                    : intl.formatMessage({\n                                                        defaultMessage: 'Copy to clipboard',\n                                                        id: 'Shared.AppsAndKeys.TokenExchangeKeyConfiguration.copy.to.clipboard',\n                                                    })\n                                            }\n                                            placement='right'\n                                            className={classes.iconStyle}\n                                        >\n                                            <CopyToClipboard\n                                                text={keyManagerConfig.tokenEndpoint}\n                                                onCopy={onCopy}\n                                            >\n                                                <IconButton\n                                                    aria-label='Copy to clipboard'\n                                                    classes={{root: classes.iconButton}}\n                                                >\n                                                    <Icon color='secondary'>file_copy</Icon>\n                                                </IconButton>\n                                            </CopyToClipboard>\n                                        </Tooltip>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell component='th' scope='row'\n                                               className={[classes.leftCol, classes.tableHeader]}>\n                                        <FormattedMessage\n                                            id=\"application.productionKeys.oAuth.tokenGeneration.step2\"\n                                            defaultMessage=\"Step 2:\"\n                                        />\n                                    </TableCell>\n                                    <TableCell className={classes.tableHeader}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.tokenGeneration.step2.description'\n                                            defaultMessage='Obtain test token'\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell component='th' scope='row' className={classes.leftCol}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.externalIdp.tokenGeneration.token'\n                                            defaultMessage={`{selectedIdpType} Token`}\n                                            values={{selectedIdpType: keyManagerConfig.type}}\n\n                                        />\n                                        <span className={classes.error}> *</span>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Box maxWidth={600}>\n                                            <TextField\n                                                id='external-idp-token'\n                                                onChange={onExternalIDPTokenChange}\n                                                size=\"small\"\n                                                fullWidth\n                                                rows={1}\n                                                value={externalIDPToken}\n                                                variant=\"outlined\"\n                                                error={externalIDPTokenError !== \"\"}\n                                                FormHelperTextProps={{\n                                                    className: classes.helperText\n                                                }}\n                                                helperText={externalIDPTokenError === \"\" ?\n                                                    externalIDPTokenError :\n                                                    <div className={classes.helperTextError}>\n                                                        <p> {externalIDPTokenError} </p>\n                                                    </div>\n                                                }\n                                                className={classes.textField}\n                                                data-testid='external-idp-token'\n                                            />\n                                        </Box>\n                                    </TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                    </Box>\n                    <Box>\n                        <div className={classes.inputWrapper}>\n                            <Grid container spacing={3}>\n                                <Grid item xs={12}>\n                                    <Dialog\n                                        fullScreen={fullScreen}\n                                        open={open}\n                                        onClose={handleClose}\n                                        aria-labelledby='responsive-dialog-title'\n                                        className={classes.dialogWrapper}\n                                    >\n                                        <DialogTitle id='responsive-dialog-title'>\n                                            {dialogHead}\n                                        </DialogTitle>\n                                        <DialogContent>\n                                            {(!showCurl && !isKeyJWT && !showSecretGen) && (\n                                                <DialogContentText>\n                                                    {(!showToken && isResidenceTokenAvailable) && (\n                                                        <Tokens\n                                                            updateAccessTokenRequest={updateAccessTokenRequest}\n                                                            accessTokenRequest={accessTokenRequest}\n                                                            subscriptionScopes={subscriptionScopes}\n                                                        />\n                                                    )}\n                                                    {(!showToken && !isResidenceTokenAvailable) && (\n                                                        <React.Fragment>\n                                                            <Typography>\n                                                                <FormattedMessage\n                                                                    id='Shared.AppsAndKeys.ViewCurl.error'\n                                                                    defaultMessage='Please generate the Consumer Key and Secret for Residence Key Manager with selecting the urn:ietf:params:oauth:grant-type:token-exchange grant type in\n                                                                            order to use the token Exchange Approach. '\n                                                                />\n                                                            </Typography>\n                                                        </React.Fragment>\n                                                    )}\n                                                    {showToken &&\n                                                    <ViewToken token={{...tokenResponse, isOauth: true}} isResidenceTokenAvailable={isResidenceTokenAvailable} isTokenExchange />}\n                                                </DialogContentText>\n                                            )}\n                                            {showCurl && (\n                                                <DialogContentText>\n                                                    <ViewCurl\n                                                        keys={{consumerKey, consumerSecret}}\n                                                        keyType={keyType}\n                                                        jwtToken={externalIDPToken}\n                                                        keyManagerConfig={keyManagerConfig}\n                                                        defaultTokenEndpoint={defaultTokenEndpoint}\n                                                    />\n                                                </DialogContentText>\n                                            )}\n                                        </DialogContent>\n                                        <DialogActions>\n                                            {isUpdating && <CircularProgress size={24}/>}\n                                            {(!showToken && !showCurl && !showSecretGen && isResidenceTokenAvailable) && (\n                                                <Button onClick={generateAccessToken} color='primary'\n                                                        disabled={isUpdating}>\n                                                    <FormattedMessage\n                                                        id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n                                                        defaultMessage='Generate'\n                                                    />\n                                                </Button>\n                                            )}\n                                            <Button onClick={handleClose} color='primary' autoFocus>\n                                                <FormattedMessage\n                                                    id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                                    defaultMessage='Close'\n                                                />\n                                            </Button>\n                                        </DialogActions>\n                                    </Dialog>\n                                    <div className={classes.generateWrapper}>\n                                        <Grid className={classes.bottomInfo}>\n                                            <FormattedMessage\n                                                id='application.productionKeys.oAuth.externalIdp.tokenGeneration.token.description'\n                                                defaultMessage={`In Exchange token flow, A JWT token has to be generated from the {selectedIdpType}\n                                             idp and then exchange for a token with the Resident Key Manager which can used to invoke APIs`}\n                                                values={{selectedIdpType: keyManagerConfig.type}}\n                                            />\n                                        </Grid>\n                                        <Button\n                                            variant='outlined'\n                                            size='small'\n                                            color='primary'\n                                            className={classes.margin}\n                                            onClick={handleClickOpen}\n                                            disabled={externalIDPTokenError || externalIDPToken === ''}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.generate.access.token'\n                                                defaultMessage='Generate Access Token'\n                                            />\n                                        </Button>\n                                        <Button\n                                            id='curl-to-generate-access-token-btn'\n                                            variant='outlined'\n                                            size='small'\n                                            color='primary'\n                                            className={classes.margin}\n                                            onClick={handleClickOpenCurl}\n                                            disabled={externalIDPTokenError || externalIDPToken === ''}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.curl.to.generate'\n                                                defaultMessage='CURL to Generate Access Token'\n                                            />\n                                        </Button>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Box>\n            </>\n    );\n}\nTokenExchangeKeyConfiguration.defaultProps = {\n    notFound: false,\n    validating: false,\n    fullScreen: false,\n    summary: false,\n};\nTokenExchangeKeyConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    keyRequest: PropTypes.shape({\n        callbackUrl: PropTypes.string,\n        selectedGrantTypes: PropTypes.array,\n    }).isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    isKeysAvailable: PropTypes.bool.isRequired,\n    keyManagerConfig: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    setGenerateEnabled: PropTypes.func,\n    updateKeyRequest: PropTypes.func.isRequired,\n    validating: PropTypes.bool,\n    defaultTokenEndpoint: PropTypes.string,\n    selectedApp: PropTypes.shape({\n        tokenType: PropTypes.string.isRequired,\n        appId: PropTypes.string,\n        value: PropTypes.string,\n        owner: PropTypes.string,\n        hashEnabled: PropTypes.bool,\n    }),\n};\n\n\nexport default withStyles(styles)(TokenExchangeKeyConfiguration);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ImportExternalApp from 'AppComponents/Shared/AppsAndKeys/ImportExternalApp';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport API from 'AppData/api';\nimport KeyConfiguration from './KeyConfiguration';\nimport ViewKeys from './ViewKeys';\nimport WaitingForApproval from './WaitingForApproval';\nimport { ScopeValidation, resourceMethods, resourcePaths } from '../ScopeValidation';\nimport TokenMangerSummary from './TokenManagerSummary';\nimport Progress from '../Progress';\nimport TokenExchangeKeyConfiguration from \"AppComponents/Shared/AppsAndKeys/TokenExchangeKeyConfiguration\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport {\n    Dialog,\n    DialogActions, DialogContent,\n    DialogContentText,\n    FormControlLabel,\n    Radio,\n    RadioGroup,\n    TableCell\n} from \"@material-ui/core\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst styles = (theme) => ({\n    root: {\n        padding: theme.spacing(3),\n        '& span, & h6, & label, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n        '& .Mui-disabled span': {\n            color: theme.palette.grey[500],\n        },\n        '& input:disabled': {\n            backgroundColor: theme.palette.grey[100],\n            color: theme.palette.grey[500],\n        },\n        position: 'relative',\n    },\n    button: {\n        marginLeft: 0,\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n        marginRight: theme.spacing(2),\n    },\n    cleanUpButton: {\n        marginLeft: 15,\n    },\n    cleanUpInfoText: {\n        padding: '10px 0px 10px 15px',\n    },\n    tokenSection: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    keyConfigWrapper: {\n        flexDirection: 'column',\n        marginBottom: 0,\n    },\n    generateWrapper: {\n        padding: '10px 0px',\n        marginLeft: theme.spacing(1.25),\n    },\n    paper: {\n        background: 'none',\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    muiFormGroupRoot: {\n        flexDirection: 'row',\n    },\n    formControl: {\n    },\n    subTitle: {\n        fontWeight: 400,\n    },\n    tabPanel: {\n        paddingLeft: theme.spacing(2),\n        '& .MuiBox-root': {\n            padding: 0,\n        },\n    },\n    warningIcon: {\n        color: '#ff9a00',\n        fontSize: 20,\n        marginRight: 10,\n    },\n    leftCol: {\n        width: 180,\n    },\n});\n\nfunction TabPanel(props) {\n    const {\n        children, value, index, ...other\n    } = props;\n\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`nav-tabpanel-${index}`}\n            aria-labelledby={`nav-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nconst StyledTabs = withStyles({\n    indicator: {\n        display: 'flex',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n        '& > span': {\n            width: '98%',\n            backgroundColor: '#ffffff',\n        },\n        transition: 'none',\n    },\n    flexContainer: {\n        borderBottom: 'solid 1px #666',\n        backgroundColor: '#efefef',\n        '& button:first-child': {\n            borderLeft: 'none',\n        },\n    },\n})((props) => <Tabs {...props} TabIndicatorProps={{children: <span/>}}/>);\n\n\nconst StyledTab = withStyles((theme) => ({\n    root: {\n        textTransform: 'none',\n        color: '#666',\n        fontWeight: theme.typography.fontWeightRegular,\n        fontSize: theme.typography.pxToRem(15),\n        marginRight: theme.spacing(1),\n        '&:focus': {\n            opacity: 1,\n        },\n    },\n    selected: {\n        backgroundColor: '#fff',\n        borderLeft: 'solid 1px #666',\n        borderRight: 'solid 1px #666',\n    },\n}))((props) => <Tab disableRipple {...props} />);\n\n/**\n *  @param {event} event event\n *  @param {String} value description\n */\nclass TokenManager extends React.Component {\n    static contextType = Settings;\n\n    /**\n     *\n     * @param {*} props props\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp, keyType } = this.props;\n        this.state = {\n            isLoading: false,\n            keys: null,\n            isKeyJWT: false,\n            hasError: false,\n            initialToken: '',\n            initialValidityTime: 0,\n            initialScopes: [],\n            keyRequest: {\n                keyType,\n                selectedGrantTypes: null,\n                callbackUrl: '',\n                additionalProperties: {},\n                keyManager: '',\n                validityTime: 3600,\n                scopes: ['default'],\n            },\n            keyManagers: null,\n            selectedTab: null,\n            providedConsumerKey: '',\n            providedConsumerSecret: '',\n            validating: false,\n            importDisabled: false,\n            mode: null,\n            tokenType: 'DIRECT',\n            isExchangeTokenError:false,\n        };\n        this.keyStates = {\n            COMPLETED: 'COMPLETED',\n            APPROVED: 'APPROVED',\n            CREATED: 'CREATED',\n            REJECTED: 'REJECTED',\n        };\n        if (selectedApp) {\n            this.appId = selectedApp.appId || selectedApp.value;\n            this.application = Application.get(this.appId);\n        }\n        this.updateKeyRequest = this.updateKeyRequest.bind(this);\n        this.generateKeys = this.generateKeys.bind(this);\n        this.updateKeys = this.updateKeys.bind(this);\n        this.cleanUpKeys = this.cleanUpKeys.bind(this);\n        this.handleOnChangeProvidedOAuth = this.handleOnChangeProvidedOAuth.bind(this);\n        this.provideOAuthKeySecret = this.provideOAuthKeySecret.bind(this);\n    }\n\n    /**\n     *\n     *\n     * @memberof TokenManager\n     */\n    componentDidMount() {\n        this.loadApplication();\n    }\n\n    componentDidUpdate(nextProps) {\n        const { keyType: nextKeyType } = nextProps;\n        const { keyType: prevKeyType } = this.props;\n        if (nextKeyType !== prevKeyType) {\n            this.loadApplication();\n        }\n    }\n\n    getDefaultAdditionalProperties(selectedKM) {\n        const { availableGrantTypes, applicationConfiguration } = selectedKM;\n        // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n        const additionalProperties = {};\n\n        applicationConfiguration.forEach((confItem) => {\n            additionalProperties[confItem.name] = confItem.default || '';\n        });\n        return additionalProperties;\n    }\n\n    isTokenExchangeEnabled() {\n        const { keyManagers } = this.state;\n        let isEnabled = false;\n        if (keyManagers && keyManagers.length > 1) {\n            keyManagers.map((keymanager) => {\n                if (keymanager.tokenType === 'EXCHANGED' || keymanager.tokenType === 'BOTH') {\n                    isEnabled = true;\n                }\n            });\n        }\n        return isEnabled; \n    }\n\n    handleTabChange = (event, newSelectedTab) => {\n        const { keys, keyManagers, keyRequest } = this.state;\n        const { keyType } = this.props;\n        const selectedKM = keyManagers.find((x) => x.name === newSelectedTab);\n        const { availableGrantTypes } = selectedKM;\n        const selectedGrantsByDefault = [];\n        if(availableGrantTypes.find( gt => gt ==='password')){\n            selectedGrantsByDefault.push('password');\n        }\n        if(availableGrantTypes.find( gt => gt ==='client_credentials')){\n            selectedGrantsByDefault.push('client_credentials');\n        }\n\n        if (keys.size > 0 && keys.get(newSelectedTab) && keys.get(newSelectedTab).keyType === keyType) {\n            const { callbackUrl, supportedGrantTypes, additionalProperties, mode } = keys.get(newSelectedTab);\n            const newRequest = {\n                ...keyRequest,\n                callbackUrl,\n                selectedGrantTypes: supportedGrantTypes\n                    || selectedGrantsByDefault,\n                additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectedKM),\n            };\n            this.setState({ \n                keyRequest: newRequest, \n                selectedTab: newSelectedTab, \n                mode,\n                importDisabled: (mode === 'MAPPED' || mode === 'CREATED'),\n            });\n        } else {\n            // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n            this.setState({\n                keyRequest: {\n                    ...keyRequest,\n                    selectedGrantTypes: selectedGrantsByDefault,\n                    additionalProperties: this.getDefaultAdditionalProperties(selectedKM),\n                },\n                selectedTab: newSelectedTab,\n                importDisabled: false,\n            });\n        }\n    };\n\n    /**\n     * load application key generation ui\n     */\n    loadApplication = () => {\n        const { keyType } = this.props;\n        if (this.appId) {\n            const api = new API();\n            const promisedKeyManagers = api.getKeyManagers();\n            const promisedGetKeys = this.application\n                .then((application) => application.getKeys(keyType));\n            Promise.all([promisedKeyManagers, promisedGetKeys])\n                .then((response) => {\n                    // processing promisedKeyManagers response\n                    const responseKeyManagerList = [];\n                    response[0].body.list.map((item) => {\n                        if (item.enabled) responseKeyManagerList.push(item);\n                    });\n\n                    if (responseKeyManagerList.length === 0) {\n                        this.setState({ keyManagers: [] });\n                        return;\n                    }\n                    // Selecting a key manager from the list of key managers.\n                    let { selectedTab } = this.state;\n                    if (!selectedTab && responseKeyManagerList.length > 0) {\n                        selectedTab = responseKeyManagerList.find((x) => x.name === 'Resident Key Manager') ? 'Resident Key Manager'\n                            : responseKeyManagerList[0].name;\n                    }\n                    const selectdKM = responseKeyManagerList.find((x) => x.name === selectedTab);\n                    // processing promisedGetKeys response\n                    const keys = response[1];\n                    const { keyRequest } = this.state;\n\n                    if (keys.size > 0 && keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType) {\n                        const { callbackUrl, supportedGrantTypes, additionalProperties, mode } = keys.get(selectedTab);\n                        const newRequest = {\n                            ...keyRequest,\n                            callbackUrl: callbackUrl || '',\n                            selectedGrantTypes: supportedGrantTypes || [],\n                            additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectdKM),\n                        };\n                        this.setState({\n                            keys, keyRequest: newRequest, keyManagers: responseKeyManagerList, selectedTab,\n                            importDisabled: (mode === 'MAPPED' || mode === 'CREATED'),\n                            mode,\n                        });\n                    } else {\n                        const selectedGrantTypes = [];\n                        if(selectdKM.availableGrantTypes.find( gt => gt ==='password')){\n                            selectedGrantTypes.push('password');\n                        }\n                        if(selectdKM.availableGrantTypes.find( gt => gt ==='client_credentials')){\n                            selectedGrantTypes.push('client_credentials');\n                        }\n\n                        this.setState({\n                            keys,\n                            keyRequest: {\n                                ...keyRequest,\n                                selectedGrantTypes,\n                                additionalProperties: this.getDefaultAdditionalProperties(selectdKM),\n                            },\n                            keyManagers: responseKeyManagerList,\n                            selectedTab,\n                        });\n                    }\n                })\n                .catch((error) => {\n                    console.error(error);\n                    if (error.status === 404) {\n                        this.setState({ notFound: true });\n                    } else {\n                        Alert.error(error.description\n                            || intl.formatMessage({\n                                id: 'Shared.AppsAndKeys.TokenManager.get.keys.request.error',\n                                defaultMessage: 'Error while retrieving the keys',\n                            }));\n                    }\n                });\n        }\n    }\n\n    /**\n     * Update keyRequest state\n     * @param {Object} keyRequest parameters requried for key generation request\n     */\n    updateKeyRequest(keyRequest) {\n        this.setState({ keyRequest });\n    }\n\n    /**\n     * Generate keys for application,\n     *\n     * @memberof KeyConfiguration\n     */\n    generateKeys() {\n        const { keyRequest, keys, selectedTab } = this.state;\n        const {\n            keyType, updateSubscriptionData, selectedApp: { tokenType, hashEnabled }, intl,\n        } = this.props;\n\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n\n        this.application\n            .then((application) => {\n                return application.generateKeys(\n                    keyType, keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    keyRequest.additionalProperties, this.getKeyManagerIdentifier(),\n                );\n            })\n            .then((response) => {\n                if (updateSubscriptionData) {\n                    updateSubscriptionData();\n                }\n                const newKeys = new Map([...keys]);\n                // in case token hashing is enabled, isKeyJWT is set to true even if the token type is JWT.\n                // This is to mimic the behavior of JWT tokens (by showing the token in a dialog)\n                const isKeyJWT = (tokenType === 'JWT') || hashEnabled;\n                newKeys.set(selectedTab, response);\n                const initialToken = response.token ? response.token.accessToken : '';\n                const initialValidityTime = response.token ? response.token.validityTime : 0;\n                const initialScopes = response.token ? response.token.tokenScopes : [];\n                this.setState({ keys: newKeys, isKeyJWT, initialToken, initialValidityTime, initialScopes });\n                if (response.keyState === this.keyStates.CREATED || response.keyState === this.keyStates.REJECTED) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success.blocked',\n                        defaultMessage: 'Application keys generate request is currently pending approval by the site administrator.',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success',\n                        defaultMessage: 'Application keys generated successfully',\n                    }));\n                    this.loadApplication();\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                Alert.error(error.description\n                    || intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.error',\n                        defaultMessage: 'Error occurred when generating application keys',\n                }));\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     *\n     * @memberof KeyConfiguration\n     */\n    updateKeys() {\n        const { keys, keyRequest, selectedTab } = this.state;\n        const { keyType, intl } = this.props;\n        const applicationKey = (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n        this.application\n            .then((application) => {\n                return application.updateKeys(\n                    applicationKey.tokenType,\n                    keyType,\n                    keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    applicationKey.consumerKey,\n                    applicationKey.consumerSecret,\n                    keyRequest.additionalProperties,\n                    selectedTab,\n                    applicationKey.keyMappingId,\n                );\n            })\n            .then((response) => {\n                const newKeys = new Map([...keys]);\n                newKeys.set(selectedTab, response);\n                this.setState({ keys: newKeys });\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.update.success',\n                    defaultMessage: 'Application keys updated successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                const { response } = error;\n                if (response && response.body && response.body.message && response.body.description) {\n                    Alert.error(`${response.body.message}: ${response.body.description}`);\n                }\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     * Cleanup application keys\n     */\n    cleanUpKeys(selectedTab, keyMappingId) {\n        const { keyType, intl } = this.props;\n        this.application\n            .then((application) => {\n                return application.cleanUpKeys(keyType, selectedTab, keyMappingId);\n            })\n            .then(() => {\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.success',\n                    defaultMessage: 'Application keys cleaned successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } \n                Alert.error(error.description || intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.error',\n                    defaultMessage: 'Error occurred while cleaning up application keys',\n                }));\n                \n                \n            });\n    }\n\n    /**\n     * Handle on change of provided consumer key and consumer secret\n     *\n     * @param event onChange event\n     */\n    handleOnChangeProvidedOAuth(event) {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    /**\n     * Provide consumer key and secret of an existing OAuth app to an application\n     */\n    provideOAuthKeySecret() {\n        const { keyType, intl } = this.props;\n        const { providedConsumerKey, providedConsumerSecret, selectedTab } = this.state;\n\n        this.application\n            .then((application) => {\n                return application.provideKeys(keyType, providedConsumerKey, providedConsumerSecret, selectedTab);\n            })\n            .then(() => {\n                this.setState({ providedConsumerKey: '', providedConsumerSecret: '' });\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.success',\n                    defaultMessage: 'Application keys provided successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(error.description || intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.error',\n                    defaultMessage: 'Error occurred when providing application keys',\n                }));\n            });\n    }\n\n    getKeyManagerDescription() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].description;\n        }\n        return '';\n    }\n\n    getKeyManagerIdentifier() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].id;\n        }\n        return selectedTab;\n    }\n\n    setValidating = (validatingState) => {\n        this.setState({ validating: validatingState });\n    }\n\n    updateHasError = (state) => {\n        this.setState({ hasError: state });\n    }\n\n    toTitleCase = (str) => {\n        return str.replace(\n            /\\w\\S*/g,\n            (txt) => {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            },\n        );\n    };\n\n    handleChange = (e) => {\n        this.setState({ tokenType: e.target.defaultValue });\n    }\n\n    handleClose=() => {\n        this.setState({ tokenType: 'DIRECT' });\n    }\n    /**\n     *  @returns {Component}\n     * @memberof Tokenemanager\n     */\n    render() {\n        const {\n            classes, selectedApp, keyType, summary, selectedApp: { hashEnabled }, isKeyManagerAllowed,\n        } = this.props;\n        const {\n            keys, keyRequest, isLoading, isKeyJWT, providedConsumerKey,\n            providedConsumerSecret, selectedTab, keyManagers, validating, hasError, initialToken,\n            initialValidityTime, initialScopes, importDisabled, mode, tokenType\n        } = this.state;\n        if (keyManagers && keyManagers.length === 0) {\n            return (\n                <div className={classes.root}>\n                    <Box mb={1}>\n                        <Typography variant='h5' className={classes.keyTitle}>\n                            {this.toTitleCase(keyType)}\n                            <FormattedMessage\n                                id='Shared.AppsAndKeyhandleCloses.TokenManager.oauth2.keys.main.title'\n                                defaultMessage=' OAuth2 Keys'\n                            />\n                        </Typography>\n                    </Box>\n                    <InlineMessage type='info' className={classes.dialogContainer}>\n                        <Typography variant='h5' component='h3'>\n                            <FormattedMessage id='Shared.AppsAndKeys.TokenManager.no.km'\n                                              defaultMessage='No Key Managers'/>\n                        </Typography>\n                        <Typography component='p'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.no.km.content'\n                                defaultMessage='No Key Managers active to generate keys.'\n                            />\n                        </Typography>\n                    </InlineMessage>\n                </div>\n            );\n        }\n        if (!keys || !selectedTab || !keyRequest.selectedGrantTypes) {\n            return <Loading />;\n        }\n        const username = AuthManager.getUser().name;\n        let isUserOwner = false;\n\n        if (selectedApp.owner && username.toLowerCase() === selectedApp.owner.toLowerCase()) {\n            isUserOwner = true;\n        }\n        const key = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) ? keys.get(selectedTab) : null;\n\n        if (summary) {\n            if (keys) {\n                return (\n                    <TokenMangerSummary\n                        keys={keys}\n                        key={key}\n                        keyStates={this.keyStates}\n                        selectedApp={selectedApp}\n                        selectedTab={selectedTab}\n                        keyType={keyType}\n                        isKeyJWT={isKeyJWT}\n                        isUserOwner={isUserOwner}\n                    />\n                );\n            } else {\n                return (<Progress />);\n            }\n        }\n\n        let isResidentKeyManagerTokensAvailable = false;\n        if (keys.has('Resident Key Manager') &&\n            keys.get('Resident Key Manager').supportedGrantTypes.\n            includes(\"urn:ietf:params:oauth:grant-type:token-exchange\")){\n            isResidentKeyManagerTokensAvailable = true;\n        }\n\n        let defaultTokenEndpoint;\n\n        if (keyManagers.length > 0) {\n            defaultTokenEndpoint = (keyManagers.filter((item) => item.name === 'Resident Key Manager'))[0].tokenEndpoint;\n        }\n\n        if (key && key.keyState === 'APPROVED' && !key.consumerKey) {\n            return (\n                <>\n                    <Typography className={classes.cleanUpInfoText} variant='subtitle1'>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.TokenManager.cleanup.text'\n                            defaultMessage='Error! You have partially-created keys.\n                            Please click `Clean Up` button and try again.'\n                        />\n                    </Typography>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.cleanUpButton}\n                        onClick={() => this.cleanUpKeys(selectedTab, keys.get(selectedTab).keyMappingId)}\n                    >\n                        <FormattedMessage\n                            defaultMessage='Clean up'\n                            id='Shared.AppsAndKeys.TokenManager.cleanup'\n                        />\n                    </Button>\n                </>\n            );\n        }\n        if (key && (key.keyState === this.keyStates.CREATED || key.keyState === this.keyStates.REJECTED)) {\n            return <WaitingForApproval keyState={key.keyState} states={this.keyStates} />;\n        }\n        return (\n            <>\n                {(keyManagers && keyManagers.length > 1) && (\n                    <AppBar position=\"static\" color=\"default\">\n                        <Tabs\n                        value={selectedTab}\n                        onChange={this.handleTabChange}\n                        indicatorColor=\"primary\"\n                        textColor=\"primary\"\n                        variant=\"scrollable\"\n                        scrollButtons=\"auto\"\n                        aria-label=\"scrollable auto tabs example\"\n                        >\n                            {keyManagers.map((keymanager) => (\n                            <Tab\n                                label={keymanager.displayName || keymanager.name}\n                                value={keymanager.name}\n                                disabled={!keymanager.enabled || (isKeyManagerAllowed\n                                    && !isKeyManagerAllowed(keymanager.name)\n                                    && ((keymanager.name !== 'Resident Key Manager')\n                                    || (!this.isTokenExchangeEnabled() && keymanager.name === 'Resident Key Manager')))}\n                                id={keymanager.name.replace(/\\s/g, '')}\n                            />\n                            ))}\n                        </Tabs>\n                    </AppBar>\n                )}\n                <div className={classes.root}>\n                    <Box mb={1}>\n                        <Typography variant='h5' className={classes.keyTitle}>\n                            {this.toTitleCase(keyType)}\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.oauth2.keys.main.title'\n                                defaultMessage=' OAuth2 Keys'\n                            />\n                        </Typography>\n                    </Box>\n                    {(keyManagers && keyManagers.length > 0) && keyManagers.map((keymanager) => (\n                        <div>\n                            {keymanager.tokenType === 'DIRECT' && (\n                                <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                    <Box display='flex' flexDirection='row'>\n                                        <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                            <FormattedMessage\n                                                defaultMessage='Key and Secret'\n                                                id='Shared.AppsAndKeys.TokenManager.key.and.secret'\n                                            />\n                                        </Typography>\n                                        {\n                                            keymanager.enableMapOAuthConsumerApps && (\n                                                <Box ml={2}>\n                                                    <ImportExternalApp\n                                                        onChange={this.handleOnChangeProvidedOAuth}\n                                                        consumerKey={providedConsumerKey}\n                                                        consumerSecret={providedConsumerSecret}\n                                                        isUserOwner={isUserOwner}\n                                                        key={key}\n                                                        provideOAuthKeySecret={this.provideOAuthKeySecret}\n                                                        importDisabled={importDisabled}\n                                                    />\n                                                </Box>\n                                            )\n                                        }\n                                    </Box>\n                                    <Box m={2}>\n                                        <ViewKeys\n                                            initialToken={initialToken}\n                                            initialValidityTime={initialValidityTime}\n                                            initialScopes={initialScopes}\n                                            selectedApp={selectedApp}\n                                            selectedTab={selectedTab}\n                                            keyType={keyType}\n                                            keys={keys}\n                                            selectedGrantTypes={keyRequest.selectedGrantTypes}\n                                            isUserOwner={isUserOwner}\n                                            hashEnabled={keymanager.enableTokenHashing || hashEnabled}\n                                            keyManagerConfig={keymanager}\n                                            mode={mode}\n                                        />\n                                    </Box>\n                                    <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                        {\n                                            key\n                                                ? (\n                                                    <FormattedMessage\n                                                        defaultMessage='Key Configurations'\n                                                        id='Shared.AppsAndKeys.TokenManager.update.configuration'\n                                                    />\n                                                )\n                                                : (\n                                                    <FormattedMessage\n                                                        defaultMessage='Key Configuration'\n                                                        id='Shared.AppsAndKeys.TokenManager.key.configuration'\n                                                    />\n                                                )\n                                        }\n                                    </Typography>\n                                    <Box m={2}>\n                                        <KeyConfiguration\n                                            keys={keys}\n                                            key={key}\n                                            selectedApp={selectedApp}\n                                            selectedTab={selectedTab}\n                                            keyType={keyType}\n                                            updateKeyRequest={this.updateKeyRequest}\n                                            keyRequest={keyRequest}\n                                            isUserOwner={isUserOwner}\n                                            isKeysAvailable={!!key}\n                                            keyManagerConfig={keymanager}\n                                            validating={validating}\n                                            updateHasError={this.updateHasError}\n                                            callbackError={hasError}\n                                            setValidating={this.setValidating}\n                                            defaultTokenEndpoint={defaultTokenEndpoint}\n                                            mode={mode}\n                                        />\n                                        <div className={classes.generateWrapper}>\n                                            <ScopeValidation\n                                                resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                                                resourceMethod={resourceMethods.POST}\n                                            >\n                                                {!isUserOwner ? (\n                                                    <>\n                                                        <Button\n                                                            id='generate-keys'\n                                                            variant='contained'\n                                                            color='primary'\n                                                            className={classes.button}\n                                                            onClick={\n                                                                key ? this.updateKeys : this.generateKeys\n                                                            }\n                                                            disabled={!isUserOwner || isLoading || !keymanager.enableOAuthAppCreation \n                                                                || (isKeyManagerAllowed\n                                                                    && !isKeyManagerAllowed(keymanager.name)\n                                                                    && ((keymanager.name !== 'Resident Key Manager')\n                                                                    || (!this.isTokenExchangeEnabled() && keymanager.name === 'Resident Key Manager')))}\n                                                        >\n                                                            {key ?\n                                                                this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.update.keys',\n                                                                    defaultMessage: 'Update Keys'})\n                                                            :\n                                                                this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.generate.keys',\n                                                                    defaultMessage: 'Generate Keys'})\n                                                            }\n                                                            {isLoading && <CircularProgress size={20}/>}\n                                                        </Button>\n                                                        <Typography variant='caption'>\n                                                            <FormattedMessage\n                                                                defaultMessage='Only owner can generate or update keys'\n                                                                id='Shared.AppsAndKeys.TokenManager.key.and.user.owner'\n                                                            />\n                                                        </Typography>\n                                                    </>\n                                                ) : (\n                                                    <Box display='flex'>\n                                                        <Button\n                                                            id='generate-keys'\n                                                            variant='contained'\n                                                            color='primary'\n                                                            className={classes.button}\n                                                            onClick={key ? this.updateKeys : this.generateKeys}\n                                                            disabled={hasError || (isLoading || !keymanager.enableOAuthAppCreation) || (mode && mode === 'MAPPED')\n                                                            || (isKeyManagerAllowed\n                                                                && !isKeyManagerAllowed(keymanager.name)\n                                                                && ((keymanager.name !== 'Resident Key Manager')\n                                                                || (!this.isTokenExchangeEnabled() && keymanager.name === 'Resident Key Manager')))}\n                                                        >\n                                                            {key ?\n                                                                this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.update',\n                                                                    defaultMessage: 'Update'})\n                                                            :\n                                                                this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.generate.keys',\n                                                                    defaultMessage: 'Generate Keys'})\n                                                            }\n                                                            {isLoading && <CircularProgress size={20}/>}\n                                                        </Button>\n                                                        {!keymanager.enableOAuthAppCreation && (\n                                                            <Box m={2} display='flex'>\n                                                                <WarningIcon className={classes.warningIcon}/>\n                                                                <Typography variant='body1'>\n                                                                    <FormattedMessage\n                                                                        defaultMessage='Oauth app creation disabled for {kmName} key manager'\n                                                                        id='Shared.AppsAndKeys.TokenManager.app.creation.disable.warn'\n                                                                        values={{kmName: keymanager.displayName || keymanager.name}}\n                                                                    />\n                                                                </Typography>\n                                                            </Box>\n                                                        )}\n                                                    </Box>\n                                                )}\n                                            </ScopeValidation>\n                                        </div>\n\n                                    </Box>\n                                </TabPanel>\n                            )}\n                            {keymanager.tokenType === 'EXCHANGED' && (\n                                <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                    <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                        <FormattedMessage\n                                            defaultMessage='Token Generation'\n                                            id='Shared.AppsAndKeys.TokenManager.ExchangeToken.key.configuration'\n                                        />\n                                    </Typography>\n                                    <Box m={2}>\n                                        <TokenExchangeKeyConfiguration\n                                            keys={keys}\n                                            key={key}\n                                            selectedApp={selectedApp}\n                                            selectedTab={selectedTab}\n                                            keyType={keyType}\n                                            updateKeyRequest={this.updateKeyRequest}\n                                            keyRequest={keyRequest}\n                                            isUserOwner={isUserOwner}\n                                            isKeysAvailable={!!key}\n                                            keyManagerConfig={keymanager}\n                                            validating={validating}\n                                            updateHasError={this.updateHasError}\n                                            callbackError={hasError}\n                                            setValidating={this.setValidating}\n                                            defaultTokenEndpoint={defaultTokenEndpoint}\n                                        />\n                                    </Box>\n                                </TabPanel>\n                            )}\n                            {keymanager.tokenType === 'BOTH' && (\n                                <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                    <Box m={2}>\n                                        <Box m={2}>\n                                        <Box display='flex' alignItems='center'>\n                                            <Table className={classes.table}>\n                                                <TableRow>\n                                                    <TableCell component='th' scope='row' className={classes.leftCol}>\n                                                        <FormattedMessage\n                                                            defaultMessage='API Invocation Method'\n                                                            id='Shared.AppsAndKeys.KeyConfiguration.API Invocation.Method.label'\n                                                        />\n                                                    </TableCell>\n                                                    <TableCell>\n                                                        <RadioGroup\n                                                            style={{flexDirection: 'row'}}\n                                                            aria-label='tokenType'\n                                                            name='tokenType'\n                                                            value={tokenType}\n                                                            onChange={this.handleChange}\n                                                        >\n                                                            <FormControlLabel value='DIRECT' control={<Radio/>}\n                                                                              label='Direct Token' id='direct-token'/>\n                                                            <FormControlLabel value='EXCHANGED' control={<Radio/>}\n                                                                              label='Exchange Token' id='exchange-token'/>\n                                                        </RadioGroup>\n                                                    </TableCell>\n                                                </TableRow>\n                                            </Table>\n                                        </Box>\n                                        </Box>\n\n                                    {tokenType === 'DIRECT' && (\n                                        <>\n                                            <Box display='flex' flexDirection='row'>\n                                                <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                                    <FormattedMessage\n                                                        defaultMessage='Key and Secret'\n                                                        id='Shared.AppsAndKeys.TokenManager.key.and.secret'\n                                                    />\n                                                </Typography>\n                                                {\n                                                    keymanager.enableMapOAuthConsumerApps && (\n                                                        <Box ml={2}>\n                                                            <ImportExternalApp\n                                                                onChange={this.handleOnChangeProvidedOAuth}\n                                                                consumerKey={providedConsumerKey}\n                                                                consumerSecret={providedConsumerSecret}\n                                                                isUserOwner={isUserOwner}\n                                                                key={key}\n                                                                provideOAuthKeySecret={this.provideOAuthKeySecret}\n                                                                importDisabled={importDisabled}\n                                                            />\n                                                        </Box>\n                                                    )\n                                                }\n                                            </Box>\n                                            <Box m={2}>\n                                                <ViewKeys\n                                                    initialToken={initialToken}\n                                                    initialValidityTime={initialValidityTime}\n                                                    initialScopes={initialScopes}\n                                                    selectedApp={selectedApp}\n                                                    selectedTab={selectedTab}\n                                                    keyType={keyType}\n                                                    keys={keys}\n                                                    selectedGrantTypes={keyRequest.selectedGrantTypes}\n                                                    isUserOwner={isUserOwner}\n                                                    hashEnabled={keymanager.enableTokenHashing || hashEnabled}\n                                                    keyManagerConfig={keymanager}\n                                                    mode={mode}\n                                                />\n                                            </Box>\n                                            <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                                {\n                                                    key\n                                                        ? (\n                                                            <FormattedMessage\n                                                                defaultMessage='Key Configurations'\n                                                                id='Shared.AppsAndKeys.TokenManager.update.configuration'\n                                                            />\n                                                        )\n                                                        : (\n                                                            <FormattedMessage\n                                                                defaultMessage='Key Configuration'\n                                                                id='Shared.AppsAndKeys.TokenManager.key.configuration'\n                                                            />\n                                                        )\n                                                }\n                                            </Typography>\n                                            <Box m={2}>\n                                                <KeyConfiguration\n                                                    keys={keys}\n                                                    key={key}\n                                                    selectedApp={selectedApp}\n                                                    selectedTab={selectedTab}\n                                                    keyType={keyType}\n                                                    updateKeyRequest={this.updateKeyRequest}\n                                                    keyRequest={keyRequest}\n                                                    isUserOwner={isUserOwner}\n                                                    isKeysAvailable={!!key}\n                                                    keyManagerConfig={keymanager}\n                                                    validating={validating}\n                                                    updateHasError={this.updateHasError}\n                                                    callbackError={hasError}\n                                                    setValidating={this.setValidating}\n                                                    defaultTokenEndpoint={defaultTokenEndpoint}\n                                                />\n                                                <div className={classes.generateWrapper}>\n                                                    <ScopeValidation\n                                                        resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                                                        resourceMethod={resourceMethods.POST}\n                                                    >\n                                                        {!isUserOwner ? (\n                                                            <>\n                                                                <Button\n                                                                    id='generate-keys'\n                                                                    variant='contained'\n                                                                    color='primary'\n                                                                    className={classes.button}\n                                                                    onClick={\n                                                                        key ? this.updateKeys : this.generateKeys\n                                                                    }\n                                                                 \n                                                                >\n                                                                    {key ? 'Update keys' : 'Generate Keys'}\n                                                                    {isLoading && <CircularProgress size={20}/>}\n                                                                </Button>\n                                                                <Typography variant='caption'>\n                                                                    <FormattedMessage\n                                                                        defaultMessage='Only owner can generate or update keys'\n                                                                        id='Shared.AppsAndKeys.TokenManager.key.and.user.owner'\n                                                                    />\n                                                                </Typography>\n                                                            </>\n                                                        ) : (\n                                                            <Box display='flex'>\n                                                                <Button\n                                                                    id='generate-keys'\n                                                                    variant='contained'\n                                                                    color='primary'\n                                                                    className={classes.button}\n                                                                    onClick={key ? this.updateKeys : this.generateKeys}\n                        \n                                                                >\n                                                                    {key ? 'Update' : 'Generate Keys'}\n                                                                    {isLoading && <CircularProgress size={20}/>}\n                                                                </Button>\n                                                                {!keymanager.enableOAuthAppCreation && (\n                                                                    <Box m={2} display='flex'>\n                                                                        <WarningIcon className={classes.warningIcon}/>\n                                                                        <Typography variant='body1'>\n                                                                            <FormattedMessage\n                                                                                defaultMessage='Oauth app creation disabled for {kmName} key manager'\n                                                                                id='Shared.AppsAndKeys.TokenManager.app.creation.disable.warn'\n                                                                                values={{kmName: keymanager.displayName || keymanager.name}}\n                                                                            />\n                                                                        </Typography>\n                                                                    </Box>\n                                                                )}\n                                                            </Box>\n                                                        )}\n                                                    </ScopeValidation>\n                                                </div>\n                                            </Box>\n                                        </>\n                                    )}\n                                        {(tokenType === 'EXCHANGED'  && isResidentKeyManagerTokensAvailable) && (\n                                            <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                                <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                                    <FormattedMessage\n                                                        defaultMessage='Token Generation'\n                                                        id='Shared.AppsAndKeys.TokenManager.ExchangeToken.key.configuration'\n                                                    />\n                                                </Typography>\n                                                <Box m={2}>\n                                                    <TokenExchangeKeyConfiguration\n                                                        keys={keys}\n                                                        key={key}\n                                                        selectedApp={selectedApp}\n                                                        selectedTab={selectedTab}\n                                                        keyType={keyType}\n                                                        updateKeyRequest={this.updateKeyRequest}\n                                                        keyRequest={keyRequest}\n                                                        isUserOwner={isUserOwner}\n                                                        isKeysAvailable={!!key}\n                                                        keyManagerConfig={keymanager}\n                                                        validating={validating}\n                                                        updateHasError={this.updateHasError}\n                                                        callbackError={hasError}\n                                                        setValidating={this.setValidating}\n                                                        defaultTokenEndpoint={defaultTokenEndpoint}\n                                                    />\n                                                </Box>\n                                            </TabPanel>\n                                        )}\n                                    </Box>\n                                </TabPanel>\n                            )}\n                        </div>\n                    ))}\n\n                </div>\n                {(tokenType === 'EXCHANGED' && !isResidentKeyManagerTokensAvailable) && (\n                <div className={classes.inputWrapper}>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12}>\n                            <Dialog\n                                fullScreen={false}\n                                open={true}\n                                onClose={this.handleClose}\n                                aria-labelledby='responsive-dialog-title'\n                                className={classes.dialogWrapper}\n                            >\n                                <DialogTitle id='responsive-dialog-title'>\n                                    {'Resident Key Manager Consumer Key and Secret Not Available '}\n                                </DialogTitle>\n                                <DialogContent>\n                                    <DialogContentText>\n                                        <React.Fragment>\n                                            <Typography>\n                                                <FormattedMessage\n                                                    id='Shared.AppsAndKeys.ViewCurl.error'\n                                                    defaultMessage='Please generate the Consumer Key and Secret for Residence Key Manager with selecting the urn:ietf:params:oauth:grant-type:token-exchange grant type in\n                                                                            order to use the token Exchange Approach. '\n                                                />\n                                            </Typography>\n                                        </React.Fragment>\n                                    </DialogContentText>\n                                </DialogContent>\n                                <DialogActions>\n\n                                    <Button onClick={this.handleClose} color='primary' autoFocus id='close-btn'>\n                                        <FormattedMessage\n                                            id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                            defaultMessage='Close'\n                                        />\n                                    </Button>\n                                </DialogActions>\n                            </Dialog>\n                        </Grid>\n                    </Grid>\n                </div>\n                )}\n            </>\n        );\n    }\n}\n\nTokenManager.defaultProps = {\n    updateSubscriptionData: () => { },\n    summary: false,\n};\nTokenManager.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    selectedApp: PropTypes.shape({\n        tokenType: PropTypes.string.isRequired,\n        appId: PropTypes.string,\n        value: PropTypes.string,\n        owner: PropTypes.string,\n        hashEnabled: PropTypes.bool,\n    }).isRequired,\n    keyType: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    summary: PropTypes.bool,\n};\n\nexport default injectIntl(withStyles(styles)(TokenManager));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\n\nconst useStyles = makeStyles((theme) => ({\n    appContent: {\n        margin: theme.spacing(2),\n    },\n    button: {\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n  }));\n\nconst genericDisplayDialog = (props) => {\n    const {\n        handleClick, heading, caption, buttonText,\n    } = props;\n    const classes = useStyles();\n    return (\n        <div className={classes.appContent}>\n            <InlineMessage type='info' className={classes.dialogContainer}>\n                <Typography variant='h5' component='h2'>\n                    {heading}\n                </Typography>\n                <Typography variant=\"body2\" gutterBottom>\n                    {caption}\n                </Typography>\n                <ScopeValidation resourcePath={resourcePaths.APPLICATIONS} resourceMethod={resourceMethods.POST}>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.button}\n                        onClick={handleClick}\n                    >\n                        {buttonText}\n                    </Button>\n                </ScopeValidation>\n            </InlineMessage>\n        </div>\n    );\n};\n\nexport default genericDisplayDialog;\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You maRefactor code of AsyncApiUIy obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Paper, Typography } from '@material-ui/core';\nimport Link from '@material-ui/core/Link';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nconst OriginalDevportalDetails = (props) => {\n    const {\n        classes, originalDevPortalUrl,\n    } = props;\n    return (\n        <Paper elevation={0} className={classes.paper}>\n            <Typography variant='h5' component='h2'>\n                <FormattedMessage\n                    id={'Apis.Details.Credentials.OriginalDevportalDetails.'\n                    + 'original.developer.portal.title'}\n                    defaultMessage='Original Developer Portal'\n                />\n            </Typography>\n            <Link\n                target='_blank'\n                rel='noopener noreferrer'\n                href={originalDevPortalUrl}\n                variant='body2'\n            >\n                <div className={classes.originalDevPortalLink}>\n                    <FormattedMessage\n                        id='Apis.Details.Credentials.OriginalDevportalDetails.visit.original.developer.portal'\n                        defaultMessage='Visit Original Developer Portal'\n                    />\n                    <LaunchIcon className={classes.launchIcon} />\n                </div>\n            </Link>\n        </Paper>\n    );\n};\n\nexport default OriginalDevportalDetails;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport TokenManager from 'AppComponents/Shared/AppsAndKeys/TokenManager';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    button: {\n        padding: theme.spacing(1),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    actionColumn: {\n        display: 'flex',\n        textAlign: 'right',\n        direction: 'rtl',\n    },\n    td: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        fontSize: '11px',\n        paddingLeft: theme.spacing(1),\n        height: 35,\n    },\n    selectedWrapper: {\n        borderLeft: 'solid 2px ' + theme.palette.primary.main,\n    },\n});\n\nconst subscriptionTableRow = (props) => {\n    const {\n        classes, loadInfo, handleSubscriptionDelete, isKeyManagerAllowed,\n        theme, selectedAppId, updateSubscriptionData, selectedKeyType, app, applicationOwner, hashEnabled,\n    } = props;\n    return (\n        <>\n            <tr>\n                <td className={classes.td} id={app.label}>{app.label}</td>\n                <td className={classes.td}>{app.policy}</td>\n                <td className={classes.td}>{app.status}</td>\n                <td className={classes.td}>\n                    <div className={classes.actionColumn}>\n                        <Link\n                            className={classes.button}\n                            to={'/applications/' + app.value}\n                            id={app.label + '-MA'}\n                            aria-labelledby={app.label + '-MA ' + app.label}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.manage.app'\n                                    defaultMessage='MANAGE APP'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='applications'\n                            />\n                        </Link>\n                        <ScopeValidation\n                            resourcePath={resourcePaths.SINGLE_SUBSCRIPTION}\n                            resourceMethod={resourceMethods.DELETE}\n                        >\n                            <Link\n                                className={classes.button}\n                                onClick={() => handleSubscriptionDelete(\n                                    app.subscriptionId,\n                                    updateSubscriptionData,\n                                )}\n                                id={app.label + '-UN'}\n                                aria-labelledby={app.label + '-UN ' + app.label}\n                            >\n                                <span>\n                                    <FormattedMessage\n                                        id='Apis.Details.Credentials.SubscriptionTableRow.unsubscribe'\n                                        defaultMessage='UNSUBSCRIBE'\n                                    />\n                                </span>\n                                <CustomIcon\n                                    width={16}\n                                    height={16}\n                                    strokeColor={theme.palette.primary.main}\n                                    icon='subscriptions'\n                                />\n                            </Link>\n                        </ScopeValidation>\n                        <Link\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                            && selectedKeyType === 'PRODUCTION'\n                                            && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('PRODUCTION', app.value)}\n                            id={app.label + '-PK'}\n                            aria-labelledby={app.label + '-PK ' + app.label}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.prod.keys'\n                                    defaultMessage='PROD KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </Link>\n                        <Link\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                            && selectedKeyType === 'SANDBOX'\n                                            && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('SANDBOX', app.value)}\n                            id={app.label + '-SB'}\n                            aria-labelledby={app.label + '-SB ' + app.label}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.sandbox.keys'\n                                    defaultMessage='SANDBOX KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </Link>\n                    </div>\n                </td>\n            </tr>\n            {app.value === selectedAppId && (selectedKeyType === 'PRODUCTION' || selectedKeyType === 'SANDBOX') && (\n                <tr>\n                    <td colSpan='4'>\n                        <div className={classes.selectedWrapper}>\n                            <TokenManager\n                                isKeyManagerAllowed={isKeyManagerAllowed}\n                                keyType={selectedKeyType}\n                                selectedApp={{\n                                    appId: app.value,\n                                    label: app.label,\n                                    owner: applicationOwner,\n                                    hashEnabled,\n                                }}\n                                updateSubscriptionData={updateSubscriptionData}\n                            />\n                        </div>\n                    </td>\n                </tr>\n            )}\n        </>\n    );\n};\nsubscriptionTableRow.propTypes = {\n    classes: PropTypes.shape({\n        td: PropTypes.shape({}),\n        actionColumn: PropTypes.shape({}),\n        button: PropTypes.shape({}),\n        activeLink: PropTypes.shape({}),\n        selectedWrapper: PropTypes.shape({}),\n    }).isRequired,\n    theme: PropTypes.shape({\n\n    }).isRequired,\n    handleSubscriptionDelete: PropTypes.func.isRequired,\n    loadInfo: PropTypes.func.isRequired,\n    selectedAppId: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func.isRequired,\n    selectedKeyType: PropTypes.string.isRequired,\n    applicationOwner: PropTypes.string.isRequired,\n    app: PropTypes.shape({\n        label: PropTypes.string,\n        policy: PropTypes.string,\n        status: PropTypes.string,\n        value: PropTypes.string,\n        subscriptionId: PropTypes.string,\n    }).isRequired,\n};\nexport default withStyles(styles, { withTheme: true })(subscriptionTableRow);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Subscription from 'AppData/Subscription';\nimport GenericDisplayDialog from 'AppComponents/Shared/GenericDisplayDialog';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Icon from '@material-ui/core/Icon';\nimport Link from '@material-ui/core/Link';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport SubscribeToApi from 'AppComponents/Shared/AppsAndKeys/SubscribeToApi';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport OriginalDevportalDetails from './OriginalDevportalDetails';\nimport { ApiContext } from '../ApiContext';\nimport SubscriptionTableRow from './SubscriptionTableRow';\n\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(3),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    generateCredentialWrapper: {\n        marginLeft: 0,\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        '& span, & h5, & label, & td, & li, & div': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    tableMain: {\n        '& > table': {\n            width: '100%',\n            borderCollapse: 'collapse',\n            marginTop: theme.spacing(3),\n            marginLeft: theme.spacing(2),\n            marginRight: theme.spacing(1),\n        },\n        '& table > tr td': {\n            paddingLeft: theme.spacing(1),\n        },\n        '&  table > tr:nth-child(even)': {\n            backgroundColor: theme.custom.listView.tableBodyEvenBackgrund,\n            '& td, & a, & .material-icons': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyEvenBackgrund),\n            },\n        },\n        '&  table > tr:nth-child(odd)': {\n            backgroundColor: theme.custom.listView.tableBodyOddBackgrund,\n            '& td, & a, & .material-icons': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyOddBackgrund),\n            },\n        },\n        '&  table > tr > th': {\n            backgroundColor: theme.custom.listView.tableHeadBackground,\n            color: theme.palette.getContrastText(theme.custom.listView.tableHeadBackground),\n            paddingLeft: theme.spacing(1),\n            borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n            borderTop: 'solid 1px ' + theme.palette.grey.A200,\n            textAlign: 'left',\n            fontSize: '11px',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n        },\n        '& table > tr > th:last-child': {\n            textAlign: 'right',\n        },\n\n    },\n    expansion: {\n        background: 'transparent',\n        boxShadow: 'none',\n    },\n    summary: {\n        alignItems: 'center',\n    },\n    subscribeRoot: {\n        paddingLeft: theme.spacing(2),\n    },\n    activeLink: {\n        background: theme.palette.grey.A100,\n    },\n    appBar: {\n        background: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    toolbar: {\n        marginLeft: theme.spacing(2),\n    },\n    subscribeTitle: {\n        flex: 1,\n    },\n    paper: {\n        marginLeft: theme.spacing(3),\n        padding: theme.spacing(2),\n    },\n    descWrapper: {\n        marginBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    credentialBoxWrapper: {\n        paddingLeft: theme.spacing(2),\n    },\n    credentialBox: {\n        padding: theme.spacing(1),\n        border: 'solid 1px #ccc',\n        borderRadius: 5,\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    addLinkWrapper: {\n        marginLeft: theme.spacing(2),\n    },\n    subsListTitle: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    subsListDesc: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    buttonElm: {\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    },\n    launchIcon: {\n        paddingLeft: theme.spacing(1),\n    },\n    originalDevPortalLink: {\n        marginTop: theme.spacing(2),\n    },\n});\n\n/**\n * @class Credentials\n * @extends {React.Component}\n */\nclass Credentials extends React.Component {\n    /**\n     *Creates an instance of Credentials.\n     * @param JSON props\n     * @memberof Credentials\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: true,\n            selectedAppId: false,\n            selectedKeyType: false,\n            subscriptionRequest: {\n                applicationId: '',\n                apiId: '',\n                throttlingPolicy: '',\n            },\n            throttlingPolicyList: [],\n            applicationOwner: '',\n            hashEnabled: false,\n            isSubscribing: false,\n        };\n        this.api = new Api();\n    }\n\n    /**\n     *  Set the initial values for subscription request\n     */\n    componentDidMount() {\n        const { api, updateSubscriptionData } = this.context;\n        if (api) {\n            this.updateData();\n        } else {\n            updateSubscriptionData(this.updateData);\n        }\n    }\n\n    updateData = () => {\n        const { api, applicationsAvailable } = this.context;\n        const { subscriptionRequest } = this.state;\n        const newSubscriptionRequest = { ...subscriptionRequest, apiId: api.id };\n        const throttlingPolicyList = api.tiers;\n        if (throttlingPolicyList && throttlingPolicyList[0]) {\n            newSubscriptionRequest.throttlingPolicy = throttlingPolicyList[0].tierName;\n        }\n        if (applicationsAvailable && applicationsAvailable[0]) {\n            newSubscriptionRequest.applicationId = applicationsAvailable[0].value;\n        }\n        this.setState({ subscriptionRequest: newSubscriptionRequest, throttlingPolicyList });\n    };\n\n    /**\n     * @memberof Credentials\n     */\n    handleExpandClick = () => {\n        this.setState((state) => ({ expanded: !state.expanded }));\n    };\n\n    /**\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Credentials\n     */\n    handleSubscribe = () => {\n        const { updateSubscriptionData, apiType } = this.context;\n        const { subscriptionRequest } = this.state;\n        const { intl } = this.props;\n        const api = new Api();\n        this.setState({ isSubscribing: true });\n        api.subscribe(\n            subscriptionRequest.apiId,\n            subscriptionRequest.applicationId,\n            subscriptionRequest.throttlingPolicy,\n            apiType,\n        )\n            .then((response) => {\n                if (response.body.status === 'ON_HOLD') {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Your subscription request has been submitted and is now awaiting approval.',\n                        id: 'subscription.pending',\n                    }));\n                } else {\n                    console.log('Subscription created successfully with ID : ' + response.body.subscriptionId);\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Subscribed successfully',\n                        id: 'Apis.Details.Credentials.Credentials.subscribed.successfully',\n                    }));\n                }\n                if (updateSubscriptionData) updateSubscriptionData(this.updateData);\n                this.setState({ isSubscribing: false });\n            })\n            .catch((error) => {\n                Alert.error(intl.formatMessage({\n                    id: 'Applications.Details.Subscriptions.error.occurred.during.subscription.not.201',\n                    defaultMessage: 'Error occurred during subscription',\n                }));\n                console.log('Error while creating the subscription.');\n                console.error(error);\n                this.setState({ isSubscribing: false });\n            });\n    };\n\n    /**\n     * @inheritdoc\n     * @memberof Credentials\n     */\n    goToWizard = () => {\n        const { history } = this.props;\n        history.push('credentials/wizard');\n    };\n\n    /**\n     * used to load the token manager component when\n     * key type is selected in the applicaiton list\n     * @param {*} selectedKeyType key type\n     * @param {*} selectedAppId  application id\n     * @memberof Credentials\n     */\n    loadInfo = (selectedKeyType, selectedAppId) => {\n        this.setState({ selectedKeyType, selectedAppId });\n\n        Application.get(selectedAppId)\n            .then((result) => {\n                this.setState({ applicationOwner: result.owner, hashEnabled: result.hashEnabled });\n            });\n    };\n\n    /**\n     * used to check if key manager is in the allowed list for an API\n     * @param {*} name name of the key manager\n     * @memberof Credentials\n     */\n    isKeyManagerAllowed = (name) => {\n        const { api } = this.context;\n        return api && ((api.keyManagers && api.keyManagers.includes('all'))\n        || (api.keyManagers && api.keyManagers.includes(name)));\n    };\n\n    /**\n     * Update subscription Request state\n     * @param {Object} subscriptionRequest parameters requried for subscription\n     */\n    updateSubscriptionRequest = (subscriptionRequest) => {\n        this.setState({ subscriptionRequest });\n    };\n\n    /**\n     *\n     * @param {*} subscriptionId subscription id\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Subscriptions\n     */\n    handleSubscriptionDelete = (subscriptionId, updateSubscriptionData) => {\n        const { intl } = this.props;\n        const client = new Subscription();\n        const promisedDelete = client.deleteSubscription(subscriptionId);\n        promisedDelete.then((response) => {\n            if (response.status !== 200) {\n                console.log(response);\n                Alert.info(intl.formatMessage({\n                    defaultMessage: 'Something went wrong while deleting the Subscription!',\n                    id: 'Apis.Details.Credentials.Credentials.something.went.wrong.with.subscription',\n                }));\n                return;\n            }\n            Alert.info(intl.formatMessage({\n                defaultMessage: 'Subscription deleted successfully!',\n                id: 'Apis.Details.Credentials.Credentials.subscription.deleted.successfully',\n            }));\n            if (updateSubscriptionData) updateSubscriptionData(this.updateData);\n        });\n    };\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const { classes, intl } = this.props;\n        const {\n            api, updateSubscriptionData, applicationsAvailable, subscribedApplications,\n        } = this.context;\n        const {\n            selectedKeyType,\n            selectedAppId,\n            subscriptionRequest,\n            throttlingPolicyList,\n            applicationOwner,\n            hashEnabled,\n            isSubscribing,\n        } = this.state;\n        const user = AuthManager.getUser();\n        const isOnlyMutualSSL = api.securityScheme.includes('mutualssl') && !api.securityScheme.includes('oauth2')\n        && !api.securityScheme.includes('api_key') && !api.securityScheme.includes('basic_auth');\n        const isOnlyBasicAuth = api.securityScheme.includes('basic_auth') && !api.securityScheme.includes('oauth2')\n         && !api.securityScheme.includes('api_key');\n        const isSetAllorResidentKeyManagers = (api.keyManagers && api.keyManagers.includes('all'))\n            || (api.keyManagers && api.keyManagers.includes('Resident Key Manager'));\n        const renderCredentialInfo = () => {\n            if (isOnlyMutualSSL || isOnlyBasicAuth) {\n                return (\n                    <InlineMessage type='info' className={classes.dialogContainer}>\n                        <Typography component='p'>\n                            <FormattedMessage\n                                id='Apis.Details.Creadentials.credetials.mutualssl'\n                                defaultMessage={'Subscription is not required for Mutual SSL APIs'\n                                        + ' or APIs with only Basic Authentication.'}\n                            />\n                        </Typography>\n                    </InlineMessage>\n                );\n            } else if (applicationsAvailable.length === 0 && subscribedApplications.length === 0) {\n                return (\n                    <GenericDisplayDialog\n                        classes={classes}\n                        handleClick={this.goToWizard}\n                        heading={user ? intl.formatMessage({\n                            defaultMessage: 'Subscribe',\n                            id: 'Apis.Details.Credentials.Credentials.subscribe.to.application',\n                        })\n                            : intl.formatMessage({\n                                defaultMessage: 'Sign In to Subscribe',\n                                id: 'Apis.Details.Credentials.Credentials.subscribe.to.application.sign.in',\n                            })}\n                        caption={intl.formatMessage({\n                            defaultMessage: 'You need to subscribe to an application to access this API',\n                            id:\n                            'Apis.Details.Credentials.Credentials.subscribe.to.application.msg',\n                        })}\n                        buttonText={intl.formatMessage({\n                            defaultMessage: 'Subscribe',\n                            id: 'Apis.Details.Credentials.Credentials.generate',\n                        })}\n                    />\n                );\n            } else {\n                return (\n                    <>\n                        <div className={classes.generateCredentialWrapper}>\n                            <ScopeValidation\n                                resourcePath={resourcePaths.SUBSCRIPTIONS}\n                                resourceMethod={resourceMethods.POST}\n                            >\n                                <Typography variant='h5' component='h2'>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'subscribe.to.application'}\n                                        defaultMessage='Subscribe'\n                                    />\n                                </Typography>\n                                <div className={classes.credentialBoxWrapper}>\n                                    {applicationsAvailable.length === 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.with.wizard.message'}\n                                                    defaultMessage={\n                                                        'Use the Subscription and Key Generation Wizard. '\n                                                        + 'Create a new application -> '\n                                                        + 'Subscribe -> Generate keys and '\n                                                        + 'Access Token to invoke this API.'\n                                                    }\n                                                />\n                                            </Typography>\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                className={classes.buttonElm}\n                                                to={(isOnlyMutualSSL || isOnlyBasicAuth\n                                                    || !isSetAllorResidentKeyManagers) ? null\n                                                    : `/apis/${api.id}/credentials/wizard`}\n                                                component={RouterLink}\n                                                disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL\n                                                    || isOnlyBasicAuth || !isSetAllorResidentKeyManagers}\n                                            >\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.'\n                                                    + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                                    defaultMessage='Subscription &amp; Key Generation Wizard'\n                                                />\n                                            </Button>\n                                        </div>\n                                    ) }\n                                    {applicationsAvailable.length > 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials'\n                                                    + '.api.credentials.with.subscribe.message'}\n                                                    defaultMessage={'Subscribe to an application'\n                                                    + ' and generate credentials'}\n                                                />\n                                            </Typography>\n                                            <SubscribeToApi\n                                                applicationsAvailable={applicationsAvailable}\n                                                subscriptionRequest={subscriptionRequest}\n                                                throttlingPolicyList={throttlingPolicyList}\n                                                updateSubscriptionRequest={\n                                                    this.updateSubscriptionRequest\n                                                }\n                                                renderSmall\n                                            />\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                className={classes.buttonElm}\n                                                onClick={() => this.handleSubscribe()}\n                                                disabled={!api.isSubscriptionAvailable || isSubscribing}\n                                            >\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.'\n                                                    + 'SubscibeButtonPanel.subscribe.btn'}\n                                                    defaultMessage='Subscribe'\n                                                />\n                                                {isSubscribing && <CircularProgress size={24} />}\n                                            </Button>\n                                        </div>\n                                    )}\n                                </div>\n                            </ScopeValidation>\n                        </div>\n                        {/*\n                                    ****************************\n                                    Subscription List\n                                    ***************************\n                                    */}\n                        {subscribedApplications && subscribedApplications.length > 0 && (\n                            <>\n                                <Typography variant='h5' component='h2' className={classes.subsListTitle}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.title'}\n                                        defaultMessage='Subscriptions'\n                                    />\n                                </Typography>\n                                <Typography variant='body2' className={classes.subsListDesc}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.description'}\n                                        defaultMessage='( Applications Subscribed to this Api )'\n                                    />\n                                </Typography>\n                                <div className={classes.tableMain}>\n                                    <table>\n                                        <tr>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.name'}\n                                                    defaultMessage='Application Name'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.api.'\n                                                    + 'credentials.subscribed.apps.tier'}\n                                                    defaultMessage='Throttling Tier'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.status'}\n                                                    defaultMessage='Application Status'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.action'}\n                                                    defaultMessage='Actions'\n                                                />\n                                            </th>\n                                        </tr>\n                                        {subscribedApplications.map((app, index) => (\n                                            <SubscriptionTableRow\n                                                key={app.id}\n                                                loadInfo={this.loadInfo}\n                                                isKeyManagerAllowed={this.isKeyManagerAllowed}\n                                                handleSubscriptionDelete={this.handleSubscriptionDelete}\n                                                selectedAppId={selectedAppId}\n                                                updateSubscriptionData={updateSubscriptionData}\n                                                selectedKeyType={selectedKeyType}\n                                                app={app}\n                                                index={index}\n                                                applicationOwner={applicationOwner}\n                                                hashEnabled={hashEnabled}\n                                            />\n                                        ))}\n                                    </table>\n                                </div>\n                            </>\n                        )}\n                    </>\n                );\n            }\n        };\n        return (\n            <Grid container>\n                <Grid item md={12} lg={11}>\n                    <Grid container spacing={2}>\n                        <Grid item md={12}>\n                            {api.advertiseInfo && api.advertiseInfo.advertised\n                                && api.advertiseInfo.originalDevPortalUrl && (\n                                <OriginalDevportalDetails\n                                    classes={classes}\n                                    originalDevportalUrl={api.advertiseInfo.originalDevPortalUrl}\n                                />\n                            )}\n                            {api.tiers.length > 0 ? (\n                                <>\n                                    <Typography\n                                        onClick={this.handleExpandClick}\n                                        variant='h4'\n                                        component='div'\n                                        className={classes.titleSub}\n                                    >\n                                        {applicationsAvailable.length > 0 && (\n                                            <Link\n                                                to={(isOnlyMutualSSL || isOnlyBasicAuth\n                                                    || !isSetAllorResidentKeyManagers) ? null\n                                                    : `/apis/${api.id}/credentials/wizard`}\n                                                style={!api.isSubscriptionAvailable\n                                                    ? { pointerEvents: 'none' } : null}\n                                                className={classes.addLinkWrapper}\n                                                component={RouterLink}\n                                            >\n                                                <Button\n                                                    color='secondary'\n                                                    disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL\n                                                    || isOnlyBasicAuth\n                                                    || !isSetAllorResidentKeyManagers}\n                                                    size='small'\n                                                >\n                                                    <Icon>add_circle_outline</Icon>\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.Credentials.'\n                                                        + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                                        defaultMessage='Subscription &amp; Key Generation Wizard'\n                                                    />\n                                                </Button>\n                                            </Link>\n                                        )}\n                                    </Typography>\n                                    <Paper elevation={0} className={classes.paper}>\n                                        <Typography variant='body2' className={classes.descWrapper}>\n                                            <FormattedMessage\n                                                id='Apis.Details.Credentials.Credentials.'\n                                                defaultMessage={`An application is primarily used to decouple the \n                                                consumer from the APIs. It allows you to generate and use a single \n                                                key for multiple APIs and subscribe multiple times to a single API \n                                                with different SLA levels.`}\n                                            />\n                                        </Typography>\n                                        {renderCredentialInfo()}\n                                    </Paper>\n                                </>\n                            ) : (\n                                <Paper elevation={0} className={classes.paper}>\n                                    <InlineMessage type='info' className={classes.dialogContainer}>\n                                        <Typography component='p'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Creadentials.credetials.no.tiers'\n                                                defaultMessage='No tiers are available for the API.'\n                                            />\n                                        </Typography>\n                                    </InlineMessage>\n                                </Paper>\n                            )}\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nCredentials.propTypes = {\n    classes: PropTypes.shape({\n        contentWrapper: PropTypes.string,\n        titleSub: PropTypes.string,\n        tableMain: PropTypes.string,\n        th: PropTypes.string,\n        paper: PropTypes.string,\n        descWrapper: PropTypes.string,\n        generateCredentialWrapper: PropTypes.string,\n        credentialBoxWrapper: PropTypes.string,\n        credentialBox: PropTypes.string,\n        buttonElm: PropTypes.string,\n        dialogContainer: PropTypes.string,\n    }).isRequired,\n    history: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\nCredentials.contextType = ApiContext;\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Credentials));\n"],"sourceRoot":""}