{"version":3,"sources":["webpack:///./source/src/app/components/Apis/Details/GraphQLConsole/QueryComplexityView.jsx","webpack:///./source/src/app/components/Apis/Details/GraphQLConsole/GraphQLUI.jsx","webpack:///./source/src/app/components/Apis/Details/GraphQLConsole/FormDialogBase.jsx","webpack:///./source/src/app/components/Apis/Details/GraphQLConsole/AddEditAdditionalHeaders.jsx","webpack:///./source/src/app/components/Apis/Details/GraphQLConsole/DeleteHeader.jsx","webpack:///./source/src/app/components/Apis/Details/GraphQLConsole/AdditionalHeaders.jsx","webpack:///./source/src/app/components/Apis/Details/GraphQLConsole/GraphQLConsole.jsx"],"names":["useStyles","makeStyles","theme","root","width","title","fontSize","typography","pxToRem","fontWeight","flexBasis","flexShrink","marginTop","spacing","marginBottom","marginLeft","marginRight","heading","fontWeightRegular","column","QueryComplexityView","props","classes","api","useContext","ApiContext","open","setOpen","typelist","setTypeList","useState","state","setState","useEffect","apiId","id","Api","getGraphqlPoliciesComplexity","then","res","list","type","Set","map","respond","length","getGraphqlPoliciesComplexityTypes","array","typeList","fieldList","ob","obj","field","complexityValue","push","getDefaultComplexity","Progress","className","style","display","position","defaultMessage","Button","size","onClick","Divider","maxHeight","overflow","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","Typography","ExpansionPanelDetails","propTypes","PropTypes","isRequired","func","buildSchema","require","GraphQLUI","authorizationHeader","URLs","securitySchemeType","accessTokenProvider","additionalHeaders","schema","setSchema","query","setQuery","isExplorerOpen","setIsExplorerOpen","graphiqlEl","useRef","React","apiID","getGraphQLSchemaByAPIId","graphqlSchemaObj","data","parameters","handleClick","handleToggleExplorer","newExplorerIsOpen","Box","Collapse","in","timeout","unmountOnExit","onEdit","explorerIsOpen","onToggleExplorer","height","flexGrow","ref","fetcher","wsUrl","token","advertiseInfo","advertised","headers","forEach","header","name","value","createGraphiQLFetcher","url","https","legacyWsClient","SubscriptionClient","reconnect","lazy","queryFetcher","wss","onEditQuery","Toolbar","current","handlePrettifyQuery","label","handleToggleHistory","shape","paper","string","arrayOf","element","FormDialogBase","children","icon","triggerButtonText","saveButtonText","triggerButtonProps","formSaveCallback","dialogOpenCallback","triggerIconProps","saving","setSaving","handleClickOpen","handleClose","IconButton","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogActions","savedPromise","Alert","success","catch","e","error","finally","color","variant","disabled","CircularProgress","defaultProps","component","palette","dark","AddEditAdditionalHeaders","intl","useIntl","callBack","item","initName","initValue","setName","setValue","validating","setValidating","onChange","target","fieldValue","hasErrors","fieldName","validatingActive","undefined","formatMessage","formHasErrors","DialogContentText","TextField","margin","fullWidth","multiline","helperText","row","number","DeleteHeader","flex","alignItems","secondaryHeading","text","secondary","table","background","expandContentRoot","flexDirection","subsubTitle","alert","hr","border","descriptionBox","AdditionalHeaders","setAdditionalHeaders","expanded","setExpanded","deleteItem","updatedAdditionalHeaders","cloneDeep","i","splice","updateItem","originalItem","panel","event","isExpanded","light","customDivider","m","newItem","Math","random","toString","substring","Date","now","Table","aria-label","TableHead","TableRow","TableCell","TableBody","key","headerName","scope","actionColumn","dataRow","buttonIcon","padding","grid","paddingRight","justifyContent","userNotificationPaper","titleSub","paddingTop","paddingBottom","GraphQLConsole","environmentObject","endpointURLs","setURLs","setSecurityScheme","notFound","setNotFound","username","setUsername","password","setPassword","selectedEnvironment","setSelectedEnvironment","environments","setEnvironments","scopes","setScopes","productionAccessToken","setProductionAccessToken","sandboxAccessToken","setSandboxAccessToken","selectedKeyType","setSelectedKey","sandboxApiKey","setSandboxApiKey","productionApiKey","setProductionApiKey","advAuthHeader","setAdvAuthHeader","advAuthHeaderValue","setAdvAuthHeaderValue","selectedEndpoint","setSelectedEndpoint","keys","setKeys","user","AuthManager","getUser","isAdvertised","updateAccessToken","accessToken","get","generateUrls","urlJson","http","ws","protocol","split","getAPIById","apiResponse","apiData","environment","endpoint","environmentName","displayName","environmentDisplayName","scopeList","status","isApiKeyEnabled","securityScheme","includes","Paper","Grid","container","md","Icon","TryOutController","setSelectedKeyType","selectedKey","isUpdateToken","convertToPostman","graphQL","URL","converter","convert","result","console","log","urlValue","results","output","variable","outputData","fileDownload","JSON","stringify","ml","apiExternalProductionEndpoint","apiExternalSandboxEndpoint","getURLs","btoa"],"mappings":"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","file":"GraphQLConsole.838099c23d9ee2aae3de.bundle.js","sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport { ApiContext } from '../ApiContext';\nimport Api from '../../../../data/api';\nimport Progress from '../../../Shared/Progress';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    title: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: 'bold',\n        flexBasis: '50%',\n        flexShrink: 0,\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        marginLeft: theme.spacing(4),\n        marginRight: theme.spacing(1),\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: theme.typography.fontWeightRegular,\n        flexBasis: '50%',\n        flexShrink: 0,\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    column: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: theme.typography.fontWeightRegular,\n        flexBasis: '33.33%',\n        marginLeft: theme.spacing(1),\n    },\n}));\n\n/**\n * This component retrieve complexity details of API\n * @param {*} props The props passed to the layout\n */\n\nexport default function QueryComplexityView(props) {\n    const classes = useStyles();\n    const { api } = useContext(ApiContext);\n    const { open, setOpen } = props;\n    const [typelist, setTypeList] = useState([]);\n    const [state, setState] = useState(null);\n\n    /**\n     * If no complexity is defined for fields,Get default complexity value of 1.\n     */\n    function getDefaultComplexity() {\n        const apiId = api.id;\n        const apiClient = new Api();\n        const promisedComplexityType = apiClient.getGraphqlPoliciesComplexityTypes(apiId);\n        promisedComplexityType\n            .then((res) => {\n                const array = [];\n                res.typeList.map((respond) => {\n                    respond.fieldList.map((ob) => {\n                        const obj = {};\n                        obj.type = respond.type;\n                        obj.field = ob;\n                        obj.complexityValue = 1;\n                        array.push(obj);\n                        return ob;\n                    });\n                    return array;\n                });\n                setState(array);\n                const type = [...new Set(array.map((respond) => respond.type))];\n                setTypeList(type);\n            });\n    }\n\n    useEffect(() => {\n        const apiId = api.id;\n        const apiClient = new Api();\n        const promisedComplexity = apiClient.getGraphqlPoliciesComplexity(apiId);\n        promisedComplexity\n            .then((res) => {\n                setState(res.list);\n                const type = [...new Set(res.list.map((respond) => respond.type))];\n                setTypeList(type);\n                if (res.list.length === 0) {\n                    getDefaultComplexity();\n                }\n            });\n    }, []);\n\n    const handleClose = () => {\n        setOpen(!open);\n    };\n\n    if (state === null) {\n        return <Progress />;\n    }\n    return (\n        <>\n            <div>\n                <div className={classes.title} style={{ display: 'flex', position: 'relative' }}>\n                    <div>\n                        <FormattedMessage\n                            id='Apis.Details.GraphQLConsole.QueryComplexityView.title'\n                            defaultMessage='Custom Complexity Values'\n                        />\n                    </div>\n                    <Button size='small' onClick={handleClose}>\n                        <CloseIcon />\n                    </Button>\n                </div>\n                <Divider />\n                <div\n                    className={classes.root}\n                    style={{ maxHeight: '740px', overflow: 'scroll' }}\n                >\n                    <div>\n                        {typelist.map((res) => (\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls='panel1a-content'\n                                    id='panel1a-header'\n                                >\n                                    <Typography className={classes.heading}>\n                                        {res}\n                                    </Typography>\n                                </ExpansionPanelSummary>\n                                <Divider />\n                                {state.map((respond) => ((respond.type === res) && (\n                                    <ExpansionPanelDetails>\n                                        <div className={classes.column}>\n                                            {respond.field}\n                                            {':'}\n                                        </div>\n                                        <div className={classes.column}>\n                                            {respond.complexityValue}\n                                        </div>\n                                    </ExpansionPanelDetails>\n                                )))}\n                            </ExpansionPanel>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nQueryComplexityView.propTypes = {\n    open: PropTypes.isRequired,\n    setOpen: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useState, useEffect, useRef, useContext,\n} from 'react';\nimport GraphiQL from 'graphiql';\nimport 'graphiql/graphiql.css';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport GraphiQLExplorer from 'graphiql-explorer';\nimport Collapse from '@material-ui/core/Collapse';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\nimport { createGraphiQLFetcher } from '@graphiql/toolkit';\nimport { ApiContext } from '../ApiContext';\nimport Api from '../../../../data/api';\nimport QueryComplexityView from './QueryComplexityView';\n\nimport Progress from '../../../Shared/Progress';\n\nconst { buildSchema } = require('graphql');\n\n/**\n *\n * @param {*} props\n */\nexport default function GraphQLUI(props) {\n    const {\n        authorizationHeader,\n        URLs,\n        securitySchemeType,\n        accessTokenProvider,\n        additionalHeaders,\n    } = props;\n    const { api } = useContext(ApiContext);\n    const [schema, setSchema] = useState(null);\n    const [query, setQuery] = useState('');\n    const [isExplorerOpen, setIsExplorerOpen] = useState(false);\n    const graphiqlEl = useRef(null);\n    const [open, setOpen] = React.useState(true);\n\n    useEffect(() => {\n        const apiID = api.id;\n        const apiClient = new Api();\n        const promiseGraphQL = apiClient.getGraphQLSchemaByAPIId(apiID);\n        promiseGraphQL\n            .then((res) => {\n                const graphqlSchemaObj = buildSchema(res.data);\n                setSchema(graphqlSchemaObj);\n            });\n    }, []);\n\n    const parameters = {};\n\n    const handleClick = () => {\n        setOpen(!open);\n    };\n\n    const handleToggleExplorer = () => {\n        const newExplorerIsOpen = !isExplorerOpen;\n        parameters.isExplorerOpen = newExplorerIsOpen;\n        setIsExplorerOpen(newExplorerIsOpen);\n    };\n\n    /**\n     * Get subscription fetcher.\n     * @param {string} wsUrl subscription websocket URL\n     * @return {string} The subscription fetcher\n     */\n    function queryFetcher(wsUrl) {\n        let token;\n        if (api.advertiseInfo && api.advertiseInfo.advertised) {\n            token = accessTokenProvider();\n        } else if (authorizationHeader === 'apikey') {\n            token = accessTokenProvider();\n        } else if (securitySchemeType === 'BASIC') {\n            token = 'Basic ' + accessTokenProvider();\n        } else {\n            token = 'Bearer ' + accessTokenProvider();\n        }\n\n        const headers = {\n            [authorizationHeader]: token,\n        };\n\n        additionalHeaders.forEach((header) => {\n            headers[header.name] = header.value;\n        });\n\n        return createGraphiQLFetcher({\n            headers,\n            url: URLs ? URLs.https : null,\n            legacyWsClient: new SubscriptionClient(wsUrl + '?access_token=' + accessTokenProvider(), { reconnect: false, lazy: true }),\n        });\n    }\n\n    if ({ schema } === null) {\n        return <Progress />;\n    } else {\n        return (\n            <>\n                <div>\n                    <Box display='flex'>\n                        <Box display='flex'>\n                            <Collapse in={!open} timeout='auto' unmountOnExit>\n                                <QueryComplexityView\n                                    open={open}\n                                    setOpen={setOpen}\n                                />\n                            </Collapse>\n                        </Box>\n                        <Box display='flex' width={1}>\n                            <Box display='flex'>\n                                <GraphiQLExplorer\n                                    schema={schema}\n                                    query={query}\n                                    onEdit={setQuery}\n                                    explorerIsOpen={isExplorerOpen}\n                                    onToggleExplorer={handleToggleExplorer}\n                                />\n                            </Box>\n                            <Box display='flex' height='800px' flexGrow={1}>\n                                <GraphiQL\n                                    ref={graphiqlEl}\n                                    fetcher={(queryFetcher(URLs && URLs.wss))}\n                                    schema={schema}\n                                    query={query}\n                                    onEditQuery={setQuery}\n                                >\n                                    <GraphiQL.Toolbar>\n                                        <GraphiQL.Button\n                                            onClick={() => graphiqlEl.current.handlePrettifyQuery()}\n                                            label='Prettify'\n                                            title='Prettify Query (Shift-Ctrl-P)'\n                                        />\n                                        <GraphiQL.Button\n                                            onClick={() => graphiqlEl.current.handleToggleHistory()}\n                                            label='History'\n                                            title='Show History'\n                                        />\n                                        <GraphiQL.Button\n                                            onClick={() => setIsExplorerOpen(!isExplorerOpen)}\n                                            label='Explorer'\n                                            title='Toggle Explorer'\n                                        />\n                                        <GraphiQL.Button\n                                            onClick={handleClick}\n                                            label='Complexity Analysis'\n                                            title='View Field`s Complexity Values'\n                                        />\n                                    </GraphiQL.Toolbar>\n\n                                </GraphiQL>\n                            </Box>\n                        </Box>\n                    </Box>\n                </div>\n            </>\n        );\n    }\n}\n\nGraphQLUI.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n    }).isRequired,\n    additionalHeaders: PropTypes.shape({\n        array: PropTypes.arrayOf(PropTypes.element).isRequired,\n    }).isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Alert from 'AppComponents/Shared/Alert';\n\n/**\n * Render base for dialogs.\n * @returns {JSX} Header AppBar components.\n */\nfunction FormDialogBase({\n    title,\n    children,\n    icon,\n    triggerButtonText,\n    saveButtonText,\n    triggerButtonProps,\n    formSaveCallback,\n    dialogOpenCallback,\n    triggerIconProps,\n}) {\n    const [open, setOpen] = React.useState(false);\n    const [saving, setSaving] = useState(false);\n\n    const handleClickOpen = () => {\n        dialogOpenCallback();\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const saveTriggerd = () => {\n        const savedPromise = formSaveCallback();\n        if (typeof savedPromise === 'function') {\n            savedPromise(setOpen);\n        } else if (savedPromise) {\n            setSaving(true);\n            savedPromise.then((data) => {\n                Alert.success(data);\n            }).catch((e) => {\n                Alert.error(e);\n            }).finally(() => {\n                setSaving(false);\n                handleClose();\n            });\n        }\n    };\n\n    return (\n        <>\n            {icon && (\n                <IconButton {...triggerIconProps} onClick={handleClickOpen}>\n                    {icon}\n                </IconButton>\n            )}\n            {triggerButtonText && (\n                // eslint-disable-next-line react/jsx-props-no-spreading\n                <Button {...triggerButtonProps} onClick={handleClickOpen}>\n                    {triggerButtonText}\n                </Button>\n            )}\n\n            <Dialog open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\n                <DialogTitle id='form-dialog-title'>{title}</DialogTitle>\n                <DialogContent>\n                    {children}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>\n                        Cancel\n                    </Button>\n                    <Button onClick={saveTriggerd} color='primary' variant='contained' disabled={saving}>\n                        {saving ? (<CircularProgress size={16} />) : (<>{saveButtonText}</>)}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\nFormDialogBase.defaultProps = {\n    dialogOpenCallback: () => {},\n    triggerButtonProps: {\n        variant: 'contained',\n        color: 'primary',\n    },\n    triggerIconProps: {\n        color: 'primary',\n        component: 'span',\n    },\n};\n\nFormDialogBase.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.element.isRequired,\n    icon: PropTypes.element.isRequired,\n    triggerButtonText: PropTypes.string.isRequired,\n    saveButtonText: PropTypes.string.isRequired,\n    triggerButtonProps: PropTypes.shape({}),\n    triggerIconProps: PropTypes.shape({}),\n    formSaveCallback: PropTypes.func.isRequired,\n    dialogOpenCallback: PropTypes.func,\n};\n\nexport default FormDialogBase;\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport FormDialogBase from 'AppComponents/Apis/Details/GraphQLConsole/FormDialogBase';\nimport TextField from '@material-ui/core/TextField';\nimport CreateIcon from '@material-ui/icons/Create';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    error: {\n        color: theme.palette.error.dark,\n    },\n}));\n\n/**\n * Render delete dialog box.\n * @param {JSON} props component props.\n * @returns {JSX} Loading animation.\n */\nfunction AddEditAdditionalHeaders(props) {\n    const intl = useIntl();\n    const classes = useStyles();\n    const { callBack, item } = props;\n    let initName = '';\n    let initValue = '';\n\n    if (item != null) {\n        initName = item.name;\n        initValue = item.value;\n    }\n\n    const [name, setName] = useState(initName);\n    const [value, setValue] = useState(initValue);\n    const [validating, setValidating] = useState(false);\n    const onChange = (e) => {\n        const { target: { name: field, value: fieldValue } } = e;\n        switch (field) {\n            case 'name':\n                setName(fieldValue);\n                break;\n            case 'value':\n                setValue(fieldValue);\n                break;\n            default:\n                break;\n        }\n    };\n\n    const hasErrors = (fieldName, fieldValue, validatingActive) => {\n        let error = false;\n        if (!validatingActive) {\n            return (false);\n        }\n        switch (fieldName) {\n            case 'name':\n                error = fieldValue === '' ? fieldName + ' is Empty' : false;\n                break;\n            case 'value':\n                error = fieldValue === '' ? fieldName + ' is Empty' : false;\n                break;\n            default:\n                break;\n        }\n        return error;\n    };\n    const formHasErrors = (validatingActive = false) => {\n        if (hasErrors('name', name, validatingActive)\n        || hasErrors('value', value, validatingActive)) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n    const formSaveCallback = () => {\n        setValidating(true);\n        if (!formHasErrors(true)) {\n            return ((setOpen) => {\n                callBack({ name, value }, item);\n                setOpen(false);\n            });\n        }\n        return false;\n    };\n    return (\n        <FormDialogBase\n            title={item === undefined\n                ? `${intl.formatMessage({\n                    id: 'GraphQL.Devportal.Tryout.Additional.header.add.new',\n                    defaultMessage: 'Add New ',\n                })}`\n                : `${intl.formatMessage({\n                    id: 'GraphQL.Devportal.Tryout.Additional.header.edit',\n                    defaultMessage: 'Edit ',\n                })}`}\n            saveButtonText={intl.formatMessage({\n                id: 'GraphQL.Devportal.Tryout.Additional.header.dialog.btn.save',\n                defaultMessage: 'Save',\n            })}\n            triggerButtonText={item ? null : intl.formatMessage({\n                id: 'GraphQL.Devportal.Tryout.Additional.header.dialog.trigger.add',\n                defaultMessage: 'Add',\n            })}\n            icon={item ? <CreateIcon /> : null}\n            triggerButtonProps={{\n                color: 'default',\n                variant: 'contained',\n                size: 'small',\n            }}\n            formSaveCallback={formSaveCallback}\n        >\n            <DialogContentText>\n                <Typography variant='caption'>\n                    <FormattedMessage\n                        id='GraphQL.Devportal.Tryout.Addtional.headers.help'\n                        defaultMessage='This configuration is used to add additional Headers.'\n                    />\n                </Typography>\n            </DialogContentText>\n            <TextField\n                margin='dense'\n                name='name'\n                value={item === undefined ? null : name}\n                onChange={onChange}\n                label={(\n                    <span>\n                        <FormattedMessage\n                            id='GraphQL.Devportal.Tryout.Additional.header.form.name'\n                            defaultMessage='Header Name'\n                        />\n                        <span className={classes.error}>*</span>\n                    </span>\n                )}\n                fullWidth\n                multiline\n                helperText={hasErrors('name', name, validating) || intl.formatMessage({\n                    id: 'GraphQL.Devportal.Tryout.Additional.header.form.name.help',\n                    defaultMessage: 'Provide Name',\n                })}\n                variant='outlined'\n                error={hasErrors('name', name, validating)}\n            />\n            <TextField\n                margin='dense'\n                name='value'\n                value={item === undefined ? null : value}\n                onChange={onChange}\n                label={(\n                    <span>\n                        <FormattedMessage\n                            id='GraphQL.Devportal.Tryout.Additional.header.form.value'\n                            defaultMessage='Header Value'\n                        />\n\n                        <span className={classes.error}>*</span>\n                    </span>\n                )}\n                fullWidth\n                multiline\n                helperText={hasErrors('value', value, validating) || intl.formatMessage({\n                    id: 'GraphQL.Devportal.Tryout.Additional.header.form.value.help',\n                    defaultMessage: 'Provide Value',\n                })}\n                variant='outlined'\n                error={hasErrors('value', value, validating)}\n            />\n        </FormDialogBase>\n    );\n}\nAddEditAdditionalHeaders.propTypes = {\n    row: PropTypes.shape({\n        id: PropTypes.number.isRequired,\n    }).isRequired,\n};\nexport default AddEditAdditionalHeaders;\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FormDialogBase from 'AppComponents/Apis/Details/GraphQLConsole/FormDialogBase';\n\n/**\n * Render delete dialog box.\n * @param {JSON} props component props.\n * @returns {JSX} Loading animation.\n */\nfunction DeleteHeader({ item, callBack }) {\n    const formSaveCallback = () => {\n        return (setOpen) => {\n            callBack(item);\n            setOpen(false);\n        };\n    };\n    return (\n        <FormDialogBase\n            title='Delete Additional Header'\n            saveButtonText='Delete'\n            icon={<DeleteIcon />}\n            formSaveCallback={formSaveCallback}\n        >\n            <DialogContentText>\n                {item.name}\n                <FormattedMessage\n                    id='Throttling.Advanced.Delete.will.be.deleted'\n                    defaultMessage=' will be deleted.'\n                />\n\n            </DialogContentText>\n        </FormDialogBase>\n    );\n}\nDeleteHeader.propTypes = {\n    row: PropTypes.shape({}).isRequired,\n    callBack: PropTypes.func.isRequired,\n    item: PropTypes.shape({\n        name: PropTypes.shape({}).isRequired,\n    }).isRequired,\n};\nexport default DeleteHeader;\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Box from '@material-ui/core/Box';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport cloneDeep from 'lodash.clonedeep';\nimport AddEditAdditionalHeaders from 'AppComponents/Apis/Details/GraphQLConsole/AddEditAdditionalHeaders';\nimport DeleteHeader from 'AppComponents/Apis/Details/GraphQLConsole/DeleteHeader';\nimport Divider from '@material-ui/core/Divider';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        marginBottom: 20,\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        flexBasis: '33.33%',\n        flexShrink: 0,\n        flex: 1,\n        alignItems: 'center',\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n        display: 'flex',\n        alignItems: 'center',\n    },\n    table: {\n        marginBottom: 40,\n        background: '#efefef',\n        '& th': {\n            background: '#ccc',\n        },\n    },\n    expandContentRoot: {\n        flexDirection: 'column',\n    },\n    subsubTitle: {\n        fontSize: '0.81rem',\n    },\n    alert: {\n        flex: 1,\n    },\n    hr: {\n        border: 'solid 1px #efefef',\n        width: '100%',\n    },\n    descriptionBox: {\n        marginLeft: theme.spacing(1),\n    },\n}));\n\n/**\n * Create UUID\n * @returns {string} random uuid string.\n */\nfunction getUUID() {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n}\n/**\n * Render a list\n * @returns {JSX} Header AppBar components.\n * @param {JSON} props Provides props from parent\n */\nfunction AdditionalHeaders(props) {\n    const classes = useStyles();\n    const { additionalHeaders, setAdditionalHeaders } = props;\n    const [expanded, setExpanded] = React.useState(false);\n\n    const handleChange = (panel) => (event, isExpanded) => {\n        setExpanded(isExpanded ? panel : false);\n    };\n    const getNewItem = () => {\n        return ({\n            id: '',\n            name: '',\n            value: '',\n        });\n    };\n\n    const addItem = (item) => {\n        const { name, value } = item;\n        const newItem = getNewItem();\n        newItem.id = getUUID();\n        newItem.name = name;\n        newItem.value = value;\n        const updatedAdditionalHeaders = cloneDeep(additionalHeaders);\n        updatedAdditionalHeaders.push(newItem);\n        setAdditionalHeaders(updatedAdditionalHeaders);\n    };\n\n    const deleteItem = (item) => {\n        const updatedAdditionalHeaders = cloneDeep(additionalHeaders);\n        for (let i = 0; i < updatedAdditionalHeaders.length; i++) {\n            if (updatedAdditionalHeaders[i].id === item.id) {\n                updatedAdditionalHeaders.splice(i, 1);\n            }\n        }\n        setAdditionalHeaders(updatedAdditionalHeaders);\n    };\n\n    const updateItem = (item, originalItem) => {\n        const { name, value } = item;\n        const updatedAdditionalHeaders = cloneDeep(additionalHeaders);\n        for (let i = 0; i < updatedAdditionalHeaders.length; i++) {\n            if (updatedAdditionalHeaders[i].id === originalItem.id) {\n                updatedAdditionalHeaders[i].name = name;\n                updatedAdditionalHeaders[i].value = value;\n            }\n        }\n        setAdditionalHeaders(updatedAdditionalHeaders);\n    };\n\n    return (\n        <div className={classes.root}>\n            <ExpansionPanel expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls='panel1bh-content'\n                    id='panel1bh-header'\n                >\n                    <div className={classes.heading} variant='body2'>\n                        {!expanded && (\n                            <Typography variant='caption'>\n                                Add additional headers\n                            </Typography>\n                        )}\n                    </div>\n                    {!expanded && (\n                        <Typography className={classes.secondaryHeading}>\n                            Expand to edit\n                        </Typography>\n                    )}\n                    {expanded && (\n                        <Typography className={classes.secondaryHeading}>\n                            Hide group\n                        </Typography>\n                    )}\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails classes={{ root: classes.expandContentRoot }}>\n                    <>\n                        <Divider light className={classes.customDivider} />\n                        <Box component='div' marginLeft={1} display='flex' alignItems='center'>\n                            <Box flex={1}>\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        id='GraphQL.Devportal.Tryout.Addtional.headers.help'\n                                        defaultMessage='This configuration is used to add additional Headers.'\n                                    />\n                                </Typography>\n                            </Box>\n                            <Box component='span' m={1}>\n                                <AddEditAdditionalHeaders\n                                    callBack={addItem}\n                                />\n\n                            </Box>\n                        </Box>\n\n                        {additionalHeaders && (\n                            <Box component='div' marginLeft={1}>\n                                <Table className={classes.table} size='small' aria-label='a dense table'>\n                                    <TableHead>\n                                        <TableRow>\n                                            <TableCell>\n                                                <>\n                                                    <FormattedMessage\n                                                        id='GraphQL.Devportal.Tryout.Additional.headers.header.name'\n                                                        defaultMessage='Header Name'\n                                                    />\n                                                </>\n                                            </TableCell>\n                                            <TableCell>\n                                                <>\n                                                    <FormattedMessage\n                                                        id='GraphQL.Devportal.Tryout.Additional.headers.header.value'\n                                                        defaultMessage='Header Value'\n                                                    />\n                                                </>\n                                            </TableCell>\n                                            <TableCell />\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {additionalHeaders.map((item) => (\n                                            <TableRow key={item.headerName}>\n                                                <TableCell component='td' scope='row'>\n                                                    {item.name}\n                                                </TableCell>\n                                                <TableCell component='td' scope='row'>\n                                                    {item.value }\n                                                </TableCell>\n                                                <TableCell width={100} className={classes.actionColumn}>\n                                                    <Box display='flex'>\n                                                        <AddEditAdditionalHeaders\n                                                            item={item}\n                                                            callBack={updateItem}\n                                                        />\n                                                        <DeleteHeader\n                                                            item={item}\n                                                            callBack={deleteItem}\n                                                        />\n                                                    </Box>\n                                                </TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            </Box>\n                        )}\n                    </>\n                    <Divider />\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n\n        </div>\n    );\n}\nAdditionalHeaders.propTypes = {\n    dataRow: PropTypes.shape({\n        id: PropTypes.number.isRequired,\n    }).isRequired,\n    additionalHeaders: PropTypes.shape({\n        array: PropTypes.arrayOf(PropTypes.element).isRequired,\n    }).isRequired,\n};\nexport default AdditionalHeaders;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AuthManager from 'AppData/AuthManager';\nimport Icon from '@material-ui/core/Icon';\nimport fileDownload from 'js-file-download';\nimport converter from 'graphql-to-postman';\nimport Box from '@material-ui/core/Box';\nimport GraphQLUI from './GraphQLUI';\nimport TryOutController from '../ApiConsole/TryOutController';\nimport { ApiContext } from '../ApiContext';\nimport Api from '../../../../data/api';\nimport Progress from '../../../Shared/Progress';\nimport AdditionalHeaders from './AdditionalHeaders';\n\nconst useStyles = makeStyles((theme) => ({\n    buttonIcon: {\n        marginRight: 10,\n    },\n    paper: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n    grid: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n    userNotificationPaper: {\n        padding: theme.spacing(2),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(2),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n}));\n\nexport default function GraphQLConsole() {\n    const classes = useStyles();\n    const { api } = useContext(ApiContext);\n    const environmentObject = api.endpointURLs;\n    const [URLs, setURLs] = useState(environmentObject.length > 0 ? environmentObject[0].URLs : null);\n    const [securitySchemeType, setSecurityScheme] = useState('OAUTH');\n    const [notFound, setNotFound] = useState(false);\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [selectedEnvironment, setSelectedEnvironment] = useState();\n    const [environments, setEnvironments] = useState();\n    const [scopes, setScopes] = useState([]);\n    const [productionAccessToken, setProductionAccessToken] = useState();\n    const [sandboxAccessToken, setSandboxAccessToken] = useState();\n    const [selectedKeyType, setSelectedKey] = useState('PRODUCTION');\n    const [sandboxApiKey, setSandboxApiKey] = useState('');\n    const [productionApiKey, setProductionApiKey] = useState('');\n    const [advAuthHeader, setAdvAuthHeader] = useState('Authorization');\n    const [advAuthHeaderValue, setAdvAuthHeaderValue] = useState('');\n    const [selectedEndpoint, setSelectedEndpoint] = useState('PRODUCTION');\n    const [keys, setKeys] = useState([]);\n    const [additionalHeaders, setAdditionalHeaders] = useState([]);\n    const user = AuthManager.getUser();\n    const isAdvertised = api.advertiseInfo && api.advertiseInfo.advertised;\n\n    useEffect(() => {\n        const apiID = api.id;\n        const apiClient = new Api();\n        const promiseAPI = apiClient.getAPIById(apiID);\n\n        promiseAPI\n            .then((apiResponse) => {\n                const apiData = apiResponse.obj;\n                if (apiData.endpointURLs) {\n                    const environment = apiData.endpointURLs.map((endpoint) => {\n                        return { name: endpoint.environmentName, displayName: endpoint.environmentDisplayName };\n                    });\n                    setEnvironments(environment);\n                }\n                if (apiData.scopes) {\n                    const scopeList = apiData.scopes.map((scope) => { return scope.name; });\n                    setScopes(scopeList);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                }\n            });\n    }, []);\n\n    /**\n     * Load the access token for given key type\n     */\n    function updateAccessToken() {\n        let accessToken;\n        if (keys.get(selectedKeyType)) {\n            ({ accessToken } = keys.get(selectedKeyType).token);\n        }\n        if (selectedKeyType === 'PRODUCTION') {\n            setProductionAccessToken(accessToken);\n        } else {\n            setSandboxAccessToken(accessToken);\n        }\n    }\n\n    /**\n     * Generate the URLs object for third party APIs\n     * @param url endpoint URL\n     * @returns {{wss: null, http: null, https: null, ws: null}}\n     */\n    function generateUrls(url) {\n        const urlJson = {\n            http: null,\n            https: null,\n            ws: null,\n            wss: null,\n        };\n        const [protocol] = url.split('://');\n        if (protocol === 'http' || protocol === 'https' || protocol === 'ws' || protocol === 'wss') {\n            urlJson[protocol] = url;\n        }\n        return urlJson;\n    }\n\n    /**\n     * get the URLs object for GraphQL APIs\n     * @returns {*}\n     */\n    function getURLs() {\n        if (api.advertiseInfo && api.advertiseInfo.advertised) {\n            if (selectedEndpoint === 'PRODUCTION') {\n                return generateUrls(api.advertiseInfo.apiExternalProductionEndpoint);\n            } else if (selectedEndpoint === 'SANDBOX') {\n                return generateUrls(api.advertiseInfo.apiExternalSandboxEndpoint);\n            }\n        }\n        return URLs;\n    }\n\n    /**\n     * set Password\n     * @param {*} selectedKey\n     * @param {*} isUpdateToken\n     */\n    function setSelectedKeyType(selectedKey, isUpdateToken) {\n        if (isUpdateToken && !isAdvertised) {\n            setSelectedKey(selectedKey, updateAccessToken);\n        } else {\n            setSelectedKey(selectedKey);\n        }\n    }\n\n    function accessTokenProvider() {\n        if (isAdvertised) {\n            return advAuthHeaderValue;\n        }\n        if (securitySchemeType === 'BASIC') {\n            const credentials = username + ':' + password;\n            return btoa(credentials);\n        }\n        if (securitySchemeType === 'API-KEY') {\n            if (selectedKeyType === 'PRODUCTION') {\n                return productionApiKey;\n            } else {\n                return sandboxApiKey;\n            }\n        } else if (selectedKeyType === 'PRODUCTION') {\n            return productionAccessToken;\n        } else {\n            return sandboxAccessToken;\n        }\n    }\n\n    function grapgQLToPostman(graphQL, URL) {\n        converter.convert({\n            type: 'string',\n            data: graphQL,\n        }, {}, (error, result) => {\n            if (error) {\n                console.log(error);\n            } else {\n                const urlValue = URL.https;\n                const results = result;\n                results.output[0].data.variable[0].value = urlValue;\n                const outputData = results.output[0].data;\n                fileDownload(\n                    JSON.stringify(outputData),\n                    'postman collection',\n                );\n                console.log('Conversion success');\n            }\n        });\n    }\n\n    if (api == null) {\n        return <Progress />;\n    }\n    if (notFound) {\n        return 'API Not found !';\n    }\n    let isApiKeyEnabled = false;\n\n    let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n\n    if (api && api.securityScheme) {\n        isApiKeyEnabled = api.securityScheme.includes('api_key');\n        if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n            authorizationHeader = 'apikey';\n        }\n    }\n\n    if (isAdvertised) {\n        authorizationHeader = advAuthHeader;\n    }\n\n    return (\n        <>\n            <Typography variant='h4' className={classes.titleSub}>\n                <FormattedMessage id='Apis.Details.GraphQLConsole.GraphQLConsole.title' defaultMessage='Try Out' />\n            </Typography>\n            <Paper className={classes.paper}>\n                <Grid container className={classes.grid}>\n                    {!user && !isAdvertised && (\n                        <Grid item md={6}>\n                            <Paper className={classes.userNotificationPaper}>\n                                <Typography variant='h5' component='h3'>\n                                    <Icon>warning</Icon>\n                                    {' '}\n                                    <FormattedMessage id='notice' defaultMessage='Notice' />\n                                </Typography>\n                                <Typography component='p'>\n                                    <FormattedMessage\n                                        id='api.console.require.access.token'\n                                        defaultMessage={'You need an access token to try the API. Please log '\n                                            + 'in and subscribe to the API to generate an access token. If you already '\n                                            + 'have an access token, please provide it below.'}\n                                    />\n                                </Typography>\n                            </Paper>\n                        </Grid>\n                    )}\n                </Grid>\n                <TryOutController\n                    setSecurityScheme={setSecurityScheme}\n                    securitySchemeType={securitySchemeType}\n                    setSelectedEnvironment={setSelectedEnvironment}\n                    selectedEnvironment={selectedEnvironment}\n                    productionAccessToken={productionAccessToken}\n                    setProductionAccessToken={setProductionAccessToken}\n                    sandboxAccessToken={sandboxAccessToken}\n                    setSandboxAccessToken={setSandboxAccessToken}\n                    environments={environments}\n                    scopes={scopes}\n                    setUsername={setUsername}\n                    setPassword={setPassword}\n                    username={username}\n                    password={password}\n                    setSelectedKeyType={setSelectedKeyType}\n                    convertToPostman={grapgQLToPostman}\n                    selectedKeyType={selectedKeyType}\n                    setKeys={setKeys}\n                    setURLs={setURLs}\n                    setProductionApiKey={setProductionApiKey}\n                    setSandboxApiKey={setSandboxApiKey}\n                    productionApiKey={productionApiKey}\n                    sandboxApiKey={sandboxApiKey}\n                    environmentObject={environmentObject}\n                    setAdvAuthHeader={setAdvAuthHeader}\n                    setAdvAuthHeaderValue={setAdvAuthHeaderValue}\n                    advAuthHeader={advAuthHeader}\n                    advAuthHeaderValue={advAuthHeaderValue}\n                    setSelectedEndpoint={setSelectedEndpoint}\n                    selectedEndpoint={selectedEndpoint}\n                    api={api}\n                    URLs={URLs}\n                />\n                <Box display='flex' justifyContent='center'>\n                    <Box\n                        width='50%'\n                        display='flex'\n                        flexDirection='column'\n                    >\n                        <Box ml={-5} display='flex'>\n                            <Typography variant='h5' component='h3' color='textPrimary'>\n                                <FormattedMessage\n                                    id='api.console.gql.additional.headers'\n                                    defaultMessage='Additional Headers'\n                                />\n                            </Typography>\n                        </Box>\n                    </Box>\n                </Box>\n                <Grid container className={classes.grid}>\n                    <Grid item md={6}>\n                        <AdditionalHeaders\n                            setAdditionalHeaders={setAdditionalHeaders}\n                            additionalHeaders={additionalHeaders}\n                        />\n                    </Grid>\n                </Grid>\n            </Paper>\n            <Paper className={classes.paper}>\n                <GraphQLUI\n                    authorizationHeader={authorizationHeader}\n                    URLs={getURLs()}\n                    securitySchemeType={securitySchemeType}\n                    accessTokenProvider={accessTokenProvider}\n                    additionalHeaders={additionalHeaders}\n                />\n            </Paper>\n        </>\n    );\n}\n\nGraphQLConsole.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        root: PropTypes.string.isRequired,\n    }).isRequired,\n};\n"],"sourceRoot":""}