{"version":3,"sources":["webpack:///./source/src/app/components/Apis/Details/ApiConsole/CustomPadLock.jsx","webpack:///./source/src/app/components/Apis/Details/ApiConsole/SwaggerUI.jsx","webpack:///./source/src/app/components/Apis/Details/ApiConsole/ApiConsole.jsx"],"names":["CustomPadLock","props","BaseLayout","oldProps","spec","securityEnabled","useMemo","resourcePath","operation","reduce","a","v","toLowerCase","isSecurityEnabled","specPath","Grid","container","direction","justify","alignItems","item","md","Tooltip","title","id","defaultMessage","aria-label","IconButton","fontSize","React","memo","disableAuthorizeAndInfoPlugin","wrapComponents","info","authorizeBtn","authorizeOperationBtn","OperationSummary","original","SwaggerUI","accessTokenProvider","authorizationHeader","api","securitySchemeType","componentProps","validatorUrl","defaultModelsExpandDepth","docExpansion","requestInterceptor","req","url","context","patternToCheck","headers","advertiseInfo","advertised","endsWith","substring","length","includes","splitTokens","split","defaultModelExpandDepth","plugins","render","setRender","useState","layoutRender","setlayoutRender","useEffect","len","document","querySelectorAll","i","remove","querySelector","setAttribute","getElementById","parentNode","propTypes","PropTypes","func","isRequired","string","shape","ApiConsole","Component","constructor","super","this","state","username","password","scopes","selectedKeyType","keys","productionApiKey","sandboxApiKey","selectedKeyManager","advAuthHeader","advAuthHeaderValue","selectedEndpoint","bind","updateSwagger","setSecurityScheme","setSelectedEnvironment","setProductionAccessToken","setSandboxAccessToken","setUsername","setPassword","setSelectedKeyType","setSectedKeyManager","setSelectedKeyManager","setKeys","updateAccessToken","setProductionApiKey","setSandboxApiKey","converttopostman","convertToPostman","setAdvAuthHeader","setAdvAuthHeaderValue","setSelectedEndpoint","componentDidMount","apiID","user","AuthManager","getUser","apiData","environments","selectedEnvironment","swagger","apiClient","Api","getAPIById","then","apiResponse","obj","endpointURLs","map","endpoint","name","environmentName","displayName","environmentDisplayName","scopeList","scope","key","setState","getSwaggerByAPIIdAndEnvironment","getSwaggerByAPIId","swaggerResponse","defaultSecurityScheme","securityScheme","productionAccessToken","sandboxAccessToken","getSubscriptions","catch","error","status","notFound","isUpdateToken","selectedApplication","setServersSpec","serverUrl","schemes","protocol","host","fr","openapiToPostman","convert","type","data","err","conversionResult","result","fileDownload","JSON","stringify","output","collection","swaggerToPostman","console","log","accessToken","get","keyType","token","Application","application","getKeys","appKeys","btoa","environment","promiseSwagger","find","e","classes","downloadSwagger","downloadLink","encodeURIComponent","Progress","isApiKeyEnabled","swaggerSpec","openapi","servers","apiExternalProductionEndpoint","apiExternalSandboxEndpoint","Paper","className","paper","grid","userNotificationPaper","Typography","variant","component","Icon","TryOutController","URLs","xs","Button","size","onClick","icon","postmanIcon","width","height","buttonIcon","href","download","openapiinitiativeIcon","swaggerUIPaper","titleSub","iconify","contextType","ApiContext","withStyles","theme","marginRight","font","margin","spacing","padding","marginTop","marginBottom","paddingRight","justifyContent","marginLeft","paddingTop","paddingBottom","color","palette","getContrastText","background","default","backgroundColor","custom","apiDetailPages","swaggerUIBackground"],"mappings":"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","file":"APIConsole.e692d99b83731b72dbe6.bundle.js","sourcesContent":["/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useMemo } from 'react';\nimport 'swagger-ui-react/swagger-ui.css';\nimport LockIcon from '@material-ui/icons//Lock';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage } from 'react-intl';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\n\n/**\n *\n *\n * @export\n * @param {*} spec\n * @param {*} resourcePath\n * @returns\n */\nfunction isSecurityEnabled(spec, resourcePath) {\n    const operation = resourcePath.reduce((a, v) => a[v], spec);\n    return operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none';\n}\n\n/**\n *\n * Handles the resource level lock icon\n * @export\n * @param {*} BaseLayout\n * @param {*} props\n * @param {*} spec\n * @returns\n */\nfunction CustomPadLock(props) {\n    const {\n        BaseLayout, oldProps, spec,\n    } = props;\n    const securityEnabled = useMemo(() => isSecurityEnabled(spec, oldProps.specPath), []);\n\n    return (\n        <div>\n            <Grid container direction='row' justify='space-between' alignItems='center'>\n                <Grid item md={11}>\n                    <BaseLayout {...oldProps} />\n                </Grid>\n                <Grid item justify='flex-end' alignItems='right'>\n                    <Tooltip\n                        title={\n                            (securityEnabled)\n                                ? (\n                                    <FormattedMessage\n                                        id={'Apis.Details.Resources.components.Operation.disable.security'\n                                            + '.when.used.in.api.products'}\n                                        defaultMessage='Security enabled'\n                                    />\n                                )\n                                : (\n                                    <FormattedMessage\n                                        id='Apis.Details.Resources.components.enabled.security'\n                                        defaultMessage='No security'\n                                    />\n                                )\n                        }\n                        aria-label={(\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.Operation.security.operation'\n                                defaultMessage='Security '\n                            />\n                        )}\n                    >\n                        <IconButton\n                            aria-label='Security'\n                        >\n                            {(securityEnabled)\n                                ? <LockIcon fontSize='small' />\n                                : <LockOpenIcon fontSize='small' />}\n                        </IconButton>\n                    </Tooltip>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nexport default React.memo(CustomPadLock);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport 'swagger-ui-react/swagger-ui.css';\nimport SwaggerUILib from 'swagger-ui-react';\nimport CustomPadLock from './CustomPadLock';\n\nconst disableAuthorizeAndInfoPlugin = function (spec) {\n    return {\n        wrapComponents: {\n            info: () => () => null,\n            authorizeBtn: () => () => null,\n            authorizeOperationBtn: () => () => null,\n            OperationSummary: (original) => (props) => {\n                return <CustomPadLock BaseLayout={original} oldProps={props} spec={spec} />;\n            },\n        },\n    };\n};\n\n/**\n *\n * @class SwaggerUI\n * @extends {Component}\n */\nconst SwaggerUI = (props) => {\n    const {\n        spec, accessTokenProvider, authorizationHeader, api, securitySchemeType,\n    } = props;\n\n    const componentProps = {\n        spec,\n        validatorUrl: null,\n        defaultModelsExpandDepth: -1,\n        docExpansion: 'list',\n        requestInterceptor: (req) => {\n            const { url } = req;\n            const { context } = api;\n            const patternToCheck = `${context}/*`;\n            if (authorizationHeader === 'apikey') {\n                req.headers[authorizationHeader] = accessTokenProvider();\n            } else if (securitySchemeType === 'BASIC') {\n                req.headers[authorizationHeader] = 'Basic ' + accessTokenProvider();\n            } else if (securitySchemeType === 'TEST') {\n                req.headers[authorizationHeader] = accessTokenProvider();\n            } else if (api.advertiseInfo && api.advertiseInfo.advertised && authorizationHeader !== '') {\n                req.headers[authorizationHeader] = accessTokenProvider();\n            } else {\n                req.headers[authorizationHeader] = 'Bearer ' + accessTokenProvider();\n            }\n            if (url.endsWith(patternToCheck)) {\n                req.url = url.substring(0, url.length - 2);\n            } else if (url.includes(patternToCheck + '?')) { // Check for query parameters.\n                const splitTokens = url.split('/*?');\n                req.url = splitTokens.length > 1 ? splitTokens[0] + '?' + splitTokens[1] : splitTokens[0];\n            }\n            return req;\n        },\n        defaultModelExpandDepth: -1,\n        plugins: [disableAuthorizeAndInfoPlugin(spec)],\n    };\n    const [render, setRender] = useState();\n    const [layoutRender, setlayoutRender] = useState();\n\n    useEffect(() => {\n        if (!layoutRender) return;\n        const len = document.querySelectorAll('.opblock .authorization__btn');\n        let i = 0;\n        for (; i < len.length; i++) {\n            len[i].remove();\n        }\n        document.querySelector('.schemes select').setAttribute('id', 'schemes');\n        document.getElementById('unlocked').parentNode.parentNode.remove();\n        setlayoutRender(false);\n    }, [layoutRender]);\n\n    useEffect(() => {\n        setlayoutRender(true);\n    }, [render]);\n\n    return (\n        <>\n            <SwaggerUILib {...componentProps} />\n            {setRender}\n        </>\n    );\n};\n\nSwaggerUI.propTypes = {\n    accessTokenProvider: PropTypes.func.isRequired,\n    authorizationHeader: PropTypes.string.isRequired,\n    api: PropTypes.shape({\n        context: PropTypes.string.isRequired,\n    }).isRequired,\n    spec: PropTypes.string.isRequired,\n};\nexport default SwaggerUI;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Icon from '@material-ui/core/Icon';\nimport AuthManager from 'AppData/AuthManager';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport postmanIcon from '@iconify/icons-simple-icons/postman';\nimport openapiinitiativeIcon from '@iconify/icons-simple-icons/openapiinitiative';\nimport { Icon as Icons } from '@iconify/react';\nimport fileDownload from 'js-file-download';\nimport openapiToPostman from 'openapi-to-postmanv2';\nimport swaggerToPostman from 'swagger2-postman2-converter';\nimport { ApiContext } from '../ApiContext';\nimport Progress from '../../../Shared/Progress';\nimport Api from '../../../../data/api';\nimport SwaggerUI from './SwaggerUI';\nimport TryOutController from './TryOutController';\nimport Application from '../../../../data/Application';\n\n/**\n * @inheritdoc\n * @param {*} theme theme\n */\nconst styles = (theme) => ({\n    iconify: {\n        marginRight: 10,\n        font: 24,\n    },\n    buttonIcon: {\n        marginRight: 10,\n    },\n    paper: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n    grid: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n    userNotificationPaper: {\n        padding: theme.spacing(2),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(2),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    swaggerUIPaper: {\n        backgroundColor: theme.custom.apiDetailPages.swaggerUIBackground,\n    },\n});\n\n/**\n *\n *\n * @class ApiConsole\n * @extends {React.Component}\n */\nclass ApiConsole extends React.Component {\n    /**\n     *Creates an instance of ApiConsole.\n     * @param {*} props properties\n     * @memberof ApiConsole\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            securitySchemeType: 'OAUTH',\n            username: '',\n            password: '',\n            scopes: [],\n            selectedKeyType: 'PRODUCTION',\n            keys: [],\n            productionApiKey: '',\n            sandboxApiKey: '',\n            selectedKeyManager: 'Resident Key Manager',\n            advAuthHeader: 'Authorization',\n            advAuthHeaderValue: '',\n            selectedEndpoint: 'PRODUCTION',\n        };\n        this.accessTokenProvider = this.accessTokenProvider.bind(this);\n        this.updateSwagger = this.updateSwagger.bind(this);\n        this.setSecurityScheme = this.setSecurityScheme.bind(this);\n        this.setSelectedEnvironment = this.setSelectedEnvironment.bind(this);\n        this.setProductionAccessToken = this.setProductionAccessToken.bind(this);\n        this.setSandboxAccessToken = this.setSandboxAccessToken.bind(this);\n        this.setUsername = this.setUsername.bind(this);\n        this.setPassword = this.setPassword.bind(this);\n        this.setSelectedKeyType = this.setSelectedKeyType.bind(this);\n        this.setSectedKeyManager = this.setSelectedKeyManager.bind(this);\n        this.setKeys = this.setKeys.bind(this);\n        this.updateAccessToken = this.updateAccessToken.bind(this);\n        this.setProductionApiKey = this.setProductionApiKey.bind(this);\n        this.setSandboxApiKey = this.setSandboxApiKey.bind(this);\n        this.converttopostman = this.convertToPostman.bind(this);\n        this.setAdvAuthHeader = this.setAdvAuthHeader.bind(this);\n        this.setAdvAuthHeaderValue = this.setAdvAuthHeaderValue.bind(this);\n        this.setSelectedEndpoint = this.setSelectedEndpoint.bind(this);\n    }\n\n    /**\n     * @memberof ApiConsole\n     */\n    componentDidMount() {\n        const { api } = this.context;\n        const apiID = api.id;\n        const user = AuthManager.getUser();\n        let apiData;\n        let environments;\n        let selectedEnvironment;\n        let swagger;\n        let productionAccessToken;\n        let sandboxAccessToken;\n\n        this.apiClient = new Api();\n        const promiseAPI = this.apiClient.getAPIById(apiID);\n\n        promiseAPI\n            .then((apiResponse) => {\n                apiData = apiResponse.obj;\n                if (apiData.endpointURLs) {\n                    environments = apiData.endpointURLs.map((endpoint) => {\n                        return { name: endpoint.environmentName, displayName: endpoint.environmentDisplayName };\n                    });\n                }\n                if (apiData.scopes) {\n                    const scopeList = apiData.scopes.map((scope) => { return scope.key; });\n                    this.setState({ scopes: scopeList });\n                }\n                if (environments && environments.length > 0) {\n                    selectedEnvironment = environments[0].name;\n                    return this.apiClient.getSwaggerByAPIIdAndEnvironment(apiID, selectedEnvironment);\n                } else {\n                    return this.apiClient.getSwaggerByAPIId(apiID);\n                }\n            })\n            .then((swaggerResponse) => {\n                swagger = swaggerResponse.obj;\n\n                let defaultSecurityScheme = 'OAUTH';\n                if (!apiData.securityScheme.includes('oauth2')) {\n                    defaultSecurityScheme = apiData.securityScheme.includes('api_key') ? 'API-KEY' : 'BASIC';\n                }\n\n                this.setState({\n                    api: apiData,\n                    swagger,\n                    environments,\n                    productionAccessToken,\n                    sandboxAccessToken,\n                    selectedEnvironment,\n                    securitySchemeType: defaultSecurityScheme,\n                });\n                if (user != null) {\n                    return this.apiClient.getSubscriptions(apiID);\n                } else {\n                    return null;\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     * Set SecurityScheme value\n     * @memberof ApiConsole\n     */\n    setSecurityScheme(securityScheme) {\n        this.setState({ securitySchemeType: securityScheme });\n    }\n\n    /**\n     * Set Selected Environment\n     * @memberof ApiConsole\n     */\n    setSelectedEnvironment(selectedEnvironment) {\n        this.setState({ selectedEnvironment });\n    }\n\n    /**\n     * Set Production Access Token\n     * @memberof ApiConsole\n     */\n    setProductionAccessToken(productionAccessToken) {\n        this.setState({ productionAccessToken });\n    }\n\n    /**\n     * Set Sandbox Access Token\n     * @memberof ApiConsole\n     */\n    setSandboxAccessToken(sandboxAccessToken) {\n        this.setState({ sandboxAccessToken });\n    }\n\n    /**\n     * Set Production API Key\n     * @memberof ApiConsole\n     */\n    setProductionApiKey(productionApiKey) {\n        this.setState({ productionApiKey });\n    }\n\n    /**\n     * Set Sandbox API Key\n     * @memberof ApiConsole\n     */\n    setSandboxApiKey(sandboxApiKey) {\n        this.setState({ sandboxApiKey });\n    }\n\n    /**\n     * Set Username\n     * @memberof ApiConsole\n     */\n    setUsername(username) {\n        this.setState({ username });\n    }\n\n    /**\n     * Set Password\n     * @memberof ApiConsole\n     */\n    setPassword(password) {\n        this.setState({ password });\n    }\n\n    /**\n     * Set Password\n     * @memberof ApiConsole\n     */\n    setSelectedKeyType(selectedKeyType, isUpdateToken, selectedApplication) {\n        if (isUpdateToken) {\n            this.setState({ selectedKeyType }, this.updateAccessToken(selectedApplication));\n        } else {\n            this.setState({ selectedKeyType });\n        }\n    }\n\n    /**\n     * Set Password\n     * @memberof ApiConsole\n     */\n    setSelectedKeyManager(selectedKeyManager, isUpdateToken, selectedApplication) {\n        if (isUpdateToken) {\n            this.setState({ selectedKeyManager }, this.updateAccessToken(selectedApplication));\n        } else {\n            this.setState({ selectedKeyManager });\n        }\n    }\n\n    setKeys(keys) {\n        this.setState({ keys });\n    }\n\n    /**\n     * Set authorization header of third party APIs\n     * @param advAuthHeader authorization header\n     */\n    setAdvAuthHeader(advAuthHeader) {\n        this.setState({ advAuthHeader });\n    }\n\n    /**\n     * Set authorization header value of third party APIs\n     * @param advAuthHeaderValue authorization header value\n     */\n    setAdvAuthHeaderValue(advAuthHeaderValue) {\n        this.setState({ advAuthHeaderValue });\n    }\n\n    /**\n     * Set selected endpoint type of third party APIs\n     * @param selectedEndpoint selected endpoint type\n     */\n    setSelectedEndpoint(selectedEndpoint) {\n        this.setState({ selectedEndpoint });\n    }\n\n    /**\n     * Update swagger for properties for Swagger 2.0 third party APIs\n     * @param spec api definition\n     * @param serverUrl server url\n     * @returns {*}\n     */\n    setServersSpec(spec, serverUrl) {\n        let schemes;\n        const [protocol, host] = serverUrl.split('://');\n        if (protocol === 'http') {\n            schemes = ['http'];\n        } else if (protocol === 'https') {\n            schemes = ['https'];\n        }\n        return {\n            ...spec,\n            schemes,\n            host,\n        };\n    }\n\n    /**\n     * Converting an OpenAPI file to a postman collection\n     * @memberof ApiConsole\n   */\n    convertToPostman(fr) {\n        openapiToPostman.convert({ type: 'string', data: fr },\n            {}, (err, conversionResult) => {\n                if (!conversionResult.result) {\n                    const collection = swaggerToPostman.convert(fr);\n                    if (!collection) {\n                        console.log('Could not convert');\n                    } else {\n                        fileDownload(\n                            JSON.stringify(collection),\n                            'postman collection',\n                        );\n                    }\n                } else {\n                    fileDownload(\n                        JSON.stringify(conversionResult.output[0].data),\n                        'postman collection',\n                    );\n                }\n            });\n    }\n\n    /**\n     * Load the access token for given key type\n     * @memberof TryOutController\n     */\n    updateAccessToken(selectedApplication) {\n        const {\n            selectedKeyType, selectedKeyManager, keys,\n        } = this.state;\n        let accessToken;\n        if (keys.get(selectedKeyManager) && keys.get(selectedKeyManager).keyType === selectedKeyType) {\n            ({ accessToken } = keys.get(selectedKeyManager).token);\n            if (selectedKeyType === 'PRODUCTION') {\n                this.setProductionAccessToken(accessToken);\n            } else {\n                this.setSandboxAccessToken(accessToken);\n            }\n        } else {\n            Application.get(selectedApplication)\n                .then((application) => {\n                    return application.getKeys(selectedKeyType);\n                })\n                .then((appKeys) => {\n                    if (appKeys.get(selectedKeyManager)\n                    && appKeys.get(selectedKeyManager).keyType === selectedKeyType) {\n                        ({ accessToken } = appKeys.get(selectedKeyManager).token);\n                    }\n                    if (appKeys.get(selectedKeyManager).keyType === 'PRODUCTION') {\n                        this.setProductionAccessToken(accessToken);\n                    } else {\n                        this.setSandboxAccessToken(accessToken);\n                    }\n                    this.setKeys(appKeys);\n                });\n        }\n    }\n\n    /**\n     *\n     * Provids the access token to the Swagger UI\n     * @returns {*} access token\n     * @memberof ApiConsole\n     */\n    accessTokenProvider() {\n        const {\n            securitySchemeType, username, password, productionAccessToken, sandboxAccessToken, selectedKeyType,\n            productionApiKey, sandboxApiKey, api, advAuthHeaderValue,\n        } = this.state;\n        if (api.advertiseInfo && api.advertiseInfo.advertised) {\n            return advAuthHeaderValue;\n        }\n        if (securitySchemeType === 'BASIC') {\n            const credentials = username + ':' + password;\n            return btoa(credentials);\n        }\n        if (securitySchemeType === 'API-KEY') {\n            if (selectedKeyType === 'PRODUCTION') {\n                return productionApiKey;\n            } else {\n                return sandboxApiKey;\n            }\n        } else if (selectedKeyType === 'PRODUCTION') {\n            return productionAccessToken;\n        } else {\n            return sandboxAccessToken;\n        }\n    }\n\n    /**\n     * Load the swagger file of the given environment\n     * @memberof ApiConsole\n     */\n    updateSwagger(environment) {\n        const {\n            api, environments,\n        } = this.state;\n        let promiseSwagger;\n\n        if (environment && environments.find((e) => e.name === environment)) {\n            promiseSwagger = this.apiClient.getSwaggerByAPIIdAndEnvironment(api.id, environment);\n        } else {\n            promiseSwagger = this.apiClient.getSwaggerByAPIId(api.id);\n        }\n        promiseSwagger.then((swaggerResponse) => {\n            this.setState({ swagger: swaggerResponse.obj });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     * @memberof ApiConsole\n     */\n    render() {\n        const { classes } = this.props;\n        const {\n            api, notFound, swagger, securitySchemeType, selectedEnvironment, environments, scopes,\n            username, password, productionAccessToken, sandboxAccessToken, selectedKeyType,\n            sandboxApiKey, productionApiKey, selectedKeyManager, advAuthHeader, advAuthHeaderValue, selectedEndpoint,\n        } = this.state;\n        const user = AuthManager.getUser();\n        const downloadSwagger = JSON.stringify({ ...swagger });\n        const downloadLink = 'data:text/json;charset=utf-8, ' + encodeURIComponent(downloadSwagger);\n        const fileName = 'swagger.json';\n\n        if (api == null || swagger == null) {\n            return <Progress />;\n        }\n        if (notFound) {\n            return 'API Not found !';\n        }\n        let isApiKeyEnabled = false;\n        let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n        if (api && api.securityScheme) {\n            isApiKeyEnabled = api.securityScheme.includes('api_key');\n            if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n                authorizationHeader = 'apikey';\n            }\n        }\n        let swaggerSpec = swagger;\n        if (api.advertiseInfo && api.advertiseInfo.advertised) {\n            authorizationHeader = advAuthHeader;\n            if (swaggerSpec.openapi) {\n                if (selectedEndpoint === 'PRODUCTION') {\n                    swaggerSpec = {\n                        ...swagger,\n                        servers: [\n                            { url: api.advertiseInfo.apiExternalProductionEndpoint },\n                        ],\n                    };\n                } else {\n                    swaggerSpec = {\n                        ...swagger,\n                        servers: [\n                            { url: api.advertiseInfo.apiExternalSandboxEndpoint },\n                        ],\n                    };\n                }\n            } else if (selectedEndpoint === 'PRODUCTION') {\n                swaggerSpec = this.setServersSpec(swaggerSpec, api.advertiseInfo.apiExternalProductionEndpoint);\n            } else {\n                swaggerSpec = this.setServersSpec(swaggerSpec, api.advertiseInfo.apiExternalSandboxEndpoint);\n            }\n        }\n        return (\n            <>\n                <Paper className={classes.paper}>\n                    <Grid container className={classes.grid}>\n                        {!user && (!api.advertiseInfo || !api.advertiseInfo.advertised) && (\n                            <Grid item md={6}>\n                                <Paper className={classes.userNotificationPaper}>\n                                    <Typography variant='h5' component='h3'>\n                                        <Icon>warning</Icon>\n                                        {' '}\n                                        <FormattedMessage id='notice' defaultMessage='Notice' />\n                                    </Typography>\n                                    <Typography component='p'>\n                                        <FormattedMessage\n                                            id='api.console.require.access.token'\n                                            defaultMessage={'You need an access token to try the API. Please log '\n                                            + 'in and subscribe to the API to generate an access token. If you already '\n                                            + 'have an access token, please provide it below.'}\n                                        />\n                                    </Typography>\n                                </Paper>\n                            </Grid>\n                        )}\n                    </Grid>\n\n                    <TryOutController\n                        setSecurityScheme={this.setSecurityScheme}\n                        securitySchemeType={securitySchemeType}\n                        setSelectedEnvironment={this.setSelectedEnvironment}\n                        selectedEnvironment={selectedEnvironment}\n                        productionAccessToken={productionAccessToken}\n                        setProductionAccessToken={this.setProductionAccessToken}\n                        sandboxAccessToken={sandboxAccessToken}\n                        setSandboxAccessToken={this.setSandboxAccessToken}\n                        swagger={swaggerSpec}\n                        environments={environments}\n                        scopes={scopes}\n                        setUsername={this.setUsername}\n                        setPassword={this.setPassword}\n                        username={username}\n                        password={password}\n                        setSelectedKeyType={this.setSelectedKeyType}\n                        selectedKeyType={selectedKeyType}\n                        setSelectedKeyManager={this.setSelectedKeyManager}\n                        selectedKeyManager={selectedKeyManager}\n                        updateSwagger={this.updateSwagger}\n                        setKeys={this.setKeys}\n                        setProductionApiKey={this.setProductionApiKey}\n                        setSandboxApiKey={this.setSandboxApiKey}\n                        productionApiKey={productionApiKey}\n                        sandboxApiKey={sandboxApiKey}\n                        setAdvAuthHeader={this.setAdvAuthHeader}\n                        setAdvAuthHeaderValue={this.setAdvAuthHeaderValue}\n                        advAuthHeader={advAuthHeader}\n                        advAuthHeaderValue={advAuthHeaderValue}\n                        setSelectedEndpoint={this.setSelectedEndpoint}\n                        selectedEndpoint={selectedEndpoint}\n                        api={this.state.api}\n                        URLs={null}\n                    />\n\n                    {api.type !== 'SOAP' && (\n                        <Grid container>\n                            <Grid xs={8} item />\n                            <Grid xs={2} item>\n                                <Button size='small' onClick={() => this.convertToPostman(downloadSwagger)}>\n                                    <Icons icon={postmanIcon} width={30} height={30} className={classes.buttonIcon} />\n                                    <FormattedMessage\n                                        id='Apis.Details.APIConsole.APIConsole.download.postman'\n                                        defaultMessage='Postman collection'\n                                    />\n                                </Button>\n\n                            </Grid>\n                            <Grid xs={2} item>\n                                <a href={downloadLink} download={fileName}>\n                                    <Button size='small'>\n                                        <Icons icon={openapiinitiativeIcon} width={30} height={30} className={classes.buttonIcon} />\n                                        <FormattedMessage\n                                            id='Apis.Details.APIConsole.APIConsole.download.swagger'\n                                            defaultMessage='OpenAPI'\n                                        />\n                                    </Button>\n                                </a>\n                            </Grid>\n                        </Grid>\n                    )}\n                </Paper>\n                <Paper className={classes.swaggerUIPaper}>\n                    <SwaggerUI\n                        api={this.state.api}\n                        accessTokenProvider={this.accessTokenProvider}\n                        spec={swaggerSpec}\n                        authorizationHeader={authorizationHeader}\n                        securitySchemeType={securitySchemeType}\n                    />\n                </Paper>\n            </>\n        );\n    }\n}\n\nApiConsole.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        grid: PropTypes.string.isRequired,\n        userNotificationPaper: PropTypes.string.isRequired,\n        buttonIcon: PropTypes.string.isRequired,\n        iconify: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nApiConsole.contextType = ApiContext;\n\nexport default withStyles(styles)(ApiConsole);\n"],"sourceRoot":""}