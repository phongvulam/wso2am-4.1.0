{"version":3,"sources":["webpack:///./source/src/app/components/Shared/DropZoneLocal.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/SpecErrors.jsx","webpack:///./source/src/app/components/Apis/Details/ProductResources/ProductResourcesEditWorkspace.jsx","webpack:///./source/src/app/components/Apis/Create/WSDL/Steps/ProvideWSDL.jsx","webpack:///./source/src/app/data/Wsdl.js","webpack:///./source/src/app/components/Apis/Create/AsyncAPI/Steps/ProvideAsyncAPI.jsx","webpack:///./source/src/app/components/Apis/Create/OpenAPI/Steps/ProvideOpenAPI.jsx","webpack:///./source/src/app/components/Apis/Create/GraphQL/Steps/ProvideGraphQL.jsx","webpack:///./source/src/app/components/Apis/Details/ProductResources/MethodView.jsx"],"names":["humanFileSize","bytesParam","si","bytes","thresh","Math","abs","units","u","length","toFixed","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","activeStyle","acceptStyle","rejectStyle","DropZoneLocal","props","message","onDrop","error","children","accept","ariaLabel","dropZoneObject","useDropzone","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","style","useMemo","containerStyles","fontFamily","useTheme","typography","textAlign","className","aria-label","multiple","defaultProps","showFilesList","propTypes","PropTypes","string","func","bool","oneOfType","element","arrayOf","shape","SpecErrors","specErrors","useState","open","setOpen","title","onClick","maxWidth","aria-labelledby","id","variant","dividers","map","index","key","description","light","primary","primaryTypographyProps","inset","boxShadow","py","pr","border","isRequired","useStyles","makeStyles","theme","searchWrapper","marginTop","spacing","paper","height","apiWrapper","overflowY","ResourceWrapper","marginLeft","marginRight","palette","grey","width","common","white","SelectedResourceWrapper","overflowX","leftMost","background","getContrastText","rightMost","colTitle","fontWeight","minHeight","treeItemMain","treeItemMainWrapper","paddingLeft","treeItem","fontSize","cursor","hr","methodView","middleText","selectedApi","selectedTitle","buttonWrapper","textDecorate","selectedApiDescription","messageWrapper","tootBar","justifyContent","margin","inactiveIcon","resourceMethod","POST","PUT","GET","DELETE","PATCH","OPTIONS","HEAD","ProductResourcesEdit","classes","apiResources","setApiResources","isStateCreate","api","resourceNotFountMessage","allApis","setAllApis","notFound","setNotFound","searchText","setSearchText","selectedApiPaths","setSelectedApiPaths","setSelectedApi","fromSearch","setFromSearch","apiRestClient","API","filterAPIs","text","inputValue","trim","toLowerCase","composeQuery","composeQueryJSON","queryString","parse","limit","offset","search","all","query","type","isValidHttpVerb","innerKey","addPropsToSelectedApiPaths","paths","apiId","latestApiResources","Object","keys","methodObj","checked","target","verb","resourceFound","resourcekey","apiResource","operations","operationKey","operation","allreadyAdded","getApiSwagger","apiSelected","getSwagger","then","response","undefined","obj","catch","status","doRedirectToLogin","updateResourceTree","resourceToAdd","action","inputApiResources","updateStateHere","newApiResources","cloneDeep","name","version","newResource","toUpperCase","authType","throttlingPolicy","scopes","apiFound","indexA","operationFound","indexB","splice","push","updateCheckBox","prevSelectedApiPaths","addSelectedResourcesToTree","addAll","useEffect","filteredList","body","list","filter","theApi","lifeCycleStatus","container","item","xs","defaultMessage","label","placeholder","helperText","onChange","event","value","fullWidth","InputLabelProps","shrink","dense","component","apiObj","labelId","role","button","secondary","context","onKeyDown","path","CONSTS","HTTP_METHODS","includes","minWidth","edge","tabIndex","disableRipple","disabled","inputProps","method","instanceOf","Array","mandatoryStar","main","ProvideWSDL","apiInputs","inputsDispatcher","onValidate","isFileInput","inputType","isGenerateRESTAPI","isError","setValidity","isValidating","setIsValidating","isCreateMode","mode","handleWSDLValidationResponse","isWSDLValid","isValid","success","file","url","handleWSDLValidationErrorResponse","files","state","Wsdl","validateFileOrArchive","dropBoxControlLabel","values","break","urlStateEndAdornment","position","md","control","onClose","disableActions","paperProps","elevation","size","autoFocus","InputProps","onBlur","APIValidation","required","validate","validateUrl","endAdornment","Boolean","apiClient","APIClientFactory","getAPIClient","Utils","getCurrentEnvironment","CONST","API_CLIENT","client","requestBody","apis","Validation","validateWSDLDefinition","additionalProperties","implementationType","APIs","importWSDLDefinition","JSON","stringify","Resource","ProvideAsyncAPI","validationErrors","setValidationErrors","gatewayVendor","setGatewayVendor","pop","validFile","validateAsyncAPIByFile","isValidFile","info","errors","console","finally","validateURL","validateAsyncAPIByUrl","returnContent","isValidURL","content","INPUT_TYPES","FILE","URL","isInvalidURL","icon","ProvideOpenAPI","validateURLDebounced","useCallback","debounce","newURL","validateOpenAPIByUrl","validateOpenAPIByFile","data-testid","ProvideGraphQL","validateGraphQLFile","graphQLInfo","MethodView","chipColor","custom","resourceChipColors","chipTextColor","log"],"mappings":"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","file":"APICreateRoutes~DeferredDetails.244151c74d1c2f1757ae.bundle.js","sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDropzone } from 'react-dropzone';\nimport { useTheme } from '@material-ui/core/styles';\n\n/**\n *\n * Convert raw byte values to human readable format\n * @param {Number} bytes number of bytes\n * @param {boolean} [si=false]\n * @returns {String} Human readable string format\n */\nexport function humanFileSize(bytesParam, si = false) {\n    let bytes = bytesParam; // To prevent `no-param-reassign` eslint rule violation\n    const thresh = si ? 1000 : 1024;\n    if (Math.abs(bytes) < thresh) {\n        return bytes + ' B';\n    }\n    const units = si\n        ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    let u = -1;\n    do {\n        bytes /= thresh;\n        ++u;\n    } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n    return bytes.toFixed(1) + ' ' + units[u];\n}\n\nconst baseStyle = {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: '100px 20px',\n    borderWidth: 2,\n    borderRadius: 2,\n    borderColor: '#eeeeee',\n    borderStyle: 'dashed',\n    backgroundColor: '#fafafa',\n    color: '#bdbdbd',\n    outline: 'none',\n    transition: 'border .24s ease-in-out',\n};\n\nconst activeStyle = {\n    borderColor: '#2196f3',\n};\n\nconst acceptStyle = {\n    borderColor: '#00e676',\n};\n\nconst rejectStyle = {\n    borderColor: '#ff1744',\n};\n\n/**\n *\n * Provide a class friendly Dropzone wrapper using hooks.\n * @export\n * @returns\n */\nexport default function DropZoneLocal(props) {\n    const {\n        message, onDrop, error, children, accept, ariaLabel,\n    } = props;\n    const dropZoneObject = useDropzone({ onDrop });\n    const {\n        getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject,\n    } = dropZoneObject;\n\n    const style = useMemo(\n        () => ({\n            ...baseStyle,\n            ...(isDragActive ? activeStyle : {}),\n            ...(isDragAccept ? acceptStyle : {}),\n            ...(isDragReject ? rejectStyle : {}),\n        }),\n        [isDragActive, isDragReject, error],\n    );\n    const theme = useTheme();\n\n    const containerStyles = {\n        fontFamily: theme.typography.fontFamily,\n        textAlign: 'center',\n    };\n\n    return (\n        <section className='container' style={containerStyles}>\n            <div {...getRootProps({ style })}>\n                <input\n                    // In accordance with https://www.w3.org/TR/WCAG20-TECHS/ARIA14.html\n                    aria-label={ariaLabel}\n                    {...getInputProps()}\n                    multiple={false}\n                    accept={accept}\n                />\n                {children || message}\n            </div>\n        </section>\n    );\n}\nDropZoneLocal.defaultProps = {\n    message: \"Drag 'n' drop some files here, or click to select files\",\n    onDrop: () => {},\n    showFilesList: true,\n    children: null,\n    error: false,\n    accept: '*',\n};\nDropZoneLocal.propTypes = {\n    message: PropTypes.string,\n    onDrop: PropTypes.func,\n    accept: PropTypes.string,\n    showFilesList: PropTypes.bool,\n    children: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.shape({}))]),\n    error: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({})]),\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport PropTypes from 'prop-types';\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function SpecErrors(props) {\n    const { specErrors } = props;\n    const [open, setOpen] = useState(false);\n    if (!specErrors || specErrors.length === 0) {\n        return null;\n    }\n    return (\n        <>\n            <sup>\n                <Tooltip title='Show errors'>\n                    <IconButton onClick={() => setOpen(true)} color='secondary' aria-label='Errors in spec'>\n                        <ErrorOutlineIcon color='error' />\n                    </IconButton>\n                </Tooltip>\n            </sup>\n            <Dialog maxWidth='md' aria-labelledby='confirmation-dialog-title' open={open}>\n                <DialogTitle id='confirmation-dialog-title'>\n                    <Typography display='inline' color='textPrimary' variant='h6'>\n                        Errors\n                        <Typography display='inline' variant='subtitle2'>\n                            {' '}\n                            in OpenAPI definition\n                        </Typography>\n                    </Typography>\n                </DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        {specErrors.map((error, index) => (\n                            <span key={error.description}>\n                                {index % 2 !== 0 && <Divider light variant='inset' />}\n                                <ListItem>\n                                    <ListItemText\n                                        primary={error.message}\n                                        primaryTypographyProps={{\n                                            color: 'error',\n                                        }}\n                                        inset\n                                    />\n                                </ListItem>\n                                <Box boxShadow={1} py={5} pr={5} border={1} borderColor='grey.500'>\n                                    <pre>\n                                        <code>\n                                            {error.description}\n                                        </code>\n                                    </pre>\n                                </Box>\n                            </span>\n                        ))}\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setOpen(false)} color='primary'>\n                        Ok\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n\nSpecErrors.propTypes = {\n    specErrors: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable array-callback-return */\n/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"operationObj\"] }] */\n\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Icon from '@material-ui/core/Icon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport queryString from 'query-string';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport cloneDeep from 'lodash.clonedeep';\nimport PropTypes from 'prop-types';\nimport API from 'AppData/api';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport MethodView from 'AppComponents/Apis/Details/ProductResources/MethodView';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport CONSTS from 'AppData/Constants';\nimport VerticalDivider from 'AppComponents/Shared/VerticalDivider';\n\nconst useStyles = makeStyles((theme) => ({\n    searchWrapper: {\n        padding: 0,\n        marginTop: theme.spacing(1),\n        '& input': {\n            padding: '12px 14px',\n        },\n        display: 'flex',\n    },\n    paper: {\n        height: '100%',\n        borderRadius: 0,\n    },\n    apiWrapper: {\n        overflowY: 'auto',\n        height: 349,\n    },\n    ResourceWrapper: {\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        '& .frame': {\n            overflowY: 'auto',\n            height: 328,\n            border: '1px solid ' + theme.palette.grey[400],\n            borderRadius: theme.spacing(1),\n        },\n        '& .frame::-webkit-scrollbar': {\n            '-webkit-appearance': 'none',\n        },\n        '& .frame::-webkit-scrollbar:vertical': {\n            width: 11,\n        },\n        '& .frame::-webkit-scrollbar:horizontal': {\n            height: 11,\n        },\n        '& .frame::-webkit-scrollbar-thumb': {\n            borderRadius: theme.spacing(1),\n            border: '2px solid' + theme.palette.common.white,\n            backgroundColor: theme.palette.grey[400],\n        },\n        '& .frame.rightFrame': {\n            height: 369,\n        },\n    },\n    SelectedResourceWrapper: {\n        overflowY: 'auto',\n        overflowX: 'auto',\n        height: 321,\n    },\n    leftMost: {\n        background: theme.palette.grey[700],\n        color: theme.palette.getContrastText(theme.palette.grey[700]),\n        padding: theme.spacing(1),\n    },\n    rightMost: {\n        background: theme.palette.grey[600],\n        color: theme.palette.getContrastText(theme.palette.grey[600]),\n        padding: theme.spacing(1),\n    },\n    colTitle: {\n        background: theme.palette.grey[400],\n        color: theme.palette.getContrastText(theme.palette.grey[400]),\n        padding: theme.spacing(1),\n        fontWeight: 200,\n        minHeight: 25,\n    },\n    treeItemMain: {\n        background: theme.palette.grey[100],\n        color: theme.palette.getContrastText(theme.palette.grey[100]),\n        padding: theme.spacing(1),\n    },\n    treeItemMainWrapper: {\n        paddingLeft: theme.spacing(2),\n    },\n    treeItem: {\n        '& .material-icons': {\n            fontSize: theme.spacing(2),\n            cursor: 'pointer',\n            marginRight: theme.spacing(1),\n        },\n        display: 'flex',\n        alignItems: 'center',\n        padding: '6px 0',\n    },\n    hr: {\n        flex: 1,\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        color: theme.palette.getContrastText(theme.palette.grey[100]),\n    },\n    methodView: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    middleText: {\n        flex: 1,\n    },\n    selectedApi: {\n        background: theme.palette.grey[100],\n    },\n    selectedTitle: {\n        padding: theme.spacing(2),\n    },\n    buttonWrapper: {\n        marginTop: theme.spacing(2),\n        textDecorate: 'none',\n    },\n    selectedApiDescription: {\n        padding: '0px 16px',\n    },\n    messageWrapper: {\n        padding: theme.spacing(3),\n    },\n    tootBar: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n        margin: '0 16px',\n        background: theme.palette.grey[100],\n        color: theme.palette.getContrastText(theme.palette.grey[100]),\n        padding: 5,\n        borderRadius: 5,\n        '& a': {\n            cursor: 'pointer',\n            display: 'flex',\n            justifyContent: 'flex-end',\n            alignItems: 'center',\n        },\n    },\n    inactiveIcon: {\n        color: theme.palette.grey[300],\n    },\n}));\n\nconst resourceMethod = {\n    POST: 'post',\n    PUT: 'put',\n    GET: 'get',\n    DELETE: 'delete',\n    PATCH: 'patch',\n    OPTIONS: 'options',\n    HEAD: 'head',\n};\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction ProductResourcesEdit(props) {\n    const classes = useStyles();\n    const {\n        apiResources, setApiResources, isStateCreate, api, resourceNotFountMessage,\n    } = props;\n\n    // Define states\n    const [allApis, setAllApis] = useState([]);\n    const [notFound, setNotFound] = useState(false);\n    const [searchText, setSearchText] = useState('');\n    const [selectedApiPaths, setSelectedApiPaths] = useState([]);\n    const [selectedApi, setSelectedApi] = useState(null);\n    const [fromSearch, setFromSearch] = useState(false);\n    // Initialize the rest api libraries\n    const apiRestClient = new API();\n\n    /**\n     * This method is filtering apis base on the searchText entered. In no searchText provided it will give all apis.\n     *\n     * @param {*} [text=null]\n     * @returns a promise\n     */\n    const filterAPIs = (text = null) => {\n        if (text) {\n            // Build the search query and update\n            const inputValue = text.trim().toLowerCase();\n            const composeQuery = '?query=name:' + inputValue + ' type:HTTP';\n            const composeQueryJSON = queryString.parse(composeQuery);\n            // TODO we need to make the limit and offset changeable from the UI ( paggination )\n            composeQueryJSON.limit = 100;\n            composeQueryJSON.offset = 0;\n            return API.search(composeQueryJSON);\n        } else {\n            return API.all({\n                query: {\n                    type: 'HTTP',\n                },\n            });\n        }\n    };\n\n    const isValidHttpVerb = (innerKey) => {\n        if (innerKey === resourceMethod.DELETE || innerKey === resourceMethod.POST\n                || innerKey === resourceMethod.GET || innerKey === resourceMethod.PUT\n                || innerKey === resourceMethod.PATCH || innerKey === resourceMethod.OPTIONS\n                || innerKey === resourceMethod.HEAD) {\n            return true;\n        }\n        return false;\n    };\n\n    const addPropsToSelectedApiPaths = (paths, apiId, latestApiResources = apiResources) => {\n        /* Add checked field to each resource object */\n        Object.keys(paths).map((key) => {\n            const methodObj = paths[key];\n            Object.keys(methodObj).map((innerKey) => {\n                // We are setting the check property at this level because we need to\n                // add resources for each verb ( post, get, put etc.. )\n                if (isValidHttpVerb(innerKey)) {\n                    methodObj[innerKey].checked = false;\n\n                    // We need to check the latestApiResources for the same\n                    // API/Resource Name / Verb and  indicate it differently\n                    // Loop latestApiResources object\n                    const target = key;\n                    const verb = innerKey;\n                    let resourceFound = false;\n                    if (latestApiResources) {\n                        Object.keys(latestApiResources).map((resourcekey) => {\n                            const apiResource = latestApiResources[resourcekey];\n\n                            // Check if the the api slected from UI is same as the operation api id checking\n                            if (apiResource && apiId === apiResource.apiId) {\n                                // API is the same\n                                Object.keys(apiResource.operations).map((operationKey) => {\n                                    const operation = apiResource.operations[operationKey];\n                                    if (\n                                        operation\n                                        && operation.target === target\n                                        && operation.verb.toLowerCase() === verb.toLowerCase()\n                                    ) {\n                                        // Operation is already there\n                                        resourceFound = true;\n                                    }\n                                });\n                            }\n                        });\n                    }\n                    if (resourceFound) {\n                        methodObj[innerKey].allreadyAdded = true;\n                    } else {\n                        methodObj[innerKey].allreadyAdded = false;\n                    }\n                }\n            });\n        });\n        setSelectedApiPaths(paths);\n    };\n\n    // Get the api swagger after an api is selected\n    const getApiSwagger = (apiSelected) => {\n        const { id } = apiSelected;\n        const promisedAPI = apiRestClient.getSwagger(id);\n        promisedAPI\n            .then((response) => {\n                if (response.obj.paths !== undefined) {\n                    addPropsToSelectedApiPaths(response.obj.paths, id);\n                    setSelectedApi(apiSelected);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    };\n    const handleSearchTextChange = (event) => {\n        const apiPromise = filterAPIs(event.target.value);\n        apiPromise\n            .then((response) => {\n                const {\n                    body: { list },\n                } = response;\n                const filteredList = list.filter((theApi) => theApi.status !== 'PROTOTYPED');\n                if (filteredList.length > 0) {\n                    setSelectedApi(list[0]);\n                }\n                setAllApis(filteredList);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n        setSearchText(event.target.value);\n        setFromSearch(event.target.value);\n    };\n    const updateResourceTree = (resourceToAdd, action, inputApiResources = null) => {\n        let updateStateHere = false;\n        let newApiResources = null;\n        if (!inputApiResources) {\n            // If a copy of the state variable is not passed from the calling method we\n            // have to make a copy inside here before doing modifications to that\n            newApiResources = cloneDeep(apiResources);\n            updateStateHere = true;\n        } else {\n            newApiResources = inputApiResources;\n        }\n        const {\n            target, verb, apiId, name, version,\n        } = resourceToAdd;\n        const newResource = {\n            id: null,\n            target,\n            verb: verb.toUpperCase(),\n            authType: null,\n            throttlingPolicy: null,\n            scopes: [],\n        };\n        let apiFound = false;\n\n        // Loop copy of apiResources object\n        Object.keys(newApiResources).map((key, indexA) => {\n            const apiResource = newApiResources[key];\n\n            // Check if the the api slected from UI is same as the operation api id trying to remove.\n            if (apiResource && apiId === apiResource.apiId) {\n                apiFound = true;\n                let operationFound = false;\n                Object.keys(apiResource.operations).map((innerKey, indexB) => {\n                    const operation = apiResource.operations[innerKey];\n                    if (\n                        operation\n                        && operation.target === target\n                        && operation.verb.toLowerCase() === verb.toLowerCase()\n                    ) {\n                        // Operation is already there\n                        operationFound = true;\n                        if (action === 'remove') {\n                            if (apiResource.operations.length > 1) {\n                                apiResource.operations.splice(indexB, 1);\n                            } else {\n                                newApiResources.splice(indexA, 1);\n                            }\n                        }\n                    }\n                });\n                // Operation not added .. so we need to add that\n                if (!operationFound && action === 'add') {\n                    apiResource.operations.push(newResource);\n                }\n            }\n        });\n\n        if (!apiFound) {\n            // Add api object\n            newApiResources.push({\n                name,\n                apiId,\n                operations: [newResource],\n                version,\n            });\n        }\n        // When we are adding the resources in a loop we do not care about the return but we simply set the state here.\n        if (updateStateHere) {\n            setApiResources(newApiResources);\n            // We need to call this in order to set other properties\n            if (apiId === selectedApi.id) {\n                addPropsToSelectedApiPaths(cloneDeep(selectedApiPaths), apiId, newApiResources);\n            }\n        }\n        return newApiResources;\n    };\n\n    const updateCheckBox = (key, innerKey) => {\n        // we need to copy the object from the state and modify it before set it to the state\n        const prevSelectedApiPaths = { ...selectedApiPaths };\n\n        // Now we inverse the checked value\n        prevSelectedApiPaths[key][innerKey].checked = !prevSelectedApiPaths[key][innerKey].checked;\n\n        // Then we set state\n        setSelectedApiPaths(prevSelectedApiPaths);\n    };\n    const addSelectedResourcesToTree = (addAll = false) => {\n        /* Add checked field to each resource object */\n        const newApiResources = cloneDeep(apiResources);\n        Object.keys(selectedApiPaths).map((key) => {\n            const methodObj = selectedApiPaths[key];\n            Object.keys(methodObj).map((innerKey) => {\n                // We are setting the check property at this level because we need to\n                // add resources for each verb ( post, get, put etc.. )\n                if ((methodObj[innerKey].checked || addAll) && isValidHttpVerb(innerKey)) {\n                    // We need to add this to apiResources array\n                    updateResourceTree(\n                        {\n                            target: key,\n                            verb: innerKey,\n                            apiId: selectedApi.id,\n                            name: selectedApi.name,\n                            version: selectedApi.version,\n                        },\n                        'add',\n                        newApiResources,\n                    );\n                }\n            });\n        });\n        setApiResources(newApiResources);\n        addPropsToSelectedApiPaths(cloneDeep(selectedApiPaths), selectedApi.id, newApiResources);\n    };\n    useEffect(() => {\n        // Get all apis\n        const apiPromise = filterAPIs();\n        apiPromise\n            .then((response) => {\n                const {\n                    body: { list },\n                } = response;\n                const filteredList = list.filter((theApi) => theApi.lifeCycleStatus !== 'PROTOTYPED' &&\n                    theApi.lifeCycleStatus !== 'RETIRED' && theApi.lifeCycleStatus !== 'DEPRECATED'\n                );\n\n                setAllApis(filteredList);\n                if (filteredList.length > 0) {\n                    setSelectedApi(filteredList[0]);\n                    getApiSwagger(filteredList[0]);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    }, []);\n    if (notFound) {\n        return <ResourceNotFound message={resourceNotFountMessage} />;\n    }\n    return (\n        <>\n            {allApis.length === 0 && !fromSearch ? (\n                <Grid container>\n                    <Typography className={classes.messageWrapper}>\n                        <FormattedMessage\n                            id='Apis.Details.ProductResources.ProductResourcesWorkspace.ApisnotFound'\n                            defaultMessage='No REST APIs are created yet'\n                        />\n                    </Typography>\n                </Grid>\n            ) : (\n                <>\n                    {!isStateCreate && (\n                        <Grid container>\n                            <>\n                                <Grid item xs={8} className={classes.leftMost}>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ProductResources.ProductResourcesWorkspace.find.and.select'\n                                            defaultMessage='Find and select resources for the API Product'\n                                        />\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={4} className={classes.rightMost}>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ProductResources.ProductResourcesWorkspace.selected'\n                                            defaultMessage='Selected resources of API Product'\n                                        />\n                                    </Typography>\n                                </Grid>\n                            </>\n                        </Grid>\n                    )}\n                    <Grid container>\n                        {/* ************************************************ */}\n                        {/* 1st column API search and select column          */}\n                        {/* ************************************************ */}\n                        <Grid item xs={3}>\n                            <div className={classes.colTitle}>\n                                <Typography>\n                                    <FormattedMessage\n                                        id='Apis.Details.ProductResources.ProductResourcesWorkspace.select.an.api'\n                                        defaultMessage='Select an API'\n                                    />\n                                </Typography>\n                            </div>\n                            <Paper>\n                                <div className={classes.searchWrapper}>\n                                    <TextField\n                                        id='outlined-full-width'\n                                        label='API'\n                                        style={{ margin: 8 }}\n                                        placeholder='Filter APIs'\n                                        helperText='Filter by name'\n                                        onChange={handleSearchTextChange}\n                                        value={searchText}\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n                                </div>\n                                <div className={classes.apiWrapper}>\n                                    <List dense component='nav'>\n                                        {allApis.map((apiObj) => {\n                                            const labelId = `checkbox-list-label-${apiObj.id}`;\n\n                                            return (\n                                                <ListItem\n                                                    key={apiObj.id}\n                                                    role={undefined}\n                                                    dense\n                                                    button\n                                                    className={\n                                                        selectedApi\n                                                        && apiObj.id === selectedApi.id\n                                                        && classes.selectedApi\n                                                    }\n                                                >\n                                                    <ListItemText\n                                                        id={labelId}\n                                                        primary={apiObj.name}\n                                                        secondary={`${apiObj.version} - ${apiObj.context}`}\n                                                        onClick={() => getApiSwagger(apiObj)}\n                                                    />\n                                                </ListItem>\n                                            );\n                                        })}\n                                    </List>\n                                </div>\n                            </Paper>\n                        </Grid>\n                        {/* ************************************************ */}\n                        {/* 2nd column Resource Selection                    */}\n                        {/* ************************************************ */}\n                        <Grid item xs={5}>\n                            <Paper className={classes.paper}>\n                                <div className={classes.colTitle}>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ProductResources.ProductResourcesEdit.api.resources'\n                                            defaultMessage='Select API Resources'\n                                        />\n                                    </Typography>\n                                </div>\n                                {selectedApi && (\n                                    <Typography variant='h5' component='h2' className={classes.selectedTitle}>\n                                        {selectedApi.name}\n                                    </Typography>\n                                )}\n                                <div className={classes.tootBar}>\n                                    <Button\n                                        onClick={() => addSelectedResourcesToTree()}\n                                        onKeyDown={() => addSelectedResourcesToTree()}\n                                        id='add-selected-resources'\n                                    >\n                                        <Typography variant='body2'>\n                                            <FormattedMessage\n                                                id='Apis.Details.ProductResources.ProductResourcesWorkspace.\n                                        toolbar.add.selected'\n                                                defaultMessage='Add Selected'\n                                            />\n                                        </Typography>\n                                        <Icon>fast_forward</Icon>\n                                    </Button>\n                                    <VerticalDivider />\n                                    <Button\n                                        onClick={() => addSelectedResourcesToTree(true)}\n                                        onKeyDown={() => addSelectedResourcesToTree(true)}\n                                        id='add-all-resources-btn'\n                                    >\n                                        <Typography variant='body2'>\n                                            <FormattedMessage\n                                                id='Apis.Details.ProductResources.ProductResourcesWorkspace.toolbar.\n                                                add.all'\n                                                defaultMessage='Add All'\n                                            />\n                                        </Typography>\n                                        <Icon>fast_forward</Icon>\n                                    </Button>\n                                </div>\n                                <div className={classes.ResourceWrapper}>\n                                    <div className='frame'>\n                                        <List dense id='resource-wrapper'>\n                                            {Object.keys(selectedApiPaths).map((key) => {\n                                                const path = selectedApiPaths[key];\n                                                const labelId = `checkbox-list-label_${key}`;\n                                                return Object.keys(path).map((innerKey) => {\n                                                    const methodObj = path[innerKey];\n                                                    return (\n                                                        CONSTS.HTTP_METHODS.includes(innerKey) && (\n                                                            <ListItem\n                                                                key={`${innerKey} - ${key}`}\n                                                                role={undefined}\n                                                                dense\n                                                            >\n                                                                <ListItemIcon style={{ minWidth: 35 }}>\n                                                                    <Checkbox\n                                                                        edge='start'\n                                                                        checked={methodObj.checked}\n                                                                        tabIndex={-1}\n                                                                        disableRipple\n                                                                        onChange={() => updateCheckBox(key, innerKey)}\n                                                                        color='primary'\n                                                                        disabled={methodObj.allreadyAdded}\n                                                                        inputProps={\n                                                                            {\n                                                                                'aria-label': 'Select API resource',\n                                                                            }\n                                                                        }\n                                                                    />\n                                                                </ListItemIcon>\n                                                                <ListItemText\n                                                                    id={labelId + innerKey}\n                                                                    primary={(\n                                                                        <div>\n                                                                            <MethodView\n                                                                                method={innerKey}\n                                                                                className={classes.methodView}\n                                                                            />\n                                                                            <span>{key}</span>\n                                                                        </div>\n                                                                    )}\n                                                                    secondary={\n                                                                        methodObj['x-auth-type']\n                                                                    && methodObj['x-throttling-tier']\n                                                                    && `${methodObj['x-auth-type']} - ${\n                                                                        methodObj['x-throttling-tier']\n                                                                    }`\n                                                                    }\n                                                                    onClick={() => updateResourceTree(\n                                                                        {\n                                                                            target: key,\n                                                                            verb: innerKey,\n                                                                            apiId: selectedApi.id,\n                                                                            name: selectedApi.name,\n                                                                            version: selectedApi.version,\n                                                                        },\n                                                                        'add',\n                                                                    )}\n                                                                    className={classes.middleText}\n                                                                />\n                                                                <ListItemSecondaryAction>\n                                                                    {methodObj.allreadyAdded && (\n                                                                        <Icon className={classes.inactiveIcon}>\n                                                                            chevron_right\n                                                                        </Icon>\n                                                                    )}\n                                                                    {!methodObj.allreadyAdded && (\n                                                                        <IconButton\n                                                                            edge='end'\n                                                                            aria-label='comments'\n                                                                            onClick={() => updateResourceTree(\n                                                                                {\n                                                                                    target: key,\n                                                                                    verb: innerKey,\n                                                                                    apiId: selectedApi.id,\n                                                                                    name: selectedApi.name,\n                                                                                    version: selectedApi.version,\n                                                                                },\n                                                                                'add',\n                                                                            )}\n                                                                        >\n                                                                            <Icon>chevron_right</Icon>\n                                                                        </IconButton>\n                                                                    )}\n                                                                </ListItemSecondaryAction>\n                                                            </ListItem>\n                                                        )\n                                                    );\n                                                });\n                                            })}\n                                        </List>\n                                    </div>\n                                </div>\n                            </Paper>\n                        </Grid>\n                        {/* ************************************************ */}\n                        {/* Third column with  selected resources            */}\n                        {/* ************************************************ */}\n                        <Grid item xs={4}>\n                            <Paper className={classes.paper}>\n                                <div className={classes.colTitle} />\n                                {api.name && (\n                                    <>\n                                        <Typography variant='h5' component='h2' className={classes.selectedTitle}>\n                                            {api.name}\n                                        </Typography>\n                                    </>\n                                )}\n                                <div className={classes.ResourceWrapper}>\n                                    <div className='frame rightFrame'>\n                                        {allApis.length > 0 && apiResources && apiResources.length === 0 && (\n                                            <div className={classes.messageWrapper}>\n                                                <Typography component='p'>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.ProductResources.ProductResourcesWorkspace.\n                                                    empty.title'\n                                                        defaultMessage='Use the left side panel to add resources'\n                                                    />\n                                                </Typography>\n                                            </div>\n                                        )}\n                                        {apiResources\n                                        && apiResources.length > 0\n                                        && Object.keys(apiResources).map((key) => {\n                                            const apiResource = apiResources[key];\n                                            return (\n                                                <div key={apiResource.name}>\n                                                    <div className={classes.treeItemMain}>\n                                                        <Typography component='p'>\n                                                            {apiResource.name}\n                                                            {' - '}\n                                                            {apiResource.version}\n                                                        </Typography>\n                                                    </div>\n                                                    <div className={classes.treeItemMainWrapper}>\n                                                        {Object.keys(apiResource.operations).map((innerKey) => {\n                                                            const operation = apiResource.operations[innerKey];\n                                                            const { target, verb } = operation;\n                                                            return (\n                                                                <div\n                                                                    key={`${apiResource.apiId}_${verb}_${target}`}\n                                                                    className={classes.treeItem}\n                                                                >\n                                                                    <MethodView\n                                                                        method={verb}\n                                                                        className={classes.methodView}\n                                                                    />\n                                                                    <Typography variant='body2'>{target}</Typography>\n                                                                    <hr className={classes.hr} />\n                                                                    <IconButton\n                                                                        onClick={() => updateResourceTree(\n                                                                            {\n                                                                                target,\n                                                                                verb,\n                                                                                apiId: apiResource.apiId,\n                                                                                name: apiResource.name,\n                                                                                version: apiResource.version,\n                                                                            },\n                                                                            'remove',\n                                                                        )}\n                                                                        aria-label={\n                                                                            'delete resource ' + apiResource.name\n                                                                        }\n                                                                    >\n                                                                        <Icon>\n                                                                            delete\n                                                                        </Icon>\n                                                                    </IconButton>\n                                                                </div>\n                                                            );\n                                                        })}\n                                                    </div>\n                                                </div>\n                                            );\n                                        })}\n                                    </div>\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </>\n            )}\n        </>\n    );\n}\nProductResourcesEdit.propTypes = {\n    apiResources: PropTypes.instanceOf(Array).isRequired,\n    setApiResources: PropTypes.func.isRequired,\n    isStateCreate: PropTypes.isRequired,\n    api: PropTypes.isRequired,\n    resourceNotFountMessage: PropTypes.string.isRequired,\n};\nexport default ProductResourcesEdit;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Radio from '@material-ui/core/Radio';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertDriveFile from '@material-ui/icons/InsertDriveFile';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport CheckIcon from '@material-ui/icons/Check';\n\nimport APIValidation from 'AppData/APIValidation';\nimport Wsdl from 'AppData/Wsdl';\nimport Banner from 'AppComponents/Shared/Banner';\nimport DropZoneLocal, { humanFileSize } from 'AppComponents/Shared/DropZoneLocal';\n\nconst useStyles = makeStyles((theme) => ({\n    mandatoryStar: {\n        color: theme.palette.error.main,\n    },\n}));\n\n/**\n * Sub component of API Create using WSDL UI, This is handling the taking input of WSDL file or URL from the user\n * In the create API using WSDL wizard first step out of 2 steps\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function ProvideWSDL(props) {\n    const { apiInputs, inputsDispatcher, onValidate } = props;\n    const isFileInput = apiInputs.inputType === 'file';\n    const isGenerateRESTAPI = apiInputs.type === 'SOAPTOREST';\n    const classes = useStyles();\n    const [isError, setValidity] = useState(); // If valid value is `null` else an error object will be there\n    const [isValidating, setIsValidating] = useState(false);\n    const isCreateMode = apiInputs.mode === 'create';\n\n    /**\n     * Handles WSDL validation response and returns the state.\n     *\n     * @param {*} response WSDL validation response\n     * @param {string} type of the input; file or url\n     * @returns {boolean} validation status\n     */\n    function handleWSDLValidationResponse(response, type) {\n        const isWSDLValid = response.body.isValid;\n        let success = false;\n        if (isWSDLValid) {\n            if (type === 'file') {\n                setValidity({ ...isError, file: null });\n            } else {\n                setValidity({ ...isError, url: null });\n            }\n            success = true;\n        } else if (type === 'file') {\n            setValidity({ ...isError, file: { message: 'WSDL content validation failed!' } });\n        } else {\n            setValidity({ ...isError, url: { message: 'Invalid WSDL URL!' } });\n        }\n        onValidate(isWSDLValid);\n        setIsValidating(false);\n        return success;\n    }\n\n    /**\n     * Handles WSDL validation error response.\n     *\n     * @param error {*} error object\n     * @param type {string} file/url type\n     */\n    function handleWSDLValidationErrorResponse(error, type) {\n        let message = 'Error occurred during validation';\n        if (error.response && error.response.body.description) {\n            message = error.response.body.description;\n        }\n        if (type === 'file') {\n            setValidity({ ...isError, file: { message } });\n        } else {\n            setValidity({ ...isError, url: { message } });\n        }\n        setIsValidating(false);\n    }\n\n    /**\n     * Trigger the onValidate call back after validating WSDL url from the state.\n     * Do the validation state aggregation and call the onValidate method with aggregated value\n     * @param {Object} state Validation state object\n     */\n    function validateUrl(state) {\n        if (state === null) {\n            setIsValidating(true);\n            Wsdl.validateUrl(apiInputs.inputValue).then((response) => {\n                handleWSDLValidationResponse(response, 'url');\n            }).catch((error) => {\n                handleWSDLValidationErrorResponse(error, 'url');\n            });\n        } else {\n            setValidity({ ...isError, url: state });\n            onValidate(false);\n        }\n    }\n\n    /**\n     * Trigger the provided onValidate callback after validating the provided WSDL file.\n     * Do the validation state aggregation and call the onValidate method with aggregated value\n     * @param {*} file WSDL file or archive\n     * @param {Object} state Validation state object\n     */\n    function validateFileOrArchive(file, state = null) {\n        if (state === null) {\n            setIsValidating(true);\n            Wsdl.validateFileOrArchive(file).then((response) => {\n                if (handleWSDLValidationResponse(response, 'file')) {\n                    inputsDispatcher({ action: 'inputValue', value: file });\n                }\n            }).catch((error) => {\n                handleWSDLValidationErrorResponse(error, 'file');\n            });\n        } else {\n            setValidity({ ...isError, file: state });\n            onValidate(false);\n        }\n    }\n\n    /**\n     *\n     *\n     * @param {*} files\n     */\n    function onDrop(files) {\n        // Why `files[0]` below is , We only handle one wsdl file at a time, So if use provide multiple, We would only\n        // accept the first file. This information is shown in the dropdown helper text\n        validateFileOrArchive(files[0]);\n    }\n\n    /**\n     *  Render uploaded WSDL schema list\n     */\n    function renderUploadedList() {\n        return (\n            <List>\n                <ListItem key={apiInputs.inputValue.path}>\n                    <ListItemAvatar>\n                        <Avatar>\n                            <InsertDriveFile />\n                        </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                        primary={`${apiInputs.inputValue.path} - ${humanFileSize(apiInputs.inputValue.size)}`}\n                    />\n                    <ListItemSecondaryAction>\n                        <IconButton\n                            edge='end'\n                            aria-label='delete'\n                            onClick={() => {\n                                inputsDispatcher({ action: 'inputValue', value: null });\n                                inputsDispatcher({ action: 'isFormValid', value: false });\n                            }}\n                        >\n                            <DeleteIcon />\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                </ListItem>\n            </List>\n        );\n    }\n\n    const dropBoxControlLabel = isGenerateRESTAPI ? (\n        <FormattedMessage\n            id='Apis.Create.WSDL.Steps.ProvideWSDL.Input.file.dropzone'\n            defaultMessage='Drag & Drop WSDL file {break} -or-'\n            values={{ break: <br /> }}\n        />\n    ) : (\n        <FormattedMessage\n            id='Apis.Create.WSDL.Steps.ProvideWSDL.Input.file.archive.dropzone'\n            defaultMessage='Drag & Drop WSDL file/archive {break} -or-'\n            values={{ break: <br /> }}\n        />\n    );\n\n    /**\n     * Render file upload UI.\n     *\n     */\n    function renderFileUpload() {\n        if (apiInputs.inputValue) {\n            return renderUploadedList();\n        }\n        // TODO: Pass message saying accepting only one file ~tmkb\n        return (\n            <DropZoneLocal\n                error={isError && isError.file}\n                onDrop={onDrop}\n                files={apiInputs.inputValue}\n                accept='.bz,.bz2,.gz,.rar,.tar,.zip,.7z,.wsdl'\n            >\n                {isValidating ? (<CircularProgress />)\n                    : (\n                        <>\n                            { dropBoxControlLabel }\n                            <Button\n                                color='primary'\n                                variant='contained'\n                            >\n                                <FormattedMessage\n                                    id='Apis.Create.WSDL.Steps.ProvideWSDL.Input.file.upload'\n                                    defaultMessage='Browse File to Upload'\n                                />\n                            </Button>\n                        </>\n                    )}\n            </DropZoneLocal>\n        );\n    }\n\n    let urlStateEndAdornment = null;\n    if (isValidating) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <CircularProgress />\n            </InputAdornment>\n        );\n    } else if (isError && isError.url) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <ErrorOutlineIcon fontSize='large' color='error' />\n            </InputAdornment>\n        );\n    } else if (isError && !isError.url) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <CheckIcon fontSize='large' color='primary' />\n            </InputAdornment>\n        );\n    }\n\n    return (\n        <>\n            <Grid container spacing={5}>\n                {isCreateMode\n                && (\n                    <Grid item md={12}>\n                        <FormControl component='fieldset'>\n                            <FormLabel component='legend'>\n                                <>\n                                    <sup className={classes.mandatoryStar}>*</sup>\n                                    {' '}\n                                    <FormattedMessage\n                                        id='Apis.Create.WSDL.Steps.ProvideWSDL.implementation.type'\n                                        defaultMessage='Implementation Type'\n                                    />\n                                </>\n                            </FormLabel>\n                            <RadioGroup\n                                aria-label='Implementation type'\n                                value={apiInputs.type ? apiInputs.type : 'SOAP'}\n                                onChange={\n                                    (event) => {\n                                        inputsDispatcher({ action: 'type', value: event.target.value });\n                                        inputsDispatcher({ action: 'isFormValid', value: false });\n                                        inputsDispatcher({ action: 'inputValue', value: null });\n                                        inputsDispatcher({ action: 'inputType', value: 'url' });\n                                    }\n                                }\n                            >\n                                <FormControlLabel\n                                    value='SOAP'\n                                    control={<Radio color='primary' />}\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Create.WSDL.Steps.ProvideWSDL.passthrough.label'\n                                            defaultMessage='Pass Through'\n                                        />\n                                    )}\n                                />\n                                <FormControlLabel\n                                    value='SOAPTOREST'\n                                    control={<Radio color='primary' />}\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Create.WSDL.Steps.ProvideWSDL.SOAPtoREST.label'\n                                            defaultMessage='Generate REST APIs'\n                                        />\n                                    )}\n                                />\n                            </RadioGroup>\n                        </FormControl>\n                    </Grid>\n                )}\n                <Grid item md={12}>\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend'>\n                            <>\n                                <sup className={classes.mandatoryStar}>*</sup>\n                                {' '}\n                                <FormattedMessage\n                                    id='Apis.Create.WSDL.Steps.ProvideWSDL.Input.type'\n                                    defaultMessage='Input Type'\n                                />\n                            </>\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='Input type'\n                            value={apiInputs.inputType}\n                            onChange={(event) => inputsDispatcher({ action: 'inputType', value: event.target.value })}\n                        >\n                            <FormControlLabel\n                                value='url'\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Create.WSDL.Steps.ProvideWSDL.url.label'\n                                        defaultMessage='WSDL URL'\n                                    />\n                                )}\n                            />\n                            <FormControlLabel\n                                value='file'\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Create.WSDL.Steps.ProvideWSDL.file.label.wsdl.file.archive'\n                                        defaultMessage='WSDL File/Archive'\n                                    />\n                                )}\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                {isError && isError.file\n                    && (\n                        <Grid item md={11}>\n                            <Banner\n                                onClose={() => setValidity({ file: null })}\n                                disableActions\n                                dense\n                                paperProps={{ elevation: 1 }}\n                                type='error'\n                                message={isError.file.message}\n                            />\n                        </Grid>\n                    )}\n                <Grid item md={11}>\n                    {isFileInput ? renderFileUpload()\n                        : (\n                            <TextField\n                                autoFocus\n                                id='outlined-full-width'\n                                label='WSDL URL'\n                                placeholder='Enter WSDL URL'\n                                fullWidth\n                                margin='normal'\n                                variant='outlined'\n                                onChange={({ target: { value } }) => inputsDispatcher({ action: 'inputValue', value })}\n                                value={apiInputs.inputValue}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                InputProps={{\n                                    onBlur: ({ target: { value } }) => {\n                                        validateUrl(APIValidation.url.required().validate(value).error);\n                                    },\n                                    endAdornment: urlStateEndAdornment,\n                                }}\n                                helperText={\n                                    (isError && isError.url && isError.url.message) || 'Click away to validate the URL'\n                                }\n                                error={isError && Boolean(isError.url)}\n                                disabled={isValidating}\n                            />\n                        )}\n\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n\nProvideWSDL.defaultProps = {\n    onValidate: () => { },\n};\nProvideWSDL.propTypes = {\n    apiInputs: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n        mode: PropTypes.string,\n    }).isRequired,\n    inputsDispatcher: PropTypes.func.isRequired,\n    onValidate: PropTypes.func,\n};\n","/**\n * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport API from 'AppData/api';\n\nimport APIClientFactory from './APIClientFactory';\nimport Utils from './Utils';\nimport Resource from './Resource';\n\n/**\n * An abstract representation of a Scopes\n */\nclass Wsdl extends Resource {\n    /**\n     * Validate a WSDL file or an archive\n     *\n     * @static\n     * @param {*} file WSDL file or archive\n     * @returns {*} WSDL validation response\n     * @memberof Wsdl\n     */\n    static validateFileOrArchive(file) {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(), Utils.CONST.API_CLIENT)\n            .client;\n        const requestBody = {\n            requestBody: {\n                file,\n            },\n        };\n        return apiClient.then((client) => {\n            return client.apis.Validation.validateWSDLDefinition(null, requestBody);\n        });\n    }\n\n    /**\n     * Validate a WSDL URL\n     *\n     * @static\n     * @param {*} url WSDL URL\n     * @returns {*} WSDL validation response\n     * @memberof Wsdl\n     */\n    static validateUrl(url) {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(), Utils.CONST.API_CLIENT)\n            .client;\n        return apiClient.then((client) => {\n            return client.apis.Validation.validateWSDLDefinition(\n                {},\n                {\n                    requestBody: { url },\n                },\n            );\n        });\n    }\n\n    /**\n     * Importing a WSDL and creating an API by a .wsdl file or a WSDL archive zip file\n     *\n     * @static\n     * @param {*} url WSDL url\n     * @param {*} additionalProperties additional properties of the API eg: name, version, context\n     * @param {*} implementationType SOAPTOREST or SOAP\n     * @returns {API} API object which was created\n     * @memberof Wsdl\n     */\n    static importByUrl(url, additionalProperties, implementationType = 'SOAP') {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(), Utils.CONST.API_CLIENT)\n            .client;\n        return apiClient.then((client) => {\n            const promisedResponse = client.apis.APIs.importWSDLDefinition(\n                {},\n                {\n                    requestBody: {\n                        url,\n                        additionalProperties: JSON.stringify(additionalProperties),\n                        implementationType,\n                    },\n                },\n            );\n            return promisedResponse.then((response) => new API(response.body));\n        });\n    }\n\n    /**\n     * Importing a WSDL and creating an API by a .wsdl file or a WSDL archive zip file\n     *\n     * @static\n     * @param {*} file WSDL file or archive\n     * @param {*} additionalProperties additional properties of the API eg: name, version, context\n     * @param {*} implementationType SOAPTOREST or SOAP\n     * @returns {API} API object which was created\n     * @memberof Wsdl\n     */\n    static importByFileOrArchive(file, additionalProperties, implementationType = 'SOAP') {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(), Utils.CONST.API_CLIENT)\n            .client;\n        return apiClient.then((client) => {\n            const promisedResponse = client.apis.APIs.importWSDLDefinition(\n                null,\n                {\n                    requestBody: {\n                        file,\n                        additionalProperties: JSON.stringify(additionalProperties),\n                        implementationType,\n                    },\n                },\n            );\n\n            return promisedResponse.then((response) => new API(response.body));\n        });\n    }\n}\n\nexport default Wsdl;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Radio from '@material-ui/core/Radio';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertDriveFile from '@material-ui/icons/InsertDriveFile';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport Banner from 'AppComponents/Shared/Banner';\nimport APIValidation from 'AppData/APIValidation';\nimport API from 'AppData/api';\nimport DropZoneLocal, { humanFileSize } from 'AppComponents/Shared/DropZoneLocal';\nimport CheckCircleSharpIcon from '@material-ui/icons/CheckCircleSharp';\nimport Chip from '@material-ui/core/Chip';\n\nconst useStyles = makeStyles((theme) => ({\n    mandatoryStar: {\n        color: theme.palette.error.main,\n    },\n}));\n\n/**\n * Sub component of API Create using AsyncAPI UI, This is handling the taking input of WSDL file or URL from the user\n * In the create API using AsyncAPI wizard first step out of 2 steps\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function ProvideAsyncAPI(props) {\n    const { apiInputs, inputsDispatcher, onValidate } = props;\n    const isFileInput = apiInputs.inputType === 'file';\n    const { inputType, inputValue } = apiInputs;\n    const classes = useStyles();\n    // If valid value is `null`,that means valid, else an error object will be there\n    const [isValid, setValidity] = useState({});\n    const [isValidating, setIsValidating] = useState(false);\n    const [validationErrors, setValidationErrors] = useState([]);\n    const [gatewayVendor, setGatewayVendor] = useState('wso2');\n\n    /**\n     *\n     *\n     * @param {*} files\n     */\n    function onDrop(files) {\n        setIsValidating(true);\n\n        // Why `files.pop()` below is , We only handle one AsyncAPI file at a time,\n        // So if use provide multiple, We would only\n        // accept the first file. This information is shown in the dropdown helper text\n        const file = files.pop();\n        let validFile = null;\n        API.validateAsyncAPIByFile(file)\n            .then((response) => {\n                const {\n                    body: { isValid: isValidFile, info, errors },\n                } = response;\n                setGatewayVendor(info.gatewayVendor);\n                if (isValidFile) {\n                    validFile = file;\n                    inputsDispatcher({ action: 'preSetAPI', value: info });\n                    setValidity({ ...isValid, file: null });\n                } else {\n                    // eslint-disable-next-line max-len\n                    setValidity({ ...isValid, file: { message: 'AsyncAPI content validation failed! ' } });\n                    setValidationErrors(errors);\n                }\n            })\n            .catch((error) => {\n                setValidity({ ...isValid, file: { message: 'AsyncAPI content validation failed!' } });\n                console.error(error);\n            })\n            .finally(() => {\n                setIsValidating(false); // Stop the loading animation\n                onValidate(validFile !== null); // If there is a valid file then validation has passed\n                // If the given file is valid , we set it as the inputValue else set `null`\n                inputsDispatcher({ action: 'inputValue', value: validFile });\n            });\n    }\n\n    /**\n     * Trigger the provided onValidate call back on each input validation run\n     * Do the validation state aggregation and call the onValidate method with aggregated value\n     * @param {Object} state Validation state object returned from Joi `.validate()` method\n     */\n    function validateURL(value) {\n        const state = APIValidation.url.required().validate(value).error;\n        // State `null` means URL is valid, We do backend validation only in valid URLs\n        if (state === null) {\n            setIsValidating(true);\n            API.validateAsyncAPIByUrl(apiInputs.inputValue, { returnContent: true }).then((response) => {\n                const {\n                    body: {\n                        isValid: isValidURL, info, content, errors,\n                    },\n                } = response;\n                if (isValidURL) {\n                    info.content = content;\n                    inputsDispatcher({ action: 'preSetAPI', value: info });\n                    setValidity({ ...isValid, url: null });\n                } else {\n                    setValidity({ ...isValid, url: { message: 'AsyncAPI content validation failed!' } });\n                    setValidationErrors(errors);\n                }\n                onValidate(isValidURL);\n                setIsValidating(false);\n            }).catch((error) => {\n                setValidity({ url: { message: error.message } });\n                onValidate(false);\n                setIsValidating(false);\n                console.error(error);\n            });\n            // Valid URL string\n            // TODO: Handle catch network or api call failures ~tmkb\n        } else {\n            setValidity({ ...isValid, url: state });\n            onValidate(false);\n        }\n    }\n\n    useEffect(() => {\n        if (inputValue) {\n            if (inputType === ProvideAsyncAPI.INPUT_TYPES.FILE) {\n                onDrop([inputValue]);\n            } else if (inputType === ProvideAsyncAPI.INPUT_TYPES.URL) {\n                validateURL(inputValue);\n            }\n        }\n    }, [inputType, inputValue]);\n\n    // TODO: Use validation + input to separate component that can be share with wsdl,swagger,graphql URL inputs ~tmkb\n    const isInvalidURL = Boolean(isValid.url);\n    let urlStateEndAdornment = null;\n    if (isValidating) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <CircularProgress />\n            </InputAdornment>\n        );\n    } else if (isValid.url !== undefined) {\n        if (isInvalidURL) {\n            urlStateEndAdornment = (\n                <InputAdornment position='end'>\n                    <ErrorOutlineIcon fontSize='large' color='error' />\n                </InputAdornment>\n            );\n        } else {\n            urlStateEndAdornment = (\n                <InputAdornment position='end'>\n                    <CheckIcon fontSize='large' color='primary' />\n                </InputAdornment>\n            );\n        }\n    }\n\n    return (\n        <>\n            <Grid container spacing={5}>\n                <Grid item xs={12} md={12}>\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend'>\n                            <>\n                                <sup className={classes.mandatoryStar}>*</sup>\n                                {' '}\n                                <FormattedMessage\n                                    id='Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.Input.type'\n                                    defaultMessage='Input Type'\n                                />\n                            </>\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='Input type'\n                            value={apiInputs.inputType}\n                            onChange={(event) => inputsDispatcher({ action: 'inputType', value: event.target.value })}\n                        >\n                            <FormControlLabel\n                                value={ProvideAsyncAPI.INPUT_TYPES.URL}\n                                control={<Radio color='primary' />}\n                                label='AsyncAPI URL'\n                            />\n                            <FormControlLabel\n                                value={ProvideAsyncAPI.INPUT_TYPES.FILE}\n                                control={<Radio color='primary' />}\n                                label='AsyncAPI File'\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                {isValid.file\n                && (\n                    <Grid item md={11}>\n                        <Banner\n                            onClose={() => setValidity({ file: null })}\n                            disableActions\n                            dense\n                            paperProps={{ elevation: 1 }}\n                            type='error'\n                            message={isValid.file.message}\n                            errors={validationErrors}\n                        />\n                    </Grid>\n                )}\n                <Grid item xs={10} md={11}>\n                    {isFileInput ? (\n                        <>\n                            {apiInputs.inputValue ? (\n                                <List>\n                                    <ListItem key={apiInputs.inputValue.path}>\n                                        <ListItemAvatar>\n                                            <Avatar>\n                                                <InsertDriveFile />\n                                            </Avatar>\n                                        </ListItemAvatar>\n                                        <ListItemText\n                                            primary={`${apiInputs.inputValue.path} -\n                                    ${humanFileSize(apiInputs.inputValue.size)}`}\n                                        />\n                                        <ListItemSecondaryAction>\n                                            <IconButton\n                                                edge='end'\n                                                aria-label='delete'\n                                                onClick={() => {\n                                                    inputsDispatcher({ action: 'inputValue', value: null });\n                                                    inputsDispatcher({ action: 'isFormValid', value: false });\n                                                }}\n                                            >\n                                                <DeleteIcon />\n                                            </IconButton>\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                </List>\n                            ) : (\n                                <DropZoneLocal\n                                    error={isValid.file}\n                                    onDrop={onDrop}\n                                    files={apiInputs.inputValue}\n                                    accept='.bz,.bz2,.gz,.rar,.tar,.zip,.7z,.json,application/json,.yaml,.yml'\n                                >\n                                    {isValidating ? (<CircularProgress />)\n                                        : ([\n                                            <FormattedMessage\n                                                id='Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.Input.file.dropzone'\n                                                defaultMessage={'Drag & Drop AsyncAPI File '\n                                                + 'here {break} or {break} Browse files'}\n                                                values={{ break: <br /> }}\n                                            />,\n                                            <Button\n                                                color='primary'\n                                                variant='contained'\n                                            >\n                                                <FormattedMessage\n                                                    id='Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.Input.file.upload'\n                                                    defaultMessage='Browse File to Upload'\n                                                />\n                                            </Button>,\n                                        ]\n                                        )}\n                                </DropZoneLocal>\n                            )}\n                        </>\n                    ) : (\n                        <TextField\n                            autoFocus\n                            id='outlined-full-width'\n                            label='AsyncAPI URL'\n                            placeholder='Enter AsyncAPI URL'\n                            fullWidth\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { value } }) => inputsDispatcher({ action: 'inputValue', value })}\n                            value={apiInputs.inputValue}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            InputProps={{\n                                onBlur: ({ target: { value } }) => {\n                                    validateURL(value);\n                                },\n                                endAdornment: urlStateEndAdornment,\n                            }}\n                            // 'Give the URL of AsyncAPI endpoint'\n                            helperText={(isValid.url && isValid.url.message) || 'Click away to validate the URL'}\n                            error={isInvalidURL}\n                        />\n                    )}\n                </Grid>\n                { gatewayVendor === 'solace' && (\n                    <Grid item xs={10} md={11}>\n                        <Chip\n                            label='Identified as Solace Event Portal API'\n                            icon={<CheckCircleSharpIcon style={{ color: 'green' }} />}\n                            variant='outlined'\n                            style={{ color: 'green' }}\n                        />\n                    </Grid>\n                )}\n                <Grid item xs={2} md={5} />\n            </Grid>\n        </>\n    );\n}\n\nProvideAsyncAPI.defaultProps = {\n    onValidate: () => { },\n};\nProvideAsyncAPI.INPUT_TYPES = {\n    URL: 'url',\n    FILE: 'file',\n};\nProvideAsyncAPI.propTypes = {\n    apiInputs: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n        inputValue: PropTypes.string,\n    }).isRequired,\n    inputsDispatcher: PropTypes.func.isRequired,\n    onValidate: PropTypes.func,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Radio from '@material-ui/core/Radio';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertDriveFile from '@material-ui/icons/InsertDriveFile';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport debounce from 'lodash.debounce'; // WARNING: This is coming from mui-datatable as a transitive dependency\n\nimport Banner from 'AppComponents/Shared/Banner';\nimport APIValidation from 'AppData/APIValidation';\nimport API from 'AppData/api';\nimport DropZoneLocal, { humanFileSize } from 'AppComponents/Shared/DropZoneLocal';\nimport SpecErrors from 'AppComponents/Apis/Details/Resources/components/SpecErrors';\n\n\nconst useStyles = makeStyles((theme) => ({\n    mandatoryStar: {\n        color: theme.palette.error.main,\n    },\n}));\n\n/**\n * Sub component of API Create using OpenAPI UI, This is handling the taking input of WSDL file or URL from the user\n * In the create API using OpenAPI wizard first step out of 2 steps\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function ProvideOpenAPI(props) {\n    const { apiInputs, inputsDispatcher, onValidate } = props;\n    const isFileInput = apiInputs.inputType === 'file';\n    const { inputType, inputValue } = apiInputs;\n    const classes = useStyles();\n    // If valid value is `null`,that means valid, else an error object will be there\n    const [isValid, setValidity] = useState({});\n    const [validationErrors, setValidationErrors] = useState(null);\n    const [isValidating, setIsValidating] = useState(false);\n    useEffect(() => {\n        setValidationErrors(null);\n    }, [apiInputs.inputType]);\n    const validateURLDebounced = useCallback(\n        debounce((newURL) => { // Example: https://codesandbox.io/s/debounce-example-l7fq3?file=/src/App.js\n            API.validateOpenAPIByUrl(newURL, { returnContent: true }).then((response) => {\n                const {\n                    body: {\n                        isValid: isValidURL, info, content, errors,\n                    },\n                } = response;\n                if (isValidURL) {\n                    info.content = content;\n                    inputsDispatcher({ action: 'preSetAPI', value: info });\n                    setValidity({ ...isValid, url: null });\n                } else {\n                    setValidity({ ...isValid, url: { message: 'OpenAPI content validation failed!' } });\n                    setValidationErrors(errors);\n                }\n                onValidate(isValidURL);\n                setIsValidating(false);\n            }).catch((error) => {\n                setValidity({ url: { message: error.message } });\n                onValidate(false);\n                setIsValidating(false);\n                console.error(error);\n            });\n        }, 750),\n        [],\n    );\n    /**\n     *\n     *\n     * @param {*} files\n     */\n    function onDrop(files) {\n        setIsValidating(true);\n\n        // Why `files.pop()` below is , We only handle one OpenAPI file at a time,\n        // So if use provide multiple, We would only\n        // accept the first file. This information is shown in the dropdown helper text\n        const file = files.pop();\n        let validFile = null;\n        API.validateOpenAPIByFile(file)\n            .then((response) => {\n                const {\n                    body: { isValid: isValidFile, info, errors },\n                } = response;\n                if (isValidFile) {\n                    validFile = file;\n                    inputsDispatcher({ action: 'preSetAPI', value: info });\n                    setValidity({ ...isValid, file: null });\n                } else {\n                    setValidity({ ...isValid, file: { message: 'OpenAPI content validation failed!' } });\n                    setValidationErrors(errors);\n                }\n            })\n            .catch((error) => {\n                setValidity({ ...isValid, file: { message: 'OpenAPI content validation failed!' } });\n                console.error(error);\n            })\n            .finally(() => {\n                setIsValidating(false); // Stop the loading animation\n                onValidate(validFile !== null); // If there is a valid file then validation has passed\n                // If the given file is valid , we set it as the inputValue else set `null`\n                inputsDispatcher({ action: 'inputValue', value: validFile });\n            });\n    }\n\n    /**\n     * Trigger the provided onValidate call back on each input validation run\n     * Do the validation state aggregation and call the onValidate method with aggregated value\n     * @param {Object} state Validation state object returned from Joi `.validate()` method\n     */\n    function validateURL(value) {\n        const state = APIValidation.url.required().validate(value).error;\n        // State `null` means URL is valid, We do backend validation only if it's a valid URL\n        if (state === null) {\n            setIsValidating(true);\n            validateURLDebounced(apiInputs.inputValue);\n            // Valid URL string\n            // TODO: Handle catch network or api call failures ~tmkb\n        } else {\n            setValidity({ ...isValid, url: state });\n            onValidate(false);\n        }\n    }\n\n    useEffect(() => {\n        if (inputValue) {\n            if (inputType === ProvideOpenAPI.INPUT_TYPES.FILE) {\n                onDrop([inputValue]);\n            } else if (inputType === ProvideOpenAPI.INPUT_TYPES.URL) {\n                validateURL(inputValue);\n            }\n        }\n    }, [inputType, inputValue]);\n\n    // TODO: Use validation + input to separate component that can be share with wsdl,swagger,graphql URL inputs ~tmkb\n    const isInvalidURL = Boolean(isValid.url);\n    let urlStateEndAdornment = null;\n    if (isValidating) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <CircularProgress />\n            </InputAdornment>\n        );\n    } else if (isValid.url !== undefined) {\n        if (isInvalidURL) {\n            urlStateEndAdornment = (\n                <InputAdornment position='end'>\n                    <ErrorOutlineIcon fontSize='large' color='error' />\n                </InputAdornment>\n            );\n        } else {\n            urlStateEndAdornment = (\n                <InputAdornment position='end' id='url-validated'>\n                    <CheckIcon fontSize='large' color='primary' />\n                </InputAdornment>\n            );\n        }\n    }\n\n    return (\n        <>\n            <Grid container spacing={5}>\n                <Grid item xs={12} md={12}>\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend'>\n                            <>\n                                <sup className={classes.mandatoryStar}>*</sup>\n                                {' '}\n                                <FormattedMessage\n                                    id='Apis.Create.OpenAPI.Steps.ProvideOpenAPI.Input.type'\n                                    defaultMessage='Input Type'\n                                />\n                            </>\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='Input type'\n                            value={apiInputs.inputType}\n                            onChange={(event) => inputsDispatcher({ action: 'inputType', value: event.target.value })}\n                        >\n                            <FormControlLabel\n                                value={ProvideOpenAPI.INPUT_TYPES.URL}\n                                control={<Radio color='primary' />}\n                                label='OpenAPI URL'\n                                id='open-api-url-select-radio'\n                            />\n                            <FormControlLabel\n                                value={ProvideOpenAPI.INPUT_TYPES.FILE}\n                                control={<Radio color='primary' />}\n                                label='OpenAPI File/Archive'\n                                aria-label='OpenAPI File/Archive'\n                                id='open-api-file-select-radio'\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                {isValid.file\n                    && (\n                        <Grid item md={11}>\n                            <Banner\n                                onClose={() => setValidity({ file: null })}\n                                disableActions\n                                dense\n                                paperProps={{ elevation: 1 }}\n                                type='error'\n                                message={isValid.file.message}\n                            />\n                        </Grid>\n                    )}\n                <Grid item xs={10} md={11}>\n                    {isFileInput ? (\n                        <>\n                            {apiInputs.inputValue ? (\n                                <List>\n                                    <ListItem key={apiInputs.inputValue.path}>\n                                        <ListItemAvatar>\n                                            <Avatar>\n                                                <InsertDriveFile />\n                                            </Avatar>\n                                        </ListItemAvatar>\n                                        <ListItemText\n                                            primary={`${apiInputs.inputValue.path} -\n                                    ${humanFileSize(apiInputs.inputValue.size)}`}\n                                        />\n                                        <ListItemSecondaryAction>\n                                            <IconButton\n                                                edge='end'\n                                                aria-label='delete'\n                                                onClick={() => {\n                                                    inputsDispatcher({ action: 'inputValue', value: null });\n                                                    inputsDispatcher({ action: 'isFormValid', value: false });\n                                                }}\n                                            >\n                                                <DeleteIcon />\n                                            </IconButton>\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                </List>\n                            ) : (\n                                <DropZoneLocal\n                                    error={isValid.file}\n                                    onDrop={onDrop}\n                                    files={apiInputs.inputValue}\n                                    accept='.bz,.bz2,.gz,.rar,.tar,.zip,.7z,.json,application/json,.yaml'\n                                >\n                                    {isValidating ? (<CircularProgress />)\n                                        : ([\n                                            <FormattedMessage\n                                                id='Apis.Create.OpenAPI.Steps.ProvideOpenAPI.Input.file.dropzone'\n                                                defaultMessage={'Drag & Drop Open API File/Archive '\n                                                 + 'here {break} or {break} Browse files'}\n                                                values={{ break: <br /> }}\n                                            />,\n                                            <Button\n                                                color='primary'\n                                                variant='contained'\n                                                id='browse-to-upload-btn'\n                                            >\n                                                <FormattedMessage\n                                                    id='Apis.Create.OpenAPI.Steps.ProvideOpenAPI.Input.file.upload'\n                                                    defaultMessage='Browse File to Upload'\n                                                />\n                                            </Button>,\n                                        ]\n                                        )}\n                                </DropZoneLocal>\n                            )}\n                        </>\n                    ) : (\n                        <TextField\n                            autoFocus\n                            id='outlined-full-width'\n                            label='OpenAPI URL'\n                            placeholder='Enter OpenAPI URL'\n                            fullWidth\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { value } }) => inputsDispatcher({ action: 'inputValue', value })}\n                            value={apiInputs.inputValue}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            InputProps={{\n                                onBlur: ({ target: { value } }) => {\n                                    validateURL(value);\n                                },\n                                endAdornment: urlStateEndAdornment,\n                            }}\n                            // 'Give the URL of OpenAPI endpoint'\n                            helperText={(isValid.url && isValid.url.message) || 'Click away to validate the URL'}\n                            error={isInvalidURL}\n                            data-testid='swagger-url-endpoint'\n                        />\n                    )}\n                </Grid>\n                {validationErrors && (\n                    <Grid item xs={10} md={11}>\n                        <Box display='flex' justifyContent='right' alignItems='center'>\n                            Show Errors\n                            <SpecErrors specErrors={validationErrors} />\n                        </Box>\n                    </Grid>\n                )}\n                <Grid item xs={2} md={5} />\n            </Grid>\n        </>\n    );\n}\n\nProvideOpenAPI.defaultProps = {\n    onValidate: () => { },\n};\nProvideOpenAPI.INPUT_TYPES = {\n    URL: 'url',\n    FILE: 'file',\n};\nProvideOpenAPI.propTypes = {\n    apiInputs: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n        inputValue: PropTypes.string,\n    }).isRequired,\n    inputsDispatcher: PropTypes.func.isRequired,\n    onValidate: PropTypes.func,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertDriveFile from '@material-ui/icons/InsertDriveFile';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport API from 'AppData/api';\nimport DropZoneLocal, { humanFileSize } from 'AppComponents/Shared/DropZoneLocal';\nimport Banner from 'AppComponents/Shared/Banner';\n\nconst useStyles = makeStyles((theme) => ({\n    mandatoryStar: {\n        color: theme.palette.error.main,\n    },\n}));\n\n/**\n * Sub component of API Create using GraphQL UI, This is handling the taking input of GraphQL file or URL from the user\n * In the create API using OpenAPI wizard first step out of 2 steps\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function ProvideGraphQL(props) {\n    const { apiInputs, inputsDispatcher, onValidate } = props;\n    const { inputValue } = apiInputs;\n    const classes = useStyles();\n    // If valid value is `null`,that means valid, else an error object will be there\n    const [isValid, setValidity] = useState({ file: null });\n    const [isValidating, setIsValidating] = useState(false);\n    /**\n     *\n     *\n     * @param {*} files\n     */\n    function onDrop(files) {\n        setIsValidating(true);\n\n        // Why `files.pop()` below is , We only handle one graphQL file at a time,\n        // So if use provide multiple, We would only\n        // accept the first file. This information is shown in the dropdown helper text\n        const file = files.pop();\n        let validFile = null;\n        API.validateGraphQLFile(file)\n            .then((response) => {\n                const {\n                    body: { isValid: isValidFile, graphQLInfo },\n                } = response;\n                if (isValidFile) {\n                    validFile = file;\n                    inputsDispatcher({ action: 'graphQLInfo', value: graphQLInfo });\n                    setValidity({ ...isValid, file: null });\n                } else {\n                    setValidity({ ...isValid, file: { message: 'GraphQL content validation failed!' } });\n                }\n            })\n            .catch((error) => {\n                setValidity({ ...isValid, file: { message: 'GraphQL content validation failed!' } });\n                console.error(error);\n            })\n            .finally(() => {\n                setIsValidating(false); // Stop the loading animation\n                onValidate(validFile !== null); // If there is a valid file then validation has passed\n                // If the given file is valid , we set it as the inputValue else set `null`\n                inputsDispatcher({ action: 'inputValue', value: validFile });\n            });\n    }\n\n    useEffect(() => {\n        if (inputValue) {\n            onDrop([inputValue]);\n        }\n    }, [inputValue]);\n    const accept = '.graphql,text/plain';\n    return (\n        <>\n            <Grid container spacing={5}>\n                {!apiInputs.inputValue && (\n                    <Grid item md={12}>\n                        <FormControl component='fieldset'>\n                            <FormLabel component='legend'>\n                                <>\n                                    <sup className={classes.mandatoryStar}>*</sup>\n                                    {' '}\n                                    <FormattedMessage\n                                        id='Apis.Create.GraphQL.Steps.ProvideGraphQL.Input.type'\n                                        defaultMessage='Provide GraphQL File'\n                                    />\n                                </>\n                            </FormLabel>\n                        </FormControl>\n                    </Grid>\n                )}\n                {isValid.file\n                    && (\n                        <Grid item md={11}>\n                            <Banner\n                                onClose={() => setValidity({ file: null })}\n                                disableActions\n                                dense\n                                paperProps={{ elevation: 1 }}\n                                type='error'\n                                message={isValid.file.message}\n                            />\n                        </Grid>\n                    )}\n                <Grid item md={11}>\n                    {apiInputs.inputValue ? (\n                        <List data-testid='uploaded-list-graphql'>\n                            <ListItem key={apiInputs.inputValue.path}>\n                                <ListItemAvatar>\n                                    <Avatar>\n                                        <InsertDriveFile />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    primary={`${apiInputs.inputValue.path} - \n                                    ${humanFileSize(apiInputs.inputValue.size)}`}\n                                />\n                                <ListItemSecondaryAction>\n                                    <IconButton\n                                        edge='end'\n                                        aria-label='delete'\n                                        onClick={() => {\n                                            inputsDispatcher({ action: 'inputValue', value: null });\n                                            inputsDispatcher({ action: 'isFormValid', value: false });\n                                        }}\n                                    >\n                                        <DeleteIcon />\n                                    </IconButton>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        </List>\n                    ) : (\n                        <DropZoneLocal\n                            error={isValid.file}\n                            onDrop={onDrop}\n                            files={apiInputs.inputValue}\n                            accept={accept}\n                            ariaLabel='GraphQL file upload'\n                        >\n                            {isValidating ? (<CircularProgress />)\n                                : ([\n                                    <FormattedMessage\n                                        id='Apis.Create.GraphQL.Steps.ProvideGraphQL.Input.file.dropzone'\n                                        defaultMessage={'Drag & Drop files here {break} or {break} '\n                                        + 'Browse files{break}({accept})'}\n                                        values={{ break: <br />, accept }}\n                                    />,\n                                    <Button\n                                        color='primary'\n                                        variant='contained'\n                                        data-testid='browse-to-upload-btn'\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Create.GraphQL.Steps.ProvideGraphQL.Input.file.upload'\n                                            defaultMessage='Browse File to Upload'\n                                        />\n                                    </Button>,\n                                ]\n                                )}\n                        </DropZoneLocal>\n                    )}\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n\nProvideGraphQL.defaultProps = {\n    onValidate: () => {},\n};\nProvideGraphQL.propTypes = {\n    apiInputs: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    inputsDispatcher: PropTypes.func.isRequired,\n    onValidate: PropTypes.func,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { useTheme } from '@material-ui/styles';\nimport Chip from '@material-ui/core/Chip';\nimport PropTypes from 'prop-types';\n\nfunction MethodView(props) {\n    const theme = useTheme();\n    const { method, className } = props;\n    let chipColor = theme.custom.resourceChipColors ? theme.custom.resourceChipColors[method.toLowerCase()] : null;\n    let chipTextColor = '#000000';\n    if (!chipColor) {\n        console.log('Check the theme settings. The resourceChipColors is not populated properly');\n        chipColor = '#cccccc';\n    } else {\n        chipTextColor = theme.palette.getContrastText(theme.custom.resourceChipColors[method.toLowerCase()]);\n    }\n    return (\n        <Chip\n            label={method}\n            className={className || ''}\n            style={{\n                backgroundColor: chipColor, color: chipTextColor, height: 20, width: 65,\n            }}\n        />\n    );\n}\nMethodView.propTypes = {\n    className: PropTypes.string.isRequired,\n    method: PropTypes.string.isRequired,\n};\n\nexport default MethodView;\n"],"sourceRoot":""}