{"version":3,"sources":["webpack:///./source/src/app/components/Shared/RevisionContext.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/endpointUtils.js","webpack:///./source/src/app/components/Apis/Details/Resources/components/APIRateLimiting.jsx","webpack:///./source/src/app/data/Comments.js","webpack:///./source/src/app/components/Shared/LeftMenuItem.jsx","webpack:///./source/src/app/components/Apis/Listing/components/ImageGenerator/ThumbnailView.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/Endpoints.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/KeyManager.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration/Certificates.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/AddOperation.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/SaveOperations.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/Create.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/CreateEditForm.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/MarkdownEditor.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/Edit.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/Resources.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/parameterUtils.js","webpack:///./source/src/app/components/Apis/Details/Resources/components/GroupOfOperations.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GenericEndpoint.jsx","webpack:///./source/src/app/components/Shared/useAutocomplete.js","webpack:///./source/src/app/components/Apis/Details/Comments/CommentAdd.jsx","webpack:///./source/src/app/components/Apis/Details/APIDefinition/ImportDefinition.jsx","webpack:///./source/src/app/components/Apis/Details/APIDefinition/DefinitionOutdated.jsx","webpack:///./source/src/app/components/Apis/Details/index.jsx","webpack:///./source/src/app/components/Base/Errors/AuthorizedError.jsx","webpack:///./source/src/app/components/Apis/Details/components/LastUpdatedTime.jsx","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./source/src/app/components/Apis/Details/components/leftMenu/DevelopSectionMenu.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Overview.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Resources.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Operations.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/ProductResources.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Configuration.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Policies.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/CustomizedStepper.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/MetaData.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/BusinessInformation.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Endpoints.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Topics.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/DesignConfigurations.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/UpdateWithoutDetails.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/DefaultVersion.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/DescriptionEditor.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/AccessControl.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/AdvertiseInfo.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/StoreVisibility.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/Tags.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/Social.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APICategories.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/RuntimeConfiguration.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/ResponseCaching.jsx","webpack:///./source/src/app/data/UserStateUtils.js","webpack:///./source/src/app/components/Apis/Details/Configuration/components/CORSConfiguration.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/SchemaValidation.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/MaxBackendTps.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APISecurity/APISecurity.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APISecurity/components/ApplicationLevel.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/AuthorizationHeader.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APISecurity/components/TransportLevel.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration/UploadCertificate.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration/SelectEndpoint.jsx","webpack:///./source/src/app/components/Apis/Create/Components/SelectPolicies.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/Transports.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/QueryAnalysis.jsx","webpack:///./source/src/app/components/Apis/Details/QueryAnalysis/UpdateComplexity.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/Topics.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/AsyncOperation.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/DescriptionAndSummary.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/OperationGovernance.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/Parameters.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/ListParameters.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/EditParameter.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/PayloadProperties.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/AddPayloadProperty.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/ListPayloadProperties.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/EditPayloadProperty.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/Runtime.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/GroupOfOperations.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/SubscriptionConfig.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/RuntimeConfigurationWebSocket.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APILevelRateLimitingPolicies.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/LifeCycle.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/LifeCycleUpdate.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/Components/PublishWithoutDeploy.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/LifeCycleImage.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/CheckboxLabels.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/LifecyclePending.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/LifeCycleHistory.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/index.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/Listing.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/GoToEdit.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/Delete.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/DeleteMultiple.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/Download.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/View.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/EditContent.jsx","webpack:///./source/src/app/components/Apis/Details/Operations/Operations.jsx","webpack:///./source/src/app/components/Apis/Details/Operations/Operation.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/APIOperations.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/Operation.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/DescriptionAndSummary.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/OperationGovernance.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/AWSLambdaSettings.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/Parameters.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/AddParameter.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/ListParameters.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/RequestBody.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/EditParameter.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/SOAPToREST/SOAPToRESTListing.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/SOAPToREST/PolicyEditor.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/SOAPToREST/CloseConfirmation.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/GoToDefinitionLink.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/OperationsSelector.jsx","webpack:///./source/src/app/components/Apis/Details/ProductResources/APIProductOperations.jsx","webpack:///./source/src/app/components/Apis/Details/ProductResources/ProductResourcesEdit.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/Endpoints.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/NewEndpointCreate.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/EndpointOverview.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/Prototype/MockImplEndpoints.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/Prototype/MockedOASOperation.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/Prototype/MockScriptOperation.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/GenericOperation.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/LoadbalanceFailoverConfig.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/EndpointListing.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GenericEndpointAdd.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/LoadBalanceConfig.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/AdvancedConfig/AdvanceEndpointConfig.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration/EndpointSecurity.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration/EditableParameterRow.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/AWSLambda/Credentials.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/ServiceEndpoint.jsx","webpack:///./source/src/app/components/Shared/Autocomplete.jsx","webpack:///./source/src/app/components/Apis/Details/Environments/Environments.jsx","webpack:///./source/src/app/components/Apis/Details/Environments/DisplayDevportal.jsx","webpack:///./source/src/app/components/Apis/Details/Environments/DeploymentOnbording.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/Subscriptions.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/SubscriptionsTable.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/Invoice.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/SubscriptionPoliciesManage.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/SubscriptionAvailability.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/TenantAutocomplete.jsx","webpack:///./source/src/app/components/Apis/Details/Comments/Comments.jsx","webpack:///./source/src/app/components/Apis/Details/Comments/Comment.jsx","webpack:///./source/src/app/components/Apis/Details/Comments/CommentEdit.jsx","webpack:///./source/src/app/components/Apis/Details/Comments/CommentOptions.jsx","webpack:///./source/src/app/components/Apis/Details/Scopes/index.jsx","webpack:///./source/src/app/components/Apis/Details/Scopes/CreateScope.jsx","webpack:///./source/src/app/components/Apis/Details/Scopes/EditScope.jsx","webpack:///./source/src/app/components/Apis/Details/Scopes/Scopes.jsx","webpack:///./source/src/app/components/Apis/Details/Scopes/Delete.jsx","webpack:///./source/src/app/components/Apis/Details/Security/index.jsx","webpack:///./source/src/app/components/Apis/Details/Security/SecurityOverview.jsx","webpack:///./source/src/app/components/Apis/Details/Security/AddPolicy.jsx","webpack:///./source/src/app/components/Apis/Details/APIDefinition/APIDefinition.jsx","webpack:///./source/src/app/components/Apis/Details/APIDefinition/APISecurityAudit.jsx","webpack:///./source/src/app/components/Apis/Details/APIDefinition/WSDL.jsx","webpack:///./source/src/app/components/Apis/Details/components/APIDetailsTopMenu.jsx","webpack:///./source/src/app/components/Apis/Details/GoTo/GoTo.jsx","webpack:///./source/src/app/components/Apis/Details/GoTo/Components/GoToSuggestions.jsx","webpack:///./source/src/app/components/Apis/Details/GoTo/RouteMappings.jsx","webpack:///./source/src/app/components/Apis/Details/GoTo/Components/GoToSuggestion.jsx","webpack:///./source/src/app/components/Apis/Details/components/CreateNewVersionButton.jsx","webpack:///./source/src/app/components/Apis/Details/BusinessInformation/BusinessInformation.jsx","webpack:///./source/src/app/components/Apis/Details/Properties/Properties.jsx","webpack:///./source/src/app/components/Apis/Details/Properties/EditableRow.jsx","webpack:///./source/src/app/components/Apis/Details/Monetization/index.jsx","webpack:///./source/src/app/components/Apis/Details/Monetization/BusinessPlans.jsx","webpack:///./source/src/app/components/Apis/Details/ExternalStores/ExternalStores.jsx","webpack:///./source/src/app/components/Apis/Details/NewVersion/NewVersion.jsx","webpack:///./source/src/app/components/Apis/Details/TryOut/TryOutConsole.jsx","webpack:///./source/src/app/components/Apis/Details/TryOut/AdvertiseDetailsPanel.jsx","webpack:///./source/src/app/components/Apis/Details/Policies/AttachedPolicyForm/General.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/PolicyConfigurationEditDrawer.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/AttachedPolicyCard.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/AttachedPolicyList.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/PolicyConfiguringDrawer.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/PolicyDropzone.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/components/FlowArrow.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/PoliciesExpansion.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/OperationPolicy.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/OperationButton.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/OperationsGroup.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/ViewPolicy.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/DeletePolicy.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/DraggablePolicyCard.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/components/TabPanel.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/CreatePolicy.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/PolicyList.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/GatewaySelector.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/SaveOperationPolicies.tsx","webpack:///./source/src/app/components/Apis/Details/Policies/Policies.tsx","webpack:///./source/src/app/components/Shared/CustomSplitButton.jsx","webpack:///./source/src/app/components/Shared/InlineMessage.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/operationUtils.js","webpack:///./source/src/app/components/Shared/WrappedExpansionPanel.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APISecurity/components/apiSecurityConstants.js","webpack:///./source/src/app/components/Apis/Details/Policies/ApiOperationContext.js"],"names":["RevisionContext","React","createContext","useRevisionContext","useContext","RevisionContextProvider","Provider","getEndpointTypeProperty","type","category","mergeEndpoints","endpointConfig","endpoint_type","production","production_endpoints","sandbox","sandbox_endpoints","concat","production_failovers","sandbox_failovers","getEndpointTemplateByType","endpointType","isAddressEndpoint","currentEndpointConfig","tmpEndpointConfig","Array","isArray","failOver","algoClassName","algoCombo","sessionManagement","sessionTimeOut","endpointsToList","config","cloneDeep","endpoints","push","getEndpointConfigByImpl","implementationType","implementation_status","url","createEndpointConfig","access_method","amznAccessKey","amznSecretKey","amznRegion","getEndpointTemplate","template_not_supported","RateLimitingLevels","API","RESOURCE","useStyles","makeStyles","theme","focusLabel","boxShadow","paddingRight","spacing","APIRateLimiting","props","updateAPI","operationRateLimits","onChange","currentApiThrottlingPolicy","value","isAPIProduct","setFocusOperationLevel","focusOperationLevel","classes","useState","apiThrottlingPolicy","setApiThrottlingPolicy","isSaving","setIsSaving","isResourceLevel","rateLimitingLevel","apiFromContext","useAPI","useEffect","operationRateLimitMessage","variant","gutterBottom","display","container","direction","justify","alignItems","item","md","xs","ml","component","fontSize","title","placement","interactive","aria-label","light","id","defaultMessage","event","userSelection","target","row","control","color","disabled","isRestricted","label","labelPlacement","className","minHeight","borderLeft","pl","select","helperText","margin","map","rateLimit","key","name","displayName","onClick","finally","size","defaultProps","propTypes","PropTypes","func","isRequired","oneOf","arrayOf","shape","disabledAction","string","bool","memo","Comments","parentId","content","kwargs","properties","Object","Utils","deepFreeze","_data","prototype","hasOwnProperty","call","replies","Resource","_requestMetaData","apiId","commentId","callback","promise","this","client","then","apis","deleteComment","catch","error","console","commentInfo","put_apis__apiId__comments__commentId_","body","comment","replyTo","APIClientFactory","getAPIClient","getCurrentEnvironment","CONST","API_CLIENT","addCommentToAPI","requestBody","limit","offset","getAllCommentsOfAPI","CONSTS","freeze","leftLInkText","palette","getContrastText","background","leftMenu","textTransform","custom","leftMenuTextStyle","width","textAlign","overflow","textOverflow","typography","body1","fontWeight","whiteSpace","leftLInkTextHead","leftLInkText_IconLeft","paddingLeft","LeftMenu","backgroundColor","leftMenuWidth","fontFamily","position","bottom","left","top","leftLInk","paddingTop","paddingBottom","height","caption","cursor","textDecoration","leftLInkOverview","leftLink_Icon","leftMenuIconSize","leftLink_IconLeft","noIcon","leftLInkText_NoText","diplay","selectedMenu","appBarSelected","LeftMenuItem","Icon","to","text","route","head","useTheme","strokeColor","iconSize","pathname","useLocation","menuPathPattern","RegExp","isSelected","match","classNames","cloneElement","icon","iconText","divider","number","appBar","element","history","listen","location","windowURL","window","URL","webkitURL","dropzoneStyles","border","borderRadius","padding","styles","acceptDrop","green","dropzone","primary","main","dropZoneWrapper","justifyContent","preview","rejectDrop","red","group","flexDirection","popupHeader","iconView","subtitle","marginRight","subtitleWrapper","marginTop","marginBottom","imageGenWrapper","backgroundSelection","actionBox","imageContainer","Transition","ThumbnailView","selectedIconUpdate","setState","backgroundIndexUpdate","action","intl","open","fileObj","api","state","selectedTab","colorUpdate","file","Alert","formatMessage","File","newIconJson","backgroundIndex","blob","Blob","JSON","stringify","uploadThumbnail","hex","thumbnail","MaterialIcons","categories","selectedIcon","uploading","handleClick","bind","handleClose","revokeObjectURL","acceptedFile","cState","apiType","setImageUpdate","Api","APIProduct","addAPIProductThumbnail","addAPIThumbnail","info","createObjectURL","isEditable","imageUpdate","TransitionComponent","aria-labelledby","disableBackdropClick","onClose","fullWidth","maxWidth","fullScreen","square","handleChange","src","length","Configurations","app","context","alt","multiple","accept","maxSize","activeClassName","rejectClassName","onDrop","dropFile","getRootProps","getInputProps","rejectedFiles","isFileTooLarge","style","dropIcon","saveDisableEnable","Component","injectIntl","withAPI","withStyles","withTheme","showEndpoint","getProductionEndpoint","getSandboxEndpoint","expansionPanel","expansionPanelDetails","notConfigured","subHeading","lineHeight","textTrim","externalLink","dark","Endpoints","isPrototypedAvailable","defaultExpanded","expandIcon","pb","m","marginLeft","iconSpace","actionSpace","keyManagerSelect","minWidth","KeyManager","keyManagersConfigured","setKeyManagersConfigured","configDispatcher","keyManagers","securityScheme","newKeyManagers","checked","indexOf","splice","APIContext","response","list","includes","required","formControl","enabled","mb","fileinput","uploadedFile","certificatesHeader","addCertificateBtn","borderColor","borderStyle","borderWidth","certificateList","maxHeight","certDetailsHeader","uploadCertDialogHeader","alertWrapper","warningIcon","warningColor","deleteIcon","deleteIconDisable","Certificates","certificates","uploadCertificate","deleteCertificate","isMutualSSLEnabled","aliasList","setCertificateList","anchor","details","openCertificateDetails","setOpenCertificateDetails","alias","certificateToDelete","setCertificateToDelete","isDeleting","setDeleting","uploadCertificateOpen","setUploadCertificateOpen","button","cert","secondary","tier","endpoint","edge","certAlias","getClientCertificateStatus","currentTarget","getCertificateStatus","err","showCertificateDetails","certificateAlias","autoFocus","status","subject","paper","VerbElement","verb","isButton","resourceChipColors","toLowerCase","customMenu","customButton","useMenuStyles","disableFocusRipple","inputProps","SUPPORTED_VERBS","REST","WEBSUB","SSE","WS","AddOperation","operationsDispatcher","isAsyncAPI","inputLabel","useRef","labelWidth","setLabelWidth","useIntl","isWebSub","getSupportedVerbs","useReducer","verbs","newOperations","newOperationsDispatcher","current","offsetWidth","clearInputs","addOperation","APIValidation","operationTarget","validate","operationVerbs","warning","websubOperationTarget","data","ref","htmlFor","renderValue","remaining","verbElements","index","toUpperCase","allSelected","join","MenuProps","getContentAnchorEl","anchorOrigin","vertical","horizontal","Boolean","startsWith","placeholder","InputLabelProps","shrink","onKeyPress","preventDefault","SaveOperations","updateOpenAPI","updateAsyncAPI","isUpdating","useHistory","isOpen","setIsOpen","isRevision","advertiseInfo","handleSave","handleSaveAndDeploy","aria-describedby","onBackdropClick","undefined","root","flexGrow","titleWrapper","titleLink","contentWrapper","contentAreaWidth","addNewWrapper","grey","addNewHeader","h6","addNewOther","mainTitle","Create","newDoc","setNewDoc","saveDisabled","setSaveDisabled","listingPath","restAPI","createEditForm","Fragment","sm","lg","align","elevation","innerRef","node","promiseWrapper","addDocument","docPromise","doc","documentId","addFileToDocument","withRouter","radioGroup","formControlFirst","formControlLabel","typeTextWrapper","FormControlOdd","CreateEditForm","e","sourceType","summary","sourceUrl","otherTypeName","visibility","test","inlineContent","docId","updateDocument","disableName","nameNotDuplicate","nameMaxLengthExceeds","invalidUrl","nameEmpty","summeryEmpty","urlEmpty","invalidDocName","getDocument","apiNotFound","field","nameValidity","documentName","abortEarly","apiDocument","isDocumentPresent","settingsContext","settings","InputProps","onBlur","showNameHelper","multiline","onKeyUp","docVisibilityEnabled","changeType","changeSource","setDisable","getUrlHelperText","supportedDocTypes","contextType","AppContext","MonacoEditor","lazy","ReactMarkdown","flex","splitWrapper","docName","markdownViewWrapper","overflowY","MarkdownEditor","showAtOnce","setIsUpdating","setOpen","code","setCode","toggleOpen","updateDoc","getInlineContentOfDocument","addInlineContentToDocument","obj","fallback","language","options","selectOnLineNumbers","newCode","editorDidMount","editor","monaco","focus","escapeHtml","editMetaButton","Edit","getDocumentsList","process","Resources","operationProps","disableRateLimiting","hideAPIDefinitionLink","disableMultiSelect","disableUpdate","disableAddOperation","pageError","setPageError","setOperationRateLimits","markedOperations","setSelectedOperation","sharedScopes","setSharedScopes","sharedScopesByName","setSharedScopesByName","openAPISpec","setOpenAPISpec","securityDefScopes","setSecurityDefScopes","arns","setArns","spec","errors","resolvedSpec","setResolvedSpec","expandedResource","setExpandedResource","currentPolicies","policyAction","nextResourcePolicies","resourcePath","httpVerb","resourcePolicies","resourcePoliciesDispatcher","currentOperations","operationAction","updatedOperation","addedOperations","newData","paths","entries","reduce","resourceAcc","resourceKey","verbObj","verbList","verbListAcc","verbKey","newOperation","disable","newVerbListAcc","newResourceListAcc","parameters","findIndex","in","bodyIndex","parameter","filter","security","find","default","defValue","selectedScope","scopeDescription","scope","description","extractPathParameters","alreadyExistCount","currentVerb","message","warn","responses","200","operations","onMarkAsDelete","useCallback","operation","currentSelections","nextSelectedOperations","isEmpty","localAPI","useMemo","scopes","mapAPIOperations","resolveAndUpdateSpec","rawSpec","specCopy","SwaggerParser","result","openAPIVersion","getVersion","VERSIONS","V3","components","securitySchemes","flows","implicit","V2","securityDefinitions","setSecurityDefScopesFromSpec","updateSwagger","getAmznResourceNames","apitype","getAllScopes","sharedScopesList","sharedScopesByNameList","modifiedScope","shared","getSwagger","isSOAPToREST","promisedInPolicies","getResourcePolicies","promisedOutPolicies","Promise","all","inPolicies","outPolicies","mappedPolicies","policy","out","throttlingPolicyLimit","policies","disableShrink","disableActions","specErrors","selectedOperations","enableSecurity","disableSecurity","verbObject","openAPI","tag","HTTP_METHODS","highlight","resourcePolicy","slice","markAsDelete","apiOperations","copyOfOperations","isSelectAll","reject","Error","keys","verbInfo","forEach","isScopeExistsInOperation","secDef","disableDelete","supportedDataTypes","formData","query","path","header","cookie","iff","condition","matched","otherwise","getSupportedDataTypes","specVersion","paramType","getDataFormats","dataType","getParameter","schema","getParameterTypes","tagClass","breakpoints","down","GroupOfOperations","children","currentTagInfo","tags","tagInfo","endpointInputWrapper","textField","input","iconButton","iconButtonValid","endpointValidChip","endpointInvalidChip","endpointErrorChip","GenericEndpoint","endpointURL","editEndpoint","setAdvancedConfigOpen","esCategory","setESConfigOpen","deleteEndpoint","readOnly","serviceUrl","setServiceUrl","isEndpointValid","setIsEndpointValid","statusCode","setStatusCode","setUpdating","isErrorCode","setIsErrorCode","endAdornment","isWebSocket","apiID","testEndpoint","statusMessage","stripDiacritics","normalize","replace","createFilterOptions","ignoreAccents","ignoreCase","matchFrom","trim","inputValue","getOptionLabel","filteredOptions","option","candidate","array","comp","i","defaultFilterOptions","useAutocomplete","autoComplete","autoHighlight","autoSelect","blurOnSelect","clearOnBlur","freeSolo","clearOnEscape","componentName","debug","defaultValue","disableClearable","disableCloseOnSelect","disabledItemsFocusable","disableListWrap","filterOptions","filterSelectedOptions","getOptionDisabled","getOptionLabelProp","getOptionSelected","groupBy","handleHomeEndKeys","idProp","includeInputInList","inputValueProp","onHighlightChange","onInputChange","onOpen","openProp","openOnFocus","selectOnFocus","valueProp","useId","ignoreFocus","firstFocus","inputRef","listboxRef","anchorEl","setAnchorEl","focusedTag","setFocusedTag","defaultHighlighted","highlightedIndexRef","useControlled","controlled","setValue","setInputValue","focused","setFocused","resetInputValue","useEventCallback","newValue","newInputValue","optionLabel","setOpenState","inputValueIsSelectedValue","popupOpen","some","value2","focusTag","tagToFocus","querySelector","setHighlightedIndex","reason","removeAttribute","setAttribute","prev","listboxNode","parentElement","scrollHeight","clientHeight","scrollBottom","scrollTop","elementBottom","offsetTop","offsetHeight","changeHighlightedIndex","diff","nextIndex","nextFocus","nextFocusDisabled","getAttribute","hasAttribute","validOptionIndex","maxIndex","newIndex","Math","abs","getNextIndex","setSelectionRange","syncHighlightedIndex","valueItem","currentOption","val","itemIndex","optionItem","handleListboxRef","setRef","handleOpen","handleValue","isTouch","selectNewValue","reasonProp","origin","blur","handleFocusTag","nextTag","validTagIndex","handleClear","handleKeyDown","other","which","stopPropagation","onKeyDown","handleFocus","handleBlur","document","activeElement","handleInputChange","handleOptionMouseOver","Number","handleOptionTouchStart","handleOptionClick","handleTagDelete","handlePopupIndicator","handleMouseDown","selectionEnd","selectionStart","handleInputMouseDown","dirty","groupedOptions","Map","acc","role","onMouseDown","getInputLabelProps","onFocus","autoCapitalize","spellCheck","getClearProps","tabIndex","getPopupIndicatorProps","getTagProps","onDelete","getListboxProps","getOptionProps","selected","onMouseOver","onTouchStart","commentIcon","commentAddWrapper","flexFlow","commentAddButton","CommentAdd","currentLength","inputChange","handleClickAddComment","handleClickCancel","filterCommentToAddReply","handleShowReply","commentToFilter","addComment","addReply","CommentsAPI","add","newComment","cancelButton","zeroMinWidth","maxLength","maxCommentLength","instanceOf","importDefinitionDialogHeader","buttonIcon","ImportDefinition","setSchemaDefinition","openAPIDefinitionImport","setOpenAPIDefinitionImport","isImporting","setIsImporting","isGraphQL","isGraphql","isSOAP","asyncAPIDefinitionImport","setAsyncAPIDefinitionImport","currentState","inputAction","inputType","formValidity","mode","apiInputs","inputsDispatcher","updateGraphQLSchema","validateGraphQLFile","graphQLSchema","isValid","graphQLInfo","schemaDefinition","updateGraphQLAPIDefinition","success","log","handleOnValidate","isFormValid","dialogTitle","dialogContent","onValidate","btnText","isFileInput","updateWSDLByFileOrArchive","updateWSDLByUrl","reader","FileReader","contentType","onloadend","readAsText","newAPI","updateAsyncAPIDefinitionByFile","updateAsyncAPIDefinitionByUrl","updateAsyncAPIDefinition","updateAPIDefinitionByFile","updateAPIDefinitionByUrl","updateOASDefinition","DefinitionOutdated","openImport","setOpenImport","showDiff","setShowDiff","newDefinition","setNewDefinition","oldDefinition","setOldDefinition","isRendering","setIsRendering","buttonWarningColor","oldValue","splitView","disableWordDiff","leftTitle","rightTitle","promisedNewServiceDef","ServiceCatalog","searchServiceByKey","serviceInfo","promisedOldServiceDef","getWSDL","newServiceDef","oldServiceDef","getServiceDefinition","definitionType","beautify","reimportService","footer","leftLInkMain","leftMenuActive","topMenu","contentInside","footeremaillink","heading","pxToRem","fontWeightRegular","expanded","expandIconColor","headingText","customIcon","leftMenuIconMainSize","Details","allRevisions","allEnvRevision","authorizedAPI","openPageSearch","setAPI","setOpenPageSearch","setAPIProduct","getRevision","getDeployedEnv","handleAccordionState","getLeftMenuItemForResourcesByType","getLeftMenuItemForDefinitionByType","isValidURL","getTenantsByState","tenantList","prevProps","prevSettings","apiUUID","params","apiProdUUID","updateSettings","previousState","get","doRedirectToLogin","pathPrefix","api_uuid","apiDefinitionMenuItem","promisedUpdate","restApi","restApiProduct","revisionedApiProductId","getProductRevisions","revisionedApiId","getRevisions","getProductRevisionsWithEnv","getRevisionsWithEnv","isExpanded","user","setProperty","UserProperties","PORTAL_CONFIG_OPEN","API_CONFIG_OPEN","_updatedProperties","updatedProperties","toJson","update","updatedAPI","isSettingsLoading","pageLocation","uuid","redirectUrl","resourceNotFoundMessageText","defineMessages","titleMessage","bodyMessage","resourceNotFountMessage","environmentLabel","per","externalStoresEnabled","lastUpdatedTime","exact","from","subPaths","BASE","OVERVIEW_PRODUCT","OVERVIEW","API_DEFINITION","WSDL","API_DEFINITION_PRODUCT","SCHEMA_DEFINITION","ASYNCAPI_DEFINITION","LIFE_CYCLE","LIFE_CYCLE_PRODUCT","CONFIGURATION","RUNTIME_CONFIGURATION","RUNTIME_CONFIGURATION_WEBSOCKET","TOPICS","CONFIGURATION_PRODUCT","RUNTIME_CONFIGURATION_PRODUCT","ENDPOINTS","ENVIRONMENTS","ENVIRONMENTS_PRODUCT","OPERATIONS","RESOURCES_PRODUCT","APIProductOperations","RESOURCES_PRODUCT_EDIT","ProductResourcesEdit","RESOURCES","APIOperations","SCOPES","DOCUMENTS","DOCUMENTS_PRODUCT","SUBSCRIPTIONS","SUBSCRIPTIONS_PRODUCT","SECURITY","COMMENTS","BUSINESS_INFO","BUSINESS_INFO_PRODUCT","PROPERTIES","PROPERTIES_PRODUCT","NEW_VERSION","MONETIZATION","MONETIZATION_PRODUCT","TRYOUT","apiObj","TRYOUT_PRODUCT","EXTERNAL_STORES","ExternalStores","POLICIES","subPathKey","subPath","matchPath","BASE_PRODUCT","QUERYANALYSIS","withSettings","AuthorizedError","statusText","more","py","fill","oneOfType","FormattedMessage","LastUpdatedTime","float","moment","calendar","fromNow","webpackContext","req","webpackContextResolve","__webpack_require__","o","resolve","module","exports","AccordianSummary","borderBottom","MuiAccordionSummary","AccordionDetails","MuiAccordionDetails","DevelopSectionMenu","useUser","getProperty","portalConfigsExpanded","setPortalConfigsExpanded","apiConfigsExpanded","setApiConfigsExpanded","section","gatewayVendor","advertised","mixins","gutters","buttonSuccess","checkItem","chip","imageWrapper","specialGap","resourceTitle","ListRoot","helpButton","helpIcon","htmlTooltip","fontWeightMedium","lifecycleWrapper","lifecycleIcon","leftSideWrapper","Overview","loadEndpoints","newApi","ApiContext","getResourcesClassForAPIs","parentClasses","addEventListener","removeEventListener","s","RenderMethodBase","method","chipColor","chipTextColor","RenderMethod","notFound","p","innerKey","methodLower","operationChipColor","Operations","Consumer","resourceRow","ProductResources","apiResources","resource","version","PureComponent","HUMAN_READABLE_SCHEMES","oauth2","basic_auth","mutualssl","api_key","Configuration","tooltip","transport","upperCaseString","solaceTransportProtocols","protocol","filteredItem","accessControl","capitalizeFirstLetter","lowerCaseString","accessControlRoles","workflowStatus","visibleRoles","Policies","ColorlibConnector","completedColor","overview","stepper","completed","activeColor","active","alternativeLabel","backgroundImage","line","viewInStoreLauncher","StepConnector","useColorlibStepIconStyles","zIndex","ColorlibStepIcon","forceComplete","step","clsx","instructions","iconTrue","iconFalse","pageLinks","disabledLink","pointerEvents","textLink","CustomizedStepper","deploymentsAvailable","setDeploymentsAvailable","isEndpointAvailable","isTierAvailable","lifecycleState","lifeCycleStatus","isPublished","useAppContext","usePublisherSettings","userNameSplit","split","tenantDomain","isMutualSslOnly","devportalUrl","steps","activeStep","updateLCStateOfAPI","updateLcState","errorResponse","count","isTestLinkDisabled","isDeployLinkDisabled","connector","StepIconComponent","underline","RouterLink","mt","rel","href","AuthManager","isNotPublisher","finalLifecycleState","MetaData","provider","wordBreak","createdTime","parseInt","originalDevPortalUrl","BusinessInformation","businessInformation","businessOwner","technicalOwner","apiExternalProductionEndpoint","apiExternalSandboxEndpoint","endpointSecurity","Topics","topics","getAsyncAPIDefinition","channels","topic","subscribe","publish","substr","paperCenter","itemPadding","arrowForwardIcon","right","arrowBackIcon","btnSpacing","tierList","closeButton","copyAPIConfig","copiedConfig","authorizationHeader","responseCachingEnabled","cacheTimeout","isDefaultVersion","enableSchemaValidation","maxTps","wsdlUrl","corsConfiguration","corsConfigurationEnabled","accessControlAllowCredentials","accessControlAllowOrigins","accessControlAllowHeaders","accessControlAllowMethods","additionalProperties","apiOwner","vendor","configReducer","configAction","nextState","targetProperty","property","updatedProperty","DesignConfigurations","errorInAccessRoles","setErrorInAccessRoles","errorInRoleVisibility","setErrorInRoleVisibility","errorInTags","setErrorInTags","apiConfig","descriptionType","setDescriptionType","setOverview","overviewDocument","setOverviewDocument","prop","slackURLProperty","githubURLProperty","invalidTagsExist","DESCRIPTION_TYPES","addDocumentContent","deleteOverviewDocument","deleteDocument","DESCRIPTION","getDocuments","overviewDoc","fieldName","regex","restricted","px","updateContent","setIsDisabled","slackURL","githubURL","oldApi","pt","Link","availableTiers","endpointUrl","updatedEndpointConfig","endpointTypeForApi","UpdateWithoutDetails","availableEndpoint","setEndpointUrl","isValidEndpoint","setValidEndpoint","setAvailableTiers","asyncAPIPolicies","policyName","disableTypography","my","tierName","mandatoryStar","urlSchema","Joi","uri","empty","DefaultVersion","editorHeader","DescriptionEditor","setContent","mx","rows","newContent","AccessControl","roleValidity","setRoleValidity","userRoleValidity","setUserRoleValidity","isNone","invalidRoles","setInvalidRoles","otherValidSystemRoles","setOtherValidSystemRoles","every","SelectProps","menu","data-testid","alwaysShowPlaceholder","blurBehavior","onAdd","systemRolePromise","base64url","encode","userRolePromise","userRole","chipRenderer","existingRole","alertGrid","alertTitle","AdvertiseInfo","oldPolicies","oldEndpointConfig","isDeployed","deploymentInfo","validateUrl","isEmptyAllowed","allow","isValidApiExternalProductionEndpoint","setValidApiExternalProductionEndpoint","isValidApiExternalSandboxEndpoint","setValidApiExternalSandboxEndpoint","isValidOriginalDevPortalUrl","setValidOriginalDevPortalUrl","handleOnChange","severity","alert","StoreVisibility","roleExists","setRoleExists","isRestrictedByRoles","tenants","setTenants","TENANT_STATE_ACTIVE","Tags","isTagValid","setIsTagValid","invalidTags","setInvalidTags","isTagWithinLimit","setIsTagWithinLimit","regexPattern","currentInvalidTags","existingTag","oldTag","Social","listItemText","APICategories","setCategories","apiCategories","dense","disableGutters","keepMounted","PaperProps","apiConfigJson","RuntimeConfiguration","saveButtonDisabled","setSaveButtonDisabled","isNonWebSubAsyncAPI","updateComplexityList","setUpdateComplexityList","API_SECURITY_MUTUAL_SSL_MANDATORY","API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY","newState","DEFAULT_API_SECURITY_OAUTH2","API_SECURITY_BASIC_AUTH","API_SECURITY_API_KEY","noMandatoryOAuthBasicAuth","API_SECURITY_MUTUAL_SSL","noMandatoryMutualSSL","updateComplexity","updateGraphqlPoliciesComplexity","kmNameList","km","ResponseCaching","isEnabled","isResponseCachingEnabled","environmentName","userStorageKey","User","LOCAL_STORAGE_USER","updateUserLocalStorage","userData","parse","localStorage","getItem","setItem","getUserLocalStorage","CORSConfiguration","isCorsEnabled","isAllowAllOrigins","accessControlAllowOrigin","oldOrigin","accessControlAllowHeader","oldHeader","accessControlAllowMethod","oldMethod","SchemaValidation","MaxBackendTps","bottomSpace","APISecurity","isPrototyped","apiContext","haveMultiLevelSecurity","Validate","resourcesWithSecurity","apiList","apiInProduct","op","authType","ApplicationLevel","hasResourceWithSecurity","mandatoryValue","AuthorizationHeader","isHeaderNameValid","setIsHeaderNameValid","authorizationHeaderValue","validateHeader","TransportLevel","clientCertificates","setClientCertificates","getAllClientCertificates","resp","certificate","addClientCertificate","tmpCertificates","deleteClientCertificate","UploadCertificate","setAlias","setPolicy","setEndpoint","setSaving","setCertificate","isEndpointEmpty","setIsEndpointEmpty","isPoliciesEmpty","setPoliciesEmpty","aliasValidity","setAliasValidity","isRejected","setIsRejected","closeCertificateUpload","aliasValidation","certificateFile","extension","SelectEndpoint","ep","SelectPolicies","selectedPolicies","setPolicies","for","Transports","itemWrapper","FormControl","subTitle","subTitleDescription","flowWrapper","editIcon","dialogPaper","GraphQLQueryAnalysis","setList","typelist","setTypeList","findSummation","List","Set","respond","ob","summation","complexityValue","getGraphqlPoliciesComplexity","res","getGraphqlPoliciesComplexityTypes","typeList","fieldList","setInitialComplexity","dividers","fixed","saveButton","searchWrapper","UpdateComplexity","filterKeyWord","setFilter","stickyHeader","typename","aria-controls","newArr","verbMap","sub","pub","asyncAPISpec","setAsyncAPISpec","initialWebsubSubscriptionConfig","websubSubscriptionConfiguration","enable","signingAlgorithm","signatureHeader","secret","websubSubscriptionConfigDispatcher","extractAsyncAPIPathParameters","payload","verifySecurityScheme","resolvedChannels","resolveSpec","source","k","v","resolvedRef","arr","j","getRefTarget","AsyncOperation","trimmedVerb","setIsExpanded","toggleDelete","paperStyles","customDivider","linearProgress","highlightSelected","hexToRGBA","contentNoMargin","overlayUnmarkDelete","operationDeleteUndo","disableRipple","disableTouchRipple","invisible","DescriptionAndSummary","OperationGovernance","operationScopes","getAsyncAPIOperationScopes","filteredApiScopes","sharedScope","apiScope","Parameters","disableForSolace","haveParameters","overflowX","table","ListParameters","editingParameter","setEditingParameter","disableForSolaceAPI","form","EditParameter","currentParameter","paramAction","nextParameter","parameterActionDispatcher","isEditing","PayloadProperties","parameterContainer","checkBox","AddPayloadProperty","newPropertyDispatcher","addNewProperty","ListPayloadProperties","editingProperty","setEditingProperty","EditPayloadProperty","currentProperty","nextProperty","propertyActionDispatcher","Runtime","allEnvDeployments","getAllEnvironmentDeployments","environment","buildCallbackURL","host","port","getUriMappingHelperText","fqPath","seperator","uriMappingHelperText","setUriMappingHelperText","env","vhost","websubHttpPort","websubHttpsPort","SubscriptionConfig","setEnabled","c","r","random","toString","boxFlex","flexWrap","pr","APILevelRateLimitingPolicies","apiRateLimits","setApiRateLimits","historyHead","LifeCycle","checkList","lcHistory","certList","updateData","handleChangeCheckList","promisedClientCerts","clientCerts","promisedAPI","promisedLcState","promisedLcHistory","apiProduct","getAPIProductByID","getLCStateOfAPIProduct","getLCHistoryOfAPIProduct","getLcState","getLcHistory","lcState","temp","postState","checkItems","handleUpdate","buttonsWrapper","stateButton","LifeCycleUpdate","updateLifeCycleState","WORKFLOW_STATUS","CREATED","APPROVED","lifecycleChecklist","lifecycleStates","availableTransitions","isWorkflowPending","lcMap","set","isAppLayerSecurityMandatory","isCertAvailable","isBusinessPlanAvailable","lifecycleButtons","buttonDisabled","lifeCycleImage","API_CHANGE_LC","resourceMethod","POST","transitionState","data-value","paperProps","DialogTitle","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","PublishWithoutDeploy","isExternalEndpointAvailable","availableExternalEndpoint","externalEndpoint","setExternalEndpoint","isValidExternalEndpoint","setValidExternalEndpoint","endIcon","LifeCycleImage","opacity","xmlns","viewBox","aria-hidden","transform","d","isolation","mixBlendMode","strokeWidth","strokeLinejoin","highLightMe","y","x","letterSpacing","wordSpacing","clipRule","fillRule","stroke","strokeLinecap","iconWarn","yellow","grid","labelsGrid","CheckboxLabels","lifecyclePending","transition","Slide","cleanupPendingTask","firstCol","personIcon","avatar","LifeCycleHistory","reverse","entry","values","previous","post","updatedTime","Documents","urlPrefix","Listing","View","EditContent","DocCreate","ResourceNotFound","TextEditor","actionTable","messageBox","actions","LinkGenerator","docs","showAddDocs","docsToDelete","toggleAddDocs","getSortOrder","a","b","documentList","sort","errorData","messageTxt","oldState","showActionsColumn","print","download","viewColumns","customToolbar","search","onRowsDelete","rowData","rowMeta","that","columns","customBodyRender","tableMeta","GoToEdit","displayAddContent","docContentEditPath","Delete","runAction","deleteDoc","apiName","DeleteMultiple","deleteDocs","docPromises","docIndexObj","Download","isFileAvailable","setIsFileAvailable","isSuccessful","setIsSuccessful","getFileForDocument","done","forceDownload","docTitle","docBadge","displayURL","displayURLLink","leftCell","summaryView","setDoc","loadContentForDoc","html","buttonMain","addResource","operationCopy","apiPolicies","apiScopesByName","handleUpdateList","handleApiThrottlePolicy","updateOperations","handleSaveAndDeployOperations","apiScopesByNameList","scopeObject","getAllSharedScopes","updatedList","updateApiScopes","resourceNotFoundMessage","setFilterByKeyWord","isOperationRateLimiting","dropDown","chipActive","link","listItem","resourceRoot","deleteButton","pathDisplay","descriptionWrapper","scopeSelect","descriptionWrapperUp","addParamRow","propsForm","deleteLink","verticalAlign","Operation","isSecurity","handleScopeChange","handlePolicyChange","newoperation","throttlingPolicy","dropdownScopes","auth","hideParameters","targetText","apiOperation","isUsedInAPIProduct","usedProductIds","panel","getOperationScopes","autoWidth","IconComponent","ArrowDropDownIcon","renderInput","inputRoot","inputInput","renderSuggestion","suggestionProps","suggestion","itemProps","isHighlighted","highlightedIndex","selectedItem","getSuggestions","showEmpty","deburr","inputLength","keep","IntegrationDownshift","timeout","setTimeout","onSelect","changes","clearSelection","getItemProps","getLabelProps","getMenuProps","openMenu","min","max","floor","milliSeconds","newTimeout","handleTimeoutMin","handleTimeoutSec","AddParameter","initParameter","newParameter","newParameterDispatcher","isParameterExist","isParameterExistValue","paramIn","addNewParameter","hideParameterEdit","isRefParam","isRef","paramCopy","RequestBody","subtleText","format","SOAPToRESTListing","resourcePolicyIn","setResourcePolicyIn","resourcePolicyOut","setResourcePolicyOut","prefersDarkMode","useMediaQuery","openEditor","setOpenEditor","setTabIndex","selectedPolicy","editorProps","smoothScrolling","wordWrap","indicatorColor","textColor","tab","setPolicyContent","originalResourcePolicy","forwardRef","PolicyEditor","openConfirmation","setOpenConfirmation","saving","editorOptions","updateResourcePolicy","closeEditor","CloseConfirmation","GoToDefinitionLink","OperationsSelector","isIndeterminate","operationCount","operationWithSecurityCount","mr","buttonWrapper","apiCopy","setApiResources","endpointTypesWrapper","buttonSection","endpointValidityMessage","errorMessageContainer","implSelectRadio","defaultSwagger","swagger","setSwagger","endpointValidity","setAPIEndpointsValid","initState","generateMockScripts","endpointImplementationType","tmpSecurityInfo","endpoint_security","toJSON","apiObject","apiDispatcher","isRedirect","apiObjectCopy","grantType","tokenUrl","clientId","clientSecret","username","password","generateEndpointConfig","endpointsContainer","swaggerDef","swaggerObj","onChangeAPI","endpointsDispatcher","saveAndRedirect","inlineMessageContainer","endpointTypeCard","cardContent","cardActions","borderTop","NewEndpointCreate","endpointImplType","setImplType","eligibleTypes","types","listing","endpointContainer","endpointName","sandboxHeading","endpointsWrapperLeft","borderRight","borderRightStyle","borderRightWidth","endpointsWrapperRight","endpointsTypeSelectWrapper","endpointTypesSelectWrapper","defaultEndpointWrapper","configDialogHeader","addLabel","endpointTypes","EndpointOverview","setEndpointType","supportedEnpointTypes","setSupportedEndpointType","epConfig","setEpConfig","endpointSecurityInfo","setEndpointSecurityInfo","advanceConfigOptions","setAdvancedConfigOptions","endpointSecurityConfig","setEndpointSecurityConfig","prod","endpointCategory","setEndpointCategory","openDialog","typeChangeConfirmation","setTypeChangeConfirmation","servicesList","setServicesList","getEndpointType","availableEndpoints","supportedTypeLists","epType","getServiceList","getEndpoints","handleOnChangeEndpointCategoryChange","endpointConfigCopy","endpointProp","modifiedEndpoint","endpointTypeProperty","outdated","changeEndpointType","selectedKey","tmpConfig","generatedEndpointConfig","handleEndpointTypeSelect","toggleAdvanceConfig","advanceEPConfig","advanceConfig","endpointInfo","getAdvanceConfig","toggleEndpointSecurityConfig","DEFAULT_ENDPOINT_SECURITY","handleEndpointSecurityChange","saveEndpointSecurityConfig","endpointSecurityObj","enType","newEndpointSecurityObj","closeEndpointSecurityConfig","updatePaths","epCategoryOnChangeHandler","overviewWrapper","services","existingService","editService","newService","serviceKey","service","handleEndpointCategorySelect","toggleESConfig","globalEpType","isSOAPEndpoint","onSaveAdvanceConfig","endpointConfigProperty","selectedEndpoints","onCancel","securityInfo","onChangeEndpointAuth","isProduction","useFetchScripts","setError","progress","setProgress","mockScripts","setMockScripts","getGeneratedMockScriptsOfAPI","MockImplEndpoints","scriptType","changedToType","setChangedToType","handleEndpointTypeChange","dropdown","MockedOASOperation","responseCode","MockedOASExample","oas2Examples","examples","isEmptyOAS3Content","isEmptyOAS2Examples","selectedMediaType","setSelectedMediaType","selectedExample","setSelectedExample","selectedExampleType","setSelectedExampleType","example","ArrowDropDown","mediaType","exampleType","lineNumbers","scrollbar","renderWhitespace","automaticLayout","minimap","defaultScript","scriptResetButton","getGeneratedMockScriptOfAPI","matchedResource","mockScript","MockScriptOperation","showReset","setShowReset","mockValueDetails","setMockValueDetails","onScriptChange","tmpPaths","mediationScript","script","originalScript","GenericOperation","configHeaderContainer","generalConfigContent","secondaryHeading","flexBasis","flexShrink","endpointConfigSection","generalConfigPanel","securityHeading","sandboxEndpointSwitch","GeneralConfiguration","isConfigExpanded","setConfigExpand","endpointCertificates","setEndpointCertificates","setAliasList","endpointCertificatesList","aliases","filteredEndpoints","epLookup","getEndpointCertificates","hidden","addCertificate","deleteEndpointCertificate","endpointTypeSelect","lbConfigBtn","wrapper","LoadbalanceFailoverConfig","isLBConfigOpen","setLBConfigOpen","addEndpoint","newURL","endpointTemplate","epConfigProperty","endpointList","removeEndpoint","indexToRemove","tmpEndpoints","getEndpointTypeHeading","lpConfigWrapper","apiEndpoints","failOvers","addNewEndpoint","handleLBConfigChange","lbConfig","closeLBConfigDialog","epInput","epTypeWrapper","epTypeName","leftArrow","leftArrowLight","dialogHeader","listItemOdd","EndpointListing","setEndpoints","selectedRef","listingWrapper","GenericEndpointAdd","algorithms","sessionManagementOps","defaultTemplateObj","configButtonContainer","LoadBalanceConfig","setLbConfigObject","algoClassNameError","setAlgoClassNameError","tmpLBConfig","handleFieldChange","algo","handleFailoverFieldChange","itemHeight","configContainer","configSubContainer","advanceDialogActions","AdvanceEndpointConfig","optimize","actionDuration","actionSelect","factor","retryDelay","retryErroCode","retryTimeOut","suspendDuration","suspendErrorCode","suspendMaxDuration","advanceConfigObj","setAdvanceConfig","errorCodes","actionItems","messageTypes","optimizeOptions","handleConfigFieldChange","di","messageType","radioWrapper","addParameter","eye","EndpointSecurity","securityValidity","setSecurityValidity","showAddParameter","setShowAddParameter","clientSecretIsMasked","setClientSecretIsMasked","parameterName","setParameterName","parameterValue","setParameterValue","authTypes","grantTypes","tmpSecurity","customParameters","validateAndUpdateSecurityInfo","validity","toggleAddParameter","handleParameterChange","validateEmpty","itemValue","handleAddToList","customParametersCopy","oldRow","newRow","oldName","newName","handleDelete","items","renderCustomParameters","EditableParameterRow","setName","editMode","setEditMode","saveRow","addProperty","selectField","banner","Credentials","regions","aws","newEndpointConfig","labelId","ServiceEndpoint","selectedServiceUrl","setSelectedServiceUrl","defaultService","setEndpointValue","tagSizeSmall","hasPopupIcon","hasClearIcon","inputFocused","clearIndicator","clearIndicatorDirty","popupIndicator","popupIndicatorOpen","popper","modal","popperDisablePortal","listbox","listStyle","loading","noOptions","boxSizing","outline","WebkitTapHighlightColor","up","hover","disabledOpacity","groupLabel","groupUl","DisablePortal","Autocomplete","startAdornment","ChipProps","clearText","closeIcon","closeText","disablePortal","forcePopupIcon","getLimitTagsText","limitTags","ListboxComponent","ListboxProps","loadingText","noOptionsText","openText","PaperComponent","Paper","PopperComponent","PopperComponentProp","Popper","popupIcon","renderGroupProp","renderGroup","renderOptionProp","renderOption","renderTags","getCustomizedTagProps","renderListOption","optionProps","clientWidth","option2","index2","object","any","elementType","shapeRec","alignSelf","shapeCircaleBack","shapeInnerComplete","placeSelf","shapeInnerInactive","shapeDottedEnd","shapeDottedStart","plusIconStyle","shapeDottedStart1","textShape","textShape2","textPadding","textDelete","textShape3","textShape7","primaryEndpoint","secondaryEndpoint","textShape4","textShape8","textShape5","textShape6","button1","button2","shapeRecBack","shapeCircle","shapeCircleBlack","changeCard","noChangeCard","cardHeight","cardContentHeight","cardActionHeight","textOverlay","gridOverflow","createRevisionDialogStyle","sectionTitle","deployNewRevButtonStyle","popover","timePaddingStyle","labelSpace","labelSpacingDown","warningText","tableCellVhostSelect","vhostSelect","textCount","containerInline","containerOverflow","gridGap","gridTemplateColumns","gridAutoFlow","gridAutoColumns","infoAlert","clear","Environments","revisionCount","isDeployButtonDisabled","isLoading","restProductApi","selectedRevision","setRevision","externalGateways","internalGateways","selectedVhosts","setVhosts","selectedVhostDeploy","setVhostsDeploy","defaultVhosts","vhosts","extraRevisionToDelete","setExtraRevisionToDelete","setDescription","SelectedEnvironment","setSelectedEnvironment","confirmDeleteOpen","setConfirmDeleteOpen","revisionToDelete","setRevisionToDelete","confirmRestoreOpen","setConfirmRestoreOpen","revisionToRestore","setRevisionToRestore","setCurrentLength","openDeployPopup","setOpenDeployPopup","externalEnvEndpoints","setExternalEnvEndpoints","allExternalGatewaysMap","allExternalGateways","revision","envDetails","disPlayDevportal","displayOnDevportal","externalEnvWithEndpoints","protocolBindings","channelNames","channelName","channel","hasPublish","bindingProtocols","hasSubscribe","endpointURIs","endpointURI","toggleOpenConfirmDelete","revisionName","revisionId","toggleOpenConfirmRestore","handleCloseDeployPopup","handleClickOpen","handleDeleteSelect","handleSelect","revisions","oldRevision","displayOnDevPortal","handleSelectForBrokers","handleVhostSelect","handleVhostDeploySelect","deleteRevision","deleteProductRevision","createRevision","createProductRevision","runActionRestore","confirm","restoreRevision","restoreProductRevision","undeployRevision","envName","undeployProductRevision","deployRevision","deployProductRevision","createDeployRevision","envList","vhostList","confirmDeleteDialog","labelCancel","labelOk","getOrganizationFromAdditionalProperties","organization","item1","confirmRestoreDialog","ReturnItem1","revDescription","revName","revCreatedTime","handlePopoverClose","openPopover","onMouseEnter","onMouseLeave","transformOrigin","disableRestoreFocus","item6","item2","item3","item4","item5","ReturnItem6","anchorEl1","setAnchorEl1","startIcon","o1","unassignRevision","getGatewayAccessUrl","combined","wsPort","wssPort","httpContext","httpPort","httpsPort","getVhostHelperText","selectionList","shorten","maxTextLen","maxtLen","gatewayHttpUrl","gatewayWsUrl","gatewayUrls","substring","rowsMax","checkedIcon","subheader","o2","o3","EnvDeployments","DisplayDevportal","restAPIProduct","check","setCheck","revisionUuid","displayInDevportalProduct","displayInDevportalAPI","textOptional","textRevision","textDeploy","textDescription","descriptionWidth","DeploymentOnboarding","classes1","environments","hasOnlyOneEnvironment","descriptionOpen","setDescriptionOpen","selectedEnvironment","solaceEnv","selectedSolaceEnvironment","setSelectedSolaceEnvironment","handleDescriptionOpen","emptyBox","Subscriptions","setPolices","subscriptionAvailability","availability","setAvailability","subscriptionAvailableTenants","setTenantList","subscriptions","setSubscriptions","updateInProgress","setUpdateInProgress","crossTenantSubscriptionEnabled","saveAPI","headline","popupHeadline","searchDiv","searchRoot","searchInput","searchIconButton","noDataMessage","tableColumnSize","tableColumnSize2","dialogColumnSize","dialog","invoiceTable","uniqueCell","InfoToolTip","disableColor","subscriberHeader","subscriptionStatus","BLOCKED","PROD_BLOCKED","SubscriptionTablePagination","page","rowsPerPage","onChangePage","ceil","SubscriptionsTable","totalSubscription","searchQuery","rowsPerPageOptions","emptyColumnHeight","subscriberClaims","formatSubscriptionStateString","blockSubscription","blockProductionOnly","unblockSubscription","handleChangePage","handleChangeRowsPerPage","filterSubscriptions","isMonetizedPolicy","renderClaims","isNotCreator","fetchSubscriptionData","subscriptionId","blockSubscriptions","messages","errorMessage","unblockSubscriptions","applicationInfo","getSubscriberInfo","prevState","pagination","total","getMonetization","monetizationStatus","getSubscriptionPolicies","filteredPolicies","tierPlan","monetizationAttributes","pricePerRequest","claimsObject","claims","claim","BLOCK_SUBSCRIPTION","getSubscriptionBlockingButtons","isNotAuthorized","isMonetizedUsagePolicy","selectableRows","customFooter","colSpan","onChangeRowsPerPage","ActionsComponent","subMails","emails","email","names","Tip","Tooltip","filterType","selectableRowsHeader","Invoice","showPopup","setShowPopup","showErrorPopup","setShowErrorPopup","invoice","setInvoice","handleAlertClose","getMonetizationInvoice","invoiceData","invoiceItem","insideArray","subscriptionPoliciesPaper","gridLabel","SubscriptionPoliciesManage","subscriptionPolicies","newSelectedPolicies","textControl","selectEmpty","subscriptionAvailabilityPaper","tenantsList","SimpleSelect","currentAvailability","setValues","isSpecificTenants","isUIElementDisabled","onSubmit","availabilityValue","displayEmpty","suggestions","DownshiftMultiple","newSelectedItem","inputValue2","tenantList2","setsuggestions","newSuggestions","tenant","domain","contentWrapperOverview","titleSub","verticalSpace","loadMoreLink","genericMessageWrapper","paperProgress","dialogContainer","allComments","comments","totalComments","handleExpandClick","handleLoadMoreComments","updateComment","onDeleteComment","commentsLimit","commentList","commentIdOfCommentToDelete","remainingComments","newTotal","newComments","cur","newAllCommentList","commentsUpdate","dayjs","extend","relativeTime","commentText","overflowWrap","cleanBack","Comment","replyId","editIndex","handleClickDeleteComment","handleShowEdit","showAddComment","showEditComment","handleConfirmDialog","filterRemainingComments","filterCommentToDelete","handleLoadMoreReplies","handleAddReply","handleDeleteReply","keyCount","parentCommentId","getAllCommentReplies","replyList","replyCount","existingComment","newRepliesList","newCount","newLimit","updatedComment","apiClient","parentCommentIdOfCommentToDelete","replyCommentId","updatedRepliesList","reply","isOverview","noWrap","commenterInfo","firstName","lastName","createdBy","commentIndex","fullName","toggleShowEdit","zvariant","CommentEdit","handleCategoryChange","handleClickUpdateComment","filterCommentToUpdate","filterCommentToUpdateReply","commentToEdit","replyIndex","time","unig","CommentOptions","timestamp","localDate","Date","toLocaleDateString","day","month","year","toLocaleTimeString","hour","minute","getUser","getUserNameWithoutDomain","canDelete","isAdmin","Scope","Scopes","FormControlLabel","helpText","hint","extraPadding","titleGrid","descriptionForm","CreateScope","validRoles","invalidRolesArray","valid","invalid","apiScopes","scopeAddDisabled","addScope","validateScopeName","handleScopeNameInput","validateScopeDescription","validateScopeDisplayName","handleRoleAddition","handleRoleDeletion","exist","bindings","aScope","promisedApiUpdate","redirectURL","EditScope","thisScope","scopeName","updateScope","handleInputs","originalScope","scopeObj","buttonProgress","api_data","editUrl","scopesList","resources","ops","setOpenLocal","deleteScope","Security","SecurityOverview","tableLayout","addJsonContent","showAddPolicy","formattedPolicy","toggleShowAddPolicy","updatePolicyData","policyIds","threatProtectionPolicies","policyId","getThreatProtectionPolicy","updatedPolicies","associatedApi","deleteThreatProtectionPolicyFromApi","n","formatPolicy","deletePolicy","AddPolicy","getThreatProtectionPolicies","currentApi","addThreatProtectionPolicyToApi","handlePolicyAdd","EditorDialog","AsyncAPIEditor","swaggerEditorWrapper","topBar","converterWrapper","downloadLink","progressLoader","updateApiWarning","serviceCatalog","onboarding","buttonText","warningIconStyle","APIDefinition","schemaContent","graphQL","asyncAPI","asyncAPIModified","convertTo","getConvertToFormat","swaggerModified","isAuditApiClicked","securityAuditProperties","isSwaggerValid","isAsyncAPIValid","handleNo","hasJsonStructure","onAuditApiClick","onChangeFormatClick","openUpdateConfirmation","updateSwaggerDefinition","updateAsyncAPIDefinitionAndDeploy","updateSwaggerDefinitionAndDeploy","onChangeSwaggerContent","onChangeAsyncAPIContent","promisedApi","getSchema","YAML","safeDump","safeLoad","modifiedContent","load","formattedString","definition","swaggerContent","specFormat","toFormat","parsedContent","asyncAPIContent","fileName","encodeURIComponent","apiToken","collectionId","onEditContent","rootPaper","inlineDecoration","contentLine","htmlToolTip","tableRow","referenceErrorTypography","referenceTypography","subheadingTypography","paperDiv","sectionHeadingTypography","auditSummaryDiv","auditSummarySubDiv","circularProgressBarScore","circularProgressBarScoreFooter","auditSummaryDivRight","columnOne","columnTwo","linkText","APISecurityAudit","createMuiTheme","useNextVariants","overrides","MUIDataTableBodyCell","MUIDataTableSelectCell","MUIDataTableToolbarSelect","searchTerm","lastTerms","termObject","regexPatterns","appendedString","getModel","findNextMatch","lineNumber","range","endLineNumber","column","finalMatchIndex","revealLineInCenter","startLineNumber","deltaDecorations","Range","startColumn","endColumn","isWholeLine","glyphMarginClassName","report","overallScore","numErrors","externalApiId","apiDefinition","criticalityObject","1","2","3","4","5","getSecurityAuditReport","grade","issues","rowType","dataObject","rowObject","specificDescription","pointer","criticality","roundScore","score","tooManyImpacted","pointersAffected","tooManyError","baseUrl","round","reportObject","linkToDetailedReport","errorColumns","glyphMargin","responsive","expandableRows","expandableRowsOnClick","renderExpandableRow","getMoreDetailUrl","linkToDetailedReportText","afterLinkText","overallScoreText","totalNumOfErrorsText","totalNumOfErrors","overallCriticalityText","overallCriticality","securitySummary","percent","dataValidationSummary","getMuiTheme","getRowData","semanticErrors","getErrorMuiTheme","validationErrors","warnings","securityNumOfIssuesText","securityNumOfIssues","issueCounter","securityScoreText","securityScore","securityCriticalityText","securityCriticality","dataNumOfIssuesText","dataNumOfIssues","dataScoreText","dataScore","dataCriticalityText","dataCriticality","isArchive","wsdl","loadWSDLInEditor","handleDownloadWSDLZip","getWSDLInfo","downloadWidget","downloadButtonContent","cursorStyle","A200","backLink","backIcon","backText","dateWrapper","lastUpdatedTypography","downloadApi","downloadApiFlex","revisionWrapper","topRevisionStyle","readOnlyStyle","activeRevision","APIDetailsTopMenu","isVisibleInStore","lastIndex","setRevisionId","isDownloadable","getDeployments","revisionKey","infoItem","buttonClass","export","zipFile","goToSearch","linkButton","goToWrapper","downshiftWrapper","backdrop","drawer","backdropFilter","GoTo","showSearch","setShowSearch","handleClickAway","common","productOnly","graphqlOnly","apiOnly","GoToSuggestions","currentSuggestions","RenderSuggestion","aria-haspopup","createNewVersionWrapper","createNewVersion","createNewVersionButtonColor","CreateNewVersionButton","API_COPY","paperRoot","emailStatus","isValidBusinessOwnerEmail","isValidTechnicalOwnerEmail","isFormUpdated","businessOwnerEmail","technicalOwnerEmail","noValidate","handleSubmit","checkBoxStyles","tableHead","Properties","additionalPropertiesTemp","github_repo","slack_url","setAdditionalProperties","showAddProperty","setShowAddProperty","propertyKey","setPropertyKey","propertyValue","setPropertyValue","editing","setEditing","isAdditionalPropertiesStale","setIsAdditionalPropertiesStale","setIsVisibleInStore","keywords","toggleAddProperty","isKeyword","hasWhiteSpace","whitespaceChars","char","oldKey","additionalPropertiesCopy","validateBeforeAdd","fieldKey","fieldValue","isDisplayInStore","newKey","newProperty","newPropertiesList","apiAdditionalProperties","additionalPropertiesCopyForMap","additionalPropertiesMap","colorPrimary","EditableRow","setKey","resetText","updateEditMode","Monetization","monStatus","getMonetizationData","getSettings","configureMonetizationToApiProduct","configureMonetizationToApi","monetizationAttribute","rightDataColumn","box","tableCel","tableHeadCell","stateWrapper","tableHeadTitle","BusinessPlans","monetizedPolices","monetizationQuery","policiesList","viewInExStoreLink","black","allExternalStores","setAllExternalStores","publishedExternalStores","setPublishedExternalStores","getPublishedExternalStores","publishedStoreIds","store","getAllExternalStores","publishAPIToExternalStores","successfulStores","FormLabel","CreateNewVersion","serviceVersion","newVersion","alreadyExists","hasSpecialChars","MaxLengthExceeds","isMaxLengthExceeds","versionList","getServiceByName","isDefaultVersionBool","createNewAPIVersion","redirectToReferrer","handleVersionChange","handleServiceVersionChange","handleDefaultVersionChange","SwaggerUI","centerItems","tryoutHeading","menuItem","tokenType","tasksReducer","TryOutConsole","apiKey","setAPIKey","deployments","setDeployments","selectedDeployment","setSelectedDeployment","oasDefinition","setOasDefinition","advAuthHeader","setAdvAuthHeader","advAuthHeaderValue","setAdvAuthHeaderValue","selectedEndpoint","setSelectedEndpoint","publisherSettings","generateKey","inProgress","getOAS","tasksStatus","tasksStatusDispatcher","generateInternalKey","keyResponse","apikey","getDeployedRevisions","deploymentsResponse","currentDeploymentsWithDisplayName","deploy","gwEnvironment","initialDeploymentSelection","swaggerResponse","isAdvertised","setServersSpec","serverUrl","schemes","updatedOasDefinition","oasCopy","selectedDeploymentVhost","DEFAULT_VHOST","pathSeparator","openapi","servers","transportPort","baseURL","basePath","decodedJWT","decodeJWT","isAPIRetired","unix","exp","artifactType","selectedGWEnvironment","currentSelection","deployment","accessTokenProvider","userNotificationPaper","AdvertiseDetailsPanel","resetBtn","btn","drawerInfo","policyObj","setDroppedPolicy","currentFlow","apiPolicy","policySpec","handleDrawerClose","isEditMode","applyToAll","setApplyToAll","updateApiOperations","updateAllApiOperations","ApiOperationContext","policyAttributes","attr","specType","getValueOfPolicyParam","policyParamName","getError","specInCheck","validationRegex","getValue","specName","previousVal","hasAttributes","resetDisabled","Box","updateCandidates","attributeSpec","attribute","apiPolicyToSave","Grid","Button","Typography","TextField","InputLabel","Select","native","allowedValues","enumVal","FormHelperText","Checkbox","isDisabled","currentVal","isSaveDisabled","formHasAnError","formHasErrors","CircularProgress","drawerPaper","allPolicies","drawerOpen","setDrawerOpen","setPolicySpec","policySpecVal","getOperationPolicy","operationPolicies","uniqueKey","Drawer","ListItem","ListItemIcon","Settings","ListItemText","IconButton","Close","Divider","actionsBox","currentPolicyList","setCurrentPolicyList","deleteApiOperation","policyColor","stringToColor","policyBackgroundColor","hexToRGB","attributes","listeners","setNodeRef","isDragging","Transform","handleDrawerOpen","Avatar","stringAvatar","isAPISpecific","getOperationPolicyContent","apiPolicyResponse","getCommonOperationPolicyContent","commonPolicyResponse","filteredList","policyToDelete","policyDisplayStartDirection","reversedPolicyList","policyListToDisplay","rearrangeApiOperations","sensors","activationConstraint","distance","collisionDetection","onDragEnd","over","policyListCopy","oldIndex","strategy","applicableFlows","dropzoneDiv","alignLeft","alignRight","alignCenter","droppablePolicyList","droppedPolicy","canDrop","drop","useDrop","collect","monitor","arrowColor","arrowDirection","flowSpecificPolicyAttachGrid","defaultPolicyForMigration","supportedGateways","supportedApiTypes","isChoreoConnectEnabled","policyList","requestFlowPolicyList","setRequestFlowPolicyList","responseFlowPolicyList","setResponseFlowPolicyList","faultFlowPolicyList","setFaultFlowPolicyList","requestFlowDroppablePolicyList","setRequestFlowDroppablePolicyList","responseFlowDroppablePolicyList","setResponseFlowDroppablePolicyList","faultFlowDroppablePolicyList","setFaultFlowDroppablePolicyList","requestList","responseList","faultList","operationInAction","requestFlowList","requestFlow","request","requestFlowAttachedPolicy","policyResponse","responseFlowList","responseFlow","responseFlowAttachedPolicy","faultFlowList","faultFlow","fault","faultFlowAttachedPolicy","ExpansionPanelDetails","operationSummaryGrid","renderUsedInApiProducts","ExpansionPanel","Badge","ExpansionPanelSummary","getStyles","sx","bgcolor","gridRowGap","gridColumnGap","handleDialogClose","dialogOpen","isLocalToAPI","setLoading","getCommonOperationPolicy","Dialog","DialogContentText","PolicyViewForm","onDone","fetchPolicies","deleteOperationPolicy","policyCardText","policyActions","showCopyIcon","hovered","setHovered","setDialogOpen","drag","useDrag","dropEffect","containerStyle","onMouseOut","ListItemAvatar","singlePolicy","synapsePolicyDefinitionFile","setSynapsePolicyDefinitionFile","ccPolicyDefinitionFile","setCcPolicyDefinitionFile","PolicyCreateForm","onSave","policySpecification","policySpecContent","synapsePolicyDefinition","ccPolicyDefinition","addOperationPolicy","savePolicy","PATH_TEMPLATES","COMMON_POLICIES","flowTabs","flowTab","addPolicyBtn","paperPosition","setSelectedTab","gatewayType","GATEWAY_TYPE","synapse","choreoConnect","Card","CardContent","AddCircle","Tabs","Tab","SupportedGatewayTypes","setIsChangedToCCGatewayType","removeAPIPoliciesForGatewayChange","selectedGatewayType","isDialogBoxVisible","setIsDialogBoxVisible","isCCSelected","setIsCCSelected","HelpOutline","RadioGroup","Radio","defaultChecked","saveApi","updating","CustomSplitButton","gridItem","operationListingBox","ccTypography","setAllPolicies","setIsChoreoConnectEnabled","getInitState","clonedOperations","flow","policyItem","setApiOperations","apiPoliciesPromise","getOperationPolicies","commonPoliciesPromise","getCommonOperationPolicies","apiPoliciesResponse","commonPoliciesResponse","apiSpecificPolicies","mergedList","unionByPolicyDisplayName","localeCompare","retrievedSpec","newApiOperations","operationFlowPolicy","policyArray","handleVerbsForCC","providerValue","DndProvider","backend","isCCEnabled","OperationsGroup","getewayTypeForPolicies","previousPoliciesForCC","previousPolicyTargetForCC","anchorRef","selectedIndex","setSelectedIndex","contains","aria-expanded","prevOpen","TransitionProps","onClickAway","amber","InlineMessage","iconItem","getAPIProductTaggedOperations","taggedOperations","Default","openAPIOperation","operationInfo","getTaggedOperations","para","paraObj","param","rest","isReference","WrappedExpansionPanel","setExpanded","expandedState","muiName","useApiOperationContext","ApiOperationContextProvider"],"mappings":"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","file":"DeferredDetails.6f0d0b270d6a5cd40e52.bundle.js","sourcesContent":["import React, { useContext } from 'react';\n\nconst RevisionContext = React.createContext({ });\nexport const useRevisionContext = () => useContext(RevisionContext);\nexport const RevisionContextProvider = RevisionContext.Provider;\nexport default RevisionContext;\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport cloneDeep from 'lodash.clonedeep';\n\n/**\n * Utility method to get the endpoint property name based on the given endpoint type and category.\n *\n * @param {string} type The type of the endpoint (load_balance/ failover)\n * @param {string} category The endpoint category (production/ sandbox)\n * @return {string} The property name of the endpoints.\n */\nfunction getEndpointTypeProperty(type, category) {\n    if (type !== 'failover') {\n        return category;\n    } else {\n        return category === 'sandbox_endpoints' ? 'sandbox_failovers' : 'production_failovers';\n    }\n}\n\n/**\n * Merge the loadbalance/ failover endpoints to single object.\n *\n * @param {object} endpointConfig The endpoint config object\n * @return {object} {production: [], sandbox: []}\n * */\nfunction mergeEndpoints(endpointConfig) {\n    const type = endpointConfig.endpoint_type;\n    if (type === 'load_balance') {\n        return { production: endpointConfig.production_endpoints, sandbox: endpointConfig.sandbox_endpoints };\n    } else if (type === 'failover') {\n        const prodEps = [endpointConfig.production_endpoints].concat(endpointConfig.production_failovers);\n        const sandboxEps = [endpointConfig.sandbox_endpoints].concat(endpointConfig.sandbox_failovers);\n        return { production: prodEps, sandbox: sandboxEps };\n    }\n    return { production: [endpointConfig.production_endpoints], sandbox: [endpointConfig.sandbox_endpoints] };\n}\n\n/**\n * Method to get the endpoints templates based on the selected endpoint type (loadbalance/ failover) and whether is\n * http or address endpoint.\n *\n * @param {string} endpointType The endpoint type\n * @param {bool} isAddressEndpoint Whether the endpoint is soap or not.\n * @param {object} currentEndpointConfig The existing endpoint information.\n * @return {object} A endpoint template object.\n * */\nfunction getEndpointTemplateByType(endpointType, isAddressEndpoint, currentEndpointConfig) {\n    const tmpEndpointConfig = {};\n    if (endpointType === 'failover') {\n        tmpEndpointConfig.endpoint_type = endpointType;\n        tmpEndpointConfig.production_failovers = currentEndpointConfig.production_failovers\n            ? currentEndpointConfig.production_failovers : [];\n        tmpEndpointConfig.sandbox_failovers = currentEndpointConfig.sandbox_failovers\n            ? currentEndpointConfig.sandbox_failovers : [];\n        tmpEndpointConfig.production_endpoints = Array.isArray(currentEndpointConfig.production_endpoints)\n            ? currentEndpointConfig.production_endpoints[0] : currentEndpointConfig.production_endpoints;\n        tmpEndpointConfig.sandbox_endpoints = Array.isArray(currentEndpointConfig.sandbox_endpoints)\n            ? currentEndpointConfig.sandbox_endpoints[0] : currentEndpointConfig.sandbox_endpoints;\n        tmpEndpointConfig.failOver = true;\n    } else if (endpointType === 'load_balance') {\n        tmpEndpointConfig.endpoint_type = endpointType;\n        tmpEndpointConfig.algoClassName = 'org.apache.synapse.endpoints.algorithms.RoundRobin';\n        tmpEndpointConfig.algoCombo = 'org.apache.synapse.endpoints.algorithms.RoundRobin';\n        tmpEndpointConfig.sessionManagement = '';\n        tmpEndpointConfig.sessionTimeOut = '';\n        if (currentEndpointConfig.production_endpoints) {\n            tmpEndpointConfig.production_endpoints = Array.isArray(currentEndpointConfig.production_endpoints)\n                ? currentEndpointConfig.production_endpoints : [currentEndpointConfig.production_endpoints];\n        }\n        if (currentEndpointConfig.sandbox_endpoints) {\n            tmpEndpointConfig.sandbox_endpoints = Array.isArray(currentEndpointConfig.sandbox_endpoints)\n                ? currentEndpointConfig.sandbox_endpoints : [currentEndpointConfig.sandbox_endpoints];\n        }\n        tmpEndpointConfig.failOver = false;\n    } else {\n        tmpEndpointConfig.endpoint_type = isAddressEndpoint === true ? 'address' : 'http';\n        tmpEndpointConfig.production_endpoints = Array.isArray(currentEndpointConfig.production_endpoints)\n            ? currentEndpointConfig.production_endpoints[0] : currentEndpointConfig.production_endpoints;\n        tmpEndpointConfig.sandbox_endpoints = Array.isArray(currentEndpointConfig.sandbox_endpoints)\n            ? currentEndpointConfig.sandbox_endpoints[0] : currentEndpointConfig.sandbox_endpoints;\n        tmpEndpointConfig.failOver = false;\n    }\n    return tmpEndpointConfig;\n}\n\n/**\n * Returns all the endpoints as a list.\n *\n * @param {object} endpointConfig The endpoint config object from the api.\n * @return {array} The list of endpoints.\n * */\nfunction endpointsToList(endpointConfig) {\n    const config = cloneDeep(endpointConfig);\n    const endpoints = [];\n    if (Array.isArray(config.production_endpoints)) {\n        endpoints.push(...config.production_endpoints);\n    } else {\n        endpoints.push(config.production_endpoints);\n    }\n\n    if (Array.isArray(config.sandbox_endpoints)) {\n        endpoints.push(...config.sandbox_endpoints);\n    } else {\n        endpoints.push(config.sandbox_endpoints);\n    }\n\n    if (config.endpoint_type === 'failover') {\n        if (config.sandbox_failovers) {\n            endpoints.push(...config.sandbox_failovers);\n        }\n        if (config.production_failovers) {\n            endpoints.push(...config.production_failovers);\n        }\n    }\n    return endpoints;\n}\n\n/**\n * Returns an endpoint config object template based on the implementation method.\n * Eg: Managed, Prototyped.\n *\n * @param {string} implementationType The endpoint implementation type.\n * @return {object} The endpoint template.\n * */\nfunction getEndpointConfigByImpl(implementationType) {\n    const tmpEndpointConfig = {};\n    if (implementationType === 'PROTOTYPED') {\n        tmpEndpointConfig.endpoint_type = 'http';\n        tmpEndpointConfig.implementation_status = 'prototyped';\n        tmpEndpointConfig.production_endpoints = { config: null, url: 'http://localhost' };\n        tmpEndpointConfig.sandbox_endpoints = { config: null, url: 'http://localhost' };\n    } else {\n        tmpEndpointConfig.endpoint_type = 'http';\n        tmpEndpointConfig.production_endpoints = { url: '' };\n        tmpEndpointConfig.sandbox_endpoints = { url: '' };\n        tmpEndpointConfig.failOver = false;\n    }\n    return tmpEndpointConfig;\n}\n\n/**\n * Get the endpoint config based on the selected endpoint type.\n * Supported endpoint types:\n * 1. http\n * 2. address\n * 3. prototyped\n * 4. awslambda\n * 5. default (Dynamic)\n * 6. service\n *\n * @param {string} endpointType The selected endpoint type.\n * @return {endpointConfig} Endpoint config object.\n * */\nfunction createEndpointConfig(endpointType) {\n    const tmpEndpointConfig = {};\n    switch (endpointType) {\n        case 'http':\n            tmpEndpointConfig.endpoint_type = 'http';\n            tmpEndpointConfig.failOver = false;\n            break;\n        case 'service':\n            tmpEndpointConfig.endpoint_type = 'service';\n            tmpEndpointConfig.failOver = false;\n            break;\n        case 'address':\n            tmpEndpointConfig.endpoint_type = 'address';\n            tmpEndpointConfig.failOver = false;\n            break;\n        case 'prototyped':\n            tmpEndpointConfig.implementation_status = 'prototyped';\n            tmpEndpointConfig.endpoint_type = 'http';\n            tmpEndpointConfig.production_endpoints = { config: null, url: 'http://localhost' };\n            tmpEndpointConfig.sandbox_endpoints = { config: null, url: 'http://localhost' };\n            break;\n        case 'awslambda':\n            tmpEndpointConfig.endpoint_type = 'awslambda';\n            tmpEndpointConfig.access_method = 'role-supplied';\n            tmpEndpointConfig.amznAccessKey = '';\n            tmpEndpointConfig.amznSecretKey = '';\n            tmpEndpointConfig.amznRegion = '';\n            break;\n        default:\n            tmpEndpointConfig.endpoint_type = 'default';\n            tmpEndpointConfig.production_endpoints = { url: 'default' };\n            tmpEndpointConfig.sandbox_endpoints = { url: 'default' };\n            tmpEndpointConfig.failOver = false;\n            break;\n    }\n    return tmpEndpointConfig;\n}\n\n/**\n * Get the endpoint template based on endpoint type.\n *\n * @param {string} type: Endpoint type (HTTP/ Address)\n * @return {object} Endpoint Template\n * */\nfunction getEndpointTemplate(type) {\n    if (type === 'address') {\n        return { url: '', endpoint_type: 'address', template_not_supported: false };\n    }\n    return { url: '', template_not_supported: false };\n}\n\nexport {\n    getEndpointTypeProperty,\n    mergeEndpoints,\n    getEndpointTemplateByType,\n    endpointsToList,\n    getEndpointConfigByImpl,\n    createEndpointConfig,\n    getEndpointTemplate,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Radio from '@material-ui/core/Radio';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Divider from '@material-ui/core/Divider';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { FormattedMessage } from 'react-intl';\n\nconst RateLimitingLevels = {\n    API: 'api',\n    RESOURCE: 'resource',\n};\n\nconst useStyles = makeStyles((theme) => ({\n    focusLabel: {\n        boxShadow: '1px 1px 1px 1px #efefef',\n        paddingRight: theme.spacing(1),\n    },\n}));\n\n/**\n *\n * Handles the resource level and API level throttling UI switch\n * @export\n * @param {*} props\n * @returns\n */\nfunction APIRateLimiting(props) {\n    const {\n        updateAPI, operationRateLimits, onChange, value: currentApiThrottlingPolicy, isAPIProduct,\n        setFocusOperationLevel, focusOperationLevel,\n    } = props;\n    const classes = useStyles();\n    const [apiThrottlingPolicy, setApiThrottlingPolicy] = useState(currentApiThrottlingPolicy);\n    const [isSaving, setIsSaving] = useState(false);\n\n    const isResourceLevel = apiThrottlingPolicy === null;\n    const rateLimitingLevel = isResourceLevel ? RateLimitingLevels.RESOURCE : RateLimitingLevels.API;\n    const [apiFromContext] = useAPI();\n\n    // Following effect is used to handle the controlled component case, If user provide onChange handler to\n    // control this component, Then we accept the props as the valid input and update the current state value from props\n    useEffect(() => {\n        if (onChange) {\n            if (currentApiThrottlingPolicy === '' && apiFromContext.apiThrottlingPolicy) {\n                setApiThrottlingPolicy(apiFromContext.apiThrottlingPolicy);\n            } else {\n                setApiThrottlingPolicy(currentApiThrottlingPolicy);\n            }\n        }\n    }, [onChange, currentApiThrottlingPolicy]); // Do not expect to change the onChange during the runtime\n\n    /**\n     *\n     *\n     * @param {*} event\n     */\n    function updateRateLimitingPolicy(event) {\n        // If the selected option is resource, we set the api level rate limiting to null\n        const userSelection = event.target.value === RateLimitingLevels.RESOURCE\n            ? null : '';\n        if (onChange) {\n            // Assumed controlled component\n            onChange(userSelection);\n        } else {\n            setApiThrottlingPolicy(userSelection);\n        }\n        if (event.target.value === RateLimitingLevels.RESOURCE) {\n            setFocusOperationLevel(false);\n        }\n    }\n    /**\n     *\n     *\n     */\n    function saveChanges() {\n        setIsSaving(true);\n        updateAPI({ apiThrottlingPolicy }).finally(() => setIsSaving(false));\n    }\n\n    /**\n     *\n     *\n     */\n    function resetChanges() {\n        setApiThrottlingPolicy(currentApiThrottlingPolicy);\n    }\n\n    let operationRateLimitMessage = (\n        <Typography variant='body1' gutterBottom>\n            You may change the rate limiting policies per operation\n            <Typography variant='caption' display='block' gutterBottom>\n                Expand an operation below to select a rate limiting policy for an operation\n            </Typography>\n        </Typography>\n    );\n    if (isAPIProduct) {\n        operationRateLimitMessage = (\n            <Typography variant='body1' gutterBottom>\n                Rate limiting polices of the source operation will be applied\n                <Typography variant='caption' display='block' gutterBottom>\n                    Rate limiting policy of an individual operation will be govern by the policy specified in the source\n                    operation\n                </Typography>\n            </Typography>\n        );\n    }\n    return (\n        <Paper>\n            <Grid container direction='row' spacing={3} justify='flex-start' alignItems='flex-start'>\n                <Grid item md={12} xs={12}>\n                    <Box ml={1}>\n                        <Typography variant='subtitle1' component='h3' gutterBottom>\n                            Operations Configuration\n                            <Tooltip\n                                fontSize='small'\n                                title='Configurations that affects on all the resources'\n                                placement='right-end'\n                                interactive\n                            >\n                                <IconButton aria-label='Operations Configuration help text'>\n                                    <HelpOutline />\n                                </IconButton>\n                            </Tooltip>\n                        </Typography>\n                    </Box>\n                    <Divider light variant='middle' />\n                </Grid>\n                <Grid item md={1} xs={1} />\n                <Grid item md={5} xs={11}>\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend'>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.APIRateLimiting.rate.limiting.level'\n                                defaultMessage='Rate limiting level'\n                            />\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='Apply rate limiting in'\n                            value={rateLimitingLevel}\n                            onChange={updateRateLimitingPolicy}\n                            row\n                        >\n                            <FormControlLabel\n                                value={RateLimitingLevels.API}\n                                control={(\n                                    <Radio\n                                        color='primary'\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    />\n                                )}\n                                label='API Level'\n                                labelPlacement='end'\n                                id='api-rate-limiting-api-level'\n                            />\n                            <FormControlLabel\n                                value={RateLimitingLevels.RESOURCE}\n                                control={(\n                                    <Radio\n                                        color='primary'\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    />\n                                )}\n                                className={focusOperationLevel && classes.focusLabel}\n                                label='Operation Level'\n                                labelPlacement='end'\n                                id='api-rate-limiting-operation-level'\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                <Grid item md={6} xs={12}>\n                    <Box minHeight={70} borderLeft={1} pl={10}>\n                        {isResourceLevel ? (\n                            operationRateLimitMessage\n                        ) : (\n                            <TextField\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                id='operation_throttling_policy'\n                                select\n                                label='Rate limiting policies'\n                                value={apiThrottlingPolicy}\n                                onChange={({ target: { value } }) => (\n                                    onChange ? onChange(value) : setApiThrottlingPolicy(value))}\n                                helperText='Selected rate limiting policy will be applied to whole API'\n                                margin='dense'\n                                variant='outlined'\n                            >\n                                {operationRateLimits.map((rateLimit) => (\n                                    <MenuItem\n                                        key={rateLimit.name}\n                                        value={rateLimit.name}\n                                        id={'api-rate-limiting-api-level-' + rateLimit.name}\n                                    >\n                                        {rateLimit.displayName}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        )}\n                    </Box>\n                </Grid>\n                {/* If onChange handler is provided we assume that component is getting controlled by its parent\n                so that, hide the save cancel action */}\n                {!onChange && (\n                    <>\n                        <Grid item md={12}>\n                            <Divider />\n                        </Grid>\n                        <Grid item>\n                            <Box ml={1}>\n                                <Button\n                                    onClick={saveChanges}\n                                    disabled={false}\n                                    variant='outlined'\n                                    size='small'\n                                    color='primary'\n                                >\n                                    Save\n                                    {isSaving && <CircularProgress size={24} />}\n                                </Button>\n                                <Box display='inline' ml={1}>\n                                    <Button size='small' onClick={resetChanges}>\n                                        Reset\n                                    </Button>\n                                </Box>\n                            </Box>\n                        </Grid>\n                    </>\n                )}\n            </Grid>\n        </Paper>\n    );\n}\nAPIRateLimiting.defaultProps = {\n    onChange: null,\n    isAPIProduct: false,\n};\nAPIRateLimiting.propTypes = {\n    updateAPI: PropTypes.func.isRequired,\n    onChange: PropTypes.oneOf([null, PropTypes.func]),\n    operationRateLimits: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    disabledAction: PropTypes.shape({}).isRequired,\n    value: PropTypes.string.isRequired,\n    isAPIProduct: PropTypes.bool,\n};\n\nexport default React.memo(APIRateLimiting);\n","/**\n * Copyright (c) 2018, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable */\nimport APIClientFactory from './APIClientFactory';\nimport Utils from './Utils';\nimport Resource from './Resource';\nimport cloneDeep from 'lodash.clonedeep';\n\n/**\n * An abstract representation of an Comments\n */\nclass Comments extends Resource {\n    constructor(parentId, content, category, kwargs) {\n        super();\n        let properties = kwargs;\n        if (parentId instanceof Object) {\n            properties = parentId;\n            Utils.deepFreeze(properties);\n            this._data = properties;\n            for (const key in properties) {\n                if (Object.prototype.hasOwnProperty.call(properties, key)) {\n                    this[key] = properties[key];\n                }\n            }\n        } else {\n            this.parentId = parentId;\n            this.content = content;\n            this.category = category;\n            this.id = null;\n            this.replies = [];\n        }\n\n    }\n\n    /**\n     *\n     * @param data\n     * @returns {object} Metadata for API request\n     * @private\n     */\n    _requestMetaData() {\n        Resource._requestMetaData();\n    }\n\n    /**\n     * Add new comment to an existing API\n     * @param apiId apiId of the api to which the comment is added\n     * @param commentInfo comment text\n     * * TODO: remove\n     */\n    static add(apiId, comment, replyTo) {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(),\n            Utils.CONST.API_CLIENT).client;\n        return apiClient.then(client => {\n            return client.apis.Comments.addCommentToAPI(\n                { apiId, replyTo },\n                { requestBody: comment }, Resource._requestMetaData()\n            );\n        })\n    }\n\n    /**\n     * Get all comments for a particular API\n     * @param apiId api id of the api to which the comment is added\n     * * TODO: remove\n     */\n     static all(apiId, limit, offset) {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(),\n            Utils.CONST.API_CLIENT).client;\n        return apiClient.then(client => {\n            return client.apis.Comments.getAllCommentsOfAPI({ apiId , limit, offset });\n        })\n    }\n\n    /**\n     * Delete a comment belongs to a particular API\n     * @param apiId api id of the api to which the comment belongs to\n     * @param commentId comment id of the comment which has to be deleted\n     * * TODO: remove\n     */\n    deleteComment(apiId, commentId, callback = null) {\n        let promise = this.client\n            .then(client => {\n                return client.apis.Comments.deleteComment(\n                    { apiId: apiId, commentId: commentId },\n                    this._requestMetaData(),\n                );\n            })\n            .catch(error => {\n                console.error(error);\n            });\n        if (callback) {\n            return promise.then(callback);\n        } else {\n            return promise;\n        }\n    }\n\n    /**\n     * Update a comment belongs to a particular API\n     * @param apiId apiId of the api to which the comment is added\n     * @param commentId comment id of the comment which has to be updated\n     * @param commentInfo comment text\n     * TODO: remove\n     */\n    updateComment(apiId, commentId, commentInfo, callback = null) {\n        let promise = this.client\n            .then(client => {\n                return client.apis['Comment (Individual)'].put_apis__apiId__comments__commentId_(\n                    { apiId: apiId, commentId: commentId, body: commentInfo },\n                    this._requestMetaData(),\n                );\n            })\n            .catch(error => {\n                console.error(error);\n            });\n        if (callback) {\n            return promise.then(callback);\n        } else {\n            return promise;\n        }\n    }\n\n}\n\n\nComments.CONSTS = {\n\n};\n\nObject.freeze(Comments.CONSTS);\n\nexport default Comments;\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTheme } from '@material-ui/styles';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\n\nconst useStyles = makeStyles((theme) => ({\n    leftLInkText: {\n        color: theme.palette.getContrastText(theme.palette.background.leftMenu),\n        textTransform: theme.custom.leftMenuTextStyle,\n        width: '100%',\n        textAlign: 'left',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontSize: theme.typography.body1.fontSize,\n        fontWeight: 250,\n        whiteSpace: 'nowrap',\n    },\n    leftLInkTextHead: {\n        color: theme.palette.getContrastText(theme.palette.background.leftMenu),\n        textTransform: theme.custom.leftMenuTextStyle,\n        width: '100%',\n        textAlign: 'left',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontWeight: 800,\n        whiteSpace: 'nowrap',\n    },\n    leftLInkText_IconLeft: {\n        paddingLeft: 10,\n    },\n    LeftMenu: {\n        backgroundColor: theme.palette.background.leftMenu,\n        width: theme.custom.leftMenuWidth,\n        textAlign: 'center',\n        fontFamily: theme.typography.fontFamily,\n        position: 'absolute',\n        bottom: 0,\n        left: 0,\n        top: 0,\n    },\n    leftLInk: {\n        paddingTop: theme.spacing(1),\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        height: '18px',\n        fontSize: theme.typography.caption.fontSize,\n        cursor: 'pointer',\n        textDecoration: 'none',\n    },\n    leftLInkOverview: {\n        paddingTop: theme.spacing(1),\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        height: '18px',\n        fontSize: theme.typography.caption.fontSize,\n        cursor: 'pointer',\n        textDecoration: 'none',\n    },\n    leftLink_Icon: {\n        color: theme.palette.getContrastText(theme.palette.background.leftMenu),\n        fontSize: theme.custom.leftMenuIconSize + 'px',\n    },\n    leftLink_IconLeft: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    noIcon: {\n        display: 'none',\n    },\n    leftLInkText_NoText: {\n        diplay: 'none',\n    },\n    selectedMenu: {\n        backgroundColor: theme.palette.background.appBarSelected,\n    },\n\n}));\n\n/**\n * NOTE: Incase displaying menu text is not equal to associated path segment should use `route` prop\n *\n * @param {*} props\n * @returns\n */\nfunction LeftMenuItem(props) {\n    const {\n        Icon, to, text, route, head, id,\n    } = props;\n    const classes = useStyles();\n    const theme = useTheme();\n    const { leftMenu } = theme.custom;\n    const strokeColor = theme.palette.getContrastText(theme.palette.background.leftMenu);\n    const iconSize = theme.custom.leftMenuIconSize;\n    const { pathname } = useLocation();\n    // Incase displaying menu text is not equal to associated path segment should use `route` prop\n    const routeToCheck = route || text;\n    const menuPathPattern = new RegExp('/' + routeToCheck + '($|/)', 'g');\n    const isSelected = pathname.match(menuPathPattern);\n    return (\n        <Link\n            className={classNames(\n                head !== 'valueOnly' ? (\n                    classes.leftLInk) : (classes.leftLInkOverview),\n                {\n                    [classes.leftLink_IconLeft]: leftMenu === 'icon left',\n                },\n                'leftLInk',\n                isSelected && classes.selectedMenu,\n            )}\n            to={to}\n            id={id}\n        >\n            {// If the icon pro ( which is coming from the React Material library )\n                // is coming we add css class and render.\n                // If leftMenu='no icon' at the theme object we hide the icon. Also we add static classes to\n                // allow customers theme\n                // the product without compiling.\n                Icon ? (\n                    React.cloneElement(Icon, {\n                        className: classNames(\n                            classes.leftLink_Icon,\n                            {\n                                [classes.noIcon]: leftMenu === 'no icon',\n                            },\n                            'leftLink_Icon',\n                        ),\n                    })\n                ) : (\n                // We can also add custom icons\n                    <CustomIcon\n                        strokeColor={strokeColor}\n                        width={iconSize}\n                        height={iconSize}\n                        icon={props.iconText}\n                        className={classNames(\n                            classes.leftLInk,\n                            {\n                                [classes.noIcon]: leftMenu === 'no icon',\n                            },\n                            'leftLink_Icon',\n                        )}\n                    />\n                )\n            }\n            {head === 'valueOnly' ? (\n                <Typography\n                    className={classNames(\n                        classes.leftLInkTextHead,\n                    )}\n                >\n                    {text}\n                </Typography>\n            )\n                : (\n                    <Typography\n                        className={classNames(\n                            classes.leftLInkText,\n                            {\n                                [classes.leftLInkText_IconLeft]: leftMenu === 'icon left',\n                                [classes.leftLInkText_NoText]: leftMenu === 'no text',\n                            },\n                            'leftLInkText',\n                        )}\n                    >\n                        {text}\n                    </Typography>\n                )}\n        </Link>\n    );\n}\nLeftMenuItem.defaultProps = {\n    route: null,\n    iconText: null,\n};\nLeftMenuItem.propTypes = {\n    classes: PropTypes.shape({\n        divider: PropTypes.string,\n        leftLInk: PropTypes.string,\n        leftLink_IconLeft: PropTypes.string,\n        noIcon: PropTypes.string,\n        leftLink_Icon: PropTypes.string,\n        leftLInkText: PropTypes.string,\n        leftLInkTextHead: PropTypes.string,\n        leftLInkText_IconLeft: PropTypes.string,\n        leftLInkText_NoText: PropTypes.string,\n    }).isRequired,\n    theme: PropTypes.shape({\n        custom: PropTypes.shape({\n            leftMenu: PropTypes.string,\n            leftMenuIconSize: PropTypes.number,\n        }),\n        palette: PropTypes.shape({\n            getContrastText: PropTypes.func,\n            background: PropTypes.shape({\n                leftMenu: PropTypes.string,\n                appBar: PropTypes.string,\n            }),\n            leftMenu: PropTypes.string,\n        }),\n    }).isRequired,\n    Icon: PropTypes.element.isRequired,\n    text: PropTypes.string.isRequired,\n    to: PropTypes.string.isRequired,\n    head: PropTypes.string.isRequired,\n    route: PropTypes.string,\n    history: PropTypes.shape({\n        listen: PropTypes.func.isRequired,\n        location: PropTypes.string.isRequired,\n    }).isRequired,\n    iconText: PropTypes.string,\n};\nexport default LeftMenuItem;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { withStyles } from '@material-ui/core/styles';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport green from '@material-ui/core/colors/green';\nimport red from '@material-ui/core/colors/red';\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Paper from '@material-ui/core/Paper';\nimport Slide from '@material-ui/core/Slide';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\nimport Dropzone from 'react-dropzone';\nimport Api from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport MaterialIcons from 'MaterialIcons';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport Configurations from 'Config';\n\nimport BaseThumbnail from './BaseThumbnail';\n\nconst windowURL = window.URL || window.webkitURL;\nconst dropzoneStyles = {\n    border: '1px dashed ',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    height: 75,\n    padding: '8px 0px',\n    position: 'relative',\n    textAlign: 'center',\n    width: '100%',\n    margin: '10px 0',\n};\nconst styles = (theme) => ({\n    acceptDrop: {\n        backgroundColor: green[50],\n    },\n    dropzone: {\n        border: '1px dashed ' + theme.palette.primary.main,\n        borderRadius: '5px',\n        cursor: 'pointer',\n        height: 'calc(100vh - 10em)',\n        padding: `${theme.spacing(2)}px 0px`,\n        position: 'relative',\n        textAlign: 'center',\n        width: '100%',\n        margin: '10px 0',\n    },\n    dropZoneWrapper: {\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '& span': {\n            fontSize: 100,\n            color: theme.palette.primary.main,\n        },\n    },\n    preview: {\n        height: theme.spacing(25),\n    },\n    rejectDrop: {\n        backgroundColor: red[50],\n    },\n    group: {\n        display: 'flex',\n        flexDirection: 'row',\n        padding: '0 0 0 20px',\n    },\n    popupHeader: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    iconView: {\n        width: 30,\n        margin: 10,\n        cursor: 'pointer',\n    },\n    subtitle: {\n        marginRight: 20,\n    },\n    subtitleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginTop: 20,\n        marginBottom: 10,\n    },\n    body: {\n        marginBottom: 10,\n    },\n    imageGenWrapper: {\n        '& > div': {\n            position: 'fixed',\n            marginTop: 20,\n        },\n    },\n    backgroundSelection: {\n        cursor: 'pointer',\n        marginRight: 10,\n        display: 'inline-block',\n        border: 'solid 1px #ccc',\n    },\n    actionBox: {\n        boxShadow:\n            '0px 1px 5px 0px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 3px 1px -2px rgba(0,0,0,0.12)',\n        justifyContent: 'flex-start',\n        padding: '10px 0 10px 10px',\n    },\n    imageContainer: {\n        paddingTop: 10,\n    },\n});\n\n/**\n * Slide up transition for modal\n *\n * @param {any} props Properties\n * @returns {Slide} Slide up transition\n */\nfunction Transition(props) {\n    return <Slide direction='up' {...props} />;\n}\n/**\n * Provides a view for the API Thumbnail image.\n * This can be either user defined image uploaded earlier or a generated Image.\n */\nclass ThumbnailView extends Component {\n    /**\n     * Initializes the ThumbnailView Component\n     *\n     * @param {any} props Component properties\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            file: null,\n            thumbnail: null,\n            selectedTab: 'upload',\n            category: MaterialIcons.categories[0].name,\n            selectedIcon: null,\n            selectedIconUpdate: null,\n            color: null,\n            colorUpdate: null,\n            backgroundIndex: null,\n            backgroundIndexUpdate: null,\n            uploading: false,\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n    }\n\n    /**\n     * Clean up resource\n     */\n    componentWillUnmount() {\n        if (this.state.thumbnail) {\n            windowURL.revokeObjectURL(this.state.thumbnail);\n        }\n    }\n\n    /**\n     * Event listener for file drop on the dropzone\n     *\n     * @param {File} acceptedFile dropped file\n     */\n    onDrop(acceptedFile) {\n        this.setState({ file: acceptedFile });\n    }\n\n    selectIcon = (selectedIconUpdate) => {\n        this.setState({ selectedIconUpdate });\n    };\n\n    selectBackground = (backgroundIndexUpdate) => {\n        this.setState({ backgroundIndexUpdate });\n    };\n\n    /**\n     * @param {SyntheticEvent} e React event object\n     */\n    handleClick = (action, intl) => () => {\n        if (action === 'btnEditAPIThumb') {\n            this.setState({ open: true });\n        } else if (action === 'btnUploadAPIThumb') {\n            const { api } = this.props;\n            const {\n                selectedTab, selectedIconUpdate, category, colorUpdate, backgroundIndexUpdate, file,\n            } = this.state;\n            let fileObj;\n            if (selectedTab === 'upload') {\n                if (!api.id && !file) {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Listing.components.ImageGenerator.ThumbnailView.thumbnail.validation.error',\n                        defaultMessage: 'Invalid file or API information is not set correctly.',\n                    }));\n                    return;\n                }\n                /* eslint prefer-destructuring: [\"error\", {VariableDeclarator: {object: true}}] */\n                fileObj = file[0];\n            } else if (selectedTab === 'remove') {\n                fileObj = new File([], 'FileName.jpg', { type: 'application/json' });\n            } else {\n                if (!selectedIconUpdate && !colorUpdate && !backgroundIndexUpdate) {\n                    Alert.error(intl.formatMessage({\n                        id: 'the.icon.is.not.modified',\n                        defaultMessage: 'The icon is not modified',\n                    }));\n                    return;\n                }\n                const newIconJson = {\n                    key: selectedIconUpdate,\n                    category,\n                    color: colorUpdate,\n                    backgroundIndex: backgroundIndexUpdate,\n                };\n                const blob = new Blob([JSON.stringify(newIconJson)], { type: 'application/json' });\n                fileObj = new File([blob], 'FileName.json', { type: 'application/json' });\n            }\n\n            this.uploadThumbnail(selectedTab, api.id, fileObj, intl);\n        }\n    };\n\n    handleChange = (event, selectedTab) => {\n        this.setState({ selectedTab });\n    };\n\n    handleSelectionChange = (name) => (event) => {\n        this.setState({ [name]: event.target.value });\n    };\n\n    handleChangeComplete = (colorUpdate) => {\n        this.setState({ colorUpdate: colorUpdate.hex });\n    };\n\n    /**\n     * Handle modal close event\n     */\n    handleClose() {\n        const { file, preview } = this.state;\n        if (file) {\n            windowURL.revokeObjectURL(preview);\n        }\n        this.setState((cState) => ({\n            open: false,\n            file: null,\n            colorUpdate: cState.color,\n            backgroundIndexUpdate: cState.background,\n            selectedIconUpdate: cState.selectedIcon,\n        }));\n    }\n\n    /**\n     * Add new thumbnail image to an API\n     *\n     * @param {String} apiId ID of the API to be updated\n     * @param {File} file new thumbnail image file\n     */\n    uploadThumbnail(selectedTab, apiId, file, intl) {\n        this.setState({ uploading: true });\n        const {\n            api: { apiType, id },\n            setImageUpdate,\n        } = this.props;\n        const promisedThumbnail = apiType === Api.CONSTS.APIProduct\n            ? new APIProduct().addAPIProductThumbnail(id, file)\n            : new Api().addAPIThumbnail(id, file);\n\n        promisedThumbnail\n            .then(() => {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Listing.components.ImageGenerator.ThumbnailView.thumbnail.upload.success',\n                    defaultMessage: 'Thumbnail uploaded successfully',\n                }));\n                if (selectedTab === 'upload') {\n                    this.setState({ open: false, thumbnail: windowURL.createObjectURL(file) });\n                } else {\n                    this.setState((cState) => ({\n                        open: false,\n                        thumbnail: file.preview,\n                        selectedIcon: cState.selectedIconUpdate,\n                        color: cState.colorUpdate,\n                        backgroundIndex: cState.backgroundIndexUpdate,\n                    }));\n                }\n                setImageUpdate();\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Listing.components.ImageGenerator.ThumbnailView.thumbnail.upload.error',\n                    defaultMessage: 'Error occurred while uploading new thumbnail. Please try again.',\n                }));\n            })\n            .finally(() => {\n                this.setState({ uploading: false });\n            });\n    }\n\n    saveDisableEnable() {\n        const {\n            file, selectedTab, selectedIconUpdate, colorUpdate, backgroundIndexUpdate, uploading,\n        } = this.state;\n        if (selectedTab === 'upload') {\n            return !(file && file[0]) || uploading; // If no files is uploaded retrun true\n        } else if (selectedTab === 'remove') {\n            return false;\n        } else {\n            // If one of them is selected we return false\n            return !(selectedIconUpdate || backgroundIndexUpdate || colorUpdate) || uploading;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            api, classes, width, height, isEditable, intl, imageUpdate,\n        } = this.props;\n        const maxSize = 1000000;\n        const {\n            file,\n            thumbnail,\n            selectedTab,\n            selectedIcon,\n            color,\n            backgroundIndex,\n            uploading,\n        } = this.state;\n        let { category } = this.state;\n        if (!category) category = MaterialIcons.categories[0].name;\n\n        return (\n            <>\n                <BaseThumbnail\n                    isEditable={isEditable}\n                    onClick={this.handleClick('btnEditAPIThumb', intl)}\n                    thumbnail={thumbnail}\n                    selectedIcon={selectedIcon}\n                    color={color}\n                    backgroundIndex={backgroundIndex}\n                    category={category}\n                    api={api}\n                    width={width}\n                    height={height}\n                    imageUpdate={imageUpdate}\n                />\n\n                <Dialog\n                    TransitionComponent={Transition}\n                    aria-labelledby='thumb-dialog-title'\n                    disableBackdropClick\n                    open={this.state.open}\n                    onClose={this.handleClose}\n                    fullWidth='true'\n                    maxWidth='lg'\n                    fullScreen\n                >\n                    <Paper square className={classes.popupHeader}>\n                        <IconButton color='inherit' onClick={this.handleClose} aria-label='Close'>\n                            <Icon>close</Icon>\n                        </IconButton>\n                        <RadioGroup\n                            aria-label='APIThumbnail'\n                            name='apiThumbnail'\n                            className={classes.group}\n                            value={this.state.selectedTab}\n                            onChange={this.handleChange}\n                        >\n                            <FormControlLabel\n                                value='upload'\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Listing.components.ImageGenerator.ThumbnailView.upload'\n                                        defaultMessage='Upload'\n                                    />\n                                )}\n                            />\n                            <FormControlLabel\n                                value='remove'\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Listing.components.ImageGenerator.ThumbnailView.remove'\n                                        defaultMessage='Remove'\n                                    />\n                                )}\n                            />\n                        </RadioGroup>\n                    </Paper>\n\n                    <DialogContent>\n                        {selectedTab === 'upload' && (\n                            <Grid container spacing={4}>\n                                <Grid item xs={3}>\n                                    <div className={classes.imageContainer}>\n                                        <img\n                                            className={classes.preview}\n                                            src={\n                                                file && file.length > 0\n                                                    ? windowURL.createObjectURL(file[0])\n                                                    : Configurations.app.context\n                                                      + '/site/public/images/api/api-default.png'\n                                            }\n                                            alt='Thumbnail Preview'\n                                        />\n                                    </div>\n                                </Grid>\n                                <Grid item xs={9} id='edit-api-thumbnail-upload'>\n                                    <Dropzone\n                                        multiple={false}\n                                        accept='image/*'\n                                        maxSize={maxSize}\n                                        className={classes.dropzone}\n                                        activeClassName={classes.acceptDrop}\n                                        rejectClassName={classes.rejectDrop}\n                                        onDrop={(dropFile) => {\n                                            this.onDrop(dropFile);\n                                        }}\n                                    >\n                                        {({ getRootProps, getInputProps, rejectedFiles }) => {\n                                            const isFileTooLarge = rejectedFiles && rejectedFiles.length > 0\n                                                && rejectedFiles[0].size > maxSize;\n                                            return (\n                                                <div {...getRootProps({ style: dropzoneStyles })}>\n                                                    <input {...getInputProps()} />\n                                                    {isFileTooLarge && (\n                                                        <Typography color='error'>\n                                                            <FormattedMessage\n                                                                id='upload.image.size.error'\n                                                                defaultMessage='Uploaded File is too large.\n                                                                Maximum file size limit to 1MB'\n                                                            />\n                                                        </Typography>\n                                                    )}\n                                                    <div className={classes.dropZoneWrapper}>\n                                                        <Icon className={classes.dropIcon}>cloud_upload</Icon>\n                                                        <Typography>\n                                                            <FormattedMessage\n                                                                id='upload.image'\n                                                                defaultMessage='Click or drag the image to upload.'\n                                                            />\n                                                        </Typography>\n                                                    </div>\n                                                </div>\n                                            );\n                                        }}\n                                    </Dropzone>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='upload.image.size.info'\n                                            defaultMessage='Maximum file size limit to 1MB'\n                                        />\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        )}\n                    </DialogContent>\n                    <DialogActions className={classes.actionBox}>\n                        <Button\n                            disabled={this.saveDisableEnable()}\n                            variant='contained'\n                            color='primary'\n                            size='small'\n                            onClick={this.handleClick('btnUploadAPIThumb', intl)}\n                            id='edit-api-thumbnail-upload-btn'\n                        >\n                            {selectedTab === 'design' && uploading && (\n                                <>\n                                    <FormattedMessage\n                                        id='Apis.Listing.components.ImageGenerator.ThumbnailView.saving.btn'\n                                        defaultMessage='Saving'\n                                    />\n                                    <CircularProgress size={16} />\n                                </>\n                            )}\n                            {selectedTab === 'design' && !uploading && (\n                                <FormattedMessage\n                                    id='Apis.Listing.components.ImageGenerator.ThumbnailView.save.btn'\n                                    defaultMessage='Save'\n                                />\n                            )}\n\n                            {selectedTab !== 'design' && uploading && (\n                                <>\n                                    <FormattedMessage\n                                        id='Apis.Listing.components.ImageGenerator.ThumbnailView.uploading.btn'\n                                        defaultMessage='Uploading'\n                                    />\n                                    <CircularProgress size={16} />\n                                </>\n                            )}\n                            {selectedTab === 'upload' && !uploading && (\n                                <FormattedMessage\n                                    id='Apis.Listing.components.ImageGenerator.ThumbnailView.upload.btn'\n                                    defaultMessage='Upload'\n                                />\n                            )}\n                            {selectedTab === 'remove' && !uploading && (\n                                <FormattedMessage\n                                    id='Apis.Listing.components.ImageGenerator.ThumbnailView.remove.btn'\n                                    defaultMessage='Remove'\n                                />\n                            )}\n                        </Button>\n\n                        <Button variant='contained' size='small' onClick={this.handleClose}>\n                            <FormattedMessage\n                                id='Apis.Listing.components.ImageGenerator.ThumbnailView.cancel.btn'\n                                defaultMessage='CANCEL'\n                            />\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nThumbnailView.defaultProps = {\n    height: 190,\n    width: 250,\n    isEditable: false,\n    setImageUpdate: () => {},\n};\n\nThumbnailView.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    setImageUpdate: PropTypes.shape({}),\n    imageUpdate: PropTypes.number.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    height: PropTypes.number,\n    width: PropTypes.number,\n    isEditable: PropTypes.bool,\n    intl: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withAPI(withStyles(styles, { withTheme: true })(ThumbnailView)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { Link } from 'react-router-dom';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Box from '@material-ui/core/Box';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst showEndpoint = function (api, type) {\n    if (api.endpointConfig) {\n        if (type === 'prod') {\n            return api.getProductionEndpoint();\n        }\n        if (type === 'sand') {\n            return api.getSandboxEndpoint();\n        }\n    }\n    return null;\n};\n\nconst useStyles = makeStyles((theme) => ({\n    subtitle: {\n        marginTop: theme.spacing(0),\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    notConfigured: {\n        color: 'rgba(0, 0, 0, 0.54)',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n    textTrim: {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n    },\n    externalLink: {\n        color: theme.palette.primary.dark,\n    },\n}));\n\n/**\n *\n *X\n * @param {*} props\n * @returns\n */\nfunction Endpoints(props) {\n    const { api } = props;\n    const classes = useStyles();\n    const isPrototypedAvailable = api.endpointConfig !== null\n        && api.endpointConfig.implementation_status === 'prototyped';\n\n    /**\n     * Check whether the endpoint configuration is dynamic\n     *\n     * @param {object} endpointConfig The endpoint configuration of the api.\n     * @return {boolean} True if the endpoint config is dynamic.\n     * */\n    const isDynamicEndpoints = (endpointConfig) => {\n        if (!endpointConfig) {\n            return false;\n        }\n        if (endpointConfig.production_endpoints && !Array.isArray(endpointConfig.production_endpoints)) {\n            return endpointConfig.production_endpoints.url === 'default';\n        }\n        return false;\n    };\n\n    return (\n        <>\n            <WrappedExpansionPanel className={classes.expansionPanel} defaultExpanded id='endpoints'>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                    <Typography className={classes.subHeading} variant='h6' component='h4'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.Endpoints.endpoints'\n                            defaultMessage='Endpoints'\n                        />\n                    </Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                    {isDynamicEndpoints(api.endpointConfig)\n                        ? (\n                            <Box pb={2}>\n                                <Typography component='p' variant='body1' className={classes.subtitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.Endpoints.dynamic'\n                                        defaultMessage='Dynamic'\n                                    />\n                                </Typography>\n                            </Box>\n                        )\n                        : (\n                            <>\n                                <Box pb={2}>\n                                    {/* Production Endpoint (TODO) fix the endpoint\n                                                    info when it's available with the api object */}\n\n                                    { !isPrototypedAvailable ? (\n                                        <Typography component='p' variant='subtitle2' className={classes.subtitle}>\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.components.Endpoints.production'\n                                                defaultMessage='Production'\n                                            />\n                                        </Typography>\n                                    ) : (\n                                        <Typography component='p' variant='subtitle2' className={classes.subtitle}>\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.components.Endpoints.prototype'\n                                                defaultMessage='Prototype'\n                                            />\n                                        </Typography>\n                                    )}\n                                    {showEndpoint(api, 'prod')\n                                && (\n                                    <Tooltip\n                                        title={showEndpoint(api, 'prod')}\n                                        interactive\n                                    >\n                                        <Typography component='p' variant='body1' className={classes.textTrim}>\n                                            <>\n                                                {showEndpoint(api, 'prod')}\n                                            </>\n                                        </Typography>\n                                    </Tooltip>\n                                )}\n                                    <Typography component='p' variant='body1' className={classes.notConfigured}>\n                                        {!showEndpoint(api, 'prod') && (\n                                            <>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Configuration.'\n                                                    + 'components.Endpoints.not.set'}\n                                                    defaultMessage='-'\n                                                />\n                                            </>\n                                        )}\n                                    </Typography>\n                                </Box>\n                                {!isPrototypedAvailable && (\n                                    <Box pb={2}>\n                                        {/* Sandbox Endpoint (TODO) fix the endpoint info when\n                                                it's available with the api object */}\n                                        <Typography component='p' variant='subtitle2' className={classes.subtitle}>\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.components.Endpoints.sandbox'\n                                                defaultMessage='Sandbox'\n                                            />\n                                        </Typography>\n                                        {showEndpoint(api, 'sand')\n                                    && (\n                                        <Tooltip\n                                            title={showEndpoint(api, 'sand')}\n                                            interactive\n                                        >\n                                            <Typography component='p' variant='body1' className={classes.textTrim}>\n                                                <>\n                                                    {showEndpoint(api, 'sand')}\n                                                </>\n                                            </Typography>\n                                        </Tooltip>\n                                    )}\n                                        <Typography component='p' variant='body1' className={classes.notConfigured}>\n                                            {!showEndpoint(api, 'sand') && (\n                                                <>\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.Configuration.components.Endpoints.sandbox.'\n                                                        + 'not.set'}\n                                                        defaultMessage='-'\n                                                    />\n                                                </>\n                                            )}\n                                        </Typography>\n                                    </Box>\n                                )}\n                            </>\n                        )}\n                    <Box width='100%' textAlign='right' m={1}>\n                        <Link to={'/apis/' + api.id + '/endpoints'}>\n                            <Typography className={classes.externalLink} variant='caption'>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.Configuration.Endpoints.edit.api.endpoints'\n                                    defaultMessage='Edit API Endpoints'\n                                />\n                                <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                            </Typography>\n                        </Link>\n                    </Box>\n                </ExpansionPanelDetails>\n            </WrappedExpansionPanel>\n        </>\n    );\n}\n\nEndpoints.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default withAPI(Endpoints);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport API from 'AppData/api';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(3),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    actionSpace: {\n        margin: '-7px auto',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n    keyManagerSelect: {\n        minWidth: 180,\n    },\n}));\n\n/**\n *\n * KeyManager configuration\n * @param {*} props\n * @returns\n */\nexport default function KeyManager(props) {\n    const [keyManagersConfigured, setKeyManagersConfigured] = useState([]);\n    const {\n        configDispatcher,\n        api: { keyManagers, securityScheme },\n    } = props;\n    const classes = useStyles();\n    const handleChange = (event) => {\n        const newKeyManagers = [...keyManagers];\n        const { target: { checked, name } } = event;\n        if (newKeyManagers.indexOf(name) === -1 && checked) {\n            newKeyManagers.push(name);\n        } else if (newKeyManagers.indexOf(name) !== -1 && !checked) {\n            newKeyManagers.splice(newKeyManagers.indexOf(name), 1);\n        }\n        configDispatcher({\n            action: 'keymanagers',\n            value: newKeyManagers,\n        });\n    };\n    const { api } = useContext(APIContext);\n    useEffect(() => {\n        if (!isRestricted(['apim:api_create'], api)) {\n            API.keyManagers().then((response) => setKeyManagersConfigured(response.body.list));\n        }\n    }, []);\n    if (!securityScheme.includes('oauth2')) {\n        return (\n            <>\n                <Typography className={classes.subHeading} variant='subtitle2' component='h5'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.KeyManager.configuration'\n                        defaultMessage='Key Manager Configuration'\n                    />\n                </Typography>\n                <Box ml={1} mb={2}>\n                    <Typography variant='caption'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.oauth.disabled'\n                            defaultMessage='Key Manager configuration only valid when OAuth2 security is enabled.'\n                        />\n                    </Typography>\n                </Box>\n            </>\n        );\n    }\n    return (\n        <>\n            <Typography className={classes.subHeading} variant='subtitle2' component='h5'>\n                <FormattedMessage\n                    id='Apis.Details.Configuration.components.KeyManager.configuration'\n                    defaultMessage='Key Manager Configuration'\n                />\n            </Typography>\n            <Box ml={1}>\n                <RadioGroup\n                    value={keyManagers.includes('all') ? 'all' : 'selected'}\n                    onChange={({ target: { value } }) => configDispatcher({\n                        action: 'allKeyManagersEnabled',\n                        value: value === 'all',\n                    })}\n                    style={{ flexDirection: 'row' }}\n                >\n                    <FormControlLabel\n                        value='all'\n                        control={<Radio disabled={isRestricted(['apim:api_create'], api)} />}\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.KeyManager.allow.all'\n                                defaultMessage='Allow all'\n                            />\n                        )}\n                    />\n                    <FormControlLabel\n                        value='selected'\n                        control={<Radio disabled={isRestricted(['apim:api_create'], api)} />}\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.KeyManager.allow.selected'\n                                defaultMessage='Allow selected'\n                            />\n                        )}\n                    />\n                </RadioGroup>\n                {!keyManagers.includes('all') && (\n                    <Box display='flex' flexDirection='column' m={2}>\n                        <FormControl\n                            required\n                            error={!keyManagers || (keyManagers && keyManagers.length === 0)}\n                            component='fieldset'\n                            className={classes.formControl}\n                        >\n                            <FormLabel component='legend'>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.KeyManager.more.than.one.info'\n                                    defaultMessage='Select one or more Key Managers'\n                                />\n                            </FormLabel>\n                            <FormGroup\n                                style={{ flexDirection: 'row' }}\n\n                            >\n                                {keyManagersConfigured.map((key) => (\n                                    <FormControlLabel\n                                        control={(\n                                            <Checkbox\n                                                color='primary'\n                                                checked={keyManagers.includes(key.name)}\n                                                disabled={!key.enabled}\n                                                onChange={handleChange}\n                                                name={key.name}\n                                            />\n                                        )}\n                                        label={key.displayName || key.name}\n                                    />\n                                ))}\n                            </FormGroup>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.KeyManager.more.than.one.error'\n                                    defaultMessage='Select at least one Key Manager'\n                                />\n                            </FormHelperText>\n\n                        </FormControl>\n                    </Box>\n                )}\n            </Box>\n        </>\n    );\n}\n\nKeyManager.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Grid,\n    Icon,\n    IconButton,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText,\n    Typography,\n} from '@material-ui/core';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport UploadCertificate from 'AppComponents/Apis/Details/Endpoints/GeneralConfiguration/UploadCertificate';\nimport API from '../../../../../data/api';\n\nconst useStyles = makeStyles((theme) => ({\n    fileinput: {\n        display: 'none',\n    },\n    dropZoneWrapper: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '& span.material-icons': {\n            color: theme.palette.primary.main,\n        },\n    },\n    uploadedFile: {\n        fontSize: 11,\n    },\n    certificatesHeader: {\n        fontWeight: 600,\n        marginTop: theme.spacing(1),\n    },\n    addCertificateBtn: {\n        borderColor: '#c4c4c4',\n        borderRadius: '8px',\n        borderStyle: 'dashed',\n        borderWidth: 'thin',\n    },\n    certificateList: {\n        maxHeight: '250px',\n        overflow: 'auto',\n    },\n    certDetailsHeader: {\n        fontWeight: '600',\n    },\n    uploadCertDialogHeader: {\n        fontWeight: '600',\n    },\n    alertWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    warningIcon: {\n        marginRight: 13,\n        color: theme.custom.warningColor,\n        '& .material-icons': {\n            fontSize: 30,\n        },\n    },\n    deleteIcon: {\n        color: theme.palette.error.dark,\n        cursor: 'pointer',\n    },\n    deleteIconDisable: {\n        color: theme.palette.disabled,\n    },\n}));\n/**\n * TODO: Generalize this component to work in Configuration page , upload mutual SSL certificates action\n * in source/src/app/components/Apis/Details/Configuration/components/APISecurity/components/TransportLevel.jsx ~tmkb\n * The base component for advanced endpoint configurations.\n * @param {any} props The input props.\n * @returns {any} The HTML representation of the Certificates.\n */\nfunction Certificates(props) {\n    const {\n        certificates, uploadCertificate, deleteCertificate, isMutualSSLEnabled, apiId, endpoints, aliasList,\n    } = props;\n    const [certificateList, setCertificateList] = useState([]);\n    const [openCertificateDetails, setOpenCertificateDetails] = useState({ open: false, anchor: null, details: {} });\n    const [certificateToDelete, setCertificateToDelete] = useState({ open: false, alias: '' });\n    const [isDeleting, setDeleting] = useState(false);\n    const [uploadCertificateOpen, setUploadCertificateOpen] = useState(false);\n    const classes = useStyles();\n    const [apiFromContext] = useAPI();\n\n    /**\n     * Show the selected certificate details in a popover.\n     *\n     * @param {any} event The button click event.\n     * @param {string} certAlias  The alias of the certificate which information is required.\n     * */\n    const showCertificateDetails = (event, certAlias) => {\n        if (!isMutualSSLEnabled) {\n            API.getCertificateStatus(certAlias)\n                .then((response) => {\n                    setOpenCertificateDetails({\n                        details: response.body,\n                        open: true,\n                        alias: certAlias,\n                        anchor: event.currentTarget,\n                    });\n                })\n                .catch((err) => {\n                    console.error(err);\n                });\n        } else {\n            API.getClientCertificateStatus(certAlias, apiId)\n                .then((response) => {\n                    setOpenCertificateDetails({\n                        details: response.body,\n                        open: true,\n                        alias: certAlias,\n                        anchor: event.currentTarget,\n                    });\n                })\n                .catch((error) => {\n                    console.error(error);\n                });\n        }\n    };\n\n    /**\n     * Delete certificate represented by the alias.\n     *\n     * @param {string} certificateAlias The alias of the certificate that is needed to be deleted.\n     * */\n    const deleteCertificateByAlias = (certificateAlias) => {\n        setDeleting(true);\n        deleteCertificate(certificateAlias)\n            .then(() => setCertificateToDelete({ open: false, alias: '' }))\n            .finally(() => setDeleting(false));\n    };\n\n    useEffect(() => {\n        setCertificateList(certificates);\n    }, [certificates]);\n\n    return (\n        <Grid container direction='column'>\n            {/* TODO: Add list of existing certificates */}\n            <Grid>\n                <Typography className={classes.certificatesHeader}>\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificates'\n                        defaultMessage='Certificates'\n                    />\n                </Typography>\n            </Grid>\n            <Grid item>\n                <List>\n                    <ListItem\n                        button\n                        disabled={(isRestricted(['apim:api_create'], apiFromContext))}\n                        className={classes.addCertificateBtn}\n                        onClick={() => setUploadCertificateOpen(true)}\n                        id='certs-add-btn'\n                    >\n                        <ListItemAvatar>\n                            <IconButton>\n                                <Icon>add</Icon>\n                            </IconButton>\n                        </ListItemAvatar>\n                        <ListItemText primary='Add Certificate' />\n                    </ListItem>\n                </List>\n                <List className={classes.certificateList}>\n                    {certificateList.length > 0 ? (\n                        certificateList.map((cert) => {\n                            return (\n                                <ListItem id='endpoint-cert-list'>\n                                    <ListItemAvatar>\n                                        <Icon>lock</Icon>\n                                    </ListItemAvatar>\n                                    {isMutualSSLEnabled\n                                        ? (<ListItemText primary={cert.alias} secondary={cert.tier} />)\n                                        : <ListItemText primary={cert.alias} secondary={cert.endpoint} />}\n\n                                    <ListItemSecondaryAction>\n                                        <IconButton\n                                            edge='end'\n                                            onClick={(event) => showCertificateDetails(event, cert.alias)}\n                                        >\n                                            <Icon>info</Icon>\n                                        </IconButton>\n                                        <IconButton\n                                            disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                            onClick={() => setCertificateToDelete({ open: true, alias: cert.alias })}\n                                            id='delete-cert-btn'\n                                        >\n                                            <Icon className={isRestricted(['apim:api_create'], apiFromContext)\n                                                ? classes.deleteIconDisable : classes.deleteIcon}\n                                            >\n                                                {' '}\n                                                delete\n                                            </Icon>\n                                        </IconButton>\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            );\n                        })\n                    ) : (\n                        <ListItem>\n                            <ListItemAvatar>\n                                <Icon color='primary'>info</Icon>\n                            </ListItemAvatar>\n                            <ListItemText>You do not have any certificates uploaded</ListItemText>\n                        </ListItem>\n                    )}\n                </List>\n            </Grid>\n            <Dialog open={certificateToDelete.open}>\n                <DialogTitle>\n                    <Typography className={classes.uploadCertDialogHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.deleteCertificate'\n                            defaultMessage='Delete Certificate'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent className={classes.alertWrapper}>\n                    <Typography>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.confirm.certificate.delete'\n                            defaultMessage='Do you want to delete '\n                        />\n                        {' '}\n                        { certificateToDelete.alias + '?'}\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        onClick={() => deleteCertificateByAlias(certificateToDelete.alias)}\n                        variant='contained'\n                        color='primary'\n                        disabled={isDeleting}\n                        autoFocus\n                        id='delete-cert-confirm-btn'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.delete.ok.button'\n                            defaultMessage='OK'\n                        />\n                        {isDeleting && <CircularProgress size={24} />}\n\n                    </Button>\n                    <Button onClick={() => setCertificateToDelete({ open: false, alias: '' })}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.delete.cancel.button'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <Dialog open={openCertificateDetails.open}>\n                <DialogTitle>\n                    <Typography className={classes.certDetailsHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.details.of'\n                            defaultMessage='Details of'\n                        />\n                        {' ' + openCertificateDetails.alias}\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <Typography>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.status'\n                            defaultMessage='Status'\n                        />\n                        {' : ' + openCertificateDetails.details.status}\n                    </Typography>\n                    <Typography>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.subject'\n                            defaultMessage='Subject'\n                        />\n                        {' : ' + openCertificateDetails.details.subject}\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        onClick={() => setOpenCertificateDetails({ open: false, anchor: null, details: {} })}\n                        color='primary'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.details.close.button'\n                            defaultMessage='Close'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <UploadCertificate\n                endpoints={endpoints}\n                certificates={certificates}\n                uploadCertificate={uploadCertificate}\n                isMutualSSLEnabled={isMutualSSLEnabled}\n                setUploadCertificateOpen={setUploadCertificateOpen}\n                uploadCertificateOpen={uploadCertificateOpen}\n                aliasList={aliasList}\n            />\n        </Grid>\n    );\n}\n\nCertificates.defaultProps = {\n    isMutualSSLEnabled: false,\n    apiId: '',\n};\n\nCertificates.propTypes = {\n    classes: PropTypes.shape({\n        fileinput: PropTypes.shape({}),\n        button: PropTypes.shape({}),\n    }).isRequired,\n    certificates: PropTypes.shape({}).isRequired,\n    uploadCertificate: PropTypes.func.isRequired,\n    deleteCertificate: PropTypes.func.isRequired,\n    apiId: PropTypes.string,\n    isMutualSSLEnabled: PropTypes.bool,\n    endpoints: PropTypes.shape([]).isRequired,\n    aliasList: PropTypes.shape([]).isRequired,\n};\nexport default injectIntl((Certificates));\n","import { FormattedMessage, useIntl } from 'react-intl';\n/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n    useReducer,\n    useRef,\n    useState,\n} from 'react';\n\nimport APIValidation from 'AppData/APIValidation';\nimport AddIcon from '@material-ui/icons/Add';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Badge from '@material-ui/core/Badge';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Chip from '@material-ui/core/Chip';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Fab from '@material-ui/core/Fab';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        minWidth: 120,\n    },\n    paper: {\n        paddingLeft: theme.spacing(4),\n        paddingTop: theme.spacing(1.5),\n        paddingBottom: theme.spacing(0.5),\n        marginTop: '12px',\n    },\n}));\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction VerbElement(props) {\n    const {\n        verb, onClick, isButton, checked,\n    } = props;\n\n    const useMenuStyles = makeStyles((theme) => {\n        const backgroundColor = theme.custom.resourceChipColors[verb.toLowerCase()];\n        return {\n            customMenu: {\n                '&:hover': { backgroundColor },\n                backgroundColor,\n                color: theme.palette.getContrastText(backgroundColor),\n                minWidth: theme.spacing(9),\n            },\n            customButton: {\n                '&:hover': { backgroundColor },\n                backgroundColor,\n                width: theme.spacing(12),\n                marginLeft: theme.spacing(1),\n                color: theme.palette.getContrastText(backgroundColor),\n            },\n        };\n    });\n    const classes = useMenuStyles();\n    if (isButton) {\n        return (\n            <Button disableFocusRipple variant='contained' className={classes.customButton} size='small'>\n                {verb}\n            </Button>\n        );\n    } else {\n        return (\n            <ListItem onClick={onClick} key={verb} button>\n                <Chip className={classes.customMenu} size='small' label={verb} />\n                <ListItemSecondaryAction>\n                    <Checkbox\n                        onClick={onClick}\n                        edge='end'\n                        checked={checked}\n                        inputProps={{\n                            'aria-labelledby': verb,\n                            id : `add-operation-${verb.toLowerCase()}`,\n                        }}\n                    />\n                </ListItemSecondaryAction>\n            </ListItem>\n        );\n    }\n}\n\nconst SUPPORTED_VERBS = {\n    REST: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'],\n    WEBSUB: ['SUB'],\n    SSE: ['SUB'],\n    WS: ['PUB', 'SUB'],\n};\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nfunction AddOperation(props) {\n    const { operationsDispatcher, isAsyncAPI, api } = props;\n    const inputLabel = useRef(null);\n    const [labelWidth, setLabelWidth] = useState(0);\n    const intl = useIntl();\n    const isWebSub = api && api.type === 'WEBSUB';\n\n    function getSupportedVerbs() {\n        return isAsyncAPI ? SUPPORTED_VERBS[api.type] : SUPPORTED_VERBS.REST;\n    }\n\n    /**\n     *\n     *\n     * @param {*} state\n     * @param {*} action\n     * @returns\n     */\n    function newOperationsReducer(state, action) {\n        const { type, value } = action;\n        switch (type) {\n            case 'target':\n            case 'verbs':\n                return { ...state, [type]: value };\n            case 'clear':\n                return { verbs: [], target: '' };\n            case 'error':\n                return { ...state, error: value };\n            default:\n                return state;\n        }\n    }\n    const [newOperations, newOperationsDispatcher] = useReducer(newOperationsReducer, { verbs: [] });\n    React.useEffect(() => {\n        setLabelWidth(inputLabel.current.offsetWidth);\n    }, []);\n    const classes = useStyles();\n\n    /**\n     *\n     *\n     */\n    function clearInputs() {\n        newOperationsDispatcher({ type: 'clear' });\n    }\n    /**\n     *\n     *\n     */\n    function addOperation() {\n        if (\n            APIValidation.operationTarget.validate(newOperations.target).error !== null\n            || APIValidation.operationVerbs.validate(newOperations.verbs).error !== null\n        ) {\n            if (isAsyncAPI) {\n                Alert.warning(intl.formatMessage({\n                    id: 'Apis.Details.Topics.components.AddOperation.operation.topic.or.type.cannot.be.empty.warning',\n                    defaultMessage: \"Topic name or topic type(s) can't be empty\",\n                }));\n                return;\n            }\n            Alert.warning(intl.formatMessage({\n                id: 'Apis.Details.Resources.components.AddOperation.operation.target.or.verb.cannot.be.empty.warning',\n                defaultMessage: \"Operation target or operation verb(s) can't be empty\",\n            }));\n            return;\n        }\n        if (api && api.type && api.type.toLowerCase() === 'websub'\n            && APIValidation.websubOperationTarget.validate(newOperations.target).error !== null) {\n            Alert.warning(intl.formatMessage({\n                id: 'Apis.Details.Resources.components.AddOperation.operation.topic.cannot.have.path.params.warning',\n                defaultMessage: \"WebSub topic can't have path parameters\",\n            }));\n            return;\n        }\n        if (newOperations.target.indexOf(' ') >= 0) {\n            Alert.warning(intl.formatMessage({\n                id: 'Apis.Details.Resources.components.AddOperation.operation.target.cannot.contains.white.spaces',\n                defaultMessage: 'Operation target cannot contains white spaces',\n            }));\n            return;\n        }\n        operationsDispatcher({ action: 'add', data: newOperations });\n        clearInputs();\n    }\n    return (\n        <Paper className={classes.paper}>\n            <Grid container direction='row' spacing={0} justify='center' alignItems='center'>\n                <Grid item md={5} xs={12}>\n                    <FormControl margin='dense' variant='outlined' className={classes.formControl}>\n                        <InputLabel ref={inputLabel} htmlFor='operation-verb'>\n                            {isAsyncAPI && (\n                                <FormattedMessage\n                                    id='Apis.Details.Topics.components.AddOperation.op.type'\n                                    defaultMessage='Type'\n                                />\n                            )}\n                            {!isAsyncAPI && (\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.AddOperation.http.verb'\n                                    defaultMessage='HTTP Verb'\n                                />\n                            )}\n                        </InputLabel>\n\n                        <Select\n                            id='add-operation-selection-dropdown'\n                            multiple\n                            renderValue={(verbs) => {\n                                const remaining = [];\n                                const verbElements = verbs.map((verb, index) => {\n                                    if (index < 2) {\n                                        return <VerbElement isButton verb={verb} />;\n                                    }\n                                    remaining.push(verb.toUpperCase());\n                                    return null;\n                                });\n                                const allSelected = getSupportedVerbs().length === newOperations.verbs.length;\n                                return (\n                                    <>\n                                        {verbElements}\n                                        {remaining.length > 0 && (\n                                            <Tooltip title={remaining.join(', ')} placement='top'>\n                                                <Box display='inline' color='text.hint' m={1} fontSize='subtitle1'>\n                                                    {allSelected ? 'All selected' : `${verbs.length - 2} more`}\n                                                </Box>\n                                            </Tooltip>\n                                        )}\n                                    </>\n                                );\n                            }}\n                            value={newOperations.verbs}\n                            onChange={({ target: { name, value } }) => newOperationsDispatcher({ type: name, value })}\n                            labelWidth={labelWidth}\n                            inputProps={{\n                                name: 'verbs',\n                                id: 'operation-verb',\n                            }}\n                            MenuProps={{\n                                getContentAnchorEl: null,\n                                anchorOrigin: {\n                                    vertical: 'bottom',\n                                    horizontal: 'left',\n                                },\n                            }}\n                        >\n                            {getSupportedVerbs().map((verb) => (\n                                <VerbElement\n                                    checked={newOperations.verbs.includes(verb.toLowerCase())}\n                                    value={verb.toLowerCase()}\n                                    verb={verb}\n                                />\n                            ))}\n                        </Select>\n\n                        <FormHelperText id='my-helper-text'>\n                            {newOperations.verbs.includes('options') && (\n                                // TODO: Add i18n to tooltip text ~tmkb\n                                <Tooltip\n                                    title={\n                                        'Select the OPTIONS method to send OPTIONS calls to the backend.'\n                                        + ' If the OPTIONS method is not selected, OPTIONS calls will be returned '\n                                        + 'from the Gateway with allowed methods.'\n                                    }\n                                    placement='bottom'\n                                >\n                                    <Badge color='error' variant='dot'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Resources.components.AddOperation.option'\n                                            defaultMessage='OPTIONS'\n                                        />\n                                    </Badge>\n                                </Tooltip>\n                            )}\n                        </FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item md={5} xs={8}>\n                    <TextField\n                        id='operation-target'\n                        label={isAsyncAPI ? 'Topic Name' : 'URI Pattern'}\n                        error={Boolean(newOperations.error)}\n                        autoFocus\n                        name='target'\n                        value={newOperations.target}\n                        onChange={({ target: { name, value } }) => newOperationsDispatcher({\n                            type: name,\n                            value: !isWebSub && !value.startsWith('/') ? `/${value}` : value,\n                        })}\n                        placeholder={isAsyncAPI ? 'Enter topic name' : 'Enter URI pattern'}\n                        helperText={newOperations.error || (isAsyncAPI ? 'Enter topic name' : 'Enter URI pattern')}\n                        fullWidth\n                        margin='dense'\n                        variant='outlined'\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        onKeyPress={(event) => {\n                            if (event.key === 'Enter') {\n                                // key code 13 is for `Enter` key\n                                event.preventDefault(); // To prevent form submissions\n                                addOperation();\n                            }\n                        }}\n                    />\n                </Grid>\n                <Grid item md={2} xs={4}>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.AddOperation.add.tooltip'\n                                defaultMessage='Add new operation'\n                            />\n                        )}\n                        placement='bottom'\n                        interactive\n                    >\n                        <span>\n                            <Fab\n                                style={{ marginLeft: '20px', marginBottom: '15px', marginRight: '20px' }}\n                                size='small'\n                                color='primary'\n                                aria-label='Add new operation'\n                                onClick={addOperation}\n                                id='add-operation-button'\n                            >\n                                <AddIcon />\n                            </Fab>\n                        </span>\n                    </Tooltip>\n                    <sup>\n                        <Tooltip\n                            title={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.AddOperation.clear.inputs.tooltip'\n                                    defaultMessage='Clear inputs'\n                                />\n                            )}\n                            placement='bottom'\n                            interactive\n                        >\n                            <span>\n                                <IconButton onClick={clearInputs} size='small' aria-label='clear-inputs'>\n                                    <ClearIcon />\n                                </IconButton>\n                            </span>\n                        </Tooltip>\n                    </sup>\n                </Grid>\n            </Grid>\n        </Paper>\n    );\n}\n\nAddOperation.propTypes = {\n    operationsDispatcher: PropTypes.func.isRequired,\n};\n\nexport default React.memo(AddOperation);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { useHistory } from 'react-router-dom';\nimport Box from '@material-ui/core/Box';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function SaveOperations(props) {\n    const {\n        updateOpenAPI, updateAsyncAPI, operationsDispatcher, api,\n    } = props;\n    const [isUpdating, setIsSaving] = useState(false);\n    const history = useHistory();\n    const [isOpen, setIsOpen] = useState(false);\n    function handleSaveAndDeploy() {\n        setIsSaving(true);\n        if (updateAsyncAPI) {\n            updateAsyncAPI('save')\n                .finally(() => history.push({\n                    pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                        : `/apis/${api.id}/deployments`,\n                    state: 'deploy',\n                }));\n        } else {\n            updateOpenAPI('save')\n                .finally(() => history.push({\n                    pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                        : `/apis/${api.id}/deployments`,\n                    state: 'deploy',\n                }));\n        }\n    }\n\n    /**\n     * Handle the Save button event,\n     *\n     */\n    function handleSave() {\n        setIsSaving(true);\n        if (updateAsyncAPI) {\n            updateAsyncAPI('save').finally(() => setIsSaving(false));\n        } else {\n            updateOpenAPI('save').finally(() => setIsSaving(false));\n        }\n    }\n\n    return (\n        <>\n            <Grid container direction='row' spacing={1} style={{ marginTop: 20 }}>\n                <Grid item>\n                    {api.isRevision\n                        || isRestricted(['apim:api_create'], api) ? (\n                            <Button\n                                disabled\n                                type='submit'\n                                variant='contained'\n                                color='primary'\n                            >\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.Resources.save'\n                                    defaultMessage='Save'\n                                />\n                            </Button>\n                        ) : (\n                            <CustomSplitButton\n                                advertiseInfo={api.advertiseInfo}\n                                api={api}\n                                handleSave={handleSave}\n                                handleSaveAndDeploy={handleSaveAndDeploy}\n                                isUpdating={isUpdating}\n                                id='resources-save-operations'\n                            />\n                        )}\n                </Grid>\n                <Grid item>\n                    <Button onClick={() => setIsOpen(true)}>Reset</Button>\n                </Grid>\n            </Grid>\n            <Dialog\n                open={isOpen}\n                aria-labelledby='bulk-delete-dialog-title'\n                aria-describedby='bulk-delete-dialog-description'\n                onBackdropClick={() => setIsOpen(false)}\n            >\n                <DialogTitle id='bulk-delete-dialog-title'>Discard changes</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id='bulk-delete-dialog-description'>\n                        Please confirm the discard all changes action\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setIsOpen(false)}>CLOSE</Button>\n                    <Box ml={1}>\n                        <Button\n                            onClick={() => {\n                                operationsDispatcher({ action: 'init' });\n                                setIsOpen(false);\n                            }}\n                            color='error'\n                        >\n                            RESET\n                        </Button>\n                    </Box>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\nSaveOperations.propTypes = {\n    updateOpenAPI: PropTypes.func,\n    updateAsyncAPI: PropTypes.func,\n    operationsDispatcher: PropTypes.func.isRequired,\n};\n\nSaveOperations.defaultProps = {\n    updateOpenAPI: undefined,\n    updateAsyncAPI: undefined,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useRef, useContext, useState } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Api from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport CreateEditForm from './CreateEditForm';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport GoToEdit from './GoToEdit';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    titleLink: {\n        color: theme.palette.primary.main,\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(3),\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    button: {\n        marginLeft: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    mainTitle: {\n        color: theme.palette.primary.dark,\n    },\n});\n\nfunction Create(props) {\n    const { api, isAPIProduct } = useContext(APIContext);\n    const [newDoc, setNewDoc] = useState(null);\n    const [saveDisabled, setSaveDisabled] = useState(true);\n    const { classes, intl, history } = props;\n    const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n    const listingPath = `/${urlPrefix}/${api.id}/documents`;\n    const restAPI = api.apiType === Api.CONSTS.APIProduct ? new APIProduct() : new Api();\n    let createEditForm = useRef(null);\n\n    const addDocument = (apiId) => {\n        const promiseWrapper = createEditForm.addDocument(apiId);\n        promiseWrapper.docPromise\n            .then((doc) => {\n                const { documentId, name } = doc.body;\n                if (promiseWrapper.file && documentId) {\n                    const filePromise = restAPI.addFileToDocument(apiId, documentId, promiseWrapper.file[0]);\n                    filePromise\n                        .then((doc) => {\n                            Alert.info(`${name} ${intl.formatMessage({\n                                id: 'Apis.Details.Documents.Create.successful.file.upload.message',\n                                defaultMessage: 'File uploaded successfully.',\n                            })}`);\n                            history.push(listingPath);\n                        })\n                        .catch((error) => {\n                            if (process.env.NODE_ENV !== 'production') {\n                                console.log(error);\n                                Alert.error(intl.formatMessage({\n                                    id: 'Apis.Details.Documents.Create.markdown.editor.upload.error',\n                                    defaultMessage: 'Error uploading the file',\n                                }));\n                            }\n                        });\n                } else {\n                    Alert.info(`${doc.body.name} ${intl.formatMessage({\n                        id: 'Apis.Details.Documents.Create.markdown.editor.success',\n                        defaultMessage: ' added successfully.',\n                    })}`);\n                    setNewDoc(doc);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Documents.Create.markdown.editor.add.error',\n                        defaultMessage: 'Error adding the document',\n                    }));\n                }\n            });\n    };\n    return (\n        <React.Fragment>\n            <Grid container spacing={3}>\n                <Grid item sm={12} md={12} />\n                {/*\n            Following two grids control the placement of whole create page\n            For centering the content better use `container` props, but instead used an empty grid item for flexibility\n             */}\n                <Grid item sm={0} md={0} lg={2} />\n                <Grid item sm={12} md={12} lg={8}>\n                    <Grid container spacing={5}>\n                        <Grid item md={12}>\n                            <div className={classes.titleWrapper}>\n                                <Link to={listingPath} className={classes.titleLink}>\n                                    <Typography variant='h5' component='h2' align='left' className={classes.mainTitle}>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.Create.heading'\n                                            defaultMessage='Documents'\n                                        />\n                                    </Typography>\n                                </Link>\n                                <Icon>keyboard_arrow_right</Icon>\n                                <Typography variant='h5' component='h3'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Documents.Create.title'\n                                        defaultMessage='Add New Document'\n                                    />\n                                </Typography>\n                            </div>\n                        </Grid>\n                        <Grid item md={12}>\n                            <Paper elevation={0}>\n                                <CreateEditForm\n                                    innerRef={(node) => {\n                                        createEditForm = node;\n                                    }}\n                                    apiType={api.apiType}\n                                    apiId={api.id}\n                                    saveDisabled={saveDisabled}\n                                    setSaveDisabled={setSaveDisabled}\n                                />\n                                <Divider />\n\n                                <div className={classes.addNewOther}>\n                                    <Button\n                                        id='add-document-btn'\n                                        variant='contained'\n                                        color='primary'\n                                        onClick={() => addDocument(api.id)}\n                                        disabled={saveDisabled}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.Create.markdown.editor.add.document.button'\n                                            defaultMessage='Add Document'\n                                        />\n                                    </Button>\n                                    <Button className={classes.button} onClick={() => history.push(listingPath)}>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.Create.markdown.editor.add.document.cancel.button'\n                                            defaultMessage='Cancel'\n                                        />\n                                    </Button>\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n            {newDoc && <GoToEdit doc={newDoc} />}\n        </React.Fragment>\n    );\n}\n\nCreate.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.func.isRequired,\n    apiType: PropTypes.oneOf([Api.CONSTS.API, Api.CONSTS.APIProduct]).isRequired,\n};\n\nexport default injectIntl(withRouter(withStyles(styles)(Create)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport green from '@material-ui/core/colors/green';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Icon from '@material-ui/core/Icon';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Dropzone from 'react-dropzone';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport Api from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport APIValidation from 'AppData/APIValidation';\nimport AppContext from 'AppComponents/Shared/AppContext';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Configurations from 'Config';\n\nconst styles = theme => ({\n    button: {\n        marginLeft: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    radioGroup: {\n        display: 'flex',\n        flexDirection: 'row',\n        width: 300,\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    group: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    formControlFirst: {\n        display: 'block',\n    },\n    formControl: {\n        display: 'block',\n        marginTop: 20,\n    },\n    formControlLabel: {\n        background: '#efefef',\n        borderRadius: 5,\n        paddingRight: 10,\n        marginLeft: 0,\n        marginTop: 10,\n    },\n    typeTextWrapper: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    FormControlOdd: {\n        padding: 0,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    acceptDrop: {\n        backgroundColor: green[50],\n    },\n    dropzone: {\n        border: '1px dashed ' + theme.palette.primary.main,\n        borderRadius: '5px',\n        cursor: 'pointer',\n        height: 75,\n        padding: `${theme.spacing(2)}px 0px`,\n        position: 'relative',\n        textAlign: 'center',\n        width: '100%',\n        margin: '10px 0',\n    },\n    dropZoneWrapper: {\n        height: '100%',\n        display: 'flex',\n        cursor: 'pointer',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '& span.material-icons': {\n            color: theme.palette.primary.main,\n        },\n    },\n    uploadedFile: {\n        fontSize: 11,\n    },\n});\n\nclass CreateEditForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: 'HOWTO',\n            sourceType: 'INLINE',\n            name: '',\n            summary: '',\n            sourceUrl: '',\n            file: null,\n            disableName: false,\n            otherTypeName: null,\n            nameNotDuplicate: true,\n            nameMaxLengthExceeds: false,\n            invalidUrl: false,\n            nameEmpty: false,\n            summeryEmpty: false,\n            urlEmpty: false,\n            invalidDocName: false,\n            visibility: 'API_LEVEL'\n        };\n    }\n\n    changeType = (e) => {\n        const { value } = e.target;\n        if (value === 'PUBLIC_FORUM' || value === 'SUPPORT_FORUM') {\n            this.setState({ sourceType: 'URL' });\n        }\n        this.setState({ type: value });\n    };\n    changeSource = (e) => {\n        const { value } = e.target;\n        this.validate();\n        this.setState({ sourceType: value });\n    };\n    setDisable = (item) => {\n        const { type } = this.state;\n        if (item === 'INLINE' || item === 'MARKDOWN' || item === 'FILE') {\n            if (type === 'PUBLIC_FORUM' || type === 'SUPPORT_FORUM') {\n                return true;\n            }\n        }\n    };\n    handleChange = name => (e) => {\n        const { value } = e.target;\n        if (name === 'name') {\n            this.setState({ name: value });\n        } else if (name === 'summary') {\n            this.setState({ summary: value });\n        } else if (name === 'sourceUrl') {\n            this.setState({ sourceUrl: value });\n        } else if (name === 'otherTypeName') {\n            this.setState({ otherTypeName: value });\n        }else if (name === 'visibility') {\n            this.setState({ visibility: value });\n        }\n    };\n\n    onDrop = (acceptedFile) => {\n        const { intl } = this.props;\n        var specialChars = /[`!@#%^*()+\\={};'\"\\\\|,<>\\/~]/;\n        if (specialChars.test(acceptedFile[0].name)) {\n            this.setState({ file: null });\n            Alert.error(intl.formatMessage({\n                id: 'Apis.Details.Documents.CreateEditForm.source.file.name.error.invalid',\n                defaultMessage: 'Document source file name cannot contain spaces or special characters',\n            }));\n        } else {\n            this.setState({ file: acceptedFile });\n        }\n    };\n\n    addDocument = (apiId) => {\n        const { apiType } = this.props;\n        const restAPI = apiType === Api.CONSTS.APIProduct ? new APIProduct() : new Api();\n        const {\n            name, type, summary, sourceType, sourceUrl, file, otherTypeName, visibility,\n        } = this.state;\n        const docPromise = restAPI.addDocument(apiId, {\n            name,\n            type,\n            summary,\n            sourceType,\n            visibility,\n            sourceUrl,\n            otherTypeName,\n            inlineContent: '',\n        });\n        return { docPromise, file };\n    };\n    updateDocument = (apiId) => {\n        const { apiType } = this.props;\n        const restAPI = apiType === Api.CONSTS.APIProduct ? new APIProduct() : new Api();\n        const {\n            name, type, summary, sourceType, sourceUrl, file, otherTypeName, visibility,\n        } = this.state;\n        const { docId } = this.props;\n        const docPromise = restAPI.updateDocument(apiId, docId, {\n            name,\n            type,\n            summary,\n            sourceType,\n            visibility,\n            sourceUrl,\n            otherTypeName,\n            inlineContent: '',\n        });\n        return { docPromise, file };\n    };\n    getDocument() {\n        const { apiId, docId, apiType } = this.props;\n        const restAPI = apiType === Api.CONSTS.APIProduct ? new APIProduct() : new Api();\n        if (docId && apiId) {\n            const docPromise = restAPI.getDocument(apiId, docId);\n            docPromise\n                .then((doc) => {\n                    const {\n                        name, type, summary, sourceType, sourceUrl, otherTypeName, visibility,\n                    } = doc.body;\n                    this.setState({\n                        name,\n                        type,\n                        summary,\n                        sourceType,\n                        sourceUrl,\n                        otherTypeName,\n                        visibility,\n                    });\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                    const { status } = error;\n                    if (status === 404) {\n                        this.setState({ apiNotFound: true });\n                    }\n                });\n        }\n    }\n    validate(field=null, value=null) {\n        let invalidUrl = false;\n        if (field === 'url') {\n            invalidUrl = value ? APIValidation.url.validate(value).error : false;\n            this.setState({ invalidUrl });\n            if (value === '') {\n                this.setState({ urlEmpty: true });\n            } else {\n                this.setState({ urlEmpty: false });\n            }\n        } else if (field === 'name') {\n            if (value) {\n                const nameValidity = APIValidation.documentName.required().validate(value, { abortEarly: false }).error;\n                if (nameValidity === null) {\n                    this.setState({ invalidDocName: false });\n                    const promise = APIValidation.apiDocument.validate({ id: this.props.apiId, name: value });\n                        promise\n                            .then((isDocumentPresent) => {\n                                this.setState({ nameNotDuplicate: !isDocumentPresent });\n                            })\n                            .catch((error) => {\n                                if (error.status === 404) {\n                                    this.setState({ nameNotDuplicate: true });\n                                } else {\n                                    Alert.error('Error when validating document name');\n                                }\n                            });\n                } else {\n                    this.setState({ invalidDocName: true });\n                }\n            } else {\n                this.setState({ nameNotDuplicate: true });\n            }\n\n            if (value === '') {\n                this.setState({ nameEmpty: true, nameMaxLengthExceeds: false });\n            } else if (value && value.length > 60) {\n                this.setState({ nameEmpty: false, nameMaxLengthExceeds: true });\n            } else {\n                this.setState({ nameEmpty: false, nameMaxLengthExceeds: false });\n            }\n        } else if (field === 'summary') {\n            if (value === '') {\n                this.setState({ summeryEmpty: true });\n            } else {\n                this.setState({ summeryEmpty: false });\n            }\n        }\n    }\n    componentDidMount() {\n        this.getDocument();\n        const { apiId, docId } = this.props;\n        if (apiId && docId) {\n            this.setState({ disableName: true });\n        }\n    }\n    showNameHelper() {\n        const { nameEmpty, nameNotDuplicate, nameMaxLengthExceeds, invalidDocName } = this.state;\n        if (nameMaxLengthExceeds) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.exceeds.document.name.length.helper.text'\n                    defaultMessage='Document name exceeds the maximum length of 60 characters'\n                />\n            );\n        } else if (nameNotDuplicate && !nameEmpty && !invalidDocName) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.document.name.helper.text'\n                    defaultMessage='Provide the name for the document'\n                />\n            );\n        } else if (nameEmpty) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.empty.document.name.helper.text'\n                    defaultMessage='Document name cannot be empty'\n                />\n            );\n        } else if (invalidDocName) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.invalid.document.name.helper.text'\n                    defaultMessage='Document name cannot contain spaces or special characters'\n                />\n            );\n        } else {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.duplicate.document.name.helper.text'\n                    defaultMessage='Duplicate document name'\n                />\n            );\n        }\n    }\n    getUrlHelperText() {\n        const { invalidUrl, urlEmpty} = this.state;\n\n        if (invalidUrl) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.source.url.helper.text.error.invalid'\n                    defaultMessage='Enter a valid URL to the source'\n                />\n            );\n        } else if (urlEmpty) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.source.url.helper.text.error.empty'\n                    defaultMessage='URL Field cannot be empty'\n                />\n            );\n        } else {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.source.url.helper.text'\n                    defaultMessage='Provide the URL to the source'\n                />\n            );\n        }\n    }\n    render() {\n        const {\n            name,\n            type,\n            summary,\n            sourceType,\n            sourceUrl,\n            file,\n            disableName,\n            otherTypeName,\n            invalidUrl,\n            nameNotDuplicate,\n            nameMaxLengthExceeds,\n            nameEmpty,\n            invalidDocName,\n            summeryEmpty,\n            urlEmpty,\n            visibility\n        } = this.state;\n        const { classes, setSaveDisabled } = this.props;\n        const { settings: settingsContext } = this.context;\n        if (\n            name !== '' &&\n            summary !== '' &&\n            nameNotDuplicate &&\n            !nameMaxLengthExceeds &&\n            !invalidDocName &&\n            ((!invalidUrl && sourceUrl !== '') || sourceType !== 'URL')\n        ) {\n            setSaveDisabled(false);\n        } else {\n            setSaveDisabled(true);\n        }\n        return (\n            <div className={classes.addNewOther}>\n                <FormControl margin='normal' className={classes.FormControlOdd}>\n                    <TextField\n                        fullWidth\n                        InputProps={{\n                            onBlur: ({ target: { value } }) => {\n                                this.validate('name', value);\n                            },\n                        }}\n                        label={\n                            <FormattedMessage\n                                id='Apis.Details.Documents.CreateEditForm.document.name'\n                                defaultMessage='Name *'\n                            />\n                        }\n                        helperText={this.showNameHelper()}\n                        type='text'\n                        id='doc-name'\n                        variant='outlined'\n                        name='name'\n                        margin='normal'\n                        value={name}\n                        onChange={this.handleChange('name')}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        autoFocus\n                        disabled={disableName}\n                        error={!nameNotDuplicate || nameEmpty || nameMaxLengthExceeds || invalidDocName}\n                    />\n                </FormControl>\n                <FormControl margin='normal' className={classes.FormControlOdd}>\n                    <TextField\n                        fullWidth\n                        multiline\n                        InputProps={{\n                            onBlur: ({ target: { value } }) => {\n                                this.validate('summary', value);\n                            },\n                            onKeyUp: ({ target: { value } }) => {\n                                this.validate('summary', value);\n                            },\n                        }}\n                        id='doc-summary'\n                        margin='normal'\n                        variant='outlined'\n                        label={\n                            <FormattedMessage\n                                id='Apis.Details.Documents.CreateEditForm.document.summary'\n                                defaultMessage='Summary *'\n                            />\n                        }\n                        helperText={\n                            summeryEmpty ? (\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.document.summary.error.empty'\n                                    defaultMessage='Document summary can not be empty'\n                                />\n                            ) : (\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.document.summary.helper.text'\n                                    defaultMessage='Provide a brief description for the document'\n                                />\n                            )\n                        }\n                        type='text'\n                        name='summary'\n                        value={summary}\n                        onChange={this.handleChange('summary')}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        error={summeryEmpty}\n                    />\n                </FormControl>\n                {settingsContext.docVisibilityEnabled && \n                <FormControl margin='normal' className={classes.FormControlOdd}>\n                <TextField\n                    fullWidth\n                    id='docVisibility-selector'\n                    select\n                    variant='outlined'\n                    label={\n                        <FormattedMessage\n                            id='Apis.Details.Documents.CreateEditForm.document.docVisibility'\n                            defaultMessage='Document Visibility'\n                        />\n                    }\n                    helperText={\n                        summeryEmpty ? (\n                            <FormattedMessage\n                                id='Apis.Details.Documents.CreateEditForm.document.summary.error.empty'\n                                defaultMessage='Document summary can not be empty'\n                            />\n                        ) : (\n                            <FormattedMessage\n                                id='Apis.Details.Documents.CreateEditForm.document.summary.helper.text'\n                                defaultMessage='Provide a brief description for the document'\n                            />\n                        )\n                    }\n                    type='text'\n                    name='visibility'\n                    margin='normal'\n                    value={visibility}\n                    onChange={this.handleChange('visibility')}\n                    error={summeryEmpty}\n                >\n                    <MenuItem value='API_LEVEL'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.CreateEditForm.document.docVisibility.dropdown.public'\n                            defaultMessage='Same as API Visibility'\n                        />\n                    </MenuItem>\n                    <MenuItem value='PRIVATE'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.CreateEditForm.document.docVisibility.dropdown.private'\n                            defaultMessage='Private'\n                        />\n                    </MenuItem>\n                    <MenuItem value='OWNER_ONLY'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.CreateEditForm.document.docVisibility.dropdown.ownerOnly'\n                            defaultMessage='Owner Only'\n                        />\n                    </MenuItem>\n                </TextField>\n            </FormControl>}\n                <FormControl component='fieldset' className={classes.formControlFirst}>\n                    <FormLabel component='legend'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.CreateEditForm.document.create.type'\n                            defaultMessage='Type'\n                        />\n                    </FormLabel>\n                    <RadioGroup\n                        aria-label='Type'\n                        name='type'\n                        className={classes.group}\n                        value={type}\n                        onChange={this.changeType}\n                    >\n                        <FormControlLabel\n                            className={classes.formControlLabel}\n                            value='HOWTO'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <div className={classes.typeTextWrapper}>\n                                    <Icon>help_outline</Icon>\n                                    <div>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.CreateEditForm.document.create.type.how.to'\n                                            defaultMessage='How To'\n                                        />\n                                    </div>\n                                </div>\n                            }\n                        />\n                        <FormControlLabel\n                            className={classes.formControlLabel}\n                            value='SAMPLES'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <div className={classes.typeTextWrapper}>\n                                    <Icon>code</Icon>\n                                    <div>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.CreateEditForm.document.create.type.sample'\n                                            defaultMessage='Sample and SDK'\n                                        />\n                                    </div>\n                                </div>\n                            }\n                        />\n                        <FormControlLabel\n                            className={classes.formControlLabel}\n                            value='PUBLIC_FORUM'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <div className={classes.typeTextWrapper}>\n                                    <Icon>forum</Icon>\n                                    <div>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.CreateEditForm.document.create.type.public.forum'\n                                            defaultMessage='Public Forum'\n                                        />\n                                    </div>\n                                </div>\n                            }\n                        />\n                        <FormControlLabel\n                            className={classes.formControlLabel}\n                            value='SUPPORT_FORUM'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <div className={classes.typeTextWrapper}>\n                                    <Icon>forum</Icon>\n                                    <div>\n                                        <FormattedMessage\n                                            id={\n                                                'Apis.Details.Documents.CreateEditForm.document.create.type.support.' +\n                                                'forum'\n                                            }\n                                            defaultMessage='Support Forum'\n                                        />\n                                    </div>\n                                </div>\n                            }\n                        />\n                        <FormControlLabel\n                            className={classes.formControlLabel}\n                            value='OTHER'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <div className={classes.typeTextWrapper}>\n                                    <Icon>video_label</Icon>\n                                    <div>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.CreateEditForm.document.create.type.other'\n                                            defaultMessage='Other'\n                                        />\n                                    </div>\n                                </div>\n                            }\n                        />\n                    </RadioGroup>\n                </FormControl>\n                {type === 'OTHER' && (\n                    <FormControl margin='normal' className={classes.FormControlOdd}>\n                        <TextField\n                            fullWidth\n                            label={\n                                <FormattedMessage\n                                    id={\n                                        'Apis.Details.Documents.CreateEditForm.document.create.type.other.document.' +\n                                        'category'\n                                    }\n                                    defaultMessage='Other Document Type *'\n                                />\n                            }\n                            helperText={\n                                <FormattedMessage\n                                    id={\n                                        'Apis.Details.Documents.CreateEditForm.document.create.type.other.document.' +\n                                        'category.helper.text'\n                                    }\n                                    defaultMessage='Provide the document type'\n                                />\n                            }\n                            type='text'\n                            id='other-doc-type'\n                            name='otherTypeName'\n                            margin='normal'\n                            value={otherTypeName}\n                            variant='outlined'\n                            onChange={this.handleChange('otherTypeName')}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </FormControl>\n                )}\n                <FormControl component='fieldset' className={classes.formControl}>\n                    <FormLabel component='legend'>\n                        <FormattedMessage id='Apis.Details.Documents.CreateEditForm.source' defaultMessage='Source' />\n                    </FormLabel>\n                    <RadioGroup\n                        aria-label='Source'\n                        name='sourceType'\n                        className={classes.group}\n                        value={sourceType}\n                        onChange={this.changeSource}\n                    >\n                        <FormControlLabel\n                            disabled={this.setDisable('INLINE')}\n                            value='INLINE'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.source.inline'\n                                    defaultMessage='Inline'\n                                />\n                            }\n                        />\n                        <FormControlLabel\n                            disabled={this.setDisable('MARKDOWN')}\n                            value='MARKDOWN'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.source.markdown'\n                                    defaultMessage='Markdown'\n                                />\n                            }\n                        />\n                        <FormControlLabel\n                            disabled={this.setDisable('URL')}\n                            value='URL'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.source.url'\n                                    defaultMessage='URL'\n                                />\n                            }\n                        />\n                        <FormControlLabel\n                            disabled={this.setDisable('FILE')}\n                            value='FILE'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.source.file'\n                                    defaultMessage='File'\n                                />\n                            }\n                        />\n                    </RadioGroup>\n                </FormControl>\n                {sourceType === 'URL' && (\n                    <FormControl margin='normal' className={classes.FormControlOdd}>\n                        <TextField\n                            fullWidth\n                            InputProps={{\n                                onBlur: ({ target: { value } }) => {\n                                    this.validate('url', value);\n                                },\n                                onKeyUp: ({ target: { value } }) => {\n                                    this.validate('url', value);\n                                },\n                            }}\n                            id='url'\n                            margin='normal'\n                            label={\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.source.url.url'\n                                    defaultMessage='URL'\n                                />\n                            }\n                            helperText={this.getUrlHelperText()}\n                            type='text'\n                            name='sourceUrl'\n                            value={sourceUrl}\n                            onChange={this.handleChange('sourceUrl')}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            error={invalidUrl || urlEmpty}\n                            variant='outlined'\n                        />\n                    </FormControl>\n                )}\n                {sourceType === 'FILE' && (\n                    <Dropzone\n                        multiple={false}\n                        accept={Configurations.app.supportedDocTypes}\n                        className={classes.dropzone}\n                        activeClassName={classes.acceptDrop}\n                        rejectClassName={classes.rejectDrop}\n                        onDrop={(dropFile) => {\n                            this.onDrop(dropFile);\n                        }}\n                    >\n                        {({ getRootProps, getInputProps }) => (\n                            <div {...getRootProps()}>\n                                <input {...getInputProps()} />\n                                <div className={classes.dropZoneWrapper}>\n                                    <Icon className={classes.dropIcon} style={{ fontSize: 56 }}>\n                                        cloud_upload\n                                    </Icon>\n                                    {file && file.length > 0 && (\n                                        <div className={classes.uploadedFile}>\n                                            <Icon>file</Icon> {file[0].name}\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                        )}\n                    </Dropzone>\n                )}\n                {(sourceType === 'INLINE' || sourceType === 'MARKDOWN') && (\n                    <InlineMessage type='info' height={60}>\n                        <div className={classes.contentWrapper}>\n                            <Typography component='p' className={classes.content}>\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.document.content.info'\n                                    defaultMessage={\n                                        'Please save the document. The content can be edited in the next ' + 'step.'\n                                    }\n                                />\n                            </Typography>\n                        </div>\n                    </InlineMessage>\n                )}\n            </div>\n        );\n    }\n}\nCreateEditForm.contextType = AppContext;\nCreateEditForm.defaultProps = {\n    apiId: null,\n    docId: null,\n};\nCreateEditForm.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    docId: PropTypes.shape({}),\n    apiId: PropTypes.shape({}),\n    saveDisabled: PropTypes.bool.isRequired,\n    setSaveDisabled: PropTypes.func.isRequired,\n    apiType: PropTypes.oneOf([Api.CONSTS.API, Api.CONSTS.APIProduct]).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(CreateEditForm));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useContext, Suspense, lazy } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Slide from '@material-ui/core/Slide';\nimport Icon from '@material-ui/core/Icon';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"MDMonacoEditor\" */));\nconst ReactMarkdown = lazy(() => import('react-markdown' /* webpackChunkName: \"MDReactMarkdown\" */));\n\nconst styles = {\n    appBar: {\n        position: 'relative',\n    },\n    flex: {\n        flex: 1,\n    },\n    popupHeader: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    splitWrapper: {\n        padding: 0,\n    },\n    docName: {\n        alignItems: 'center',\n        display: 'flex',\n    },\n    markdownViewWrapper: {\n        height: '100vh',\n        overflowY: 'auto',\n    },\n    button: {\n        height: 30,\n        marginLeft: 30,\n    },\n};\n\nfunction Transition(props) {\n    return <Slide direction=\"up\" {...props} />;\n}\n\nfunction MarkdownEditor(props) {\n    const { intl, showAtOnce, history } = props;\n    const { api, isAPIProduct } = useContext(APIContext);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [open, setOpen] = useState(showAtOnce);\n    const [code, setCode] = useState(\n        intl.formatMessage({\n            id: 'documents.markdown.editor.default',\n            defaultMessage: '#Enter your markdown content',\n        }),\n    );\n    const toggleOpen = () => {\n        if (!open) updateDoc();\n        if (open && showAtOnce) {\n            const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n            const listingPath = `/${urlPrefix}/${api.id}/documents`;\n            history.push(listingPath);\n        }\n        setOpen(!open);\n    };\n    const updateCode = newCode => {\n        setCode(newCode);\n    };\n    const editorDidMount = (editor, monaco) => {\n        editor.focus();\n    };\n    const addContentToDoc = () => {\n        const restAPI = new Api();\n        setIsUpdating(true);\n        const docPromise = restAPI.addInlineContentToDocument(api.id, props.docId, 'MARKDOWN', code);\n        docPromise\n            .then(doc => {\n                Alert.info(\n                    `${doc.obj.name} ${intl.formatMessage({\n                        id: 'Apis.Details.Documents.MarkdownEditor.update.success.message',\n                        defaultMessage: 'updated successfully.',\n                    })}`,\n                );\n                toggleOpen();\n                setIsUpdating(false);\n            })\n            .catch(error => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ apiNotFound: true });\n                }\n                setIsUpdating(false);\n            });\n    };\n    const updateDoc = () => {\n        const restAPI = new Api();\n\n        const docPromise = restAPI.getInlineContentOfDocument(api.id, props.docId);\n        docPromise\n            .then(doc => {\n                setCode(doc.text);\n            })\n            .catch(error => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ apiNotFound: true });\n                }\n            });\n    };\n\n    const { classes, docName } = props;\n    return (\n        <div>\n            <Button onClick={toggleOpen} disabled={api.isRevision}  aria-label={'Edit Content of ' + docName}>\n                <Icon>code</Icon>\n                <FormattedMessage\n                    id=\"Apis.Details.Documents.MarkdownEditor.edit.content\"\n                    defaultMessage=\"Edit Content\"\n                />\n            </Button>\n            <Dialog fullScreen open={open} onClose={toggleOpen} TransitionComponent={Transition}>\n                <Paper square className={classes.popupHeader}>\n                    <IconButton color=\"inherit\" onClick={toggleOpen} aria-label=\"Close\">\n                        <Icon>close</Icon>\n                    </IconButton>\n                    <Typography variant=\"h4\" className={classes.docName}>\n                        <FormattedMessage\n                            id=\"Apis.Details.Documents.MarkdownEditor.edit.content.of\"\n                            defaultMessage=\"Edit Content of\"\n                        />{' '}\n                        \"{docName}\"\n                    </Typography>\n                    <Button className={classes.button} variant=\"contained\" disabled={isUpdating} color=\"primary\" onClick={addContentToDoc}>\n                        <FormattedMessage\n                            id=\"Apis.Details.Documents.MarkdownEditor.update.content.button\"\n                            defaultMessage=\"Update Content\"\n                        />\n                        {isUpdating && <CircularProgress size={24} />}\n                    </Button>\n                    <Button className={classes.button} onClick={toggleOpen}>\n                        <FormattedMessage\n                            id=\"Apis.Details.Documents.MarkdownEditor.cancel.button\"\n                            defaultMessage=\"Cancel\"\n                        />\n                    </Button>\n                </Paper>\n                <div className={classes.splitWrapper}>\n                    <Grid container spacing={7}>\n                        <Grid item xs={6}>\n                            <Suspense fallback={<CircularProgress />}>\n                                <MonacoEditor\n                                    width=\"100%\"\n                                    height=\"100vh\"\n                                    language=\"markdown\"\n                                    theme=\"vs-dark\"\n                                    value={code}\n                                    options={{ selectOnLineNumbers: true }}\n                                    onChange={updateCode}\n                                    editorDidMount={editorDidMount}\n                                />\n                            </Suspense>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <div className={classes.markdownViewWrapper}>\n                                <Suspense fallback={<CircularProgress />}>\n                                    <ReactMarkdown escapeHtml>{code}</ReactMarkdown>\n                                </Suspense>\n                            </div>\n                        </Grid>\n                    </Grid>\n                </div>\n            </Dialog>\n        </div>\n    );\n}\n\nMarkdownEditor.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withRouter(withStyles(styles)(MarkdownEditor)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {useState, useRef, useContext} from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Slide from '@material-ui/core/Slide';\nimport Icon from '@material-ui/core/Icon';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from 'AppComponents/Shared/Alert';\nimport CreateEditForm from './CreateEditForm';\nimport Api from 'AppData/api';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst styles = {\n    appBar: {\n        position: 'relative',\n    },\n    flex: {\n        flex: 1,\n    },\n    popupHeader: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    splitWrapper: {\n        padding: 0,\n    },\n    docName: {\n        alignItems: 'center',\n        display: 'flex',\n    },\n    button: {\n        height: 30,\n        marginLeft: 30,\n    },\n    editMetaButton: {\n        whiteSpace: 'nowrap',\n    },\n};\n\nfunction Transition(props) {\n    return <Slide direction='up' {...props} />;\n}\n\nfunction Edit(props) {\n    const restAPI = new Api();\n\n    const { intl, apiType } = props;\n    const [open, setOpen] = useState(false);\n    const [saveDisabled, setSaveDisabled] = useState(false);\n    let createEditForm = useRef(null);\n    const { api } = useContext(APIContext);\n\n    const toggleOpen = () => {\n        setOpen(!open);\n    };\n\n    const updateDoc = () => {\n        const { apiId } = props;\n        const promiseWrapper = createEditForm.updateDocument(apiId);\n        promiseWrapper.docPromise\n            .then((doc) => {\n                const { documentId, name } = doc.body;\n                if (promiseWrapper.file && documentId) {\n                    const filePromise = restAPI.addFileToDocument(apiId, documentId, promiseWrapper.file[0]);\n                    filePromise\n                        .then((doc) => {\n                            Alert.info(`${name} ${intl.formatMessage({\n                                id: 'Apis.Details.Documents.Edit.markdown.editor.upload.success.message',\n                                defaultMessage: 'File uploaded successfully.',\n                            })}`);\n                            props.getDocumentsList();\n                            toggleOpen();\n                        })\n                        .catch((error) => {\n                            if (process.env.NODE_ENV !== 'production') {\n                                console.log(error);\n                                Alert.error(intl.formatMessage({\n                                    id: 'Apis.Details.Documents.Edit.markdown.editor.upload.error.message',\n                                    defaultMessage: 'Error uploading the file.',\n                                }));\n                            }\n                        });\n                } else {\n                    Alert.info(`${name} ${intl.formatMessage({\n                        id: 'Apis.Details.Documents.Edit.markdown.editor.update.success.message',\n                        defaultMessage: 'Updated successfully.',\n                    })}`);\n                    props.getDocumentsList();\n                    toggleOpen();\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Documents.Edit.markdown.editor.update.error.message',\n                        defaultMessage: 'Error adding the document',\n                    }));\n                }\n            });\n    };\n\n    const { classes, docId, apiId, docName } = props;\n    return (\n        <div>\n            <Button\n                onClick={toggleOpen}\n                disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api) || api.isRevision}\n                className={classes.editMetaButton}\n                aria-label={'Edit Meta Data of ' + docName}\n            >\n                <Icon>edit</Icon>\n                <FormattedMessage\n                    id='Apis.Details.Documents.Edit.documents.text.editor.edit'\n                    defaultMessage='Edit Meta Data'\n                />\n            </Button>\n            <Dialog open={open} onClose={toggleOpen} TransitionComponent={Transition} fullScreen>\n                <Paper square className={classes.popupHeader}>\n                    <IconButton color='inherit' onClick={toggleOpen} aria-label='Close'>\n                        <Icon>close</Icon>\n                    </IconButton>\n                    <Typography variant='h4' className={classes.docName}>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Edit.documents.text.editor.edit.content'\n                            defaultMessage='Edit '\n                        />\n                        {` ${props.docName}`}\n                    </Typography>\n                    <Button className={classes.button} variant='contained' color='primary' onClick={updateDoc} disabled={saveDisabled}>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Edit.documents.text.editor.update.content'\n                            defaultMessage='Save'\n                        />\n                    </Button>\n                    <Button className={classes.button} onClick={toggleOpen}>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Edit.documents.text.editor.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                </Paper>\n                <div className={classes.splitWrapper}>\n                    <CreateEditForm\n                        innerRef={(node) => {\n                            createEditForm = node;\n                        }}\n                        docId={docId}\n                        apiId={apiId}\n                        apiType={apiType}\n                        saveDisabled={saveDisabled}\n                        setSaveDisabled={setSaveDisabled}\n                    />\n                </div>\n            </Dialog>\n        </div>\n    );\n}\nEdit.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    apiId: PropTypes.shape({}).isRequired,\n    docId: PropTypes.shape({}).isRequired,\n    getDocumentsList: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n        apiType: PropTypes.oneOf([Api.CONSTS.API, Api.CONSTS.APIProduct]),\n    }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(Edit));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useReducer, useEffect, useState, useCallback, useMemo,\n} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport cloneDeep from 'lodash.clonedeep';\nimport isEmpty from 'lodash/isEmpty';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Banner from 'AppComponents/Shared/Banner';\nimport API from 'AppData/api';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\nimport SwaggerParser from '@apidevtools/swagger-parser';\nimport { isRestricted } from 'AppData/AuthManager';\nimport CONSTS from 'AppData/Constants';\nimport Configurations from 'Config';\nimport Operation from './components/Operation';\nimport GroupOfOperations from './components/GroupOfOperations';\nimport SpecErrors from './components/SpecErrors';\nimport AddOperation from './components/AddOperation';\nimport GoToDefinitionLink from './components/GoToDefinitionLink';\nimport APIRateLimiting from './components/APIRateLimiting';\nimport {\n    extractPathParameters, isSelectAll, mapAPIOperations, getVersion, VERSIONS,\n} from './operationUtils';\nimport OperationsSelector from './components/OperationsSelector';\nimport SaveOperations from './components/SaveOperations';\n\n/**\n * This component handles the Resource page in API details though it's written in a sharable way\n * that anyone could use this to render resources in anywhere else if needed.\n *\n * @export\n * @returns {React.Component} @inheritdoc\n */\nexport default function Resources(props) {\n    const {\n        operationProps,\n        disableRateLimiting,\n        hideAPIDefinitionLink,\n        disableMultiSelect,\n        disableUpdate,\n        disableAddOperation,\n    } = props;\n\n    const [api, updateAPI] = useAPI();\n    const [pageError, setPageError] = useState(false);\n    const [operationRateLimits, setOperationRateLimits] = useState([]);\n    const [markedOperations, setSelectedOperation] = useState({});\n    const [sharedScopes, setSharedScopes] = useState();\n    const [sharedScopesByName, setSharedScopesByName] = useState();\n    const [openAPISpec, setOpenAPISpec] = useState({});\n    const [securityDefScopes, setSecurityDefScopes] = useState({});\n    const [apiThrottlingPolicy, setApiThrottlingPolicy] = useState(api.apiThrottlingPolicy);\n    const [arns, setArns] = useState([]);\n    const [resolvedSpec, setResolvedSpec] = useState({ spec: {}, errors: [] });\n    const [focusOperationLevel, setFocusOperationLevel] = useState(false);\n    const [expandedResource, setExpandedResource] = useState(false);\n\n    /**\n     *\n     *\n     * @param {*} currentPolicies\n     * @param {*} policyAction\n     * @returns\n     */\n    function resourcePoliciesReducer(currentPolicies, policyAction) {\n        const { action, data } = policyAction;\n        const { value } = data || {}; // target, verb,\n        let nextResourcePolicies = { ...currentPolicies };\n        switch (action) {\n            case 'init':\n                nextResourcePolicies = value;\n                break;\n            case 'update':\n                nextResourcePolicies[value.resourcePath][value.httpVerb][data.direction] = value;\n                break;\n            default:\n                break;\n        }\n        return nextResourcePolicies;\n    }\n    const [resourcePolicies, resourcePoliciesDispatcher] = useReducer(resourcePoliciesReducer, null);\n\n\n    /**\n     *\n     * **** NOTE: This reducer function needs to be a pure JS function, Mean we cant refer to external states, or\n     * variables within the `operationsReducer` function. Please avoid making external references.\n     * We need to remove already used `openAPISpec`,`setSecurityDefScopes` etc.\n     * Source : https://github.com/facebook/react/issues/16295#issuecomment-610098654\n     * @param {Object} currentOperations Current state\n     * @param {Object} operationAction action and payload\n     * @return {Object} next next state\n     */\n    function operationsReducer(currentOperations, operationAction) {\n        // Please read the note above before updating the reducer\n        const { action, data } = operationAction;\n        const { target, verb, value } = data || {};\n        let updatedOperation;\n        let addedOperations;\n        if (target && verb) {\n            updatedOperation = cloneDeep(currentOperations[target][verb]);\n        } else {\n            addedOperations = cloneDeep(currentOperations);\n        }\n        let newData = {};\n        if (action === 'removeAllSecurity') {\n            newData = cloneDeep(openAPISpec.paths);\n        }\n        if (action === 'init') {\n            newData = data || openAPISpec.paths;\n        }\n        switch (action) {\n            case 'init':\n                setSelectedOperation({});\n                return data || openAPISpec.paths;\n            case 'removeAllSecurity':\n                setSelectedOperation({});\n                return Object.entries(newData).reduce((resourceAcc, [resourceKey, verbObj]) => {\n                    const verbList = Object.entries(verbObj).reduce((verbListAcc, [verbKey, operation]) => {\n                        const newOperation = { ...operation };\n                        newOperation['x-auth-type'] = data.disable ? 'None' : 'Any';\n                        const newVerbListAcc = { ...verbListAcc };\n                        newVerbListAcc[verbKey] = newOperation;\n                        return newVerbListAcc;\n                    }, {});\n                    const newResourceListAcc = { ...resourceAcc };\n                    newResourceListAcc[resourceKey] = verbList;\n                    return newResourceListAcc;\n                }, {});\n            case 'description':\n            case 'summary':\n                updatedOperation[action] = value;\n                break;\n            case 'authType':\n                updatedOperation['x-auth-type'] = value ? 'Any' : 'None';\n                break;\n            case 'parameter':\n                if (updatedOperation.parameters) {\n                    // Get the index to check whether the same parameter exists.\n                    const index = updatedOperation.parameters.findIndex(\n                        (e) => e.in === value.in && e.name === value.name,\n                    );\n                    if (index === -1) { // Parameter with name and in does not exists.\n                        if (value.in === 'body') {\n                            // Get the index of existing body param.\n                            // This replaces if a new body parameter is added when another one exists.\n                            const bodyIndex = updatedOperation.parameters.findIndex((parameter) => {\n                                return parameter.in === 'body';\n                            });\n                            if (bodyIndex !== -1) {\n                                updatedOperation.parameters[bodyIndex] = value;\n                            } else {\n                                updatedOperation.parameters.push(value);\n                            }\n                        } else {\n                            updatedOperation.parameters.push(value);\n                        }\n                    } else {\n                        updatedOperation.parameters[index] = value;\n                    }\n                } else {\n                    updatedOperation.parameters = [value];\n                }\n                break;\n            case 'requestBody':\n                updatedOperation[action] = value;\n                break;\n            case 'deleteParameter':\n                updatedOperation.parameters = updatedOperation.parameters.filter((parameter) => {\n                    return !(parameter.in === value.in && parameter.name === value.name);\n                });\n                break;\n            case 'throttlingPolicy':\n                updatedOperation['x-throttling-tier'] = value;\n                break;\n            case 'amznResourceName':\n                updatedOperation['x-amzn-resource-name'] = value;\n                break;\n            case 'amznResourceTimeout':\n                updatedOperation['x-amzn-resource-timeout'] = value;\n                break;\n            case 'scopes': {\n                if (!updatedOperation.security) {\n                    updatedOperation.security = [{ default: [] }];\n                } else if (!updatedOperation.security.find((item) => item.default)) {\n                    updatedOperation.security.push({ default: [] });\n                }\n                const defValue = value[0];\n                updatedOperation.security.find((item) => item.default).default = defValue;\n                for (const selectedScope of defValue) {\n                    if (selectedScope\n                        && !securityDefScopes[selectedScope]\n                        && securityDefScopes[selectedScope] !== '') {\n                        let scopeDescription = '';\n                        if (selectedScope in sharedScopesByName) {\n                            if (sharedScopesByName[selectedScope].scope.description !== null) {\n                                scopeDescription = sharedScopesByName[selectedScope].scope.description;\n                            }\n                            securityDefScopes[selectedScope] = scopeDescription;\n                        }\n                        setSecurityDefScopes(securityDefScopes);\n                    }\n                }\n                break;\n            }\n            case 'add': {\n                const parameters = extractPathParameters(data.target, openAPISpec);\n                if (!addedOperations[data.target]) {\n                    // If target is not there add an empty object\n                    addedOperations[data.target] = {};\n                }\n                let alreadyExistCount = 0;\n                for (const currentVerb of data.verbs) {\n                    if (addedOperations[data.target][currentVerb]) {\n                        const message = `Operation already exist with ${data.target} and ${currentVerb}`;\n                        Alert.warning(message);\n                        console.warn(message);\n                        alreadyExistCount++;\n                    } else {\n                        // use else condition because continue is not allowed by es-lint rules\n                        addedOperations[data.target][currentVerb] = {\n                            'x-wso2-new': true, // This is to identify unsaved newly added operations, Remove when PUT\n                            'x-auth-type': 'Application & Application User', // By default security is enabled\n                            responses: { 200: { description: 'ok' } },\n                            parameters,\n                        };\n                    }\n                }\n                if (alreadyExistCount === data.verbs.length) {\n                    Alert.error('Operation(s) already exist!');\n                    return currentOperations;\n                }\n                return addedOperations;\n            }\n            default:\n                return currentOperations;\n        }\n        return { ...currentOperations, [target]: { ...currentOperations[target], [verb]: updatedOperation } };\n    }\n    const [operations, operationsDispatcher] = useReducer(operationsReducer, {});\n\n    const enableSecurity = () => {\n        operationsDispatcher({ action: 'removeAllSecurity', data: { disable: false } });\n    };\n    const disableSecurity = () => {\n        operationsDispatcher({ action: 'removeAllSecurity', data: { disable: true } });\n    };\n    /**\n     *\n     *\n     * @param {*} operation\n     * @param {*} checked\n     */\n    function onOperationSelectM(operation, checked) {\n        const { target, verb } = operation;\n        setSelectedOperation((currentSelections) => {\n            const nextSelectedOperations = cloneDeep(currentSelections);\n            if (!nextSelectedOperations[target]) {\n                nextSelectedOperations[target] = {};\n            }\n            if (checked) {\n                nextSelectedOperations[target][verb] = checked;\n            } else {\n                delete nextSelectedOperations[target][verb];\n            }\n            if (isEmpty(nextSelectedOperations[target])) {\n                delete nextSelectedOperations[target];\n            }\n            return nextSelectedOperations;\n        });\n    }\n    const onMarkAsDelete = useCallback(onOperationSelectM, [setSelectedOperation]);\n\n    // can't depends on API id because we need to consider the changes in operations in api object\n    // memoized (https://reactjs.org/docs/hooks-reference.html#usememo) to improve pref,\n    // localized to inject local apiThrottlingPolicy data\n    const localAPI = useMemo(\n        () => ({\n            id: api.id,\n            apiThrottlingPolicy,\n            scopes: api.scopes,\n            operations: api.isAPIProduct() ? {} : mapAPIOperations(api.operations),\n            endpointConfig: api.endpointConfig,\n        }),\n        [api, apiThrottlingPolicy],\n    );\n\n    /**\n     * This method sets the securityDefinitionScopes from the spec\n     * @param {Object} spec The original swagger content.\n     */\n    function setSecurityDefScopesFromSpec(spec) {\n        const openAPIVersion = getVersion(spec);\n        if (VERSIONS.V3.includes(openAPIVersion)) {\n            if (spec.components && spec.components.securitySchemes && spec.components.securitySchemes.default) {\n                const { flows } = spec.components.securitySchemes.default;\n                if (flows.implicit.scopes) {\n                    setSecurityDefScopes(cloneDeep(flows.implicit.scopes));\n                }\n            }\n        } else if (VERSIONS.V2.includes(openAPIVersion)) {\n            if (spec.securityDefinitions && spec.securityDefinitions.default) {\n                if (spec.securityDefinitions.default.scopes) {\n                    setSecurityDefScopes(cloneDeep(spec.securityDefinitions.default.scopes));\n                }\n            }\n        }\n    }\n\n    /**\n     * This method sets the scopes of the spec from the securityDefinitionScopes\n     */\n    function setSpecScopesFromSecurityDefScopes() {\n        const openAPIVersion = getVersion(openAPISpec);\n        if (VERSIONS.V3.includes(openAPIVersion)) {\n            if (openAPISpec.components\n                && openAPISpec.components.securitySchemes\n                && openAPISpec.components.securitySchemes.default) {\n                openAPISpec.components.securitySchemes.default.flows.implicit.scopes = securityDefScopes;\n            }\n        } else if (VERSIONS.V2.includes(openAPIVersion)) {\n            if (openAPISpec.securityDefinitions && openAPISpec.securityDefinitions.default) {\n                openAPISpec.securityDefinitions.default.scopes = securityDefScopes;\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {*} rawSpec The original swagger content.\n     * @returns {null}\n     */\n    function resolveAndUpdateSpec(rawSpec) {\n        /*\n         * Deep copying the spec.\n         * Otherwise it will resolved to the original parameter passed (rawSpec) to the validate method.\n         * We will not alter the provided spec.\n         */\n        const specCopy = cloneDeep(rawSpec);\n        /*\n        * Used SwaggerParser.validate() because we can get the errors as well.\n        */\n        SwaggerParser.validate(specCopy, (err, result) => {\n            setResolvedSpec(() => {\n                const errors = err ? [err] : [];\n                return {\n                    spec: result,\n                    errors,\n                };\n            });\n        });\n        operationsDispatcher({ action: 'init', data: rawSpec.paths });\n        setOpenAPISpec(rawSpec);\n        setSecurityDefScopesFromSpec(rawSpec);\n    }\n\n    /**\n     *\n     * Update the swagger using /swagger PUT operation and then fetch the updated API Object doing a apis/{api-uuid} GET\n     * @param {JSON} spec Updated full OpenAPI spec ready to PUT\n     * @returns {Promise} Promise resolving to updated API object\n     */\n    function updateSwagger(spec) {\n        return api\n            .updateSwagger(spec)\n            .then((response) => resolveAndUpdateSpec(response.body))\n            .then(updateAPI)\n            .catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    setPageError(error.response.body);\n                } else {\n                    Alert.error('Error while updating the definition');\n                }\n            });\n    }\n\n    /**\n     *\n     * This method modifies the security definition scopes by removing the scopes which are not present\n     * in operations and which are shared scopes\n     * @param {Array} apiOperations Operations list\n     */\n    function updateSecurityDefinition(apiOperations) {\n        Object.keys(securityDefScopes).forEach((key) => {\n            let isScopeExistsInOperation = false;\n            for (const [, verbs] of Object.entries(apiOperations)) {\n                for (const [, verbInfo] of Object.entries(verbs)) {\n                    // Checking if the scope resides in the operation\n                    for (const secDef of verbInfo.security || []) {\n                        if (secDef\n                            && secDef.default\n                            && secDef.default.includes(key)) {\n                            isScopeExistsInOperation = true;\n                            break;\n                        }\n                    }\n\n                    if (isScopeExistsInOperation) {\n                        break;\n                    }\n                }\n                if (isScopeExistsInOperation) {\n                    break;\n                }\n            }\n            // Checking if the scope exists in operation and is a shared scope\n            if (!isScopeExistsInOperation && (key in sharedScopesByName)) {\n                delete securityDefScopes[key];\n            }\n        });\n        setSecurityDefScopes(securityDefScopes);\n    }\n\n    /**\n     *\n     * Save the OpenAPI changes using REST API, type parameter is required to\n     * identify the locally created data structured, i:e type `operation` will assume that `data` contains the\n     * object structure of locally created operation object which is a combination of REST API\n     * response `operations` field and OpenAPI spec operation information\n     * @param {String} type Type of data object\n     * @param {Object} data Data object\n     * @returns {Promise|null} A promise object which resolve to Swagger PUT response body.\n     */\n    function updateOpenAPI(type) {\n        const copyOfOperations = cloneDeep(operations);\n        switch (type) {\n            case 'save':\n                if (isSelectAll(markedOperations, copyOfOperations)) {\n                    const message = 'At least one operation is required for the API';\n                    Alert.warning(message);\n                    return Promise.reject(new Error(message));\n                }\n                for (const [target, verbs] of Object.entries(markedOperations)) {\n                    for (const verb of Object.keys(verbs)) {\n                        delete copyOfOperations[target][verb];\n                        if (isEmpty(copyOfOperations[target])) {\n                            delete copyOfOperations[target];\n                        }\n                    }\n                }\n                // TODO: use better alternative (optimize performance) to identify newly added operations ~tmkb\n                for (const [, verbs] of Object.entries(copyOfOperations)) {\n                    for (const [, verbInfo] of Object.entries(verbs)) {\n                        if (verbInfo['x-wso2-new']) {\n                            delete verbInfo['x-wso2-new'];\n                        }\n                    }\n                }\n                break;\n            default:\n                return Promise.reject(new Error('Unsupported resource operation!'));\n        }\n        updateSecurityDefinition(copyOfOperations);\n        setSpecScopesFromSecurityDefScopes();\n        if (apiThrottlingPolicy !== api.apiThrottlingPolicy) {\n            return updateAPI({ apiThrottlingPolicy })\n                .catch((error) => {\n                    console.error(error);\n                    Alert.error('Error while updating the API');\n                })\n                .then(() => updateSwagger({ ...openAPISpec, paths: copyOfOperations }));\n        } else {\n            return updateSwagger({ ...openAPISpec, paths: copyOfOperations });\n        }\n    }\n\n    useEffect(() => {\n        API.getAmznResourceNames(api.id)\n            .then((response) => {\n                if (response.body && response.body.list) {\n                    setArns(response.body.list);\n                }\n            });\n    }, []);\n\n    useEffect(() => {\n        setApiThrottlingPolicy(api.apiThrottlingPolicy);\n    }, [api.apiThrottlingPolicy]);\n\n    useEffect(() => {\n        if (api.apitype !== 'APIProduct') {\n            API.getAllScopes()\n                .then((response) => {\n                    if (response.body && response.body.list) {\n                        const sharedScopesList = [];\n                        const sharedScopesByNameList = {};\n                        const shared = true;\n                        for (const scope of response.body.list) {\n                            const modifiedScope = {};\n                            modifiedScope.scope = scope;\n                            modifiedScope.shared = shared;\n                            sharedScopesList.push(modifiedScope);\n                            sharedScopesByNameList[scope.name] = modifiedScope;\n                        }\n                        setSharedScopes(sharedScopesList);\n                        setSharedScopesByName(sharedScopesByNameList);\n                    }\n                });\n        }\n    }, []);\n\n    useEffect(() => {\n        // Update the Swagger spec object when API object gets changed\n        api.getSwagger()\n            .then((response) => {\n                resolveAndUpdateSpec(response.body);\n            })\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                    setPageError(error.response.body);\n                }\n                console.error(error);\n            });\n        if (api.isSOAPToREST()) {\n            const promisedInPolicies = api.getResourcePolicies('in');\n            const promisedOutPolicies = api.getResourcePolicies('out');\n            Promise.all([promisedInPolicies, promisedOutPolicies])\n                .then(([inPolicies, outPolicies]) => {\n                    const mappedPolicies = {};\n                    for (const policy of inPolicies.body.list) {\n                        const { resourcePath, httpVerb } = policy;\n                        if (!mappedPolicies[resourcePath]) {\n                            mappedPolicies[resourcePath] = {\n                                [httpVerb]: { in: policy },\n                            };\n                        } else {\n                            mappedPolicies[resourcePath][httpVerb] = { in: policy };\n                        }\n                    }\n                    for (const policy of outPolicies.body.list) {\n                        const { resourcePath, httpVerb } = policy;\n                        if (!mappedPolicies[resourcePath]) {\n                            mappedPolicies[resourcePath] = {\n                                [httpVerb]: { out: policy },\n                            };\n                        } else {\n                            mappedPolicies[resourcePath][httpVerb].out = policy;\n                        }\n                    }\n                    resourcePoliciesDispatcher({ action: 'init', data: { value: mappedPolicies } });\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                        setPageError(error.response.body);\n                    }\n                    setPageError(error.message);\n                    console.error(error);\n                });\n        }\n        // Fetch API level throttling policies only when the page get mounted for the first time `componentDidMount`\n        const limit = Configurations.app.throttlingPolicyLimit;\n        API.policies('api', limit).then((response) => {\n            setOperationRateLimits(response.body.list);\n        });\n        // TODO: need to handle the error cases through catch ~tmkb\n    }, [api.id]);\n\n    // Note: Make sure not to use any hooks after/within this condition , because it returns conditionally\n    // If you do so, You will probably get `Rendered more hooks than during the previous render.` exception\n    if ((!pageError && isEmpty(openAPISpec)) || (resolvedSpec.errors.length === 0 && isEmpty(resolvedSpec.spec))) {\n        return (\n            <Grid container direction='row' justify='center' alignItems='center'>\n                <Grid item>\n                    <CircularProgress disableShrink />\n                </Grid>\n            </Grid>\n        );\n    }\n    return (\n        <Grid container direction='row' justify='flex-start' spacing={2} alignItems='stretch'>\n            {pageError && (\n                <Grid item md={12}>\n                    <Banner onClose={() => setPageError(null)} disableActions type='error' message={pageError} />\n                </Grid>\n            )}\n            {!disableRateLimiting && (\n                <Grid item md={12}>\n                    <APIRateLimiting\n                        operationRateLimits={operationRateLimits}\n                        value={apiThrottlingPolicy}\n                        onChange={setApiThrottlingPolicy}\n                        isAPIProduct={api.isAPIProduct()}\n                        focusOperationLevel={focusOperationLevel}\n                        setFocusOperationLevel={setFocusOperationLevel}\n                    />\n                </Grid>\n            )}\n            {!isRestricted(['apim:api_create'], api) && !disableAddOperation && (\n                <Grid item md={12} xs={12}>\n                    <AddOperation operationsDispatcher={operationsDispatcher} />\n                </Grid>\n            )}\n            {resolvedSpec.errors.length > 0 && <SpecErrors specErrors={resolvedSpec.errors} />}\n            <Grid item md={12}>\n                <Paper>\n                    {!disableMultiSelect && (\n                        <OperationsSelector\n                            operations={operations}\n                            selectedOperations={markedOperations}\n                            setSelectedOperation={setSelectedOperation}\n                            enableSecurity={enableSecurity}\n                            disableSecurity={disableSecurity}\n                        />\n                    )}\n                    {Object.entries(operations).map(([target, verbObject]) => (\n                        <Grid key={target} item md={12}>\n                            <GroupOfOperations openAPI={openAPISpec} tag={target}>\n                                <Grid\n                                    container\n                                    direction='column'\n                                    justify='flex-start'\n                                    spacing={1}\n                                    alignItems='stretch'\n                                >\n                                    {Object.entries(verbObject).map(([verb, operation]) => {\n                                        return CONSTS.HTTP_METHODS.includes(verb) ? (\n                                            <Grid key={`${target}/${verb}`} item>\n                                                <Operation\n                                                    target={target}\n                                                    verb={verb}\n                                                    highlight\n                                                    resourcePoliciesDispatcher={resourcePoliciesDispatcher}\n                                                    resourcePolicy={\n                                                        resourcePolicies\n                                                        && resourcePolicies[target.slice(1)]\n                                                        && resourcePolicies[target.slice(1)][verb]\n                                                    }\n                                                    operationsDispatcher={operationsDispatcher}\n                                                    spec={openAPISpec}\n                                                    operation={operation}\n                                                    operationRateLimits={operationRateLimits}\n                                                    api={localAPI}\n                                                    markAsDelete={Boolean(markedOperations[target]\n                                                        && markedOperations[target][verb])}\n                                                    onMarkAsDelete={onMarkAsDelete}\n                                                    disableUpdate={\n                                                        disableUpdate || isRestricted(['apim:api_create'], api)\n                                                    }\n                                                    disableMultiSelect={disableMultiSelect}\n                                                    arns={arns}\n                                                    {...operationProps}\n                                                    resolvedSpec={resolvedSpec.spec}\n                                                    sharedScopes={sharedScopes}\n                                                    setFocusOperationLevel={setFocusOperationLevel}\n                                                    expandedResource={expandedResource}\n                                                    setExpandedResource={setExpandedResource}\n                                                />\n                                            </Grid>\n                                        ) : null;\n                                    })}\n                                </Grid>\n                            </GroupOfOperations>\n                        </Grid>\n                    ))}\n                </Paper>\n                <Grid\n                    style={{ marginTop: '25px' }}\n                    container\n                    direction='row'\n                    justify='space-between'\n                    alignItems='center'\n                >\n                    <Grid item>\n                        {!disableUpdate && (\n                            <SaveOperations\n                                operationsDispatcher={operationsDispatcher}\n                                updateOpenAPI={updateOpenAPI}\n                                api={api}\n                            />\n                        )}\n                    </Grid>\n                    <Grid item>\n                        {!hideAPIDefinitionLink && <GoToDefinitionLink api={api} />}\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\n\nResources.defaultProps = {\n    operationProps: { disableDelete: false },\n    disableUpdate: false,\n    disableRateLimiting: false,\n    disableMultiSelect: false,\n    hideAPIDefinitionLink: false,\n    disableAddOperation: false,\n};\n\nResources.propTypes = {\n    disableRateLimiting: PropTypes.bool,\n    hideAPIDefinitionLink: PropTypes.bool,\n    disableMultiSelect: PropTypes.bool,\n    disableAddOperation: PropTypes.bool,\n    disableUpdate: PropTypes.bool,\n    operationProps: PropTypes.shape({\n        disableDelete: PropTypes.bool,\n    }),\n};\n","/*\n *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\n/**\n * Defining the supported data types by the OAS spec versions.\n *\n * 2.0 : https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#dataTypeFormat\n * 3.x :https://swagger.io/docs/specification/data-models/data-types/\n * */\nconst supportedDataTypes = {\n    '2.0': {\n        body: ['integer', 'number', 'string', 'boolean', 'object'],\n        formData: ['integer', 'number', 'string', 'boolean', 'file'],\n        query: ['integer', 'number', 'string', 'boolean'],\n        path: ['integer', 'number', 'string', 'boolean'],\n        header: ['integer', 'number', 'string', 'boolean'],\n    },\n    '3.x': {\n        body: ['integer', 'number', 'string', 'boolean', 'object'],\n        query: ['integer', 'number', 'string', 'boolean'],\n        path: ['integer', 'number', 'string', 'boolean'],\n        header: ['integer', 'number', 'string', 'boolean'],\n        cookie: ['integer', 'number', 'string', 'boolean'],\n    },\n};\n\n/**\n * Util method for checking conditions.\n *\n * @param {boolean} condition : The condition to be checked\n * @param {any} matched : The value to be returned if the condition is true\n * @param {any} otherwise : The value to be returned if the condition is false.\n * @return {object} If true -> matched, false -> otherwise\n * */\nexport function iff(condition, matched, otherwise) {\n    return condition ? matched : otherwise;\n}\n\n/**\n * Method to get the supported data types for the given parameter type.\n *\n * @param {string} specVersion : The OAS version\n * @param {string} paramType : The parameter type.\n * @return {array} The list of supported parameters.\n * */\nexport function getSupportedDataTypes(specVersion, paramType) {\n    return paramType ? supportedDataTypes[specVersion === '2.0' ? '2.0' : '3.x'][paramType] : [];\n}\n\n/**\n * Get the supported data formats by each data type.\n *\n * @param {string} dataType: THe data type.\n * @return {array} The list of supported data formats.\n * */\nexport function getDataFormats(dataType) {\n    switch (dataType) {\n        case 'integer':\n            return ['int64', 'int32'];\n        case 'number':\n            return ['float', 'double'];\n        case 'string':\n            return ['date', 'date-time', 'byte', 'binary', 'password'];\n        default:\n            return [];\n    }\n}\n\n/**\n * Method to get the parameter schema based on the spec version.\n * For more info about Data Models (Schemas) refer https://swagger.io/docs/specification/data-models/\n * @param {string} specVersion : The OAS version\n * @return {object} The default schema\n * */\nexport function getParameter(specVersion) {\n    return specVersion === '2.0'\n        ? {\n            in: '', name: '', type: '', required: '',\n        }\n        : {\n            in: '', name: '', schema: { type: '' }, required: '',\n        };\n}\n\n/**\n * Get parameter types supported by spec version.\n *\n * @param {string} specVersion : The OAS version\n * @return {array} The list of supported parameter types.\n * */\nexport function getParameterTypes(specVersion) {\n    return specVersion === '2.0' ? ['query', 'header', 'body', 'formData'] : ['query', 'header', 'cookie', 'body'];\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport PropTypes from 'prop-types';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst useStyles = makeStyles((theme) => ({\n    tagClass: {\n        maxWidth: 1000,\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        [theme.breakpoints.down('md')]: {\n            maxWidth: 800,\n        },\n    },\n}\n));\n\n/**\n *\n * Return a group container , User should provide the operations list as the child component\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function GroupOfOperations(props) {\n    const classes = useStyles();\n    const { openAPI, children, tag } = props;\n    const currentTagInfo = openAPI.tags && openAPI.tags.find((tagInfo) => tagInfo.name === tag);\n    return (\n        <ExpansionPanel defaultExpanded>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} id={tag}>\n                <Typography\n                    variant='h4'\n                    className={classes.tagClass}\n                    title={tag}\n                >\n                    {tag}\n                </Typography>\n                {currentTagInfo && (\n                    <Typography style={{ margin: '0px 30px' }} variant='caption'>\n                        {currentTagInfo.description}\n                    </Typography>\n                )}\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>{children}</ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n}\n\nGroupOfOperations.propTypes = {\n    children: PropTypes.element.isRequired,\n    openAPI: PropTypes.shape({ tags: PropTypes.arrayOf(PropTypes.string) }).isRequired,\n    tag: PropTypes.string.isRequired,\n};\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport {\n    Divider,\n    Icon,\n    IconButton,\n    InputAdornment,\n    TextField,\n    withStyles,\n} from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport green from '@material-ui/core/colors/green';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Chip from '@material-ui/core/Chip';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\n\n\nconst styles = (theme) => ({\n    endpointInputWrapper: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    textField: {\n        width: '100%',\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: theme.spacing(1),\n    },\n    iconButtonValid: {\n        padding: theme.spacing(1),\n        color: green[500],\n    },\n    divider: {\n        width: 1,\n        height: 28,\n        margin: 4,\n    },\n    endpointValidChip: {\n        color: 'green',\n        border: '1px solid green',\n    },\n    endpointInvalidChip: {\n        color: '#ffd53a',\n        border: '1px solid #ffd53a',\n    },\n    endpointErrorChip: {\n        color: 'red',\n        border: '1px solid red',\n    },\n});\n/**\n * This component represents a single endpoint view of the endpoints listing. This component holds the actions that\n * affect the endpont. Eg: Delete, advance configuration.\n *\n * @param {any} props The input props\n * @returns {any} The HTML representation of the component.\n * */\nfunction GenericEndpoint(props) {\n    const {\n        category,\n        endpointURL,\n        editEndpoint,\n        classes,\n        type,\n        setAdvancedConfigOpen,\n        esCategory,\n        setESConfigOpen,\n        deleteEndpoint,\n        index,\n        readOnly,\n        autoFocus,\n        name,\n        id,\n        apiId,\n    } = props;\n    const [serviceUrl, setServiceUrl] = useState(endpointURL);\n    const { api } = useContext(APIContext);\n    const [isEndpointValid, setIsEndpointValid] = useState();\n    const [statusCode, setStatusCode] = useState('');\n    const [isUpdating, setUpdating] = useState(false);\n    const [isErrorCode, setIsErrorCode] = useState(false);\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n\n    useEffect(() => {\n        setServiceUrl(endpointURL);\n    }, [endpointURL]);\n\n    function testEndpoint(endpoint, apiID) {\n        setUpdating(true);\n        const restApi = new API();\n        restApi.testEndpoint(endpoint, apiID)\n            .then((result) => {\n                if (result.body.error !== null) {\n                    setStatusCode(result.body.error);\n                    setIsErrorCode(true);\n                } else {\n                    setStatusCode(result.body.statusCode + ' ' + result.body.statusMessage);\n                    setIsErrorCode(false);\n                }\n                if (result.body.statusCode >= 200 && result.body.statusCode < 300) {\n                    setIsEndpointValid(true);\n                    setIsErrorCode(false);\n                } else {\n                    setIsEndpointValid(false);\n                }\n            }).finally(() => {\n                setUpdating(false);\n            });\n    }\n\n    return (\n        <div className={classes.endpointInputWrapper}>\n            <TextField\n                disabled={isRestricted(['apim:api_create'], api)}\n                label={name}\n                id={id}\n                className={classes.textField}\n                value={serviceUrl}\n                placeholder={!serviceUrl ? 'http://appserver/resource' : ''}\n                onChange={(event) => setServiceUrl(event.target.value)}\n                onBlur={() => {\n                    editEndpoint(index, category, serviceUrl);\n                }}\n                error={!serviceUrl}\n                helperText={!serviceUrl\n                    ? (\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GenericEndpoint.no.ep.error'\n                            defaultMessage='Endpoint URL should not be empty'\n                        />\n                    ) : ''}\n                variant='outlined'\n                margin='normal'\n                required\n                InputProps={{\n                    readOnly,\n                    autoFocus,\n                    id: category,\n                    endAdornment: (\n                        <InputAdornment position='end'>\n                            {statusCode && (\n                                <Chip\n                                    id={category + '-endpoint-test-status'}\n                                    label={statusCode}\n                                    className={isEndpointValid ? classes.endpointValidChip : iff(\n                                        isErrorCode,\n                                        classes.endpointErrorChip, classes.endpointInvalidChip,\n                                    )}\n                                    variant='outlined'\n                                />\n                            )}\n                            {!api.isWebSocket() && (\n                                <IconButton\n                                    className={isEndpointValid ? classes.iconButtonValid : classes.iconButton}\n                                    aria-label='TestEndpoint'\n                                    onClick={() => testEndpoint(serviceUrl, apiId)}\n                                    disabled={(isRestricted(['apim:api_create'], api)) || isUpdating}\n                                    id={category + '-endpoint-test-icon-btn'}\n                                >\n                                    {isUpdating\n                                        ? <CircularProgress size={20} />\n                                        : (\n                                            <Tooltip\n                                                placement='top-start'\n                                                interactive\n                                                title={(\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Endpoints.GenericEndpoint.check.endpoint'\n                                                        defaultMessage='Check endpoint status'\n                                                    />\n                                                )}\n                                            >\n                                                <Icon>\n                                                    check_circle\n                                                </Icon>\n                                            </Tooltip>\n\n                                        )}\n                                </IconButton>\n                            )}\n                            {type === 'prototyped'\n                                ? <div />\n                                : (\n                                    <>\n                                        <IconButton\n                                            className={classes.iconButton}\n                                            aria-label='Settings'\n                                            onClick={() => setAdvancedConfigOpen(index, type, category)}\n                                            disabled={(isRestricted(['apim:api_create'], api))}\n                                        >\n                                            <Tooltip\n                                                placement='top-start'\n                                                interactive\n                                                title={(\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Endpoints.GenericEndpoint.config.endpoint'\n                                                        defaultMessage='Endpoint configurations'\n                                                    />\n                                                )}\n                                            >\n                                                <Icon>\n                                                    settings\n                                                </Icon>\n                                            </Tooltip>\n                                        </IconButton>\n                                        <IconButton\n                                            className={classes.iconButton}\n                                            aria-label='Security'\n                                            onClick={() => setESConfigOpen(type, esCategory)}\n                                            disabled={(isRestricted(['apim:api_create'], api))}\n                                            id={category + '-endpoint-security-icon-btn'}\n                                        >\n                                            <Tooltip\n                                                placement='top-start'\n                                                interactive\n                                                title={(\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Endpoints.GenericEndpoint.security.endpoint'\n                                                        defaultMessage='Endpoint security'\n                                                    />\n                                                )}\n                                            >\n                                                <Icon>\n                                                    security\n                                                </Icon>\n                                            </Tooltip>\n                                        </IconButton>\n                                    </>\n                                )}\n                            {(index > 0) ? <Divider className={classes.divider} /> : <div />}\n                            {(type === 'load_balance' || type === 'failover') ? (\n                                <IconButton\n                                    className={classes.iconButton}\n                                    aria-label='Delete'\n                                    color='secondary'\n                                    onClick={() => deleteEndpoint(index, type, category)}\n                                    disabled={(isRestricted(['apim:api_create'], api))}\n                                >\n                                    <Icon>\n                                        delete\n                                    </Icon>\n                                </IconButton>\n                            ) : (<div />)}\n                        </InputAdornment>\n                    ),\n                }}\n            />\n        </div>\n    );\n}\n\nGenericEndpoint.defaultProps = {\n    readOnly: false,\n    autoFocus: false,\n    name: 'Service URL',\n    id: '',\n};\n\nGenericEndpoint.propTypes = {\n    endpointURL: PropTypes.string.isRequired,\n    deleteEndpoint: PropTypes.func.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    type: PropTypes.string.isRequired,\n    setAdvancedConfigOpen: PropTypes.func.isRequired,\n    setESConfigOpen: PropTypes.func.isRequired,\n    index: PropTypes.number.isRequired,\n    editEndpoint: PropTypes.func.isRequired,\n    category: PropTypes.string.isRequired,\n    readOnly: PropTypes.bool,\n    autoFocus: PropTypes.bool,\n    name: PropTypes.string,\n    apiId: PropTypes.string.isRequired,\n    id: PropTypes.string,\n};\n\nexport default withStyles(styles)(GenericEndpoint);\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* eslint-disable no-constant-condition */\nimport * as React from 'react';\nimport {\n    setRef,\n    useEventCallback,\n    useControlled,\n    unstable_useId as useId,\n} from '@material-ui/core/utils';\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\n// Give up on IE 11 support for this feature\nfunction stripDiacritics(string) {\n    return typeof string.normalize !== 'undefined'\n        ? string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n        : string;\n}\n\nexport function createFilterOptions(config = {}) {\n    const {\n        ignoreAccents = true,\n        ignoreCase = true,\n        limit,\n        matchFrom = 'any',\n        stringify,\n        trim = false,\n    } = config;\n\n    return (options, { inputValue, getOptionLabel }) => {\n        let input = trim ? inputValue.trim() : inputValue;\n        if (ignoreCase) {\n            input = input.toLowerCase();\n        }\n        if (ignoreAccents) {\n            input = stripDiacritics(input);\n        }\n\n        const filteredOptions = options.filter((option) => {\n            let candidate = (stringify || getOptionLabel)(option);\n            if (ignoreCase) {\n                candidate = candidate.toLowerCase();\n            }\n            if (ignoreAccents) {\n                candidate = stripDiacritics(candidate);\n            }\n\n            return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n        });\n\n        return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n    };\n}\n\n// To replace with .findIndex() once we stop IE 11 support.\nfunction findIndex(array, comp) {\n    for (let i = 0; i < array.length; i += 1) {\n        if (comp(array[i])) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when pageup and pagedown keys are used.\nconst pageSize = 5;\n\nexport default function useAutocomplete(props) {\n    const {\n        autoComplete = false,\n        autoHighlight = false,\n        autoSelect = false,\n        blurOnSelect = false,\n        clearOnBlur = !props.freeSolo,\n        clearOnEscape = false,\n        componentName = 'useAutocomplete',\n        debug = false,\n        defaultValue = props.multiple ? [] : null,\n        disableClearable = false,\n        disableCloseOnSelect = false,\n        disabledItemsFocusable = false,\n        disableListWrap = false,\n        filterOptions = defaultFilterOptions,\n        filterSelectedOptions = false,\n        freeSolo = false,\n        getOptionDisabled,\n        getOptionLabel: getOptionLabelProp = (option) => option,\n        getOptionSelected = (option, value) => option === value,\n        groupBy,\n        handleHomeEndKeys = !props.freeSolo,\n        id: idProp,\n        includeInputInList = false,\n        inputValue: inputValueProp,\n        multiple = false,\n        onChange,\n        onClose,\n        onHighlightChange,\n        onInputChange,\n        onOpen,\n        open: openProp,\n        openOnFocus = false,\n        options,\n        selectOnFocus = !props.freeSolo,\n        value: valueProp,\n    } = props;\n\n    const id = useId(idProp);\n\n    let getOptionLabel = getOptionLabelProp;\n\n    if (process.env.NODE_ENV !== 'production') {\n        getOptionLabel = (option) => {\n            const optionLabel = getOptionLabelProp(option);\n            if (typeof optionLabel !== 'string') {\n                const erroneousReturn =\n                    optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n                console.error(\n                    `Material-UI: The \\`getOptionLabel\\` method of\n                    ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(\n    option,\n)}.`,\n                );\n            }\n            return optionLabel;\n        };\n    }\n\n    const ignoreFocus = React.useRef(false);\n    const firstFocus = React.useRef(true);\n    const inputRef = React.useRef(null);\n    const listboxRef = React.useRef(null);\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const [focusedTag, setFocusedTag] = React.useState(-1);\n    const defaultHighlighted = autoHighlight ? 0 : -1;\n    const highlightedIndexRef = React.useRef(defaultHighlighted);\n\n    const [value, setValue] = useControlled({\n        controlled: valueProp,\n        default: defaultValue,\n        name: componentName,\n    });\n    const [inputValue, setInputValue] = useControlled({\n        controlled: inputValueProp,\n        default: '',\n        name: componentName,\n        state: 'inputValue',\n    });\n\n    const [focused, setFocused] = React.useState(false);\n\n    const resetInputValue = useEventCallback((event, newValue) => {\n        let newInputValue;\n        if (multiple) {\n            newInputValue = '';\n        } else if (newValue == null) {\n            newInputValue = '';\n        } else {\n            const optionLabel = getOptionLabel(newValue);\n            newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n        }\n\n        if (inputValue === newInputValue) {\n            return;\n        }\n\n        setInputValue(newInputValue);\n\n        if (onInputChange) {\n            onInputChange(event, newInputValue, 'reset');\n        }\n    });\n\n    React.useEffect(() => {\n        resetInputValue(null, value);\n    }, [value, resetInputValue]);\n\n    const [open, setOpenState] = useControlled({\n        controlled: openProp,\n        default: false,\n        name: componentName,\n        state: 'open',\n    });\n\n    const inputValueIsSelectedValue =\n        !multiple && value != null && inputValue === getOptionLabel(value);\n\n    const popupOpen = open;\n\n    const filteredOptions = popupOpen\n        ? filterOptions(\n            options.filter((option) => {\n                if (\n                    filterSelectedOptions &&\n                    (multiple ? value : [value]).some(\n                        (value2) => value2 !== null && getOptionSelected(option, value2),\n                    )\n                ) {\n                    return false;\n                }\n                return true;\n            }),\n            // we use the empty string to manipulate `filterOptions` to not filter any options\n            // i.e. the filter predicate always returns true\n            { inputValue: inputValueIsSelectedValue ? '' : inputValue, getOptionLabel },\n        )\n        : [];\n\n    if (process.env.NODE_ENV !== 'production') {\n        if (value !== null && !freeSolo && options.length > 0) {\n            const missingValue = (multiple ? value : [value]).filter(\n                (value2) => !options.some((option) => getOptionSelected(option, value2)),\n            );\n\n            if (missingValue.length > 0) {\n                console.warn(\n                    [\n                        `Material-UI: The value provided to ${componentName} is invalid.`,\n                        `None of the options match with \\`${missingValue.length > 1\n                            ? JSON.stringify(missingValue)\n                            : JSON.stringify(missingValue[0])\n                        }\\`.`,\n                        'You can use the `getOptionSelected` prop to customize the equality test.',\n                    ].join('\\n'),\n                );\n            }\n        }\n    }\n\n    const focusTag = useEventCallback((tagToFocus) => {\n        if (tagToFocus === -1) {\n            inputRef.current.focus();\n        } else {\n            anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n        }\n    });\n\n    // Ensure the focusedTag is never inconsistent\n    React.useEffect(() => {\n        if (multiple && focusedTag > value.length - 1) {\n            setFocusedTag(-1);\n            focusTag(-1);\n        }\n    }, [value, multiple, focusedTag, focusTag]);\n\n    function validOptionIndex(index, direction) {\n        if (!listboxRef.current || index === -1) {\n            return -1;\n        }\n\n        let nextFocus = index;\n\n        while (true) {\n            // Out of range\n            if (\n                (direction === 'next' && nextFocus === filteredOptions.length) ||\n                (direction === 'previous' && nextFocus === -1)\n            ) {\n                return -1;\n            }\n\n            const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n            // Same logic as MenuList.js\n            const nextFocusDisabled = disabledItemsFocusable\n                ? false\n                : option && (option.disabled || option.getAttribute('aria-disabled') === 'true');\n\n            if ((option && !option.hasAttribute('tabindex')) || nextFocusDisabled) {\n                // Move to the next element.\n                nextFocus += direction === 'next' ? 1 : -1;\n            } else {\n                return nextFocus;\n            }\n        }\n    }\n\n    const setHighlightedIndex = useEventCallback(({ event, index, reason = 'auto' }) => {\n        highlightedIndexRef.current = index;\n\n        // does the index exist?\n        if (index === -1) {\n            inputRef.current.removeAttribute('aria-activedescendant');\n        } else {\n            inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n        }\n\n        if (onHighlightChange) {\n            onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n        }\n\n        if (!listboxRef.current) {\n            return;\n        }\n\n        const prev = listboxRef.current.querySelector('[data-focus]');\n        if (prev) {\n            prev.removeAttribute('data-focus');\n        }\n\n        const listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n\n        // \"No results\"\n        if (!listboxNode) {\n            return;\n        }\n\n        if (index === -1) {\n            listboxNode.scrollTop = 0;\n            return;\n        }\n\n        const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n\n        if (!option) {\n            return;\n        }\n\n        option.setAttribute('data-focus', 'true');\n\n        // Scroll active descendant into view.\n        // Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js\n        //\n        // Consider this API instead once it has a better browser support:\n        // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n        if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {\n            const element = option;\n\n            const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n            const elementBottom = element.offsetTop + element.offsetHeight;\n            if (elementBottom > scrollBottom) {\n                listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n            } else if (\n                element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) <\n                listboxNode.scrollTop\n            ) {\n                listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n            }\n        }\n    });\n\n    const changeHighlightedIndex = useEventCallback(\n        ({ event, diff, direction = 'next', reason = 'auto' }) => {\n            if (!popupOpen) {\n                return;\n            }\n\n            const getNextIndex = () => {\n                const maxIndex = filteredOptions.length - 1;\n\n                if (diff === 'reset') {\n                    return defaultHighlighted;\n                }\n\n                if (diff === 'start') {\n                    return 0;\n                }\n\n                if (diff === 'end') {\n                    return maxIndex;\n                }\n\n                const newIndex = highlightedIndexRef.current + diff;\n\n                if (newIndex < 0) {\n                    if (newIndex === -1 && includeInputInList) {\n                        return -1;\n                    }\n\n                    if ((disableListWrap && highlightedIndexRef.current !== -1) || Math.abs(diff) > 1) {\n                        return 0;\n                    }\n\n                    return maxIndex;\n                }\n\n                if (newIndex > maxIndex) {\n                    if (newIndex === maxIndex + 1 && includeInputInList) {\n                        return -1;\n                    }\n\n                    if (disableListWrap || Math.abs(diff) > 1) {\n                        return maxIndex;\n                    }\n\n                    return 0;\n                }\n\n                return newIndex;\n            };\n\n            const nextIndex = validOptionIndex(getNextIndex(), direction);\n            setHighlightedIndex({ index: nextIndex, reason, event });\n\n            // Sync the content of the input with the highlighted option.\n            if (autoComplete && diff !== 'reset') {\n                if (nextIndex === -1) {\n                    inputRef.current.value = inputValue;\n                } else {\n                    const option = getOptionLabel(filteredOptions[nextIndex]);\n                    inputRef.current.value = option;\n\n                    // The portion of the selected suggestion that has not been typed by the user,\n                    // a completion string, appears inline after the input cursor in the textbox.\n                    const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n                    if (index === 0 && inputValue.length > 0) {\n                        inputRef.current.setSelectionRange(inputValue.length, option.length);\n                    }\n                }\n            }\n        },\n    );\n\n    const syncHighlightedIndex = React.useCallback(() => {\n        if (!popupOpen) {\n            return;\n        }\n\n        const valueItem = multiple ? value[0] : value;\n\n        // The popup is empty, reset\n        if (filteredOptions.length === 0 || valueItem == null) {\n            changeHighlightedIndex({ diff: 'reset' });\n            return;\n        }\n\n        if (!listboxRef.current) {\n            return;\n        }\n\n        // Synchronize the value with the highlighted index\n        if (!filterSelectedOptions && valueItem != null) {\n            const currentOption = filteredOptions[highlightedIndexRef.current];\n\n            // Keep the current highlighted index if possible\n            if (\n                multiple &&\n                currentOption &&\n                findIndex(value, (val) => getOptionSelected(currentOption, val)) !== -1\n            ) {\n                return;\n            }\n\n            const itemIndex = findIndex(filteredOptions, (optionItem) =>\n                getOptionSelected(optionItem, valueItem),\n            );\n            if (itemIndex === -1) {\n                changeHighlightedIndex({ diff: 'reset' });\n            } else {\n                setHighlightedIndex({ index: itemIndex });\n            }\n            return;\n        }\n\n        // Prevent the highlighted index to leak outside the boundaries.\n        if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n            setHighlightedIndex({ index: filteredOptions.length - 1 });\n            return;\n        }\n\n        // Restore the focus to the previous index.\n        setHighlightedIndex({ index: highlightedIndexRef.current });\n        // Ignore filteredOptions (and options, getOptionSelected, getOptionLabel) not to break the scroll position\n    }, [\n        // Only sync the highlighted index when the option switch between empty and not\n        filteredOptions.length === 0,\n        // Don't sync the highlighted index with the value when multiple\n        multiple ? false : value,\n        filterSelectedOptions,\n        changeHighlightedIndex,\n        setHighlightedIndex,\n        popupOpen,\n        inputValue,\n        multiple,\n    ]);\n\n    const handleListboxRef = useEventCallback((node) => {\n        setRef(listboxRef, node);\n\n        if (!node) {\n            return;\n        }\n\n        syncHighlightedIndex();\n    });\n\n    React.useEffect(() => {\n        syncHighlightedIndex();\n    }, [syncHighlightedIndex]);\n\n    const handleOpen = (event) => {\n        if (open) {\n            return;\n        }\n\n        setOpenState(true);\n\n        if (onOpen) {\n            onOpen(event);\n        }\n    };\n\n    const handleClose = (event, reason) => {\n        if (!open) {\n            return;\n        }\n\n        setOpenState(false);\n\n        if (onClose) {\n            onClose(event, reason);\n        }\n    };\n\n    const handleValue = (event, newValue, reason, details) => {\n        if (value === newValue) {\n            return;\n        }\n\n        if (onChange) {\n            onChange(event, newValue, reason, details);\n        }\n\n        setValue(newValue);\n    };\n\n    const isTouch = React.useRef(false);\n\n    const selectNewValue = (event, option, reasonProp = 'select-option', origin = 'options') => {\n        let reason = reasonProp;\n        let newValue = option;\n\n        if (multiple) {\n            newValue = Array.isArray(value) ? value.slice() : [];\n\n            if (process.env.NODE_ENV !== 'production') {\n                const matches = newValue.filter((val) => getOptionSelected(option, val));\n\n                if (matches.length > 1) {\n                    console.error(\n                        [\n                            `Material-UI: The \\`getOptionSelected\\` method of ${componentName} `,\n                            `do not handle the arguments correctly.`,\n                            `The component expects a single value to match a `,\n                            `given option but found ${matches.length} matches.`,\n                        ].join('\\n'),\n                    );\n                }\n            }\n\n            const itemIndex = findIndex(newValue, (valueItem) => getOptionSelected(option, valueItem));\n\n            if (itemIndex === -1) {\n                newValue.push(option);\n            } else if (origin !== 'freeSolo') {\n                newValue.splice(itemIndex, 1);\n                reason = 'remove-option';\n            }\n        }\n\n        resetInputValue(event, newValue);\n\n        handleValue(event, newValue, reason, { option });\n        if (!disableCloseOnSelect) {\n            handleClose(event, reason);\n        }\n\n        if (\n            blurOnSelect === true ||\n            (blurOnSelect === 'touch' && isTouch.current) ||\n            (blurOnSelect === 'mouse' && !isTouch.current)\n        ) {\n            inputRef.current.blur();\n        }\n    };\n\n    function validTagIndex(index, direction) {\n        if (index === -1) {\n            return -1;\n        }\n\n        let nextFocus = index;\n\n        while (true) {\n            // Out of range\n            if (\n                (direction === 'next' && nextFocus === value.length) ||\n                (direction === 'previous' && nextFocus === -1)\n            ) {\n                return -1;\n            }\n\n            const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`);\n\n            // Same logic as MenuList.js\n            if (\n                option &&\n                (!option.hasAttribute('tabindex') ||\n                    option.disabled ||\n                    option.getAttribute('aria-disabled') === 'true')\n            ) {\n                nextFocus += direction === 'next' ? 1 : -1;\n            } else {\n                return nextFocus;\n            }\n        }\n    }\n\n    const handleFocusTag = (event, direction) => {\n        if (!multiple) {\n            return;\n        }\n\n        handleClose(event, 'toggleInput');\n\n        let nextTag = focusedTag;\n\n        if (focusedTag === -1) {\n            if (inputValue === '' && direction === 'previous') {\n                nextTag = value.length - 1;\n            }\n        } else {\n            nextTag += direction === 'next' ? 1 : -1;\n\n            if (nextTag < 0) {\n                nextTag = 0;\n            }\n\n            if (nextTag === value.length) {\n                nextTag = -1;\n            }\n        }\n\n        nextTag = validTagIndex(nextTag, direction);\n\n        setFocusedTag(nextTag);\n        focusTag(nextTag);\n    };\n\n    const handleClear = (event) => {\n        ignoreFocus.current = true;\n        setInputValue('');\n\n        if (onInputChange) {\n            onInputChange(event, '', 'clear');\n        }\n\n        handleValue(event, multiple ? [] : null, 'clear');\n    };\n\n    const handleKeyDown = (other) => (event) => {\n        if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {\n            setFocusedTag(-1);\n            focusTag(-1);\n        }\n\n        switch (event.key) {\n            case 'Home':\n                if (popupOpen && handleHomeEndKeys) {\n                    // Prevent scroll of the page\n                    event.preventDefault();\n                    changeHighlightedIndex({ diff: 'start', direction: 'next', reason: 'keyboard', event });\n                }\n                break;\n            case 'End':\n                if (popupOpen && handleHomeEndKeys) {\n                    // Prevent scroll of the page\n                    event.preventDefault();\n                    changeHighlightedIndex({ diff: 'end', direction: 'previous', reason: 'keyboard', event });\n                }\n                break;\n            case 'PageUp':\n                // Prevent scroll of the page\n                event.preventDefault();\n                changeHighlightedIndex({\n                    diff: -pageSize,\n                    direction: 'previous',\n                    reason: 'keyboard',\n                    event,\n                });\n                handleOpen(event);\n                break;\n            case 'PageDown':\n                // Prevent scroll of the page\n                event.preventDefault();\n                changeHighlightedIndex({ diff: pageSize, direction: 'next', reason: 'keyboard', event });\n                handleOpen(event);\n                break;\n            case 'ArrowDown':\n                // Prevent cursor move\n                event.preventDefault();\n                changeHighlightedIndex({ diff: 1, direction: 'next', reason: 'keyboard', event });\n                handleOpen(event);\n                break;\n            case 'ArrowUp':\n                // Prevent cursor move\n                event.preventDefault();\n                changeHighlightedIndex({ diff: -1, direction: 'previous', reason: 'keyboard', event });\n                handleOpen(event);\n                break;\n            case 'ArrowLeft':\n                handleFocusTag(event, 'previous');\n                break;\n            case 'ArrowRight':\n                handleFocusTag(event, 'next');\n                break;\n            case 'Enter':\n                // Wait until IME is settled.\n                if (event.which === 229) {\n                    break;\n                }\n                if (highlightedIndexRef.current !== -1 && popupOpen) {\n                    const option = filteredOptions[highlightedIndexRef.current];\n                    const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n                    // We don't want to validate the form.\n                    event.preventDefault();\n\n                    if (disabled) {\n                        return;\n                    }\n\n                    selectNewValue(event, option, 'select-option');\n\n                    // Move the selection to the end.\n                    if (autoComplete) {\n                        inputRef.current.setSelectionRange(\n                            inputRef.current.value.length,\n                            inputRef.current.value.length,\n                        );\n                    }\n                } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n                    if (multiple) {\n                        // Allow people to add new values before they submit the form.\n                        event.preventDefault();\n                    }\n                    selectNewValue(event, inputValue, 'create-option', 'freeSolo');\n                }\n                break;\n            case 'Escape':\n                if (popupOpen) {\n                    // Avoid Opera to exit fullscreen mode.\n                    event.preventDefault();\n                    // Avoid the Modal to handle the event.\n                    event.stopPropagation();\n                    handleClose(event, 'escape');\n                } else if (clearOnEscape && (inputValue !== '' || (multiple && value.length > 0))) {\n                    // Avoid Opera to exit fullscreen mode.\n                    event.preventDefault();\n                    // Avoid the Modal to handle the event.\n                    event.stopPropagation();\n                    handleClear(event);\n                }\n                break;\n            case 'Backspace':\n                if (multiple && inputValue === '' && value.length > 0) {\n                    const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n                    const newValue = value.slice();\n                    newValue.splice(index, 1);\n                    handleValue(event, newValue, 'remove-option', {\n                        option: value[index],\n                    });\n                }\n                break;\n            default:\n        }\n\n        if (other.onKeyDown) {\n            other.onKeyDown(event);\n        }\n    };\n\n    const handleFocus = (event) => {\n        setFocused(true);\n\n        if (openOnFocus && !ignoreFocus.current) {\n            handleOpen(event);\n        }\n    };\n\n    const handleBlur = (event) => {\n        // Ignore the event when using the scrollbar with IE 11\n        if (\n            listboxRef.current !== null &&\n            document.activeElement === listboxRef.current.parentElement\n        ) {\n            inputRef.current.focus();\n            return;\n        }\n\n        setFocused(false);\n        firstFocus.current = true;\n        ignoreFocus.current = false;\n\n        if (debug && inputValue !== '') {\n            return;\n        }\n\n        if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n            selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n        } else if (autoSelect && freeSolo && inputValue !== '') {\n            selectNewValue(event, inputValue, 'blur', 'freeSolo');\n        } else if (clearOnBlur) {\n            resetInputValue(event, value);\n        }\n\n        handleClose(event, 'blur');\n    };\n\n    const handleInputChange = (event) => {\n        const newValue = event.target.value;\n\n        if (inputValue !== newValue) {\n            setInputValue(newValue);\n\n            if (onInputChange) {\n                onInputChange(event, newValue, 'input');\n            }\n        }\n\n        if (newValue === '') {\n            if (!disableClearable && !multiple) {\n                handleValue(event, null, 'clear');\n            }\n        } else {\n            handleOpen(event);\n        }\n    };\n\n    const handleOptionMouseOver = (event) => {\n        setHighlightedIndex({\n            event,\n            index: Number(event.currentTarget.getAttribute('data-option-index')),\n            reason: 'mouse',\n        });\n    };\n\n    const handleOptionTouchStart = () => {\n        isTouch.current = true;\n    };\n\n    const handleOptionClick = (event) => {\n        const index = Number(event.currentTarget.getAttribute('data-option-index'));\n        selectNewValue(event, filteredOptions[index], 'select-option');\n\n        isTouch.current = false;\n    };\n\n    const handleTagDelete = (index) => (event) => {\n        const newValue = value.slice();\n        newValue.splice(index, 1);\n        handleValue(event, newValue, 'remove-option', {\n            option: value[index],\n        });\n    };\n\n    const handlePopupIndicator = (event) => {\n        if (open) {\n            handleClose(event, 'toggleInput');\n        } else {\n            handleOpen(event);\n        }\n    };\n\n    // Prevent input blur when interacting with the combobox\n    const handleMouseDown = (event) => {\n        if (event.target.getAttribute('id') !== id) {\n            event.preventDefault();\n        }\n    };\n\n    // Focus the input when interacting with the combobox\n    const handleClick = () => {\n        inputRef.current.focus();\n\n        if (\n            selectOnFocus &&\n            firstFocus.current &&\n            inputRef.current.selectionEnd - inputRef.current.selectionStart === 0\n        ) {\n            inputRef.current.select();\n        }\n\n        firstFocus.current = false;\n    };\n\n    const handleInputMouseDown = (event) => {\n        if (inputValue === '' || !open) {\n            handlePopupIndicator(event);\n        }\n    };\n\n    let dirty = freeSolo && inputValue.length > 0;\n    dirty = dirty || (multiple ? value.length > 0 : value !== null);\n\n    let groupedOptions = filteredOptions;\n    if (groupBy) {\n        // used to keep track of key and indexes in the result array\n        const indexBy = new Map();\n        let warn = false;\n\n        groupedOptions = filteredOptions.reduce((acc, option, index) => {\n            const group = groupBy(option);\n\n            if (acc.length > 0 && acc[acc.length - 1].group === group) {\n                acc[acc.length - 1].options.push(option);\n            } else {\n                if (process.env.NODE_ENV !== 'production') {\n                    if (indexBy.get(group) && !warn) {\n                        console.warn(\n                            `Material-UI: The options provided combined with `,\n                            `the \\`groupBy\\` method of ${componentName} returns duplicated headers.`,\n                            'You can solve the issue by sorting the options with the output of `groupBy`.',\n                        );\n                        warn = true;\n                    }\n                    indexBy.set(group, true);\n                }\n\n                acc.push({\n                    key: index,\n                    index,\n                    group,\n                    options: [option],\n                });\n            }\n\n            return acc;\n        }, []);\n    }\n\n    return {\n        getRootProps: (other = {}) => ({\n            'aria-owns': popupOpen ? `${id}-popup` : null,\n            role: 'combobox',\n            'aria-expanded': popupOpen,\n            ...other,\n            onKeyDown: handleKeyDown(other),\n            onMouseDown: handleMouseDown,\n            onClick: handleClick,\n        }),\n        getInputLabelProps: () => ({\n            id: `${id}-label`,\n            htmlFor: id,\n        }),\n        getInputProps: () => ({\n            id,\n            value: inputValue,\n            onBlur: handleBlur,\n            onFocus: handleFocus,\n            onChange: handleInputChange,\n            onMouseDown: handleInputMouseDown,\n            // if open then this is handled imperativeley so don't let react override\n            // only have an opinion about this when closed\n            'aria-activedescendant': popupOpen ? '' : null,\n            'aria-autocomplete': autoComplete ? 'both' : 'list',\n            'aria-controls': popupOpen ? `${id}-popup` : null,\n            // Disable browser's suggestion that might overlap with the popup.\n            // Handle autocomplete but not autofill.\n            autoComplete: 'off',\n            ref: inputRef,\n            autoCapitalize: 'none',\n            spellCheck: 'false',\n        }),\n        getClearProps: () => ({\n            tabIndex: -1,\n            onClick: handleClear,\n        }),\n        getPopupIndicatorProps: () => ({\n            tabIndex: -1,\n            onClick: handlePopupIndicator,\n        }),\n        getTagProps: ({ index }) => ({\n            key: index,\n            'data-tag-index': index,\n            tabIndex: -1,\n            onDelete: handleTagDelete(index),\n        }),\n        getListboxProps: () => ({\n            role: 'listbox',\n            id: `${id}-popup`,\n            'aria-labelledby': `${id}-label`,\n            ref: handleListboxRef,\n            onMouseDown: (event) => {\n                // Prevent blur\n                event.preventDefault();\n            },\n        }),\n        getOptionProps: ({ index, option }) => {\n            const selected = (multiple ? value : [value]).some(\n                (value2) => value2 != null && getOptionSelected(option, value2),\n            );\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            return {\n                key: index,\n                tabIndex: -1,\n                role: 'option',\n                id: `${id}-option-${index}`,\n                onMouseOver: handleOptionMouseOver,\n                onClick: handleOptionClick,\n                onTouchStart: handleOptionTouchStart,\n                'data-option-index': index,\n                'aria-disabled': disabled,\n                'aria-selected': selected,\n            };\n        },\n        id,\n        inputValue,\n        value,\n        dirty,\n        popupOpen,\n        focused: focused || focusedTag !== -1,\n        anchorEl,\n        setAnchorEl,\n        focusedTag,\n        groupedOptions,\n    };\n}\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport {\n    TextField, Button, Typography, InputLabel,\n} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Alert from 'AppComponents/Shared/Alert';\nimport CommentsAPI from 'AppData/Comments';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst styles = (theme) => ({\n    commentIcon: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    content: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        marginTop: theme.spacing(2),\n    },\n    textField: {\n        marginTop: 0,\n        marginRight: 5,\n        width: '100%',\n    },\n    commentAddWrapper: {\n        display: 'flex',\n        alignItems: 'top',\n        flexFlow: 'column',\n        '& label': {\n            marginBottom: theme.spacing(1),\n        },\n    },\n    commentAddButton: {\n        '& > span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main) + '! important',\n        },\n    },\n});\n\n/**\n   * Display a component to add a new comment\n   * @class CommmentAdd\n   * @extends {React.Component}\n   */\nclass CommentAdd extends React.Component {\n    /**\n     * Creates an instance of CommentAdd\n     * @param {*} props properies passed by the parent element\n     * @memberof CommentAdd\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            content: '',\n            currentLength: 0,\n        };\n        this.inputChange = this.inputChange.bind(this);\n        this.handleClickAddComment = this.handleClickAddComment.bind(this);\n        this.handleClickCancel = this.handleClickCancel.bind(this);\n        this.filterCommentToAddReply = this.filterCommentToAddReply.bind(this);\n    }\n\n    /**\n     * Handles the comment text when input changes\n     * @param {Object} {target} target element\n     * @memberof CommentAdd\n     */\n    inputChange({ target }) {\n        this.setState({ content: target.value, currentLength: target.value.length });\n    }\n\n    /**\n     * Hides the component to add a new comment when cancelled\n     * @memberof CommentAdd\n     */\n    handleClickCancel() {\n        this.setState({ content: '' });\n        const { handleShowReply } = this.props;\n        handleShowReply();\n    }\n\n    /**\n     * Filters the comment to add the reply\n     * @memberof CommentAdd\n     */\n    filterCommentToAddReply(commentToFilter) {\n        const { replyTo } = this.props;\n        return commentToFilter.id === replyTo;\n    }\n\n    /**\n     * Handles adding a new comment\n     * @memberof CommentAdd\n     * * */\n    handleClickAddComment() {\n        const {\n            api: { id: apiId }, replyTo, handleShowReply, addComment, addReply,\n        } = this.props;\n        const { content } = this.state;\n        const comment = {\n            content: content.trim(), category: 'general',\n        };\n\n        // to check whether a string does not contain only white spaces\n        if (comment.content.replace(/\\s/g, '').length) {\n            CommentsAPI.add(apiId, comment, replyTo)\n                .then((newComment) => {\n                    this.setState({ content: '' });\n                    if (replyTo === null) {\n                        if (addComment) {\n                            addComment(newComment.body);\n                        }\n                    } else if (addReply) {\n                        addReply(newComment.body);\n                    }\n                })\n                .catch((error) => {\n                    console.error(error);\n                    if (error.response) {\n                        Alert.error(error.response.body.message);\n                    } else {\n                        Alert.error('Something went wrong while adding the comment');\n                    }\n                });\n        } else {\n            Alert.error('You cannot enter a blank comment');\n        }\n        this.setState({ currentLength: 0 });\n        if (replyTo !== null) {\n            handleShowReply();\n        }\n    }\n\n    /**\n     * Render method of the component\n     * @returns {React.Component} Comment html component\n     * @memberof CommentAdd\n     */\n    render() {\n        const {\n            classes, cancelButton, theme, intl, api,\n        } = this.props;\n        const { content, currentLength } = this.state;\n        return (\n            <Grid container spacing={2} className={classes.contentWrapper}>\n                <Grid item xs zeroMinWidth>\n                    <div className={classes.commentAddWrapper}>\n                        <InputLabel htmlFor='standard-multiline-flexible'>\n                            <FormattedMessage\n                                id='Apis.Details.Comments.CommentAdd.write.comment.label'\n                                defaultMessage='Write a comment'\n                            />\n                        </InputLabel>\n                        <TextField\n                            id='standard-multiline-flexible'\n                            autoFocus\n                            multiline\n                            disabled={api.isRevision \n                            || isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                            className={classes.textField}\n                            margin='normal'\n                            placeholder={intl.formatMessage({\n                                defaultMessage: 'Write a comment',\n                                id: 'Apis.Details.Comments.CommentAdd.write.comment.help',\n                            })}\n                            inputProps={{ maxLength: theme.custom.maxCommentLength }}\n                            value={content}\n                            onChange={this.inputChange}\n                            variant='outlined'\n                        />\n                        <Typography className={classes.content} align='right'>\n                            {currentLength + '/' + theme.custom.maxCommentLength}\n                        </Typography>\n                    </div>\n                    <Grid container spacing={1}>\n                        <Grid item>\n                            <Button\n                                variant='contained'\n                                color='primary'\n                                disabled={api.isRevision ||\n                                isRestricted(['apim:api_create', 'apim:api_publish'], api)\n                                || currentLength === 0}\n                                onClick={() => this.handleClickAddComment()}\n                                className={classes.commentAddButton}\n                            >\n                                <FormattedMessage\n                                    id='Apis.Details.Comments.CommentAdd.btn.add.comment'\n                                    defaultMessage='Comment'\n                                />\n                            </Button>\n                        </Grid>\n                        {cancelButton && (\n                            <Grid item>\n                                <Button onClick={() => this.handleClickCancel(-1)} className={classes.button}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Comments.CommentAdd.btn.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                            </Grid>\n                        )}\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nCommentAdd.defaultProps = {\n    replyTo: null,\n    handleShowReply: null,\n};\n\nCommentAdd.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    cancelButton: PropTypes.bool.isRequired,\n    api: PropTypes.instanceOf(Object).isRequired,\n    replyTo: PropTypes.string,\n    handleShowReply: PropTypes.func,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(CommentAdd));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useReducer, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Typography } from '@material-ui/core';\nimport CloudUploadRounded from '@material-ui/icons/CloudUploadRounded';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api.js';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ProvideWSDL from 'AppComponents/Apis/Create/WSDL/Steps/ProvideWSDL';\nimport ProvideAsyncAPI from 'AppComponents/Apis/Create/AsyncAPI/Steps/ProvideAsyncAPI';\nimport ProvideOpenAPI from '../../Create/OpenAPI/Steps/ProvideOpenAPI';\nimport ProvideGraphQL from '../../Create/GraphQL/Steps/ProvideGraphQL';\n\nconst useStyles = makeStyles(() => ({\n    importDefinitionDialogHeader: {\n        fontWeight: '600',\n    },\n    buttonIcon: {\n        marginRight: 10,\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ImportDefinition(props) {\n    const { setSchemaDefinition } = props;\n    const classes = useStyles();\n    const [openAPIDefinitionImport, setOpenAPIDefinitionImport] = useState(false);\n    const [isImporting, setIsImporting] = useState(false);\n    const [api, updateAPI] = useAPI();\n    const intl = useIntl();\n    const isGraphQL = api.isGraphql();\n    const isSOAP = api.isSOAP();\n    // const isWebSocket = api.isWebSocket();\n    // const isWebSub = api.isWebSub();\n    const isAsyncAPI = api && (api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE');\n    const [asyncAPIDefinitionImport, setAsyncAPIDefinitionImport] = useState(false);\n\n    const handleAPIDefinitionImportOpen = () => {\n        // eslint-disable-next-line no-unused-expressions\n        isAsyncAPI ? setAsyncAPIDefinitionImport(true) : setOpenAPIDefinitionImport(true);\n        // isWebSocket || isWebSub ? setAsyncAPIDefinitionImport(true) : setOpenAPIDefinitionImport(true);\n    };\n\n    const handleAPIDefinitionImportCancel = () => {\n        // eslint-disable-next-line no-unused-expressions\n        isAsyncAPI ? setAsyncAPIDefinitionImport(false) : setOpenAPIDefinitionImport(false);\n        // isWebSocket || isWebSub ? setAsyncAPIDefinitionImport(false) : setOpenAPIDefinitionImport(false);\n    };\n\n    function apiInputsReducer(currentState, inputAction) {\n        const { action, value } = inputAction;\n        switch (action) {\n            case 'inputValue':\n            case 'isFormValid':\n                return { ...currentState, [action]: value };\n            case 'inputType':\n                return { ...currentState, [action]: value, inputValue: value === 'url' ? '' : null };\n            case 'preSetAPI':\n                return {\n                    ...currentState,\n                    content: value.content,\n                };\n            default:\n                return currentState;\n        }\n    }\n\n    const [apiInputs, inputsDispatcher] = useReducer(apiInputsReducer, {\n        type: '',\n        inputType: 'url',\n        inputValue: '',\n        formValidity: false,\n        mode: 'update',\n    });\n\n    /**\n     * Updates OpenAPI definition\n     */\n    function updateOASDefinition() {\n        setIsImporting(true);\n        const {\n            inputValue, inputType, content,\n        } = apiInputs;\n        const isFileInput = inputType === 'file';\n        if (isFileInput) {\n            const reader = new FileReader();\n            const contentType = inputValue.type.includes('yaml') ? 'yaml' : 'json';\n            reader.onloadend = (event) => {\n                setSchemaDefinition(event.currentTarget.result, contentType);\n            };\n            reader.readAsText(inputValue);\n        }\n        const newAPI = new API();\n        const promisedResponse = isFileInput ? newAPI.updateAPIDefinitionByFile(api.id, inputValue)\n            : newAPI.updateAPIDefinitionByUrl(api.id, inputValue);\n        promisedResponse\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.api.definition.oas.updated.successfully',\n                    defaultMessage: 'API Definition Updated Successfully',\n                }));\n                setOpenAPIDefinitionImport(false);\n                if (!isFileInput) {\n                    // Test to starting the content with'{' character ignoring white spaces\n                    const isJSONRegex = RegExp(/^\\s*{/); // TODO: not a solid test need to support from REST API ~tmkb\n                    const contentType = isJSONRegex.test(content) ? 'json' : 'yaml';\n                    setSchemaDefinition(content, contentType);\n                }\n                updateAPI();\n            })\n            .catch((error) => {\n                console.error(error);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.import.api.definition',\n                    defaultMessage: 'Error while updating the API Definition',\n                }));\n            }).finally(() => setIsImporting(false));\n    }\n\n    /**\n     * Updates AsyncAPI definition\n     */\n    function updateAsyncAPIDefinition() {\n        setIsImporting(true);\n        const {\n            inputValue, inputType, content,\n        } = apiInputs;\n        const isFileInput = inputType === 'file';\n        if (isFileInput) {\n            const reader = new FileReader();\n            // eslint-disable-next-line no-nested-ternary\n            const contentType = inputValue.type.includes('yaml') ? 'yaml'\n                : inputValue.type.includes('yml') ? 'yml' : 'json';\n            reader.onloadend = (event) => {\n                setSchemaDefinition(event.currentTarget.result, contentType);\n            };\n            reader.readAsText(inputValue);\n        }\n        const newAPI = new API();\n        const promisedResponse = isFileInput ? newAPI.updateAsyncAPIDefinitionByFile(api.id, inputValue)\n            : newAPI.updateAsyncAPIDefinitionByUrl(api.id, inputValue);\n        promisedResponse\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.async.api.import.definition.updated.successfully',\n                    defaultMessage: 'API Definition Updated Successfully',\n                }));\n                setAsyncAPIDefinitionImport(false);\n                if (!isFileInput) {\n                    // Test to starting the content with'{' character ignoring white spaces\n                    const isJSONRegex = RegExp(/^\\s*{/); // TODO: not a solid test need to support from REST API ~tmkb\n                    const contentType = isJSONRegex.test(content) ? 'json' : 'yaml';\n                    setSchemaDefinition(content, contentType);\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.import.async.api.definition',\n                    defaultMessage: 'Error while updating the API Definition',\n                }));\n            }).finally(() => setIsImporting(false));\n    }\n\n    /**\n     * Update the graphQL api with its operation\n     * @param {*}  api\n     * @param {*}  graphQLInfo\n     */\n    function updateGraphQLAPIDefinition(graphQLSchema) {\n        const promisedAPI = api.updateGraphQLAPIDefinition(api.id, graphQLSchema);\n        promisedAPI\n            .then((response) => {\n                api.operations = response.obj;\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.graphQLDefinition.updated.successfully',\n                    defaultMessage: 'Schema Definition Updated Successfully',\n                }));\n                setOpenAPIDefinitionImport(false);\n                setSchemaDefinition(graphQLSchema);\n            })\n            .catch((err) => {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.updating.graphQL.schema',\n                    defaultMessage: 'Error while updating GraphQL schema',\n                }));\n            });\n    }\n\n    /**\n     * Updates GraphQL schema definition\n     */\n    function updateGraphQLSchema() {\n        const {\n            inputValue,\n        } = apiInputs;\n\n        const promisedValidation = API.validateGraphQLFile(inputValue);\n        promisedValidation\n            .then((response) => {\n                const { isValid, graphQLInfo } = response.obj;\n                if (isValid === true) {\n                    updateGraphQLAPIDefinition(graphQLInfo.graphQLSchema.schemaDefinition);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Error.while.validating.the.imported.graphQLSchema',\n                    defaultMessage: 'Error while validating the imported schema',\n                }));\n            });\n    }\n\n    /**\n     * Updates WSDL definition\n     */\n    function updateWSDL() {\n        const {\n            inputType, inputValue,\n        } = apiInputs;\n        const isFileInput = inputType === 'file';\n        let promisedAPI;\n        if (isFileInput) {\n            promisedAPI = api.updateWSDLByFileOrArchive(api.id, inputValue);\n        } else {\n            promisedAPI = api.updateWSDLByUrl(api.id, inputValue);\n        }\n        promisedAPI\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.ImportDefinition.WSDL.updated.successfully',\n                    defaultMessage: 'WSDL Updated Successfully',\n                }));\n                setOpenAPIDefinitionImport(false);\n                setSchemaDefinition(isFileInput && inputValue.type === 'application/zip');\n            })\n            .catch((err) => {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.ImportDefinition.error.updating.WSDL',\n                    defaultMessage: 'Error while updating WSDL',\n                }));\n            });\n    }\n\n    /**\n     * Handles API definition import\n     */\n    function importDefinition() {\n        if (isGraphQL) {\n            updateGraphQLSchema();\n        } else if (isSOAP) {\n            updateWSDL();\n        // } else if (isWebSocket || isWebSub) {\n        } else if (isAsyncAPI) {\n            updateAsyncAPIDefinition();\n        } else {\n            updateOASDefinition();\n        }\n    }\n    /**\n     *\n     * Set the validity of the API definition imports\n     * @param {*} isValidForm\n     * @param {*} validationState\n     */\n    function handleOnValidate(isFormValid) {\n        inputsDispatcher({\n            action: 'isFormValid',\n            value: isFormValid,\n        });\n    }\n\n    let dialogTitle = (\n        <FormattedMessage\n            id='Apis.Details.APIDefinition.APIDefinition.import.definition.oas'\n            defaultMessage='Import OpenAPI Definition'\n        />\n    );\n    let dialogContent = (\n        <ProvideOpenAPI\n            onValidate={handleOnValidate}\n            apiInputs={apiInputs}\n            inputsDispatcher={inputsDispatcher}\n        />\n    );\n    let btnText = (\n        <FormattedMessage\n            id='Apis.Details.APIDefinition.APIDefinition.import.definition'\n            defaultMessage='Import Definition'\n        />\n    );\n    if (isGraphQL) {\n        dialogTitle = (\n            <FormattedMessage\n                id='Apis.Details.APIDefinition.APIDefinition.import.definition.graphql'\n                defaultMessage='Import GraphQL Schema Definition'\n            />\n        );\n        dialogContent = (\n            <ProvideGraphQL\n                onValidate={handleOnValidate}\n                apiInputs={apiInputs}\n                inputsDispatcher={inputsDispatcher}\n            />\n        );\n    }\n    if (isSOAP) {\n        dialogTitle = (\n            <FormattedMessage\n                id='Apis.Details.APIDefinition.APIDefinition.import.definition.wsdl'\n                defaultMessage='Import WSDL'\n            />\n        );\n        dialogContent = (\n            <ProvideWSDL\n                onValidate={handleOnValidate}\n                apiInputs={apiInputs}\n                inputsDispatcher={inputsDispatcher}\n            />\n        );\n        btnText = (\n            <FormattedMessage\n                id='Apis.Details.APIDefinition.APIDefinition.import.wsdl'\n                defaultMessage='Import WSDL'\n            />\n        );\n    }\n    // if (isWebSocket || isWebSub) {\n    if (isAsyncAPI) {\n        dialogTitle = (\n            <FormattedMessage\n                id='Apis.Details.APIDefinition.APIDefinition.import.definition.asyncApi'\n                defaultMessage='Import AsyncAPI Definition'\n            />\n        );\n        dialogContent = (\n            <ProvideAsyncAPI\n                onValidate={handleOnValidate}\n                apiInputs={apiInputs}\n                inputsDispatcher={inputsDispatcher}\n            />\n        );\n        btnText = (\n            <FormattedMessage\n                id='Apis.Details.APIDefinition.import.asyncAPI'\n                defaultMessage='Import AsyncAPI'\n            />\n        );\n    }\n\n    return (\n        <>\n            {!isAsyncAPI && (\n                <Button\n                    size='small'\n                    className={classes.button}\n                    onClick={handleAPIDefinitionImportOpen}\n                    disabled={isRestricted(['apim:api_create'], api) || api.isRevision}\n                >\n                    <CloudUploadRounded className={classes.buttonIcon} />\n                    {btnText}\n                </Button>\n            )}\n            <Dialog\n                onBackdropClick={isAsyncAPI ? setAsyncAPIDefinitionImport : setOpenAPIDefinitionImport}\n                open={isAsyncAPI ? asyncAPIDefinitionImport : openAPIDefinitionImport}\n            >\n                <DialogTitle>\n                    <Typography className={classes.importDefinitionDialogHeader}>\n                        {dialogTitle}\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    {dialogContent}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleAPIDefinitionImportCancel}>\n                        <FormattedMessage\n                            id='Apis.Details.APIDefinition.APIDefinition.import.definition.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button\n                        onClick={importDefinition}\n                        variant='contained'\n                        color='primary'\n                        disabled={!apiInputs.isFormValid || isImporting || api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.APIDefinition.APIDefinition.import.definition.import'\n                            defaultMessage='Import'\n                        />\n                        {isImporting && <CircularProgress size={20} />}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n\nImportDefinition.propTypes = {\n    setSchemaDefinition: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useContext } from 'react';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport PropTypes from 'prop-types';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Dialog from '@material-ui/core/Dialog';\nimport Typography from '@material-ui/core/Typography';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport ReactDiffViewer from 'react-diff-viewer';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport ServiceCatalog from 'AppData/ServiceCatalog';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport API from 'AppData/api.js';\nimport { FormattedMessage } from 'react-intl';\nimport beautify from 'xml-beautifier';\n\n/**\n * This component hosts the Swagger Editor component.\n * Known Issue: The cursor jumps back to the start of the first line when updating the swagger-ui based on the\n * modification done via the editor.\n * https://github.com/wso2/product-apim/issues/5071\n * */\n/**\n * Renders an Environments list\n * @class Environments\n * @extends {React.Component}\n */\nexport default function DefinitionOutdated(props) {\n    const {\n        api,\n        classes,\n    } = props;\n    const [openImport, setOpenImport] = useState(false);\n    const [showDiff, setShowDiff] = useState(false);\n    const [newDefinition, setNewDefinition] = useState('');\n    const [oldDefinition, setOldDefinition] = useState('');\n    const [isRendering, setIsRendering] = useState(false);\n    const { updateAPI } = useContext(APIContext);\n\n    /**\n     * Re import service definition\n     */\n    function reimportService() {\n        const promisedReimportService = API.reimportService(api.id);\n        promisedReimportService.then(() => {\n            Alert.info(\n                <FormattedMessage\n                    id='Apis.Details.APIDefinition.DefinitionOutdated.import.success'\n                    defaultMessage='Re-imported API definition successfully!'\n                />,\n            );\n            setOpenImport(false);\n        }).catch((error) => {\n            if (error.response) {\n                Alert.error(error.response.body.description);\n            } else {\n                Alert.error(\n                    <FormattedMessage\n                        id='Apis.Details.APIDefinition.DefinitionOutdated.import.error'\n                        defaultMessage='Error while re-importing API definition'\n                    />,\n                );\n            }\n        }).finally(() => {\n            updateAPI();\n        });\n    }\n\n    /**\n     * Show diff between old service definition and new service definition\n     */\n    function showdiff() {\n        setIsRendering(true);\n        const promisedNewServiceDef = ServiceCatalog.searchServiceByKey(api.serviceInfo.key);\n        const promisedOldServiceDef = (api.type === 'SOAP') ? api.getWSDL(api.id) : api.getSwagger(api.id);\n        Promise.all([promisedNewServiceDef, promisedOldServiceDef])\n            .then((response) => {\n                const newServiceDef = response[0];\n                const oldServiceDef = response[1];\n                return ServiceCatalog.getServiceDefinition(newServiceDef.body.list[0].id).then((file) => {\n                    if (newServiceDef.body.list[0].definitionType === 'WSDL1') {\n                        setNewDefinition(beautify(file));\n                        oldServiceDef.data.text().then((text) => {\n                            setOldDefinition(beautify(text));\n                        });\n                    } else {\n                        setNewDefinition(JSON.stringify(file, null, 2));\n                        setOldDefinition(JSON.stringify(oldServiceDef.obj, null, 2));\n                    }\n                }).catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error(\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.DefinitionOutdated.new.api.definition.error'\n                                defaultMessage='Something went wrong while retrieving new API definition.'\n                            />,\n                        );\n                    }\n                    console.error(error);\n                });\n            }).catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                } else {\n                    Alert.error(\n                        <FormattedMessage\n                            id='Apis.Details.APIDefinition.DefinitionOutdated.service.retrieve.error'\n                            defaultMessage='Something went wrong while rendering diff for API Definition'\n                        />,\n                    );\n                }\n                console.error(error);\n            }).finally(() => {\n                setShowDiff(true);\n                setIsRendering(false);\n            });\n    }\n\n    const hideDiff = () => {\n        setShowDiff(false);\n    };\n\n    const handleOpen = () => {\n        setOpenImport(true);\n    };\n\n    const handleClose = () => {\n        setOpenImport(false);\n    };\n\n    return (\n        <>\n            <div>\n                <Button\n                    size='small'\n                    className={classes.button}\n                    onClick={handleOpen}\n                >\n                    <WarningIcon className={classes.buttonWarningColor} />\n                    <FormattedMessage\n                        id='Apis.Details.APIDefinition.DefinitionOutdated.outdated.definition.heading'\n                        defaultMessage='Outdated Definition'\n                    />\n                </Button>\n                <Dialog\n                    open={openImport}\n                    onClose={handleClose}\n                    aria-labelledby='alert-dialog-title'\n                    aria-describedby='alert-dialog-description'\n                    fullWidth\n                    maxWidth='md'\n                >\n                    <DialogTitle id='alert-dialog-title'>\n                        <Typography align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.DefinitionOutdated.outdated.definition'\n                                defaultMessage='Outdated Definition'\n                            />\n                        </Typography>\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id='alert-dialog-description'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.DefinitionOutdated.api.outdated.definition'\n                                defaultMessage='Current API definition is outdated.\n                                You can either re-import the new definition or create a new version of this API.'\n                            />\n                        </DialogContentText>\n                        {showDiff && !isRendering && (\n                            <ReactDiffViewer\n                                oldValue={oldDefinition}\n                                newValue={newDefinition}\n                                splitView\n                                disableWordDiff\n                                leftTitle='Outdated Definition from API'\n                                rightTitle='New Service Definition'\n                            />\n                        )}\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleClose} color='primary'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.DefinitionOutdated.btn.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                        {!showDiff ? (\n                            <Button onClick={showdiff} color='primary'>\n                                {isRendering ? (<CircularProgress size={24} />) : (\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.DefinitionOutdated.btn.show.diff'\n                                        defaultMessage='Show Diff'\n                                    />\n                                )}\n                            </Button>\n                        ) : (\n                            <Button onClick={hideDiff} color='primary'>\n                                {isRendering ? (<CircularProgress size={24} />) : (\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.DefinitionOutdated.btn.hide.diff'\n                                        defaultMessage='Hide Diff'\n                                    />\n                                )}\n                            </Button>\n                        )}\n                        <Button\n                            onClick={reimportService}\n                            color='primary'\n                            autoFocus\n                            variant='contained'\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.DefinitionOutdated.btn.reimport'\n                                defaultMessage='Re-import'\n                            />\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        </>\n    );\n}\n\nDefinitionOutdated.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { isRestricted } from 'AppData/AuthManager';\nimport LifeCycleIcon from '@material-ui/icons/Autorenew';\nimport StoreIcon from '@material-ui/icons/Store';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport CodeIcon from '@material-ui/icons/Code';\nimport PersonPinCircleOutlinedIcon from '@material-ui/icons/PersonPinCircleOutlined';\nimport ResourcesIcon from '@material-ui/icons/VerticalSplit';\nimport { withStyles } from '@material-ui/core/styles';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport {\n    Redirect, Route, Switch, Link, matchPath,\n} from 'react-router-dom';\nimport isEmpty from 'lodash/isEmpty';\nimport Utils from 'AppData/Utils';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport AuthorizedError from 'AppComponents/Base/Errors/AuthorizedError';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\nimport LeftMenuItem from 'AppComponents/Shared/LeftMenuItem';\nimport API from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { Progress } from 'AppComponents/Shared';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport AppContext, { withSettings } from 'AppComponents/Shared/AppContext';\nimport LastUpdatedTime from 'AppComponents/Apis/Details/components/LastUpdatedTime';\nimport Divider from '@material-ui/core/Divider';\nimport { RevisionContextProvider } from 'AppComponents/Shared/RevisionContext';\nimport DevelopSectionMenu from 'AppComponents/Apis/Details/components/leftMenu/DevelopSectionMenu';\nimport { PROPERTIES as UserProperties } from 'AppData/User';\nimport Overview from './NewOverview/Overview';\nimport DesignConfigurations from './Configuration/DesignConfigurations';\nimport RuntimeConfiguration from './Configuration/RuntimeConfiguration';\nimport Topics from './Configuration/Topics';\nimport RuntimeConfigurationWebSocket from './Configuration/RuntimeConfigurationWebSocket';\nimport LifeCycle from './LifeCycle/LifeCycle';\nimport Documents from './Documents';\nimport Operations from './Operations/Operations';\nimport APIOperations from './Resources/APIOperations';\nimport APIProductOperations from './ProductResources/APIProductOperations';\nimport ProductResourcesEdit from './ProductResources/ProductResourcesEdit';\nimport Endpoints from './Endpoints/Endpoints';\nimport Environments from './Environments/Environments';\nimport Subscriptions from './Subscriptions/Subscriptions';\nimport Comments from './Comments/Comments';\nimport Scope from './Scopes';\nimport Security from './Security';\nimport APIDefinition from './APIDefinition/APIDefinition';\nimport WSDL from './APIDefinition/WSDL';\nimport APIDetailsTopMenu from './components/APIDetailsTopMenu';\nimport BusinessInformation from './BusinessInformation/BusinessInformation';\nimport Properties from './Properties/Properties';\nimport Monetization from './Monetization';\nimport Policies from './Policies/Policies';\nimport ExternalStores from './ExternalStores/ExternalStores';\nimport { APIProvider } from './components/ApiContext';\nimport CreateNewVersion from './NewVersion/NewVersion';\nimport TryOutConsole from './TryOut/TryOutConsole';\n\nconst styles = (theme) => ({\n    LeftMenu: {\n        backgroundColor: theme.palette.background.leftMenu,\n        width: theme.custom.leftMenuWidth,\n        minHeight: `calc(100vh - ${64 + theme.custom.footer.height}px)`,\n    },\n    leftLInkMain: {\n        cursor: 'pointer',\n        backgroundColor: theme.palette.background.leftMenuActive,\n        textAlign: 'center',\n        height: theme.custom.apis.topMenu.height,\n    },\n    content: {\n        display: 'flex',\n        flexGrow: 1,\n        flexDirection: 'column',\n        paddingBottom: theme.spacing(3),\n        overflow: 'auto',\n    },\n    contentInside: {\n        width: 'calc(100% - 56px)',\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3),\n        paddingTop: theme.spacing(2),\n    },\n    footeremaillink: {\n        marginLeft: theme.custom.leftMenuWidth, /* 4px */\n    },\n    root: {\n        backgroundColor: theme.palette.background.leftMenu,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n        paddingTop: '0',\n        paddingBottom: '0',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: theme.typography.fontWeightRegular,\n    },\n    expanded: {\n        '&$expanded': {\n            margin: 0,\n            backgroundColor: theme.palette.background.leftMenu,\n            minHeight: 40,\n            paddingBottom: 0,\n            paddingLeft: 0,\n            paddingRight: 0,\n            paddingTop: 0,\n        },\n    },\n    leftLInkText: {\n        color: theme.palette.getContrastText(theme.palette.background.leftMenu),\n        textTransform: theme.custom.leftMenuTextStyle,\n        width: '100%',\n        textAlign: 'left',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontSize: theme.typography.body1.fontSize,\n        fontWeight: 250,\n        whiteSpace: 'nowrap',\n    },\n    expandIconColor: {\n        color: '#ffffff',\n    },\n    headingText: {\n        marginTop: '10px',\n        fontWeight: 800,\n        color: '#ffffff',\n        textAlign: 'left',\n        marginLeft: '8px',\n    },\n    customIcon: {\n        marginTop: (theme.custom.apis.topMenu.height - theme.custom.leftMenuIconMainSize) / 2,\n    },\n});\n\n/**\n * Base component for API specific Details page,\n * What this component do is, Handle all the request coming under `/apis/:api_uuid` path, If the :api_uuid or\n *  the later part of the URL is not valid , This will return a `PageNotFound` component.\n * For valid API request , This component will fetch the API and pass the API response data to below components in `api`\n * prop name.\n * Note: If you want to add new route or new page under APIs detail, add the desired path to `PATHS` constant mapping.\n * This mapping will be used in parent component to directly return `PageNotFound` component, If user making a request\n * to an undefined path segment.\n */\nclass Details extends Component {\n    /**\n     * Return boolean , whether provided URL has a valid Route under the Details page.\n     * Check https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/modules/NavLink.js\n     * code for the usage of public matchPath method\n     * @static\n     * @param {String} pathname location URL of an incoming request\n     * @memberof Details\n     * @returns {Boolean} whether URL matched with defined sub paths or not\n     */\n    static isValidURL(pathname) {\n        for (const [subPathKey, subPath] of Object.entries(Details.subPaths)) {\n            // Skip the BASE path , because it will match for any `/apis/:apiUUID/*` values\n            if ((subPathKey !== 'BASE') && (subPathKey !== 'BASE_PRODUCT')) {\n                const matched = matchPath(pathname, subPath);\n                if (matched) {\n                    return matched;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Creates an instance of Details.\n     * @param {any} props @inheritDoc\n     * @memberof Details\n     */\n    constructor(props) {\n        super(props);\n        const isAPIProduct = null;\n        this.state = {\n            api: null,\n            apiNotFound: false,\n            // updateAPI: this.updateAPI,\n            isAPIProduct,\n            imageUpdate: 0,\n            allRevisions: null,\n            allEnvRevision: null,\n            authorizedAPI: false,\n            openPageSearch: false,\n        };\n        this.setAPI = this.setAPI.bind(this);\n        this.setOpenPageSearch = this.setOpenPageSearch.bind(this);\n        this.setAPIProduct = this.setAPIProduct.bind(this);\n        this.updateAPI = this.updateAPI.bind(this);\n        this.setImageUpdate = this.setImageUpdate.bind(this);\n        this.getRevision = this.getRevision.bind(this);\n        this.getDeployedEnv = this.getDeployedEnv.bind(this);\n        this.handleAccordionState = this.handleAccordionState.bind(this);\n        this.getLeftMenuItemForResourcesByType = this.getLeftMenuItemForResourcesByType.bind(this);\n        this.getLeftMenuItemForDefinitionByType = this.getLeftMenuItemForDefinitionByType.bind(this);\n    }\n\n    /**\n     * @inheritDoc\n     * @memberof Details\n     */\n    componentDidMount() {\n        const {\n            location: { pathname },\n            isAPIProduct,\n        } = this.props;\n        // Load API data iff request page is valid\n        if (Details.isValidURL(pathname)) {\n            if (isAPIProduct) {\n                this.setAPIProduct();\n            } else {\n                this.setAPI();\n            }\n            const api = new API();\n            api.getTenantsByState('active')\n                .then((response) => {\n                    const { list } = response.body;\n                    this.setState({ tenantList: list });\n                }).catch((error) => {\n                    console.error('error when getting tenants ' + error);\n                });\n        }\n    }\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof Details\n     */\n    componentDidUpdate(prevProps) {\n        const { api } = this.state;\n        const { settings: prevSettings } = prevProps;\n\n        const { match, isAPIProduct, settings } = this.props;\n        const { apiUUID } = match.params;\n        const { apiProdUUID } = match.params;\n        if (prevSettings !== settings) {\n            this.props.updateSettings(settings);\n        }\n        if (!api || (api.id === apiUUID || api.id === apiProdUUID)) {\n            return;\n        }\n        if (isAPIProduct) {\n            this.setAPIProduct();\n        } else {\n            this.setAPI();\n        }\n    }\n\n    /**\n     *\n     * This method is a hack to update the image in the toolbar when a new image is uploaded\n     * @memberof Details\n     */\n    setImageUpdate() {\n        this.setState((previousState) => ({\n            imageUpdate: previousState.imageUpdate + 1,\n        }));\n        console.info(this.state.imageUpdate);\n    }\n\n    /**\n     *\n     *\n     * @memberof Details\n     */\n    setAPI(newAPI) {\n        if (newAPI) {\n            this.setState({ api: newAPI });\n        } else {\n            const { match } = this.props;\n            const { apiUUID } = match.params;\n            const promisedApi = API.get(apiUUID);\n            promisedApi\n                .then((api) => {\n                    this.setState({ api });\n                    this.getRevision();\n                    this.getDeployedEnv();\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                    const { status } = error;\n                    if (status === 404) {\n                        this.setState({ apiNotFound: true });\n                    } else if (status === 403) {\n                        this.setState({ authorizedAPI: true });\n                    } else if (status === 401) {\n                        doRedirectToLogin();\n                    }\n                });\n        }\n    }\n\n    /**\n     * Set open state for page search\n     * @param {*} status\n     */\n    setOpenPageSearch(status) {\n        const { openPageSearch } = this.state;\n        if (status !== openPageSearch) {\n            this.setState({ openPageSearch: status });\n        }\n    }\n\n    /**\n     *\n     *\n     * @memberof Details\n     */\n    setAPIProduct() {\n        const { match } = this.props;\n        const { apiProdUUID } = match.params;\n        const { isAPIProduct } = this.props;\n        const promisedApi = APIProduct.get(apiProdUUID);\n        promisedApi\n            .then((api) => {\n                this.setState({ isAPIProduct });\n                this.setState({ api });\n                this.getRevision();\n                this.getDeployedEnv();\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ apiNotFound: true });\n                } else if (status === 403) {\n                    this.setState({ authorizedAPI: true });\n                }\n            });\n    }\n\n    /**\n     *\n     * @returns\n     * @memberof Details\n     */\n    getLeftMenuItemForDefinitionByType(apiType) {\n        const { isAPIProduct } = this.state;\n        const { intl, match } = this.props;\n        const uuid = match.params.apiUUID || match.params.api_uuid || match.params.apiProdUUID;\n        const pathPrefix = '/' + (isAPIProduct ? 'api-products' : 'apis') + '/' + uuid + '/';\n        const apiDefinitionMenuItem = (\n            <LeftMenuItem\n                text={intl.formatMessage({\n                    id: 'Apis.Details.index.api.definition2',\n                    defaultMessage: 'API definition',\n                })}\n                route='api definition'\n                to={pathPrefix + 'api definition'}\n                Icon={<CodeIcon />}\n                id='left-menu-itemAPIdefinition'\n            />\n        );\n\n        switch (apiType) {\n            case 'GRAPHQL':\n                return (\n                    <>\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.schema.definition',\n                                defaultMessage: 'Schema Definition',\n                            })}\n                            route='schema definition'\n                            to={pathPrefix + 'schema definition'}\n                            Icon={<CodeIcon />}\n                        />\n                    </>\n                );\n            case 'WS':\n            case 'WEBSUB':\n            case 'SSE':\n            case 'ASYNC':\n                return (\n                    <>\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.asyncApi.definition',\n                                defaultMessage: 'AsyncAPI Definition',\n                            })}\n                            route='asyncApi definition'\n                            to={pathPrefix + 'asyncApi definition'}\n                            Icon={<CodeIcon />}\n                        />\n                    </>\n                );\n            case 'SOAP':\n                return (\n                    <>\n                        {apiDefinitionMenuItem}\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.wsdl.definition',\n                                defaultMessage: 'WSDL Definition',\n                            })}\n                            route='wsdl'\n                            to={pathPrefix + 'wsdl'}\n                            Icon={<CodeIcon />}\n                        />\n                    </>\n                );\n            default:\n                return (\n                    <>\n                        {apiDefinitionMenuItem}\n                    </>\n                );\n        }\n    }\n\n    getLeftMenuItemForResourcesByType(apiType) {\n        const { isAPIProduct } = this.state;\n        const { intl, match } = this.props;\n        const uuid = match.params.apiUUID || match.params.api_uuid || match.params.apiProdUUID;\n        const pathPrefix = '/' + (isAPIProduct ? 'api-products' : 'apis') + '/' + uuid + '/';\n\n        switch (apiType) {\n            case 'GRAPHQL':\n                return (\n                    <>\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.operations',\n                                defaultMessage: 'operations',\n                            })}\n                            to={pathPrefix + 'operations'}\n                            Icon={<ResourcesIcon />}\n                        />\n                    </>\n                );\n            case 'WS':\n            case 'WEBSUB':\n            case 'SSE':\n            case 'ASYNC':\n                return (\n                    <>\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.topics',\n                                defaultMessage: 'topics',\n                            })}\n                            to={pathPrefix + 'topics'}\n                            Icon={<ResourcesIcon />}\n                        />\n                    </>\n                );\n            default:\n                return (\n                    <>\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.resources',\n                                defaultMessage: 'resources',\n                            })}\n                            to={pathPrefix + 'resources'}\n                            Icon={<ResourcesIcon />}\n                            id='left-menu-itemresources'\n                        />\n                    </>\n                );\n        }\n    }\n\n    /**\n     * Get Revisions\n     */\n    getRevision() {\n        const { api } = this.state;\n        const restApi = new API();\n        const restApiProduct = new APIProduct();\n        let isAPIProduct = false;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            isAPIProduct = true;\n        }\n\n        let promisedUpdate;\n        let apiId = null;\n        if (!isAPIProduct) {\n            apiId = api.isRevision ? api.revisionedApiId : api.id;\n            promisedUpdate = restApi.getRevisions(apiId);\n        } else if (isAPIProduct) {\n            apiId = api.isRevision ? api.revisionedApiProductId : api.id;\n            promisedUpdate = restApiProduct.getProductRevisions(apiId);\n        }\n        return promisedUpdate\n            .then((result) => {\n                this.setState({ allRevisions: result.body.list });\n            })\n            .catch(() => {\n                Alert.error('Something went wrong while getting the revisions!');\n            });\n    }\n\n    /**\n     * Get Depolyed environment\n     */\n    getDeployedEnv() {\n        const { api } = this.state;\n        const restApi = new API();\n        const restApiProduct = new APIProduct();\n        let isAPIProduct = false;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            isAPIProduct = true;\n        }\n\n        let promisedUpdate;\n        if (!isAPIProduct) {\n            promisedUpdate = restApi.getRevisionsWithEnv(api.isRevision ? api.revisionedApiId : api.id);\n        } else if (isAPIProduct) {\n            promisedUpdate = restApiProduct.getProductRevisionsWithEnv(api.isRevision\n                ? api.revisionedApiProductId : api.id);\n        }\n        return promisedUpdate\n            .then((result) => {\n                this.setState({ allEnvRevision: result.body.list });\n            })\n            .catch(() => {\n                Alert.error('Something went wrong while getting the revisions!');\n            });\n    }\n\n    /**\n     * update ls\n     * @param {String} name event triggered\n     * @param {Boolean} isExpanded state\n     */\n    handleAccordionState(name, isExpanded) {\n        const { user } = this.context;\n        this.setState({ [name]: isExpanded });\n        if (name === 'portalConfigsExpanded') {\n            user.setProperty(UserProperties.PORTAL_CONFIG_OPEN, isExpanded);\n        } else {\n            user.setProperty(UserProperties.API_CONFIG_OPEN, isExpanded);\n        }\n    }\n\n    /**\n     * This method is similar to ReactJS `setState` method, In this `updateAPI()` method, we accept partially updated\n     * API object or comple API object. When updating , the provided updatedAPI object will be merged with the existing\n     * API object in the state and use it as the payload in the /apis PUT operation.\n     *\n     * Partially updated API object means: {description: \"Here is my new description..\"} kind of object. It should have\n     * a key in API object and value contains the updated value of that property\n     * @param {Object} [_updatedProperties={}] Partially updated API object or complete API object\n     * (even an instance of API class is accepted here)\n     * @param {Boolean} isAPIProduct Whether the update operation should execute on an API or API Product\n     * @returns {Promise} promise object that resolve to update (/apis PUT operation) response\n     */\n    updateAPI(_updatedProperties = {}) {\n        const { api } = this.state;\n        let isAPIProduct = false;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            isAPIProduct = true;\n        }\n\n        const updatedProperties = _updatedProperties instanceof API ? _updatedProperties.toJson() : _updatedProperties;\n        let promisedUpdate;\n        // TODO: Ideally, The state should hold the corresponding API object\n        // which we could call it's `update` method safely ~tmkb\n        if (!isEmpty(updatedProperties)) {\n            // newApi object has to be provided as the updatedProperties. Then api will be updated.\n            promisedUpdate = api.update(updatedProperties);\n        } else if (!isAPIProduct) {\n            // Just like calling noArg `setState()` will just trigger a re-render without modifying the state,\n            // Calling `updateAPI()` without args wil return the API without any update.\n            // Just sync-up the api state with backend\n            promisedUpdate = API.get(api.id);\n        } else if (isAPIProduct) {\n            promisedUpdate = APIProduct.get(api.id);\n        }\n        return promisedUpdate\n            .then((updatedAPI) => {\n                if (isAPIProduct) {\n                    Alert.info(`${updatedAPI.name} API Product updated successfully`);\n                    this.setState({ api: updatedAPI });\n                    return updatedAPI;\n                } else {\n                    Alert.info(`${updatedAPI.name} API updated successfully`);\n                    this.setState({ api: updatedAPI });\n                    return updatedAPI;\n                }\n            })\n            .catch((error) => {\n                // TODO: Should log and handle the error case by the original callee ~tmkb\n                console.error(error);\n                Alert.error(`Something went wrong while updating the ${api.name} API!!`);\n                // Kinda force render,Resting API object to old one\n                this.setState({ api });\n                throw error;\n            });\n    }\n\n    /**\n     * Renders Grid container layout with NavBar place static in LHS, Components which coming as children for\n     * Details page\n     * should wrap it's content with <Grid item > element\n     * @returns {Component} Render API Details page\n     */\n    render() {\n        const {\n            api, apiNotFound, isAPIProduct, imageUpdate, tenantList, allRevisions, allEnvRevision, openPageSearch,\n            authorizedAPI,\n        } = this.state;\n        const {\n            classes,\n            theme,\n            match,\n            intl,\n            settings,\n            isSettingsLoading,\n            location: pageLocation,\n            location: { pathname }, // nested destructuring\n        } = this.props;\n\n        // pageLocation renaming is to prevent es-lint errors saying can't use global name location\n        if (!Details.isValidURL(pathname)) {\n            return <ResourceNotFound location={pageLocation} />;\n        }\n        const uuid = match.params.apiUUID || match.params.api_uuid || match.params.apiProdUUID;\n        const pathPrefix = '/' + (isAPIProduct ? 'api-products' : 'apis') + '/' + uuid + '/';\n        const redirectUrl = pathPrefix;\n        const isAsyncAPI = api && (api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE'\n            || api.type === 'ASYNC');\n        if (apiNotFound) {\n            const { apiUUID } = match.params;\n            const resourceNotFoundMessageText = defineMessages({\n                titleMessage: {\n                    id: 'Apis.Details.index.api.not.found.title',\n                    defaultMessage: 'API is not found in the {environmentLabel} Environment',\n                },\n                bodyMessage: {\n                    id: 'Apis.Details.index.api.not.found.body',\n                    defaultMessage: 'Cannot find the API with the given id',\n                },\n            });\n            const resourceNotFountMessage = {\n                title: intl.formatMessage(resourceNotFoundMessageText.titleMessage, {\n                    environmentLabel: `${Utils.getCurrentEnvironment().label}`,\n                }),\n                body: intl.formatMessage(resourceNotFoundMessageText.bodyMessage, { apiUUID: `${apiUUID}` }),\n            };\n            return <ResourceNotFound message={resourceNotFountMessage} />;\n        }\n        if (authorizedAPI) {\n            return (\n                <>\n                    <AuthorizedError />\n                </>\n            );\n        }\n\n        if (!api) {\n            return <Progress per={70} message='Loading API data ...' />;\n        } else if (isSettingsLoading) {\n            return <Progress per={80} message='Loading portal settings ...' />;\n        }\n        const { leftMenuIconMainSize } = theme.custom;\n        return (\n            <Box display='flex' alignItems='stretch' flexDirection='row'>\n                <APIProvider\n                    value={{\n                        api,\n                        updateAPI: this.updateAPI,\n                        isAPIProduct,\n                        setAPI: this.setAPI,\n                        setImageUpdate: this.setImageUpdate,\n                        imageUpdate,\n                        tenantList,\n                    }}\n                >\n                    <Box className={classes.LeftMenu}>\n                        <nav name='secondaryNavigation' aria-label='secondary navigation'>\n                            <Link to={'/' + (isAPIProduct ? 'api-products' : 'apis') + '/'} aria-label='ALL APIs'>\n                                <div className={classes.leftLInkMain}>\n                                    <CustomIcon\n                                        className={classes.customIcon}\n                                        width={leftMenuIconMainSize}\n                                        height={leftMenuIconMainSize}\n                                        icon={isAPIProduct ? 'api-product' : 'apis'}\n                                    />\n                                </div>\n                            </Link>\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.overview',\n                                    defaultMessage: 'overview',\n                                })}\n                                to={pathPrefix + 'overview'}\n                                Icon={<DashboardIcon />}\n                                head='valueOnly'\n                            />\n                            <Typography className={classes.headingText}>\n                                Develop\n                            </Typography>\n                            <DevelopSectionMenu\n                                pathPrefix={pathPrefix}\n                                isAPIProduct={isAPIProduct}\n                                api={api}\n                                getLeftMenuItemForResourcesByType={this.getLeftMenuItemForResourcesByType}\n                                getLeftMenuItemForDefinitionByType={this.getLeftMenuItemForDefinitionByType}\n                            />\n                            <Divider />\n                            {!isAPIProduct && (\n                                <>\n                                    <Typography className={classes.headingText}>Deploy</Typography>\n                                    <LeftMenuItem\n                                        text={intl.formatMessage({\n                                            id: 'Apis.Details.index.environments',\n                                            defaultMessage: 'Deployments',\n                                        })}\n                                        route='deployments'\n                                        to={pathPrefix + 'deployments'}\n                                        Icon={<PersonPinCircleOutlinedIcon />}\n                                        id='left-menu-itemdeployments'\n                                    />\n                                </>\n                            )}\n                            {isAPIProduct && (\n                                <>\n                                    <Typography className={classes.headingText}>Deploy</Typography>\n                                    <LeftMenuItem\n                                        text={intl.formatMessage({\n                                            id: 'Apis.Details.index.environments',\n                                            defaultMessage: 'Deployments',\n                                        })}\n                                        route='deployments'\n                                        to={pathPrefix + 'deployments'}\n                                        Icon={<PersonPinCircleOutlinedIcon />}\n                                    />\n                                </>\n                            )}\n                            {(isAPIProduct || (!isAPIProduct && !api.isWebSocket() && !api.isGraphql()\n                                && !isAsyncAPI)) && (\n                                <div>\n                                    <Divider />\n                                    <Typography className={classes.headingText}>Test</Typography>\n                                    <LeftMenuItem\n                                        route='test-console'\n                                        text={intl.formatMessage({\n                                            id: 'Apis.Details.index.Tryout.menu.name',\n                                            defaultMessage: 'Try Out',\n                                        })}\n                                        to={pathPrefix + 'test-console'}\n                                        iconText='test'\n                                    />\n                                </div>\n                            )}\n                            {!isRestricted(['apim:api_publish'], api) && (\n                                <div>\n                                    <Divider />\n                                    <Typography className={classes.headingText}>Publish</Typography>\n                                    <LeftMenuItem\n                                        text={intl.formatMessage({\n                                            id: 'Apis.Details.index.lifecycle',\n                                            defaultMessage: 'lifecycle',\n                                        })}\n                                        to={pathPrefix + 'lifecycle'}\n                                        Icon={<LifeCycleIcon />}\n                                        id='left-menu-itemlifecycle'\n                                    />\n                                </div>\n                            )}\n                            {!isAPIProduct && settings && settings.externalStoresEnabled && (\n                                <>\n                                    <Divider />\n                                    <LeftMenuItem\n                                        text={intl.formatMessage({\n                                            id: 'Apis.Details.index.external-stores',\n                                            defaultMessage: 'external dev portals',\n                                        })}\n                                        to={pathPrefix + 'external-devportals'}\n                                        Icon={<StoreIcon />}\n                                    />\n                                </>\n                            )}\n                            <Divider />\n                        </nav>\n                    </Box>\n                    <Box className={classes.content}>\n                        <RevisionContextProvider\n                            value={{\n                                allRevisions,\n                                getRevision: this.getRevision,\n                                allEnvRevision,\n                                getDeployedEnv: this.getDeployedEnv,\n                            }}\n                        >\n                            <APIDetailsTopMenu\n                                setOpenPageSearch={this.setOpenPageSearch}\n                                openPageSearch={openPageSearch}\n                                api={api}\n                                isAPIProduct={isAPIProduct}\n                                imageUpdate={imageUpdate}\n                            />\n                            <div className={classes.contentInside}>\n                                <LastUpdatedTime lastUpdatedTime={api.lastUpdatedTime} />\n                                <Switch>\n                                    <Redirect exact from={Details.subPaths.BASE} to={redirectUrl} />\n                                    <Route\n                                        path={Details.subPaths.OVERVIEW_PRODUCT}\n                                        key={Details.subPaths.OVERVIEW_PRODUCT}\n                                        component={() => (\n                                            <Overview\n                                                setOpenPageSearch={this.setOpenPageSearch}\n                                                api={api}\n                                            />\n                                        )}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.OVERVIEW}\n                                        component={() => (\n                                            <Overview\n                                                setOpenPageSearch={this.setOpenPageSearch}\n                                                api={api}\n                                            />\n                                        )}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.API_DEFINITION}\n                                        component={() => <APIDefinition api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.WSDL}\n                                        component={() => <WSDL api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.API_DEFINITION_PRODUCT}\n                                        component={() => <APIDefinition api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.SCHEMA_DEFINITION}\n                                        component={() => <APIDefinition api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.ASYNCAPI_DEFINITION}\n                                        component={() => <APIDefinition api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.LIFE_CYCLE}\n                                        component={() => <LifeCycle api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.LIFE_CYCLE_PRODUCT}\n                                        component={() => <LifeCycle api={api} isAPIProduct={isAPIProduct} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.CONFIGURATION}\n                                        component={() => <DesignConfigurations api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.RUNTIME_CONFIGURATION}\n                                        component={() => <RuntimeConfiguration api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.RUNTIME_CONFIGURATION_WEBSOCKET}\n                                        component={() => <RuntimeConfigurationWebSocket api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.TOPICS}\n                                        component={() => <Topics api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.CONFIGURATION_PRODUCT}\n                                        component={() => <DesignConfigurations api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.RUNTIME_CONFIGURATION_PRODUCT}\n                                        component={() => <RuntimeConfiguration api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.ENDPOINTS}\n                                        component={() => <Endpoints api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.ENVIRONMENTS}\n                                        component={() => <Environments api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.ENVIRONMENTS_PRODUCT}\n                                        component={() => <Environments api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.OPERATIONS}\n                                        component={() => <Operations api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route\n                                        exact\n                                        path={Details.subPaths.RESOURCES_PRODUCT}\n                                        component={APIProductOperations}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.RESOURCES_PRODUCT_EDIT}\n                                        component={ProductResourcesEdit}\n                                    />\n\n                                    <Route\n                                        path={Details.subPaths.RESOURCES}\n                                        key={Details.subPaths.RESOURCES}\n                                        component={APIOperations}\n                                    />\n\n                                    <Route path={Details.subPaths.SCOPES} component={() => <Scope api={api} />} />\n                                    <Route\n                                        path={Details.subPaths.DOCUMENTS}\n                                        component={() => <Documents api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.DOCUMENTS_PRODUCT}\n                                        component={() => <Documents api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.SUBSCRIPTIONS}\n                                        component={() => <Subscriptions api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.SUBSCRIPTIONS_PRODUCT}\n                                        component={() => <Subscriptions api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route path={Details.subPaths.SECURITY} component={() => <Security api={api} />} />\n                                    <Route path={Details.subPaths.COMMENTS} component={() => <Comments api={api} />} />\n                                    <Route\n                                        path={Details.subPaths.BUSINESS_INFO}\n                                        component={() => <BusinessInformation api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.BUSINESS_INFO_PRODUCT}\n                                        component={() => <BusinessInformation api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.PROPERTIES}\n                                        component={() => <Properties api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.PROPERTIES_PRODUCT}\n                                        component={() => <Properties api={api} />}\n                                    />\n                                    <Route path={Details.subPaths.NEW_VERSION} component={() => <CreateNewVersion />} />\n                                    <Route path={Details.subPaths.SUBSCRIPTIONS} component={() => <Subscriptions />} />\n                                    <Route\n                                        path={Details.subPaths.MONETIZATION}\n                                        component={() => <Monetization api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.MONETIZATION_PRODUCT}\n                                        component={() => <Monetization api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.TRYOUT}\n                                        component={() => <TryOutConsole apiObj={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.TRYOUT_PRODUCT}\n                                        component={() => <TryOutConsole apiObj={api} />}\n                                    />\n                                    <Route path={Details.subPaths.EXTERNAL_STORES} component={ExternalStores} />\n                                    <Route\n                                        path={Details.subPaths.COMMENTS}\n                                        component={() => <Comments apiObj={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.POLICIES}\n                                        component={() => <Policies api={api} />}\n                                    />\n                                </Switch>\n                            </div>\n                        </RevisionContextProvider>\n                    </Box>\n                </APIProvider>\n            </Box>\n        );\n    }\n}\n\nDetails.contextType = AppContext;\n// Add your path here and refer it in above <Route /> component,\n// Paths that are not defined here will be returned with Not Found error\n// key name doesn't matter here, Use an appropriate name as the key\nDetails.subPaths = {\n    BASE: '/apis/:api_uuid',\n    BASE_PRODUCT: '/api-products/:apiprod_uuid',\n    OVERVIEW: '/apis/:api_uuid/overview',\n    OVERVIEW_PRODUCT: '/api-products/:apiprod_uuid/overview',\n    API_DEFINITION: '/apis/:api_uuid/api definition',\n    WSDL: '/apis/:api_uuid/wsdl',\n    API_DEFINITION_PRODUCT: '/api-products/:apiprod_uuid/api definition',\n    SCHEMA_DEFINITION: '/apis/:api_uuid/schema definition',\n    LIFE_CYCLE: '/apis/:api_uuid/lifecycle',\n    LIFE_CYCLE_PRODUCT: '/api-products/:apiprod_uuid/lifecycle',\n    CONFIGURATION: '/apis/:api_uuid/configuration',\n    RUNTIME_CONFIGURATION: '/apis/:api_uuid/runtime-configuration',\n    CONFIGURATION_PRODUCT: '/api-products/:apiprod_uuid/configuration',\n    RUNTIME_CONFIGURATION_PRODUCT: '/api-products/:apiprod_uuid/runtime-configuration',\n    RUNTIME_CONFIGURATION_WEBSOCKET: '/apis/:api_uuid/runtime-configuration-websocket',\n    ENDPOINTS: '/apis/:api_uuid/endpoints',\n    ENVIRONMENTS: '/apis/:api_uuid/deployments',\n    ENVIRONMENTS_PRODUCT: '/api-products/:apiprod_uuid/deployments',\n    OPERATIONS: '/apis/:api_uuid/operations',\n    RESOURCES: '/apis/:api_uuid/resources',\n    RESOURCES_PRODUCT: '/api-products/:apiprod_uuid/resources',\n    RESOURCES_PRODUCT_EDIT: '/api-products/:apiprod_uuid/resources/edit',\n    SCOPES: '/apis/:api_uuid/scopes',\n    DOCUMENTS: '/apis/:api_uuid/documents',\n    DOCUMENTS_PRODUCT: '/api-products/:apiprod_uuid/documents',\n    SUBSCRIPTIONS_PRODUCT: '/api-products/:apiprod_uuid/subscriptions',\n    SUBSCRIPTIONS: '/apis/:api_uuid/subscriptions',\n    SECURITY: '/apis/:api_uuid/security',\n    COMMENTS: '/apis/:api_uuid/comments',\n    BUSINESS_INFO: '/apis/:api_uuid/business info',\n    BUSINESS_INFO_PRODUCT: '/api-products/:apiprod_uuid/business info',\n    PROPERTIES: '/apis/:api_uuid/properties',\n    PROPERTIES_PRODUCT: '/api-products/:apiprod_uuid/properties',\n    NEW_VERSION: '/apis/:api_uuid/new_version',\n    MONETIZATION: '/apis/:api_uuid/monetization',\n    MONETIZATION_PRODUCT: '/api-products/:apiprod_uuid/monetization',\n    EXTERNAL_STORES: '/apis/:api_uuid/external-devportals',\n    TRYOUT: '/apis/:api_uuid/test-console',\n    TRYOUT_PRODUCT: '/api-products/:apiprod_uuid/test-console',\n    QUERYANALYSIS: '/apis/:api_uuid/queryanalysis',\n    TOPICS: '/apis/:api_uuid/topics',\n    ASYNCAPI_DEFINITION: '/apis/:api_uuid/asyncApi definition',\n    POLICIES: '/apis/:api_uuid/policies',\n};\n\n// To make sure that paths will not change by outsiders, Basically an enum\nObject.freeze(Details.paths);\n\nDetails.propTypes = {\n    classes: PropTypes.shape({\n        LeftMenu: PropTypes.string,\n        content: PropTypes.string,\n        leftLInkMain: PropTypes.string,\n        contentInside: PropTypes.string,\n        footeremaillink: PropTypes.string,\n    }).isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({}),\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.shape({}),\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    theme: PropTypes.shape({\n        custom: PropTypes.shape({\n            leftMenuIconMainSize: PropTypes.number,\n        }),\n    }).isRequired,\n    isAPIProduct: PropTypes.bool.isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default withSettings(injectIntl(withStyles(styles, { withTheme: true })(Details)));\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport Image404 from './Custom404Image';\n\nconst AuthorizedError = (props) => {\n    const { response } = props;\n    const { message = {} } = props;\n\n    return (\n        <>\n            <Container maxWidth='md'>\n                <Box padding={4}>\n                    <Paper elevation={0}>\n                        <Box padding={4}>\n                            <Grid container alignItems='center' justify='center' style={{ height: '100%' }}>\n                                <Grid item xs={12} md={6}>\n                                    <Typography variant='h5' gutterBottom>\n                                        {message.title}\n                                    </Typography>\n                                    <Typography variant='subtitle1' gutterBottom>\n                                        {message.body}\n                                        <span style={{ color: 'green' }}>\n                                            {' '}\n                                            {response ? response.statusText : ''}\n                                            {' '}\n                                        </span>\n                                    </Typography>\n                                    {message.more}\n                                    <Box py={5}>\n                                        <Box pb={2}>\n                                            <Typography variant='subtitle1'>\n                                                <FormattedMessage\n                                                    id='Base.Errors.ResourceNotFound.more.links'\n                                                    defaultMessage='You may check the links below'\n                                                />\n                                            </Typography>\n                                        </Box>\n                                        <Link to='/apis/' style={{ marginRight: 8 }}>\n                                            <Button variant='contained' color='primary'>\n                                                <FormattedMessage\n                                                    id='Base.Errors.ResourceNotFound.api.list'\n                                                    defaultMessage='API List'\n                                                />\n                                            </Button>\n                                        </Link>\n                                        <Link to='/api-products/'>\n                                            <Button variant='contained' color='primary'>\n                                                <FormattedMessage\n                                                    id='Base.Errors.ResourceNotFound.api.product.list'\n                                                    defaultMessage='API Product List'\n                                                />\n                                            </Button>\n                                        </Link>\n                                    </Box>\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    {/* Image */}\n                                    <Image404 style={{ fontSize: 400, fill: '#ccc' }} />\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Paper>\n                </Box>\n            </Container>\n        </>\n    );\n};\n\nAuthorizedError.defaultProps = {\n    message: {\n        title: <FormattedMessage\n            id='Base.Errors.AuthorizedError.default_tittle'\n            defaultMessage='Authorized Error'\n        />,\n        body: <FormattedMessage\n            id='Base.Errors.AuthorizedError.default_body'\n            defaultMessage='User is not authorized to access the API'\n        />,\n    },\n};\n\nAuthorizedError.propTypes = {\n    response: PropTypes.shape({\n        statusText: PropTypes.string,\n    }).isRequired,\n    message: PropTypes.shape({\n        title: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.instanceOf(FormattedMessage),\n        ]),\n        body: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.instanceOf(FormattedMessage),\n        ]),\n    }),\n};\n\nexport default AuthorizedError;\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { Typography, Tooltip } from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * API/Product last updated time.\n * @param {Parameter} props last updated time.\n * @returns {Property} The sum of the two numbers.\n */\nfunction LastUpdatedTime(props) {\n    const { lastUpdatedTime } = props;\n    return (\n        <div style={{ float: 'right' }}>\n            <Tooltip\n                title={moment(lastUpdatedTime).calendar()}\n                interactive\n            >\n                <Typography variant='caption' display='block'>\n                    <FormattedMessage\n                        id='Apis.Details.components.APIDetailsTopMenu.last.updated.time'\n                        defaultMessage='Last updated:'\n                    />\n                    {' '}\n                    {moment(lastUpdatedTime).fromNow()}\n                </Typography>\n            </Tooltip>\n        </div>\n    );\n}\n\nLastUpdatedTime.propTypes = {\n    lastUpdatedTime: PropTypes.shape({ content: PropTypes.string }).isRequired,\n};\n\nexport default (LastUpdatedTime);\n","var map = {\n\t\"./af\": 1593,\n\t\"./af.js\": 1593,\n\t\"./ar\": 1594,\n\t\"./ar-dz\": 1595,\n\t\"./ar-dz.js\": 1595,\n\t\"./ar-kw\": 1596,\n\t\"./ar-kw.js\": 1596,\n\t\"./ar-ly\": 1597,\n\t\"./ar-ly.js\": 1597,\n\t\"./ar-ma\": 1598,\n\t\"./ar-ma.js\": 1598,\n\t\"./ar-sa\": 1599,\n\t\"./ar-sa.js\": 1599,\n\t\"./ar-tn\": 1600,\n\t\"./ar-tn.js\": 1600,\n\t\"./ar.js\": 1594,\n\t\"./az\": 1601,\n\t\"./az.js\": 1601,\n\t\"./be\": 1602,\n\t\"./be.js\": 1602,\n\t\"./bg\": 1603,\n\t\"./bg.js\": 1603,\n\t\"./bm\": 1604,\n\t\"./bm.js\": 1604,\n\t\"./bn\": 1605,\n\t\"./bn-bd\": 1606,\n\t\"./bn-bd.js\": 1606,\n\t\"./bn.js\": 1605,\n\t\"./bo\": 1607,\n\t\"./bo.js\": 1607,\n\t\"./br\": 1608,\n\t\"./br.js\": 1608,\n\t\"./bs\": 1609,\n\t\"./bs.js\": 1609,\n\t\"./ca\": 1610,\n\t\"./ca.js\": 1610,\n\t\"./cs\": 1611,\n\t\"./cs.js\": 1611,\n\t\"./cv\": 1612,\n\t\"./cv.js\": 1612,\n\t\"./cy\": 1613,\n\t\"./cy.js\": 1613,\n\t\"./da\": 1614,\n\t\"./da.js\": 1614,\n\t\"./de\": 1615,\n\t\"./de-at\": 1616,\n\t\"./de-at.js\": 1616,\n\t\"./de-ch\": 1617,\n\t\"./de-ch.js\": 1617,\n\t\"./de.js\": 1615,\n\t\"./dv\": 1618,\n\t\"./dv.js\": 1618,\n\t\"./el\": 1619,\n\t\"./el.js\": 1619,\n\t\"./en-au\": 1620,\n\t\"./en-au.js\": 1620,\n\t\"./en-ca\": 1621,\n\t\"./en-ca.js\": 1621,\n\t\"./en-gb\": 1622,\n\t\"./en-gb.js\": 1622,\n\t\"./en-ie\": 1623,\n\t\"./en-ie.js\": 1623,\n\t\"./en-il\": 1624,\n\t\"./en-il.js\": 1624,\n\t\"./en-in\": 1625,\n\t\"./en-in.js\": 1625,\n\t\"./en-nz\": 1626,\n\t\"./en-nz.js\": 1626,\n\t\"./en-sg\": 1627,\n\t\"./en-sg.js\": 1627,\n\t\"./eo\": 1628,\n\t\"./eo.js\": 1628,\n\t\"./es\": 1629,\n\t\"./es-do\": 1630,\n\t\"./es-do.js\": 1630,\n\t\"./es-mx\": 1631,\n\t\"./es-mx.js\": 1631,\n\t\"./es-us\": 1632,\n\t\"./es-us.js\": 1632,\n\t\"./es.js\": 1629,\n\t\"./et\": 1633,\n\t\"./et.js\": 1633,\n\t\"./eu\": 1634,\n\t\"./eu.js\": 1634,\n\t\"./fa\": 1635,\n\t\"./fa.js\": 1635,\n\t\"./fi\": 1636,\n\t\"./fi.js\": 1636,\n\t\"./fil\": 1637,\n\t\"./fil.js\": 1637,\n\t\"./fo\": 1638,\n\t\"./fo.js\": 1638,\n\t\"./fr\": 1639,\n\t\"./fr-ca\": 1640,\n\t\"./fr-ca.js\": 1640,\n\t\"./fr-ch\": 1641,\n\t\"./fr-ch.js\": 1641,\n\t\"./fr.js\": 1639,\n\t\"./fy\": 1642,\n\t\"./fy.js\": 1642,\n\t\"./ga\": 1643,\n\t\"./ga.js\": 1643,\n\t\"./gd\": 1644,\n\t\"./gd.js\": 1644,\n\t\"./gl\": 1645,\n\t\"./gl.js\": 1645,\n\t\"./gom-deva\": 1646,\n\t\"./gom-deva.js\": 1646,\n\t\"./gom-latn\": 1647,\n\t\"./gom-latn.js\": 1647,\n\t\"./gu\": 1648,\n\t\"./gu.js\": 1648,\n\t\"./he\": 1649,\n\t\"./he.js\": 1649,\n\t\"./hi\": 1650,\n\t\"./hi.js\": 1650,\n\t\"./hr\": 1651,\n\t\"./hr.js\": 1651,\n\t\"./hu\": 1652,\n\t\"./hu.js\": 1652,\n\t\"./hy-am\": 1653,\n\t\"./hy-am.js\": 1653,\n\t\"./id\": 1654,\n\t\"./id.js\": 1654,\n\t\"./is\": 1655,\n\t\"./is.js\": 1655,\n\t\"./it\": 1656,\n\t\"./it-ch\": 1657,\n\t\"./it-ch.js\": 1657,\n\t\"./it.js\": 1656,\n\t\"./ja\": 1658,\n\t\"./ja.js\": 1658,\n\t\"./jv\": 1659,\n\t\"./jv.js\": 1659,\n\t\"./ka\": 1660,\n\t\"./ka.js\": 1660,\n\t\"./kk\": 1661,\n\t\"./kk.js\": 1661,\n\t\"./km\": 1662,\n\t\"./km.js\": 1662,\n\t\"./kn\": 1663,\n\t\"./kn.js\": 1663,\n\t\"./ko\": 1664,\n\t\"./ko.js\": 1664,\n\t\"./ku\": 1665,\n\t\"./ku.js\": 1665,\n\t\"./ky\": 1666,\n\t\"./ky.js\": 1666,\n\t\"./lb\": 1667,\n\t\"./lb.js\": 1667,\n\t\"./lo\": 1668,\n\t\"./lo.js\": 1668,\n\t\"./lt\": 1669,\n\t\"./lt.js\": 1669,\n\t\"./lv\": 1670,\n\t\"./lv.js\": 1670,\n\t\"./me\": 1671,\n\t\"./me.js\": 1671,\n\t\"./mi\": 1672,\n\t\"./mi.js\": 1672,\n\t\"./mk\": 1673,\n\t\"./mk.js\": 1673,\n\t\"./ml\": 1674,\n\t\"./ml.js\": 1674,\n\t\"./mn\": 1675,\n\t\"./mn.js\": 1675,\n\t\"./mr\": 1676,\n\t\"./mr.js\": 1676,\n\t\"./ms\": 1677,\n\t\"./ms-my\": 1678,\n\t\"./ms-my.js\": 1678,\n\t\"./ms.js\": 1677,\n\t\"./mt\": 1679,\n\t\"./mt.js\": 1679,\n\t\"./my\": 1680,\n\t\"./my.js\": 1680,\n\t\"./nb\": 1681,\n\t\"./nb.js\": 1681,\n\t\"./ne\": 1682,\n\t\"./ne.js\": 1682,\n\t\"./nl\": 1683,\n\t\"./nl-be\": 1684,\n\t\"./nl-be.js\": 1684,\n\t\"./nl.js\": 1683,\n\t\"./nn\": 1685,\n\t\"./nn.js\": 1685,\n\t\"./oc-lnc\": 1686,\n\t\"./oc-lnc.js\": 1686,\n\t\"./pa-in\": 1687,\n\t\"./pa-in.js\": 1687,\n\t\"./pl\": 1688,\n\t\"./pl.js\": 1688,\n\t\"./pt\": 1689,\n\t\"./pt-br\": 1690,\n\t\"./pt-br.js\": 1690,\n\t\"./pt.js\": 1689,\n\t\"./ro\": 1691,\n\t\"./ro.js\": 1691,\n\t\"./ru\": 1692,\n\t\"./ru.js\": 1692,\n\t\"./sd\": 1693,\n\t\"./sd.js\": 1693,\n\t\"./se\": 1694,\n\t\"./se.js\": 1694,\n\t\"./si\": 1695,\n\t\"./si.js\": 1695,\n\t\"./sk\": 1696,\n\t\"./sk.js\": 1696,\n\t\"./sl\": 1697,\n\t\"./sl.js\": 1697,\n\t\"./sq\": 1698,\n\t\"./sq.js\": 1698,\n\t\"./sr\": 1699,\n\t\"./sr-cyrl\": 1700,\n\t\"./sr-cyrl.js\": 1700,\n\t\"./sr.js\": 1699,\n\t\"./ss\": 1701,\n\t\"./ss.js\": 1701,\n\t\"./sv\": 1702,\n\t\"./sv.js\": 1702,\n\t\"./sw\": 1703,\n\t\"./sw.js\": 1703,\n\t\"./ta\": 1704,\n\t\"./ta.js\": 1704,\n\t\"./te\": 1705,\n\t\"./te.js\": 1705,\n\t\"./tet\": 1706,\n\t\"./tet.js\": 1706,\n\t\"./tg\": 1707,\n\t\"./tg.js\": 1707,\n\t\"./th\": 1708,\n\t\"./th.js\": 1708,\n\t\"./tk\": 1709,\n\t\"./tk.js\": 1709,\n\t\"./tl-ph\": 1710,\n\t\"./tl-ph.js\": 1710,\n\t\"./tlh\": 1711,\n\t\"./tlh.js\": 1711,\n\t\"./tr\": 1712,\n\t\"./tr.js\": 1712,\n\t\"./tzl\": 1713,\n\t\"./tzl.js\": 1713,\n\t\"./tzm\": 1714,\n\t\"./tzm-latn\": 1715,\n\t\"./tzm-latn.js\": 1715,\n\t\"./tzm.js\": 1714,\n\t\"./ug-cn\": 1716,\n\t\"./ug-cn.js\": 1716,\n\t\"./uk\": 1717,\n\t\"./uk.js\": 1717,\n\t\"./ur\": 1718,\n\t\"./ur.js\": 1718,\n\t\"./uz\": 1719,\n\t\"./uz-latn\": 1720,\n\t\"./uz-latn.js\": 1720,\n\t\"./uz.js\": 1719,\n\t\"./vi\": 1721,\n\t\"./vi.js\": 1721,\n\t\"./x-pseudo\": 1722,\n\t\"./x-pseudo.js\": 1722,\n\t\"./yo\": 1723,\n\t\"./yo.js\": 1723,\n\t\"./zh-cn\": 1724,\n\t\"./zh-cn.js\": 1724,\n\t\"./zh-hk\": 1725,\n\t\"./zh-hk.js\": 1725,\n\t\"./zh-mo\": 1726,\n\t\"./zh-mo.js\": 1726,\n\t\"./zh-tw\": 1727,\n\t\"./zh-tw.js\": 1727\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 3186;","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\nimport MuiAccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport LeftMenuItem from 'AppComponents/Shared/LeftMenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport EndpointIcon from '@material-ui/icons/GamesOutlined';\nimport ScopesIcon from '@material-ui/icons/VpnKey';\nimport PoliciesIcon from '@material-ui/icons/SyncAlt';\nimport DocumentsIcon from '@material-ui/icons/LibraryBooks';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport ConfigurationIcon from '@material-ui/icons/Build';\nimport PropertiesIcon from '@material-ui/icons/List';\nimport SubscriptionsIcon from '@material-ui/icons/RssFeed';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport RuntimeConfigurationIcon from '@material-ui/icons/Settings';\nimport MonetizationIcon from '@material-ui/icons/LocalAtm';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { PROPERTIES as UserProperties } from 'AppData/User';\nimport { useUser } from 'AppComponents/Shared/AppContext';\nimport { useIntl } from 'react-intl';\n\n\nconst AccordianSummary = withStyles({\n    root: {\n        backgroundColor: '#1a1f2f',\n        paddingLeft: '8px',\n        borderBottom: '1px solid rgba(0, 0, 0, .125)',\n        minHeight: 40,\n        '&$expanded': {\n            minHeight: 40,\n        },\n    },\n    content: {\n        '&$expanded': {\n            margin: 0,\n        },\n    },\n    expanded: {\n        backgroundColor: '#1a1f2f',\n    },\n})(MuiAccordionSummary);\n\nconst AccordionDetails = withStyles((theme) => ({\n    root: {\n        backgroundColor: '#1a1f2f',\n        paddingLeft: theme.spacing(0),\n        paddingRight: theme.spacing(2),\n        paddingTop: '0',\n        paddingBottom: '0',\n    },\n}))(MuiAccordionDetails);\n\n\nconst useStyles = makeStyles((theme) => ({\n    footeremaillink: {\n        marginLeft: theme.custom.leftMenuWidth, /* 4px */\n    },\n    root: {\n        backgroundColor: theme.palette.background.leftMenu,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n        paddingTop: '0',\n        paddingBottom: '0',\n    },\n    expanded: {\n        '&$expanded': {\n            margin: 0,\n            backgroundColor: theme.palette.background.leftMenu,\n            minHeight: 40,\n            paddingBottom: 0,\n            paddingLeft: 0,\n            paddingRight: 0,\n            paddingTop: 0,\n        },\n    },\n    leftLInkText: {\n        color: theme.palette.getContrastText(theme.palette.background.leftMenu),\n        textTransform: theme.custom.leftMenuTextStyle,\n        width: '100%',\n        textAlign: 'left',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontSize: theme.typography.body1.fontSize,\n        fontWeight: 250,\n        whiteSpace: 'nowrap',\n    },\n    expandIconColor: {\n        color: '#ffffff',\n    },\n}));\n\n/**\n *\n * @param {*} props\n * @returns\n */\nexport default function DevelopSectionMenu(props) {\n    const {\n        pathPrefix, isAPIProduct, api, getLeftMenuItemForResourcesByType, getLeftMenuItemForDefinitionByType,\n    } = props;\n    const user = useUser();\n    const [portalConfigsExpanded, setPortalConfigsExpanded] = useState(user\n        .getProperty(UserProperties.PORTAL_CONFIG_OPEN));\n    const [apiConfigsExpanded, setApiConfigsExpanded] = useState(user.getProperty(UserProperties.API_CONFIG_OPEN));\n    const handleAccordionState = (section, isExpanded) => {\n        if (section === 'portalConfigsExpanded') {\n            setPortalConfigsExpanded(isExpanded);\n            user.setProperty(UserProperties.PORTAL_CONFIG_OPEN, isExpanded);\n        } else {\n            setApiConfigsExpanded(isExpanded);\n            user.setProperty(UserProperties.API_CONFIG_OPEN, isExpanded);\n        }\n    };\n    const classes = useStyles();\n    const intl = useIntl();\n\n    return (\n        <div className={classes.root}>\n            <Accordion\n                id='itest-api-details-portal-config-acc'\n                defaultExpanded={portalConfigsExpanded}\n                elevation={0}\n                onChange={(e, isExpanded) => handleAccordionState('portalConfigsExpanded',\n                    isExpanded)}\n                classes={{ expanded: classes.expanded }}\n            >\n                <AccordianSummary\n                    expandIcon={<ExpandMoreIcon className={classes.expandIconColor} />}\n                >\n                    <Typography className={classes.leftLInkText}>\n                        Portal Configurations\n                    </Typography>\n                </AccordianSummary>\n                <AccordionDetails>\n                    <div>\n                        <LeftMenuItem\n                            className={classes.footeremaillink}\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.design.configs',\n                                defaultMessage: 'Basic info',\n                            })}\n                            route='configuration'\n                            to={pathPrefix + 'configuration'}\n                            Icon={<ConfigurationIcon />}\n                            id='left-menu-itemDesignConfigurations'\n                        />\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.business.info',\n                                defaultMessage: 'business info',\n                            })}\n                            to={pathPrefix + 'business info'}\n                            Icon={<BusinessIcon />}\n                            id='left-menu-itembusinessinfo'\n                        />\n                        {!isAPIProduct && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.subscriptions',\n                                    defaultMessage: 'subscriptions',\n                                })}\n                                to={pathPrefix + 'subscriptions'}\n                                Icon={<SubscriptionsIcon />}\n                                id='left-menu-itemsubscriptions'\n                            />\n                        )}\n                        {isAPIProduct && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.subscriptions',\n                                    defaultMessage: 'subscriptions',\n                                })}\n                                to={pathPrefix + 'subscriptions'}\n                                Icon={<SubscriptionsIcon />}\n                                id='left-menu-itemsubscriptions'\n                            />\n                        )}\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.documents',\n                                defaultMessage: 'documents',\n                            })}\n                            to={pathPrefix + 'documents'}\n                            Icon={<DocumentsIcon />}\n                            id='left-menu-itemdocuments'\n                        />\n                        {!isAPIProduct && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.comments',\n                                    defaultMessage: 'Comments',\n                                })}\n                                route='comments'\n                                to={pathPrefix + 'comments'}\n                                Icon={<CommentIcon />}\n                            />\n                        )}\n                    </div>\n                </AccordionDetails>\n            </Accordion>\n            <Accordion\n                id='itest-api-details-api-config-acc'\n                defaultExpanded={apiConfigsExpanded}\n                elevation={0}\n                onChange={(e, isExpanded) => handleAccordionState('apiConfigsExpanded',\n                    isExpanded)}\n                classes={{ expanded: classes.expanded }}\n            >\n                <AccordianSummary\n                    expandIcon={<ExpandMoreIcon className={classes.expandIconColor} />}\n                >\n                    <Typography className={classes.leftLInkText}>\n                        API Configurations\n                    </Typography>\n                    <Tooltip\n                        title={'If you make any changes to the API configuration, you need to redeploy'\n                            + ' the API to see updates in the API Gateway.'}\n                        placement='bottom'\n                    >\n                        <IconButton color='primary' size='small' aria-label='delete'>\n                            <InfoOutlinedIcon fontSize='small' />\n                        </IconButton>\n                    </Tooltip>\n                </AccordianSummary>\n                <AccordionDetails>\n                    <div>\n                        {!isAPIProduct && !api.isWebSocket() && (api.gatewayVendor === 'wso2') && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.runtime.configs',\n                                    defaultMessage: 'Runtime',\n                                })}\n                                route='runtime-configuration'\n                                to={pathPrefix + 'runtime-configuration'}\n                                Icon={<RuntimeConfigurationIcon />}\n                                id='left-menu-itemRuntimeConfigurations'\n                            />\n                        )}\n                        {isAPIProduct && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.runtime.configs',\n                                    defaultMessage: 'Runtime',\n                                })}\n                                route='runtime-configuration'\n                                to={pathPrefix + 'runtime-configuration'}\n                                Icon={<RuntimeConfigurationIcon />}\n                                id='left-menu-itemRuntimeConfigurations'\n                            />\n                        )}\n                        {api.isWebSocket() && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.runtime.configs',\n                                    defaultMessage: 'Runtime',\n                                })}\n                                route='runtime-configuration'\n                                to={pathPrefix + 'runtime-configuration-websocket'}\n                                Icon={<RuntimeConfigurationIcon />}\n                                id='left-menu-itemRuntimeConfigurations'\n                            />\n                        )}\n                        {getLeftMenuItemForResourcesByType(api.type)}\n                        {getLeftMenuItemForDefinitionByType(api.type)}\n                        {(!api.advertiseInfo || !api.advertiseInfo.advertised) && !isAPIProduct\n                            && api.type !== 'WEBSUB' && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.endpoints',\n                                    defaultMessage: 'endpoints',\n                                })}\n                                to={pathPrefix + 'endpoints'}\n                                Icon={<EndpointIcon />}\n                                id='left-menu-itemendpoints'\n                            />\n                        )}\n                        {!isAPIProduct && (api.gatewayVendor === 'wso2') && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.left.menu.scope',\n                                    defaultMessage: 'Local Scopes',\n                                })}\n                                route='scopes'\n                                to={pathPrefix + 'scopes'}\n                                Icon={<ScopesIcon />}\n                                id='left-menu-itemLocalScopes'\n                            />\n                        )}\n                        {api.advertiseInfo && !api.advertiseInfo.advertised && !isAPIProduct\n                            && api.type === 'HTTP' && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.policies',\n                                    defaultMessage: 'Policies',\n                                })}\n                                route='policies'\n                                to={pathPrefix + 'policies'}\n                                Icon={<PoliciesIcon />}\n                            />\n                        )}\n\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.properties',\n                                defaultMessage: 'properties',\n                            })}\n                            to={pathPrefix + 'properties'}\n                            Icon={<PropertiesIcon />}\n                            id='left-menu-itemproperties'\n                        />\n\n                        {!api.isWebSocket() && !isRestricted(['apim:api_publish'], api) && (\n                            <>\n                                {!isAPIProduct && (api.gatewayVendor === 'wso2') && (\n                                    <LeftMenuItem\n                                        text={intl.formatMessage({\n                                            id: 'Apis.Details.index.monetization',\n                                            defaultMessage: 'monetization',\n                                        })}\n                                        to={pathPrefix + 'monetization'}\n                                        Icon={<MonetizationIcon />}\n                                    />\n                                )}\n                            </>\n                        )}\n                        {isAPIProduct && !api.isWebSocket()\n                            && !isRestricted(['apim:api_publish'], api) && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.monetization',\n                                    defaultMessage: 'monetization',\n                                })}\n                                to={pathPrefix + 'monetization'}\n                                Icon={<MonetizationIcon />}\n                            />\n                        )}\n                    </div>\n                </AccordionDetails>\n            </Accordion>\n        </div>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport green from '@material-ui/core/colors/green';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport API from 'AppData/api';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Resources from './Resources';\nimport Operations from './Operations';\nimport ProductResources from './ProductResources';\nimport Configuration from './Configuration';\nimport CustomizedStepper from './CustomizedStepper';\nimport MetaData from './MetaData';\nimport Endpoints from './Endpoints';\nimport Topics from './Topics';\n\nconst styles = (theme) => ({\n    root: {\n        ...theme.mixins.gutters(),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    contentWrapper: {\n        marginTop: theme.spacing(2),\n    },\n    buttonSuccess: {\n        backgroundColor: green[500],\n        '&:hover': {\n            backgroundColor: green[700],\n        },\n    },\n    checkItem: {\n        textAlign: 'center',\n    },\n    divider: {\n        marginTop: 20,\n        marginBottom: 20,\n    },\n    chip: {\n        margin: theme.spacing(0.5),\n        padding: 0,\n        height: 'auto',\n        '& span': {\n            padding: '0 5px',\n        },\n    },\n    imageContainer: {\n        display: 'flex',\n    },\n    imageWrapper: {\n        marginRight: theme.spacing(3),\n    },\n    subtitle: {\n        marginTop: theme.spacing(0),\n    },\n    specialGap: {\n        marginTop: theme.spacing(3),\n    },\n    resourceTitle: {\n        marginBottom: theme.spacing(3),\n    },\n    ListRoot: {\n        padding: 0,\n        margin: 0,\n    },\n    titleWrapper: {\n        display: 'flex',\n    },\n    title: {\n        flex: 1,\n    },\n    helpButton: {\n        padding: 0,\n        minWidth: 20,\n    },\n    helpIcon: {\n        fontSize: 16,\n    },\n    htmlTooltip: {\n        backgroundColor: '#f5f5f9',\n        color: 'rgba(0, 0, 0, 0.87)',\n        maxWidth: 220,\n        fontSize: theme.typography.pxToRem(14),\n        border: '1px solid #dadde9',\n        '& b': {\n            fontWeight: theme.typography.fontWeightMedium,\n        },\n    },\n    lifecycleWrapper: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    lifecycleIcon: {\n        fontSize: 36,\n        color: 'green',\n        marginRight: theme.spacing(1),\n    },\n    leftSideWrapper: {\n        paddingRight: theme.spacing(2),\n    },\n    notConfigured: {\n        color: 'rgba(0, 0, 0, 0.40)',\n    },\n    url: {\n        maxWidth: '100%',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n    },\n});\n\n/**\n * API Overview page\n *\n * @param {*} props\n * @returns\n */\nfunction Overview(props) {\n    const { classes, api: newApi, setOpenPageSearch } = props; // TODO <tmkasun>: Remove newApi prop & merge to api\n    const { api } = useContext(ApiContext);\n    let loadEndpoints;\n    useEffect(() => {\n        const handleKeyDown = (event) => {\n            if (event.key === 's') {\n                const { target } = event;\n                // prevent opening page search when typing `s` in header API search input\n                if (target.id !== 'searchQuery') {\n                    setOpenPageSearch(true);\n                }\n                // TO prevent overlapping the event handlers in header search and page search itself\n                if (target.id !== 'page-search-input' && target.id !== 'searchQuery') {\n                    event.preventDefault(); // To prevent form submissions\n                }\n            }\n        };\n        document.addEventListener('keydown', handleKeyDown);\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [setOpenPageSearch]);\n    if (api.apiType === API.CONSTS.API) {\n        loadEndpoints = <Endpoints parentClasses={classes} api={api} />;\n    }\n    function getResourcesClassForAPIs(apiType) {\n        switch (apiType) {\n            case 'GRAPHQL':\n                return <Operations parentClasses={classes} api={api} />;\n            case 'APIPRODUCT':\n                return <ProductResources parentClasses={classes} api={api} />;\n            case 'WS':\n            case 'WEBSUB':\n            case 'ASYNC':\n            case 'SSE':\n                return <Topics parentClasses={classes} api={api} />;\n            default:\n                return <Resources parentClasses={classes} api={api} />;\n        }\n    }\n\n    if (newApi.apiType === API.CONSTS.APIProduct) {\n        api.type = API.CONSTS.APIProduct;\n    }\n    return (\n        <>\n            <Typography variant='h4' component='h2' align='left' className={classes.mainTitle}>\n                <FormattedMessage\n                    id='Apis.Details.Overview.Overview.topic.header'\n                    defaultMessage='Overview'\n                />\n            </Typography>\n            {(api.apiType !== API.CONSTS.API || !api.advertiseInfo.advertised) && (\n                <Grid container spacing={12}>\n                    <Grid item xs={12} s={12} md={12} lg={12}>\n                        <CustomizedStepper />\n                    </Grid>\n                </Grid>\n            )}\n            <div className={classes.contentWrapper}>\n                <Paper className={classes.root}>\n                    <Grid container spacing={4}>\n                        <Grid item xs={12} md={12} lg={12}>\n                            <Grid container spacing={4}>\n                                <Grid item xs={12} md={6} lg={6}>\n                                    <MetaData parentClasses={classes} />\n                                </Grid>\n                                <Grid item xs={12} md={6} lg={6}>\n                                    <Configuration parentClasses={classes} />\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={12} md={12} lg={12}>\n                            <div className={classes.specialGap}>\n                                <Grid container spacing={4}>\n                                    {\n                                        api.type === 'WEBSUB' ? (\n                                            <Grid item xs={12} md={12} lg={12}>\n                                                <Grid item xs={12} md={12} lg={12}>\n                                                    {getResourcesClassForAPIs(api.type)}\n                                                </Grid>\n                                            </Grid>\n                                        ) : (\n                                            <>\n                                                <Grid item xs={12} md={6} lg={6}>\n                                                    <Grid item xs={12} md={8} lg={8}>\n                                                        {getResourcesClassForAPIs(api.type)}\n                                                    </Grid>\n                                                </Grid>\n                                                <Grid item xs={12} md={6} lg={6}>\n                                                    {loadEndpoints}\n                                                </Grid>\n                                            </>\n                                        )\n                                    }\n                                </Grid>\n                            </div>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </div>\n        </>\n    );\n}\n\nOverview.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n};\n\nexport default withStyles(styles)(Overview);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { withStyles, withTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Chip from '@material-ui/core/Chip';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@material-ui/core/Box';\nimport { Link } from 'react-router-dom';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nimport Typography from '@material-ui/core/Typography';\nimport Api from 'AppData/api';\nimport CONSTS from 'AppData/Constants';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\n\nfunction RenderMethodBase(props) {\n    const { theme, method } = props;\n    let chipColor = theme.custom.resourceChipColors ? theme.custom.resourceChipColors[method] : null;\n    let chipTextColor = '#000000';\n    if (!chipColor) {\n        console.log('Check the theme settings. The resourceChipColors is not populated properly');\n        chipColor = '#cccccc';\n    } else {\n        chipTextColor = theme.palette.getContrastText(theme.custom.resourceChipColors[method]);\n    }\n    return (\n        <Chip\n            label={method.toUpperCase()}\n            style={{\n                backgroundColor: chipColor, color: chipTextColor, height: 20, marginRight: 5,\n            }}\n        />\n    );\n}\n\nRenderMethodBase.propTypes = {\n    method: PropTypes.string.isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nconst RenderMethod = withTheme(RenderMethodBase);\n\nconst styles = (theme) => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: 10,\n    },\n    heading: {\n        marginRight: 20,\n    },\n    contentWrapper: {\n        maxHeight: '125px',\n        overflowY: 'auto',\n    },\n    subHeading: {\n        color: theme.palette.primary.dark,\n    },\n});\n\nclass Resources extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: null,\n        };\n        this.restApi = new Api();\n    }\n\n    componentDidMount() {\n        const { id } = this.props.api;\n        const promisedAPI = this.restApi.getSwagger(id);\n        promisedAPI\n            .then((response) => {\n                if (response.obj.paths !== undefined) {\n                    this.setState({ paths: response.obj.paths });\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    }\n\n    render() {\n        const { paths } = this.state;\n        if (this.state.notFound) {\n            return (\n                <div>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.Resources.resource.not.found'\n                        defaultMessage='resource not found...'\n                    />\n                </div>\n            );\n        }\n        if (!paths) {\n            return (\n                <div>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.Resources.loading'\n                        defaultMessage='loading...'\n                    />\n                </div>\n            );\n        }\n        const { classes, parentClasses, api } = this.props;\n        return (\n            <>\n                <div className={parentClasses.titleWrapper}>\n                    { api.type === 'GraphQL' ? (\n                        <Typography id='resources' variant='h5' component='h2' className={parentClasses.title}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.Operations.operations'\n                                defaultMessage='Operation'\n                            />\n                        </Typography>\n                    )\n                        : (\n                            <Typography id='resources' variant='h5' component='h2' className={parentClasses.title}>\n                                <FormattedMessage\n                                    id='Apis.Details.NewOverview.Resources.resources'\n                                    defaultMessage='Resources'\n                                />\n                            </Typography>\n                        )}\n                </div>\n                <Box p={1}>\n                    <div className={classes.contentWrapper}>\n                        {Object.keys(paths).map((key) => {\n                            const path = paths[key];\n                            return (\n                                <div key={key} className={classes.root}>\n                                    <Typography className={classes.heading} variant='body1'>\n                                        {key}\n                                    </Typography>\n                                    {Object.keys(path).map((innerKey) => {\n                                        return CONSTS.HTTP_METHODS.includes(innerKey)\n                                            ? <RenderMethod method={innerKey} /> : null;\n                                    })}\n                                </div>\n                            );\n                        })}\n                    </div>\n                    <Link\n                        to={'/apis/' + api.id + '/resources'}\n                        id='resource-more'\n                        aria-labelledby='resource-more resources'\n                    >\n                        <Typography\n                            className={classes.subHeading}\n                            color='primary'\n                            display='inline'\n                            variant='caption'\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.Operations.ShowMore'\n                                defaultMessage='Show More'\n                            />\n                            <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                        </Typography>\n                    </Link>\n                </Box>\n            </>\n        );\n    }\n}\nResources.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({ id: PropTypes.string }).isRequired,\n};\n\nexport default withStyles(styles)(Resources);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { withStyles, withTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Chip from '@material-ui/core/Chip';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport Box from '@material-ui/core/Box';\nimport { Link } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport ApiContext from '../components/ApiContext';\n\nconst styles = (theme) => ({\n    contentWrapper: {\n        marginTop: theme.spacing(2),\n        maxHeight: '250px',\n        overflowY: 'auto',\n    },\n});\n\n/**\n *\n * @param {*} props\n */\nfunction RenderMethodBase(props) {\n    const { theme, method } = props;\n    const methodLower = method.toLowerCase();\n    let chipColor = theme.custom.operationChipColor\n        ? theme.custom.operationChipColor[methodLower]\n        : null;\n    let chipTextColor = '#000000';\n    if (!chipColor) {\n        console.log('Check the theme settings. The resourceChipColors is not populated properlly');\n        chipColor = '#cccccc';\n    } else {\n        chipTextColor = theme.palette.getContrastText(theme.custom.operationChipColor[methodLower]);\n    }\n    return (\n        <Chip\n            label={method}\n            style={{\n                backgroundColor: chipColor, color: chipTextColor, height: 20, fontSize: 9, width: 95,\n            }}\n        />\n    );\n}\n\nRenderMethodBase.propTypes = {\n    method: PropTypes.string.isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nconst RenderMethod = withTheme(RenderMethodBase);\n/**\n *\n * @param {*} props\n */\nfunction Operations(props) {\n    const { classes, parentClasses } = props;\n    return (\n        <ApiContext.Consumer>\n            {({ api }) => (\n                <>\n                    <div className={parentClasses.titleWrapper}>\n                        <Typography variant='h5' component='h3' className={parentClasses.title}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.Operations.operation'\n                                defaultMessage='Operations'\n                            />\n                        </Typography>\n                    </div>\n                    <div>\n                        <div className={classes.contentWrapper}>\n                            <Table style={{ padding: 20 }}>\n                                {api.operations\n                            && api.operations.length !== 0\n                            && api.operations.map((item) => (\n                                <TableRow style={{ borderStyle: 'hidden' }}>\n                                    <TableCell style={{ padding: 8 }}>\n                                        <Typography className={parentClasses.heading} component='p' variant='body1'>\n                                            {item.target}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell style={{ padding: 8 }}>\n                                        <RenderMethod method={item.verb} />\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                            </Table>\n                        </div>\n                        <Box py={2}>\n                            <Link to={'/apis/' + api.id + '/operations'}>\n                                <Typography\n                                    className={classes.subHeading}\n                                    color='primary'\n                                    display='inline'\n                                    variant='caption'\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.Operations.ShowMore'\n                                        defaultMessage='Show More'\n                                    />\n                                    <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                                </Typography>\n                            </Link>\n                        </Box>\n                    </div>\n                </>\n            )}\n        </ApiContext.Consumer>\n    );\n}\n\nOperations.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles)(Operations);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { withStyles, withTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * Render method base.\n * @param {*} props\n */\nfunction RenderMethodBase(props) {\n    const { theme, method } = props;\n    const methodLower = method.toLowerCase();\n    let chipColor = theme.custom.resourceChipColors ? theme.custom.resourceChipColors[methodLower] : null;\n    let chipTextColor = '#000000';\n    if (!chipColor) {\n        console.log('Check the theme settings. The resourceChipColors is not populated properly');\n        chipColor = '#cccccc';\n    } else {\n        chipTextColor = theme.palette.getContrastText(theme.custom.resourceChipColors[methodLower]);\n    }\n    return (\n        <Chip\n            label={method.toUpperCase()}\n            style={{ backgroundColor: chipColor, color: chipTextColor, height: 20 }}\n        />\n    );\n}\n\nRenderMethodBase.propTypes = {\n    method: PropTypes.string.isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nconst RenderMethod = withTheme(RenderMethodBase);\n\nconst styles = {\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'left',\n        marginBottom: 10,\n        padding: 5,\n    },\n    heading: {\n        marginRight: 20,\n        paddingBottom: 10,\n    },\n    resourceRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        marginLeft: 10,\n    },\n};\n\n/**\n * Component to show api product resources in overview tab\n */\nclass ProductResources extends React.PureComponent {\n    /**\n     * @inheritDoc\n     */\n    render() {\n        const { classes, parentClasses, api } = this.props;\n        const apiResources = api.apis;\n        return (\n            <>\n                <div className={parentClasses.titleWrapper} style={{ margin: '20px 0 0' }}>\n                    <Typography variant='h5' component='h3' className={parentClasses.title}>\n                        <FormattedMessage\n                            id='Apis.Details.Overview.ProductResources.resources'\n                            defaultMessage='Resources'\n                        />\n                    </Typography>\n                </div>\n                <div className={classes.root}>\n                    <div className={classes.contentWrapper}>\n                        {Object.keys(apiResources).map((key) => {\n                            const resource = apiResources[key];\n                            return (\n                                <div className={classes.root}>\n                                    <Typography className={classes.heading} variant='body1'>\n                                        {resource.name + ' : ' + resource.version}\n                                    </Typography>\n                                    {Object.keys(resource.operations).map((innerKey) => {\n                                        const operation = (resource.operations)[innerKey];\n                                        return (\n                                            <div className={classes.resourceRow}>\n                                                <Typography className={classes.heading} variant='body1'>\n                                                    {operation.target}\n                                                </Typography>\n                                                <RenderMethod method={operation.verb} />\n\n                                            </div>\n                                        );\n                                    })}\n\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\nProductResources.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.shape({}),\n    }).isRequired,\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({ id: PropTypes.string }).isRequired,\n};\n\nexport default withStyles(styles)(ProductResources);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useContext } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Chip from '@material-ui/core/Chip';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport Box from '@material-ui/core/Box';\nimport API from 'AppData/api';\nimport { capitalizeFirstLetter, upperCaseString, lowerCaseString } from 'AppData/stringFormatter';\nimport APIContext from '../components/ApiContext';\nimport Policies from './Policies';\n\nconst HUMAN_READABLE_SCHEMES = {\n    oauth2: 'OAuth2',\n    basic_auth: 'Basic Auth',\n    mutualssl: 'Mutual TLS',\n    api_key: 'API Key',\n};\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction Configuration(props) {\n    const { parentClasses } = props;\n    const { api } = useContext(APIContext);\n\n    return (\n        <>\n            <div>\n                <Typography variant='h5' component='h3' className={parentClasses.title}>\n                    <FormattedMessage id='Apis.Details.NewOverview.MetaData.config' defaultMessage='Configuration' />\n                </Typography>\n            </div>\n            <Box p={1}>\n                <Grid container spacing={2}>\n\n                    {(api.gatewayVendor === 'wso2') && (\n                        <>\n                            <Grid item xs={12} md={6} lg={4}>\n                                {/* Transports */}\n                                <Typography\n                                    id='transports'\n                                    component='p'\n                                    variant='subtitle2'\n                                    className={parentClasses.subtitle}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.MetaData.transports'\n                                        defaultMessage='Transports'\n                                    />\n                                    <Tooltip\n                                        interactive\n                                        placement='top'\n                                        aria-label='helper text for transports'\n                                        classes={{\n                                            tooltip: parentClasses.htmlTooltip,\n                                        }}\n                                        title={(\n                                            <>\n                                                <FormattedMessage\n                                                    id='Apis.Details.NewOverview.MetaData.transport.tooltip'\n                                                    defaultMessage={\n                                                        'HTTP is less secure than HTTPS and '\n                                                        + 'makes your API vulnerable to security threats.'\n                                                    }\n                                                />\n                                            </>\n                                        )}\n                                    >\n                                        <Button className={parentClasses.helpButton}>\n                                            <HelpOutline className={parentClasses.helpIcon} />\n                                        </Button>\n                                    </Tooltip>\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12} md={6} lg={8}>\n                                <Typography component='p' variant='body1'>\n                                    {api.transport && api.transport.length !== 0 && (\n                                        api.transport.map((item, index) => (\n                                            <span key={item}>\n                                                {upperCaseString(item)}\n                                                {api.transport.length !== index + 1 && ', '}\n                                            </span>\n                                        ))\n                                    )}\n                                    {!api.transport && (\n                                        <>\n                                            <Typography\n                                                component='p'\n                                                variant='body1'\n                                                className={parentClasses.notConfigured}\n                                            >\n                                                <FormattedMessage\n                                                    id='Apis.Details.NewOverview.MetaData.transports.not.set'\n                                                    defaultMessage='-'\n                                                />\n                                            </Typography>\n                                        </>\n                                    )}\n                                </Typography>\n                            </Grid>\n                        </>\n                    )}\n                    { (api.gatewayVendor === 'solace') && (\n                        <>\n                            <Grid item xs={12} md={6} lg={4}>\n                                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.MetaData.solace.transports'\n                                        defaultMessage='Available Protocols'\n                                    />\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12} md={6} lg={8}>\n                                {api.solaceTransportProtocols\n                                && api.solaceTransportProtocols.map((protocol) => (\n                                    <Chip\n                                        key={protocol}\n                                        label={upperCaseString(protocol)}\n                                        style={{\n                                            'font-size': 13,\n                                            height: 20,\n                                            marginRight: 5,\n                                        }}\n                                    />\n\n                                )) }\n                            </Grid>\n                        </>\n                    )}\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* API Security */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.securityScheme'\n                                defaultMessage='API Security'\n                            />\n                            <Tooltip\n                                interactive\n                                placement='top'\n                                aria-label='helper text for API Security'\n                                classes={{\n                                    tooltip: parentClasses.htmlTooltip,\n                                }}\n                                title={(\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.securityScheme.tooltip'\n                                            defaultMessage='OAuth2 is used as the default security schema.'\n                                        />\n                                    </>\n                                )}\n                            >\n                                <Button className={parentClasses.helpButton}>\n                                    <HelpOutline className={parentClasses.helpIcon} />\n                                </Button>\n                            </Tooltip>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.securityScheme && api.securityScheme.length !== 0 && (\n                                <>\n                                    {api.securityScheme\n                                        .filter((item) => !item.includes('mandatory'))\n                                        .map((filteredItem) => HUMAN_READABLE_SCHEMES[filteredItem])\n                                        .join(' , ')}\n                                </>\n                            )}\n                            {!api.securityScheme && (\n                                <>\n                                    <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.securityScheme.not.set'\n                                            defaultMessage='-'\n                                        />\n                                    </Typography>\n                                </>\n                            )}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Access Control */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.access.control'\n                                defaultMessage='Access Control'\n                            />\n                            <Tooltip\n                                interactive\n                                placement='top'\n                                aria-label='helper text for Access Control'\n                                classes={{\n                                    tooltip: parentClasses.htmlTooltip,\n                                }}\n                                title={(\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.access.control.all.tooltip'\n                                            defaultMessage={\n                                                'All : The API is viewable, '\n                                                + 'modifiable by all the publishers and creators.'\n                                            }\n                                        />\n                                        <br />\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.access.control.tooltip'\n                                            defaultMessage={\n                                                'Restricted by roles : The API can be viewable and'\n                                                + ' modifiable by only specific publishers and creators '\n                                                + 'with the roles that you specify'\n                                            }\n                                        />\n                                    </>\n                                )}\n                            >\n                                <Button className={parentClasses.helpButton}>\n                                    <HelpOutline className={parentClasses.helpIcon} />\n                                </Button>\n                            </Tooltip>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.accessControl && (\n                                <>\n                                    {capitalizeFirstLetter(lowerCaseString(api.accessControl))}\n                                </>\n                            )}\n                            {api.accessControl === 'RESTRICTED' && ' ( Visible to '}\n                            {api.accessControl === 'RESTRICTED' && api.accessControlRoles.join()}\n                            {api.accessControl === 'RESTRICTED' && ' ) '}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* workflowStatus */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.workflow.status'\n                                defaultMessage='Workflow Status'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.workflowStatus && <>{api.workflowStatus}</>}\n                            {!api.workflowStatus && (\n                                <>\n                                    <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.workflowStatus.not.set'\n                                            defaultMessage='-'\n                                        />\n                                    </Typography>\n                                </>\n                            )}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Visibility */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.visibility.store'\n                                defaultMessage='Visibility on Developer Portal'\n                            />\n                            <Tooltip\n                                placement='top'\n                                interactive\n                                aria-label='helper text for Visibility on Developer Portal'\n                                classes={{\n                                    tooltip: parentClasses.htmlTooltip,\n                                }}\n                                title={(\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.visibility.store.all.tooltip'\n                                            defaultMessage={\n                                                'Public: The API is accessible to everyone and can be advertised '\n                                                + 'in multiple developer portals - a central developer portal '\n                                                + 'and/or non-WSO2 developer portals.'\n                                            }\n                                        />\n                                        <br />\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.visibility.store.res.tooltip'\n                                            defaultMessage={\n                                                'Restricted by roles: The API is visible only to '\n                                                + 'specific user roles in the tenant Developer Portal that you specify.'\n                                            }\n                                        />\n                                    </>\n                                )}\n                            >\n                                <Button className={parentClasses.helpButton}>\n                                    <HelpOutline className={parentClasses.helpIcon} />\n                                </Button>\n                            </Tooltip>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {(api.visibility && api.visibility === 'PRIVATE')\n                                ? (\n                                    <>\n                                        Visible to my domain\n                                    </>\n                                )\n                                : (\n                                    <>\n                                        {capitalizeFirstLetter(lowerCaseString(api.visibility))}\n                                    </>\n                                )}\n                            {api.visibility === 'RESTRICTED' && ' ( Visible to '}\n                            {api.visibility === 'RESTRICTED' && api.visibleRoles.join()}\n                            {api.visibility === 'RESTRICTED' && ' ) '}\n                        </Typography>\n                    </Grid>\n                    {(api.gatewayVendor === 'wso2') && (<Policies parentClasses={parentClasses} />)}\n                    {api.apiType === API.CONSTS.APIProduct ? null : (\n                        <>\n                            <Grid item xs={12} md={6} lg={4}>\n                                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.MetaData.tags'\n                                        defaultMessage='Tags'\n                                    />\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12} md={6} lg={8}>\n                                {api.tags\n                                    && api.tags.map((tag) => (\n                                        <Chip\n                                            key={tag}\n                                            label={tag}\n                                            style={{\n                                                'font-size': 13,\n                                                height: 20,\n                                                marginRight: 5,\n                                            }}\n                                        />\n                                    ))}\n                                {api.tags.length === 0 && (\n                                    <>\n                                        <Typography\n                                            component='p'\n                                            variant='body1'\n                                            className={parentClasses.notConfigured}\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.NewOverview.MetaData.tags.not.set'\n                                                defaultMessage='-'\n                                            />\n                                        </Typography>\n                                    </>\n                                )}\n                            </Grid>\n                        </>\n                    )}\n                </Grid>\n            </Box>\n        </>\n    );\n}\n\nConfiguration.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n};\n\nexport default Configuration;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction Policies(props) {\n    const { parentClasses, api } = props;\n    return (\n        <>\n            <Grid item xs={12} md={6} lg={4}>\n                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.Policies.business.plans'\n                        defaultMessage='Business Plans:'\n                    />\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={6} lg={8}>\n                {/* Throttling Policies */}\n                <Typography component='p' variant='body1'>\n                    {api.policies\n                    && api.policies.length !== 0\n                    && api.policies.map((item, index) => (\n                        <span>\n                            {item}\n                            {api.policies.length !== index + 1 && ', '}\n                            {' '}\n                        </span>\n                    ))}\n                </Typography>\n            </Grid>\n        </>\n    );\n}\n\nPolicies.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default withAPI(Policies);\n","import React, { useEffect, useState, useContext } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage } from 'react-intl';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport StepConnector from '@material-ui/core/StepConnector';\nimport ApiContext, { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { useAppContext, usePublisherSettings } from 'AppComponents/Shared/AppContext';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Link as RouterLink } from 'react-router-dom';\nimport Link from '@material-ui/core/Link';\nimport grey from '@material-ui/core/colors/grey';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport AuthManager from 'AppData/AuthManager';\nimport Typography from '@material-ui/core/Typography';\nimport LinkIcon from '@material-ui/icons/Link';\nimport API from 'AppData/api';\n\nconst ColorlibConnector = withStyles((theme) => {\n    const completedColor = theme.custom.apis.overview.stepper.completed || theme.palette.success.main;\n    const activeColor = theme.custom.apis.overview.stepper.active || theme.palette.info.main;\n    return {\n        alternativeLabel: {\n            top: 22,\n        },\n        active: {\n            '& $line': {\n                backgroundImage:\n                    `linear-gradient(to left, ${activeColor} 50%, ${completedColor} 50%)`,\n            },\n        },\n        completed: {\n            '& $line': {\n                backgroundImage:\n                    `linear-gradient( ${completedColor}, ${completedColor})`,\n            },\n        },\n        line: {\n            height: 3,\n            border: 0,\n            backgroundColor: '#eaeaf0',\n            borderRadius: 1,\n        },\n        viewInStoreLauncher: {\n            color: theme.palette.primary.dark,\n        },\n    };\n})(StepConnector);\n\nconst useColorlibStepIconStyles = makeStyles((theme) => ({\n    root: {\n        backgroundColor: '#ccc',\n        zIndex: 1,\n        color: '#fff',\n        width: 56,\n        height: 56,\n        display: 'flex',\n        borderRadius: '50%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        border: '6px solid #E2E2E2',\n    },\n    active: {\n        backgroundColor: theme.custom.apis.overview.stepper.active || theme.palette.info.main,\n        border: '6px solid #E2E2E2',\n    },\n    completed: {\n        backgroundColor: theme.custom.apis.overview.stepper.completed || theme.palette.success.main,\n        border: '6px solid #E2E2E2',\n    },\n}));\n\n/**\n *\n * @param {*} props\n * @returns\n */\nfunction ColorlibStepIcon(props) {\n    const classes = useColorlibStepIconStyles();\n    const {\n        active, completed, forceComplete, icon: step,\n    } = props;\n    return (\n        <div\n            className={clsx(classes.root, {\n                [classes.active]: active,\n                [classes.completed]: completed || forceComplete.includes(step),\n            })}\n        />\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    button: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    iconTrue: {\n        display: 'block',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        backgroundColor: theme.custom.apis.overview.stepper.completed || theme.palette.success.main,\n        zIndex: 1,\n        color: '#fff',\n        width: 15,\n        height: 15,\n        borderRadius: '50%',\n    },\n    iconFalse: {\n        color: '#fff',\n        display: 'block',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        backgroundColor: grey[500],\n        zIndex: 1,\n        width: 15,\n        height: 15,\n        borderRadius: '50%',\n    },\n    pageLinks: {\n        display: 'flex',\n    },\n    disabledLink: {\n        pointerEvents: 'none',\n        color: theme.palette.text.primary,\n    },\n    textLink: {\n        color: '#0060B6',\n        textDecoration: 'none',\n    },\n}));\n\n/**\n *\n * @returns\n */\nexport default function CustomizedStepper() {\n    const classes = useStyles();\n    const [api, updateAPI] = useAPI();\n    const [isUpdating, setUpdating] = useState(false);\n    const [deploymentsAvailable, setDeploymentsAvailable] = useState(false);\n    const isPrototypedAvailable = api.apiType !== API.CONSTS.APIProduct && api.endpointConfig !== null\n    && api.endpointConfig.implementation_status === 'prototyped';\n    const isEndpointAvailable = api.endpointConfig !== null;\n    const isTierAvailable = api.policies.length !== 0;\n    const lifecycleState = api.isAPIProduct() ? api.state : api.lifeCycleStatus;\n    const isPublished = lifecycleState === 'PUBLISHED';\n    const { tenantList } = useContext(ApiContext);\n    const { user } = useAppContext();\n    const { data: settings } = usePublisherSettings();\n    const userNameSplit = user.name.split('@');\n    const tenantDomain = userNameSplit[userNameSplit.length - 1];\n    const securityScheme = [...api.securityScheme];\n    const isMutualSslOnly = securityScheme.length === 2 && securityScheme.includes('mutualssl')\n    && securityScheme.includes('mutualssl_mandatory');\n    let devportalUrl = settings ? `${settings.devportalUrl}/apis/${api.id}/overview` : '';\n    // TODO: tmkasun need to handle is loading\n    if (tenantList && tenantList.length > 0) {\n        // TODO: tmkasun need to handle is loading\n        devportalUrl = settings ? `${settings.devportalUrl}/apis/${api.id}/overview?tenant=${tenantDomain}` : '';\n    }\n    const steps = (api.isWebSocket() || api.isGraphql() || api.isAsyncAPI())\n        ? ['Develop', 'Deploy', 'Publish'] : ['Develop', 'Deploy', 'Test', 'Publish'];\n    const forceComplete = [];\n    if (isPublished) {\n        forceComplete.push(steps.indexOf('Publish') + 1);\n    }\n    let activeStep = 0;\n    if (api && (api.type === 'WEBSUB' || isEndpointAvailable)\n        && (isTierAvailable || isMutualSslOnly) && !deploymentsAvailable) {\n        activeStep = 1;\n    } else if ((api && !isEndpointAvailable && api.type !== 'WEBSUB')\n        || (api && !isMutualSslOnly && !isTierAvailable)) {\n        activeStep = 0;\n    } else if (api && (isEndpointAvailable || api.type === 'WEBSUB') && (isTierAvailable || isMutualSslOnly)\n        && deploymentsAvailable && (!isPublished && lifecycleState !== 'PROTOTYPED')) {\n        activeStep = 3;\n    } else if ((isPublished || lifecycleState === 'PROTOTYPED') && api\n        && (isEndpointAvailable || api.type === 'WEBSUB' || isPrototypedAvailable)\n        && (isTierAvailable || isMutualSslOnly) && deploymentsAvailable) {\n        activeStep = 4;\n    }\n\n    useEffect(() => {\n        api.getRevisionsWithEnv(api.isRevision ? api.revisionedApiId : api.id).then((result) => {\n            setDeploymentsAvailable(result.body.count > 0);\n        });\n    }, []);\n\n    /**\n * Update the LifeCycle state of the API\n *\n */\n    function updateLCStateOfAPI(apiId, state) {\n        setUpdating(true);\n        const promisedUpdate = api.updateLcState(apiId, state);\n        promisedUpdate\n            .then(() => {\n                updateAPI()\n                    .then()\n                    .catch((error) => {\n                        if (error.response) {\n                            Alert.error(error.response.body.description);\n                        } else {\n                            Alert.error('Something went wrong while updating the API');\n                        }\n                        console.error(error);\n                    });\n                Alert.info('Lifecycle state updated successfully');\n            })\n            .finally(() => setUpdating(false))\n            .catch((errorResponse) => {\n                console.log(errorResponse);\n                Alert.error(JSON.stringify(errorResponse.message));\n            });\n    }\n\n    /**\n     * This function renders the final lifecycle state\n     * @param {*} state\n     */\n    function finalLifecycleState(state) {\n        switch (state) {\n            case 'PUBLISHED':\n                return (\n                    <>\n                        <Grid\n                            container\n                            direction='row'\n                            alignItems='center'\n                            justify='center'\n                        >\n                            <Grid item>\n                                <CheckIcon className={classes.iconTrue} />\n                            </Grid>\n                            <Box ml={1}>\n                                <Grid item>\n                                    <Typography variant='h6' component='div'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Overview.CustomizedStepper.publish'\n                                            defaultMessage=' Published'\n                                        />\n                                        <Box display='inline' pl={0.4} color='text.secondary'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Overview.CustomizedStepper.publish.current.api'\n                                                defaultMessage=' (Current API)'\n                                            />\n                                        </Box>\n                                    </Typography>\n                                </Grid>\n                            </Box>\n                        </Grid>\n                        <Box mt={1} ml={2}>\n                            <a\n                                target='_blank'\n                                className={classes.textLink}\n                                rel='noopener noreferrer'\n                                href={devportalUrl}\n                            >\n                                <Grid\n                                    container\n                                    direction='row'\n                                    alignItems='center'\n                                    justify='center'\n                                >\n                                    <Grid item>\n                                        <Typography variant='h6' display='inline'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Overview.CustomizedStepper.view.devportal'\n                                                defaultMessage='View in devportal'\n                                            />\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item>\n                                        <Box ml={1}>\n                                            <LaunchIcon\n                                                color='primary'\n                                                fontSize='small'\n                                            />\n                                        </Box>\n                                    </Grid>\n                                </Grid>\n                            </a>\n                        </Box>\n                    </>\n                );\n            case 'PROTOTYPED':\n                return (\n                    <Typography variant='h6' component='div'>\n                        <b>\n                            <FormattedMessage\n                                id='Apis.Details.Overview.CustomizedStepper.prototyped'\n                                defaultMessage='Pre-Released'\n                            />\n                        </b>\n                    </Typography>\n                );\n            case 'BLOCKED':\n                return (\n                    <Typography variant='h6' component='div'>\n                        <b>\n                            <FormattedMessage\n                                id='Apis.Details.Overview.CustomizedStepper.blocked'\n                                defaultMessage='Blocked'\n                            />\n                        </b>\n                    </Typography>\n                );\n            case 'DEPRECATED':\n                return (\n                    <Typography variant='h6' component='div'>\n                        <b>\n                            <FormattedMessage\n                                id='Apis.Details.Overview.CustomizedStepper.deprecated'\n                                defaultMessage='Deprecated'\n                            />\n                        </b>\n                    </Typography>\n                );\n            case 'RETIRED':\n                return (\n                    <Typography variant='h6' component='div'>\n                        <b>\n                            <FormattedMessage\n                                id='Apis.Details.Overview.CustomizedStepper.retired'\n                                defaultMessage='Retired'\n                            />\n                        </b>\n                    </Typography>\n                );\n            default:\n                return (\n                    <>\n                        {isPrototypedAvailable ? (\n                            <Button\n                                size='small'\n                                variant='contained'\n                                color='primary'\n                                onClick={() => updateLCStateOfAPI(api.id, 'Deploy as a Prototype')}\n                                disabled={api.workflowStatus === 'CREATED'\n                                    || AuthManager.isNotPublisher()\n                                    || !deploymentsAvailable}\n                            >\n                                <FormattedMessage\n                                    id='Apis.Details.Overview.CustomizedStepper.btn.prototyped'\n                                    defaultMessage='Pre-Released'\n                                />\n                                {isUpdating && <CircularProgress size={20} />}\n                            </Button>\n                        ) : (\n                            <Button\n                                size='small'\n                                variant='contained'\n                                color='primary'\n                                onClick={() => updateLCStateOfAPI(api.id, 'Publish')}\n                                disabled={((api.type !== 'WEBSUB' && !isEndpointAvailable)\n                                    || (!isMutualSslOnly && !isTierAvailable))\n                                    || !deploymentsAvailable\n                                    || api.isRevision || AuthManager.isNotPublisher()\n                                    || api.workflowStatus === 'CREATED'}\n                            >\n                                <FormattedMessage\n                                    id='Apis.Details.Overview.CustomizedStepper.btn.publish'\n                                    defaultMessage='Publish'\n                                />\n                                {isUpdating && <CircularProgress size={20} />}\n                            </Button>\n                        )}\n                        {api.workflowStatus === 'CREATED' && (\n                            <Typography variant='caption' color='error'>\n                                <FormattedMessage\n                                    id='Apis.Details.Overview.CustomizedStepper.pending'\n                                    defaultMessage='The request is pending'\n                                />\n                            </Typography>\n                        )}\n                    </>\n                );\n        }\n    }\n    const isTestLinkDisabled = lifecycleState === 'RETIERD' || !deploymentsAvailable\n    || (!api.isAPIProduct() && !isEndpointAvailable)\n    || (!isMutualSslOnly && !isTierAvailable)\n    || (api.type !== 'HTTP' && api.type !== 'SOAP' && api.type !== 'APIPRODUCT');\n    const isDeployLinkDisabled = (((api.type !== 'WEBSUB' && !isEndpointAvailable))\n    || (!isMutualSslOnly && !isTierAvailable)\n    || api.workflowStatus === 'CREATED');\n    return (\n        <div id='itest-overview-api-flow' className={classes.root}>\n            <Stepper alternativeLabel activeStep={activeStep} connector={<ColorlibConnector />}>\n                {steps.map((label) => (\n                    <Step key={label}>\n                        <StepLabel StepIconComponent={(props) => (\n                            <ColorlibStepIcon\n                                {...props}\n                                forceComplete={forceComplete}\n                            />\n                        )}\n                        >\n                            {label === 'Develop' && (\n                                <div>\n                                    <Grid\n                                        container\n                                        direction='row'\n                                        justify='center'\n                                    >\n                                        <Grid item>\n                                            {api ? (\n                                                <CheckIcon className={classes.iconTrue} />\n                                            ) : (\n                                                <CloseIcon className={classes.iconFalse} />\n                                            )}\n                                        </Grid>\n                                        <Box ml={1} mb={1}>\n                                            <Grid>\n                                                <Typography variant='h6'>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Overview.CustomizedStepper.Develop'\n                                                        defaultMessage=' Develop'\n                                                    />\n                                                </Typography>\n                                            </Grid>\n                                        </Box>\n                                    </Grid>\n                                    {api.type !== 'WEBSUB' && api.type !== 'APIPRODUCT' && (\n                                        <Box ml={3}>\n                                            <Grid\n                                                container\n                                                direction='row'\n                                                justify='center'\n                                                style={{ marginLeft: '2px' }}\n                                            >\n                                                <Grid item>\n                                                    {isEndpointAvailable ? (\n                                                        <CheckIcon className={classes.iconTrue} />\n                                                    ) : (\n                                                        <CloseIcon className={classes.iconFalse} />\n                                                    )}\n                                                </Grid>\n                                                <Box ml={1} mb={1}>\n                                                    <Grid item>\n                                                        <Link\n                                                            underline='none'\n                                                            className={classes.pageLinks}\n                                                            component={RouterLink}\n                                                            to={'/apis/' + api.id + '/endpoints'}\n                                                        >\n                                                            <Typography variant='h6'>\n                                                                <FormattedMessage\n                                                                    id='Apis.Details.Overview.\n                                                                    CustomizedStepper.Endpoint'\n                                                                    defaultMessage=' Endpoint'\n                                                                />\n                                                            </Typography>\n                                                            <Box ml={1}>\n                                                                <LinkIcon\n                                                                    color='primary'\n                                                                    fontSize='small'\n                                                                />\n                                                            </Box>\n                                                        </Link>\n                                                    </Grid>\n                                                </Box>\n                                            </Grid>\n                                        </Box>\n                                    )}\n                                    {(api.gatewayVendor === 'wso2') && (\n                                        <Box ml={6}>\n                                            <Grid\n                                                container\n                                                direction='row'\n                                                justify='center'\n                                                style={{ marginLeft: '2px' }}\n                                            >\n                                                <Grid item>\n                                                    {isTierAvailable ? (\n                                                        <CheckIcon className={classes.iconTrue} />\n                                                    ) : (\n                                                        <CloseIcon className={classes.iconFalse} />\n                                                    )}\n                                                </Grid>\n                                                <Box ml={1}>\n                                                    <Grid item>\n                                                        <Link\n                                                            underline='none'\n                                                            component={RouterLink}\n                                                            className={classes.pageLinks}\n                                                            to={api.isAPIProduct()\n                                                                ? '/api-products/' + api.id + '/subscriptions'\n                                                                : '/apis/' + api.id + '/subscriptions'}\n                                                        >\n                                                            <Typography variant='h6'>\n                                                                <FormattedMessage\n                                                                    id='Apis.Details.Overview.CustomizedStepper.Tier'\n                                                                    defaultMessage=' Business Plan'\n                                                                />\n                                                            </Typography>\n                                                            <Box ml={1}>\n                                                                <LinkIcon\n                                                                    color='primary'\n                                                                    fontSize='small'\n                                                                />\n                                                            </Box>\n                                                        </Link>\n                                                    </Grid>\n                                                </Box>\n                                            </Grid>\n                                        </Box>\n                                    )}\n                                </div>\n                            )}\n                            {label === 'Deploy' && (\n                                <Tooltip\n                                    title={deploymentsAvailable ? '' : 'Deploy a revision of this API to the Gateway'}\n                                    placement='bottom'\n                                >\n                                    <Grid\n                                        container\n                                        direction='row'\n                                        alignItems='center'\n                                        justify='center'\n                                    >\n                                        <Box mb={1}>\n                                            <Grid item>\n                                                {deploymentsAvailable ? (\n                                                    <CheckIcon className={classes.iconTrue} />\n                                                ) : (\n                                                    <CloseIcon className={classes.iconFalse} />\n                                                )}\n                                            </Grid>\n                                        </Box>\n                                        <Box ml={1} mb={1}>\n                                            <Grid item>\n                                                <Link\n                                                    underline='none'\n                                                    className={clsx(classes.pageLinks, {\n                                                        [classes.disabledLink]: isDeployLinkDisabled,\n                                                    })}\n                                                    component={RouterLink}\n                                                    to={api.isAPIProduct()\n                                                        ? '/api-products/' + api.id + '/deployments'\n                                                        : '/apis/' + api.id + '/deployments'}\n                                                >\n                                                    <Typography variant='h6'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.Overview.CustomizedStepper.Deploy'\n                                                            defaultMessage=' Deploy'\n                                                        />\n                                                    </Typography>\n                                                    <Box ml={1}>\n                                                        <LinkIcon\n                                                            color='default'\n                                                            fontSize='small'\n                                                        />\n                                                    </Box>\n                                                </Link>\n                                            </Grid>\n                                        </Box>\n                                    </Grid>\n                                </Tooltip>\n                            )}\n                            {label === 'Test' && (\n                                <Tooltip\n                                    title={lifecycleState === 'RETIERD' ? 'Cannot use test option while API'\n                                        + ' is in retired state' : ''}\n                                    placement='bottom'\n                                >\n                                    <Grid\n                                        container\n                                        direction='row'\n                                        alignItems='center'\n                                        justify='center'\n                                    >\n                                        <Box ml={1} mb={1}>\n                                            <Grid item>\n                                                <Link\n                                                    className={clsx(classes.pageLinks, {\n                                                        [classes.disabledLink]: isTestLinkDisabled,\n                                                    })}\n                                                    underline='none'\n                                                    component={RouterLink}\n                                                    to={api.isAPIProduct()\n                                                        ? '/api-products/' + api.id + '/test-console'\n                                                        : '/apis/' + api.id + '/test-console'}\n                                                >\n                                                    <Typography variant='h6'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.Overview.CustomizedStepper.Test'\n                                                            defaultMessage=' Test'\n                                                        />\n                                                    </Typography>\n                                                    <Box ml={1}>\n                                                        <LinkIcon\n                                                            color='default'\n                                                            fontSize='small'\n                                                        />\n                                                    </Box>\n                                                </Link>\n                                            </Grid>\n                                        </Box>\n                                    </Grid>\n                                </Tooltip>\n                            )}\n                            {label === 'Publish' && (\n                                <>\n                                    {finalLifecycleState(lifecycleState)}\n                                </>\n                            )}\n                        </StepLabel>\n                    </Step>\n                ))}\n            </Stepper>\n        </div>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport ReactMarkdown from 'react-markdown';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport API from 'AppData/api';\nimport { capitalizeFirstLetter } from 'AppData/stringFormatter';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport BusinessInformation from './BusinessInformation';\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction MetaData(props) {\n    const { parentClasses } = props;\n    const [api] = useAPI();\n\n    return (\n        <>\n            <Typography variant='h5' component='h2' className={parentClasses.title}>\n                {api.type === 'WS' ? (\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.MetaData.metadata'\n                        defaultMessage='Metadata'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.MetaData.context:'\n                        defaultMessage='Context:'\n                    />\n                )}\n            </Typography>\n            <Box p={1}>\n                <Grid container spacing={1}>\n                    <Grid item xs={12} md={6} lg={4}>\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.description'\n                                defaultMessage='Description'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.description\n                            && (\n                                <ReactMarkdown>{capitalizeFirstLetter(api.description)}</ReactMarkdown>\n                            )}\n                        </Typography>\n                        <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                            {!api.description\n                                && (\n                                    <>\n                                        <Typography\n                                            component='p'\n                                            variant='body1'\n                                            className={parentClasses.notConfigured}\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.NewOverview.MetaData.description.not.set'\n                                                defaultMessage='-'\n                                            />\n                                        </Typography>\n                                    </>\n                                )}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Provider */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.provider'\n                                defaultMessage='Provider'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.provider && <>{api.provider}</>}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.context:'\n                                defaultMessage='Context:'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8} style={{ wordBreak: 'break-all' }}>\n                        <Typography component='p' variant='body1'>\n                            {api.context && <>{api.context}</>}\n                        </Typography>\n                    </Grid>\n                    {/* Version */}\n                    {api.apiType === API.CONSTS.API && (\n                        <>\n                            <Grid item xs={12} md={6} lg={4}>\n                                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.MetaData.version'\n                                        defaultMessage='Version'\n                                    />\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12} md={6} lg={8}>\n                                <Typography component='p' variant='body1'>\n                                    {api.version && <>{api.version}</>}\n                                </Typography>\n                            </Grid>\n                        </>\n                    )}\n                    {/* Type */}\n                    {api.apiType === API.CONSTS.APIProduct ? null : (api.gatewayVendor === 'wso2') && (\n                        <>\n                            <Grid item xs={12} md={6} lg={4}>\n                                <>\n                                    <Typography\n                                        component='p'\n                                        variant='subtitle2'\n                                        className={parentClasses.subtitle}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.type:'\n                                            defaultMessage='Type:'\n                                        />\n                                    </Typography>\n                                </>\n                            </Grid>\n                            <Grid item xs={12} md={6} lg={8}>\n                                <Typography component='p' variant='body1'>\n                                    {api.type && <>{api.type === 'WS' ? 'WebSocket' : api.type}</>}\n                                    {!api.type\n                                        && (\n                                            <>\n                                                <Typography\n                                                    component='p'\n                                                    variant='body1'\n                                                    className={parentClasses.notConfigured}\n                                                >\n                                                    <FormattedMessage\n                                                        id='Apis.Details.NewOverview.MetaData.type.not.set'\n                                                        defaultMessage='-'\n                                                    />\n                                                </Typography>\n                                            </>\n                                        )}\n                                </Typography>\n                            </Grid>\n                        </>\n                    )}\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Created Time */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.created.time'\n                                defaultMessage='Created Time'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.createdTime\n                            && (\n                                <>\n                                    <Tooltip\n                                        // eslint-disable-next-line\n                                        title={moment(parseInt(api.createdTime)).calendar()}\n                                        interactive\n                                        placement='top-start'\n                                    >\n                                        <Typography variant='body1' display='block'>\n                                            {// eslint-disable-next-line\n                                            capitalizeFirstLetter(moment(parseInt(api.createdTime)).fromNow())}\n                                        </Typography>\n                                    </Tooltip>\n                                </>\n                            )}\n                            {!api.createdTime\n                                && (\n                                    <>\n                                        <Typography\n                                            component='p'\n                                            variant='body1'\n                                            className={parentClasses.notConfigured}\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.NewOverview.MetaData.createdTime.not.set'\n                                                defaultMessage='-'\n                                            />\n                                        </Typography>\n                                    </>\n                                )}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Last Updated Time */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.last.updated.time'\n                                defaultMessage='Last Updated Time'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.lastUpdatedTime\n                            && (\n                                <>\n                                    <Tooltip\n                                        title={moment(api.lastUpdatedTime).calendar()}\n                                        interactive\n                                        placement='top-start'\n                                    >\n                                        <Typography variant='body1' display='block'>\n                                            {capitalizeFirstLetter(moment(api.lastUpdatedTime).fromNow())}\n                                        </Typography>\n                                    </Tooltip>\n                                </>\n                            )}\n                            {!api.lastUpdatedTime\n                                && (\n                                    <>\n                                        <Typography\n                                            component='p'\n                                            variant='body1'\n                                            className={parentClasses.notConfigured}\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.NewOverview.MetaData.lastUpdatedTime.not.set'\n                                                defaultMessage='-'\n                                            />\n                                        </Typography>\n                                    </>\n                                )}\n                        </Typography>\n                    </Grid>\n                    <BusinessInformation parentClasses={parentClasses} />\n                    {/* Original developer portal URL for third party APIs */}\n                    {api.apiType === API.CONSTS.API && api.advertiseInfo.advertised && (\n                        <>\n                            <Grid item xs={12} md={6} lg={4}>\n                                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.MetaData.originalDevPortalUrl'\n                                        defaultMessage='Original Developer Portal URL'\n                                    />\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12} md={6} lg={8}>\n                                <Typography component='p' variant='body1'>\n                                    {api.advertiseInfo.originalDevPortalUrl\n                                        && <>{api.advertiseInfo.originalDevPortalUrl}</>}\n                                </Typography>\n                                <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                                    {!api.advertiseInfo.originalDevPortalUrl && (\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.originalDevPortalUrl.not.set'\n                                            defaultMessage='-'\n                                        />\n                                    )}\n                                </Typography>\n                            </Grid>\n                        </>\n                    )}\n                </Grid>\n            </Box>\n        </>\n    );\n}\n\nMetaData.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n};\n\nexport default MetaData;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction BusinessInformation(props) {\n    const { parentClasses, api } = props;\n    return (\n        <>\n            <Grid item xs={12} md={6} lg={4}>\n                {/* Business Owner */}\n                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.BusinessInformation.business.owner'\n                        defaultMessage='Business Owner'\n                    />\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={6} lg={8}>\n                <Typography component='p' variant='body1'>\n                    {api.businessInformation.businessOwner && (\n                        <>{api.businessInformation.businessOwner}</>\n                    )}\n                </Typography>\n                <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                    {!api.businessInformation.businessOwner && (\n                        <>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.BusinessInformation.business.owner.not.set'\n                                defaultMessage='-'\n                            />\n                        </>\n                    )}\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={6} lg={4}>\n                {/* Technical Owner */}\n                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.BusinessInformation.technical.owner'\n                        defaultMessage='Technical Owner'\n                    />\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={6} lg={8}>\n                <Typography component='p' variant='body1'>\n                    {api.businessInformation.technicalOwner\n                        && <>{api.businessInformation.technicalOwner}</>}\n                </Typography>\n                <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                    {!api.businessInformation.technicalOwner && (\n                        <>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.BusinessInformation.technical.owner.not.set'\n                                defaultMessage='-'\n                            />\n                        </>\n                    )}\n                </Typography>\n            </Grid>\n        </>\n    );\n}\n\nBusinessInformation.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default withAPI(BusinessInformation);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Box from '@material-ui/core/Box';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst showEndpoint = (api, type) => {\n    if (api.advertiseInfo && api.advertiseInfo.advertised) {\n        if (type === 'prod') {\n            return api.advertiseInfo.apiExternalProductionEndpoint;\n        }\n        if (type === 'sand') {\n            return api.advertiseInfo.apiExternalSandboxEndpoint;\n        }\n    } else if (api.endpointConfig) {\n        if (type === 'prod') {\n            return api.getProductionEndpoint();\n        }\n        if (type === 'sand') {\n            return api.getSandboxEndpoint();\n        }\n    }\n    return null;\n};\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction Endpoints(props) {\n    const { parentClasses, api } = props;\n    const isPrototypedAvailable = api.endpointConfig !== null\n        && api.endpointConfig.implementation_status === 'prototyped';\n\n    return (\n        <>\n            <div>\n                <Typography variant='h5' component='h2' className={parentClasses.title}>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.Endpoints.endpoints'\n                        defaultMessage='Endpoints'\n                    />\n                </Typography>\n            </div>\n            <Box p={1}>\n                {(!api.advertiseInfo || !api.advertiseInfo.advertised) && (\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} md={6} lg={4}>\n                            {/* Production Endpoint (TODO) fix the endpoint\n                                                info when it's available with the api object */}\n                            { !isPrototypedAvailable ? (\n                                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.Endpoints.production.endpoint'\n                                        defaultMessage='Production Endpoint'\n                                    />\n                                </Typography>\n                            )\n                                : (\n                                    <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.Endpoints.prototype.endpoint'\n                                            defaultMessage='Prototype Endpoint'\n                                        />\n                                    </Typography>\n                                )}\n                        </Grid>\n                        <Grid item xs={12} md={6} lg={8}>\n                            <Tooltip\n                                placement='top'\n                                classes={{\n                                    tooltip: parentClasses.htmlTooltip,\n                                }}\n                                interactive\n                                title={\n                                    showEndpoint(api, 'prod')\n                                    && <>{showEndpoint(api, 'prod')}</>\n                                }\n                            >\n                                <Typography component='p' variant='body1' className={parentClasses.url}>\n                                    {showEndpoint(api, 'prod')\n                                    && <>{showEndpoint(api, 'prod')}</>}\n                                </Typography>\n                            </Tooltip>\n                            <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                                {!showEndpoint(api, 'prod') && (\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.Endpoints.not.set'\n                                            defaultMessage='-'\n                                        />\n                                    </>\n                                )}\n                            </Typography>\n                        </Grid>\n                        {!isPrototypedAvailable && (\n                            <Grid item xs={12} md={6} lg={4}>\n                                {/* Sandbox Endpoint (TODO) fix the endpoint info when\n                                                    it's available with the api object */}\n                                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.Endpoints.sandbox.endpoint'\n                                        defaultMessage='Sandbox Endpoint'\n                                    />\n                                </Typography>\n                            </Grid>\n                        )}\n\n                        {!isPrototypedAvailable && (\n                            <Grid item xs={12} md={6} lg={8}>\n                                <Tooltip\n                                    placement='top'\n                                    classes={{\n                                        tooltip: parentClasses.htmlTooltip,\n                                    }}\n                                    interactive\n                                    title={\n                                        showEndpoint(api, 'sand')\n                                        && <>{showEndpoint(api, 'sand')}</>\n                                    }\n                                >\n                                    <Typography component='p' variant='body1' className={parentClasses.url}>\n                                        {showEndpoint(api, 'sand')\n                                        && <>{showEndpoint(api, 'sand')}</>}\n                                    </Typography>\n                                </Tooltip>\n                                <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                                    {!showEndpoint(api, 'sand') && (\n                                        <>\n                                            <FormattedMessage\n                                                id='Apis.Details.NewOverview.Endpoints.sandbox.not.set'\n                                                defaultMessage='-'\n                                            />\n                                        </>\n                                    )}\n                                </Typography>\n                            </Grid>\n                        )}\n                        <Grid item xs={12} md={6} lg={4}>\n                            {/* Sandbox Endpoint (TODO) fix the endpoint info when\n                                                it's available with the api object */}\n                            <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                <FormattedMessage\n                                    id='Apis.Details.NewOverview.Endpoints.endpoint.security'\n                                    defaultMessage='Endpoint Security'\n                                />\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={12} md={6} lg={8}>\n                            <Typography component='p' variant='body1'>\n                                {api.endpointSecurity && <>{api.endpointSecurity.type}</>}\n                            </Typography>\n                            <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                                {!api.endpointSecurity\n                                && (\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.Endpoints.security.not.set'\n                                            defaultMessage='-'\n                                        />\n                                    </>\n                                )}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                )}\n                {api.advertiseInfo && api.advertiseInfo.advertised && (\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} md={6} lg={4}>\n                            <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                <FormattedMessage\n                                    id='Apis.Details.NewOverview.Endpoints.external.production.endpoint'\n                                    defaultMessage='External Production Endpoint'\n                                />\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={12} md={6} lg={8}>\n                            <Tooltip\n                                placement='top'\n                                classes={{\n                                    tooltip: parentClasses.htmlTooltip,\n                                }}\n                                interactive\n                                title={\n                                    showEndpoint(api, 'prod')\n                                    && <>{showEndpoint(api, 'prod')}</>\n                                }\n                            >\n                                <Typography component='p' variant='body1' className={parentClasses.url}>\n                                    {showEndpoint(api, 'prod')\n                                    && <>{showEndpoint(api, 'prod')}</>}\n                                </Typography>\n                            </Tooltip>\n                            <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                                {!showEndpoint(api, 'prod') && (\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.Endpoints.sandbox.not.set'\n                                            defaultMessage='-'\n                                        />\n                                    </>\n                                )}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={12} md={6} lg={4}>\n                            <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                <FormattedMessage\n                                    id='Apis.Details.NewOverview.Endpoints.external.sandbox.endpoint'\n                                    defaultMessage='External Sandbox Endpoint'\n                                />\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={12} md={6} lg={8}>\n                            <Tooltip\n                                placement='top'\n                                classes={{\n                                    tooltip: parentClasses.htmlTooltip,\n                                }}\n                                interactive\n                                title={\n                                    showEndpoint(api, 'sand')\n                                    && <>{showEndpoint(api, 'sand')}</>\n                                }\n                            >\n                                <Typography component='p' variant='body1' className={parentClasses.url}>\n                                    {showEndpoint(api, 'sand')\n                                    && <>{showEndpoint(api, 'sand')}</>}\n                                </Typography>\n                            </Tooltip>\n                            <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                                {!showEndpoint(api, 'sand') && (\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.Endpoints.sandbox.not.set'\n                                            defaultMessage='-'\n                                        />\n                                    </>\n                                )}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                )}\n            </Box>\n        </>\n    );\n}\n\nEndpoints.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default withAPI(Endpoints);\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@material-ui/core/Box';\nimport { Link } from 'react-router-dom';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\nimport Typography from '@material-ui/core/Typography';\nimport Api from 'AppData/api';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\n\nconst styles = {\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: 10,\n    },\n    heading: {\n        marginRight: 20,\n    },\n    contentWrapper: {\n        maxHeight: '125px',\n        overflowY: 'auto',\n    },\n};\n\nfunction VerbElement(props) {\n    const {\n        verb,\n    } = props;\n\n    const useMenuStyles = makeStyles((theme) => {\n        const backgroundColor = theme.custom.resourceChipColors[verb.toLowerCase()];\n        return {\n            customButton: {\n                backgroundColor: '#ffffff',\n                borderColor: backgroundColor,\n                color: backgroundColor,\n                width: theme.spacing(2),\n            },\n        };\n    });\n    const classes = useMenuStyles();\n    return (\n        <Button disableFocusRipple variant='outlined' className={classes.customButton} size='small'>\n            {verb.toUpperCase()}\n        </Button>\n    );\n}\n\n/**\n * Topics component\n */\nclass Topics extends React.Component {\n    /**\n     *\n     * @param {*} props\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            topics: [],\n        };\n        this.restApi = new Api();\n    }\n\n    /**\n     *\n     */\n    componentDidMount() {\n        this.restApi.getAsyncAPIDefinition(this.props.api.id)\n            .then((response) => {\n                const topics = [];\n                Object.entries(response.body.channels).forEach(([name, topic]) => {\n                    if (topic.subscribe) {\n                        topics.push({ name, type: 'subscribe' });\n                    }\n\n                    if (topic.publish) {\n                        topics.push({ name, type: 'publish' });\n                    }\n                });\n                this.setState({ topics });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    }\n\n    /**\n     *\n     */\n    render() {\n        if (this.state.notFound) {\n            return (\n                <div>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.Resources.resource.not.found'\n                        defaultMessage='resource not found...'\n                    />\n                </div>\n            );\n        }\n        const { classes, parentClasses, api } = this.props;\n\n        return (\n            <>\n                <div className={parentClasses.titleWrapper}>\n                    <Typography variant='h5' component='h3' className={parentClasses.title}>\n                        <FormattedMessage\n                            id='Apis.Details.NewOverview.async.api.topics'\n                            defaultMessage='Topics'\n                        />\n                    </Typography>\n                </div>\n                <Box p={1}>\n                    <div>\n                        {\n                            this.state.topics.map((topic) => {\n                                return (\n                                    <div className={classes.root}>\n                                        <Grid container spacing={1}>\n                                            <Grid item xs={12}>\n                                                <Grid container direction='row' spacing={1}>\n                                                    <Grid item>\n                                                        <VerbElement verb={topic.type.substr(0, 3)} />\n                                                    </Grid>\n                                                    <Grid item>\n                                                        <Typography className={classes.heading} variant='body1'>\n                                                            {topic.name}\n                                                        </Typography>\n                                                    </Grid>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </div>\n                                );\n                            })\n                        }\n                    </div>\n                    <Link to={'/apis/' + api.id + '/topics'}>\n                        <Typography\n                            className={classes.subHeading}\n                            color='primary'\n                            display='inline'\n                            variant='caption'\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.Operations.ShowMore'\n                                defaultMessage='Show More'\n                            />\n                            <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                        </Typography>\n                    </Link>\n                </Box>\n            </>\n        );\n    }\n}\nTopics.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.shape({}),\n    }).isRequired,\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({ id: PropTypes.string }).isRequired,\n};\n\nexport default withStyles(styles)(Topics);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useReducer,\n    useContext,\n    useState,\n    useMemo,\n    useEffect,\n} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport { FormattedMessage } from 'react-intl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport CONSTS from 'AppData/Constants';\nimport Alert from 'AppComponents/Shared/Alert';\n\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport UpdateWithoutDetails from 'AppComponents/Apis/Details/Configuration/components/UpdateWithoutDetails';\nimport ThumbnailView from 'AppComponents/Apis/Listing/components/ImageGenerator/ThumbnailView';\nimport { isRestricted } from 'AppData/AuthManager';\nimport API from 'AppData/api.js';\nimport APIProduct from 'AppData/APIProduct';\nimport DefaultVersion from './components/DefaultVersion';\nimport DescriptionEditor from './components/DescriptionEditor';\nimport AccessControl from './components/AccessControl';\nimport AdvertiseInfo from './components/AdvertiseInfo';\nimport StoreVisibility from './components/StoreVisibility';\nimport Tags from './components/Tags';\nimport Social from './components/Social';\nimport APICategories from './components/APICategories';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(3),\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    paper: {\n        padding: theme.spacing(3),\n    },\n    paperCenter: {\n        padding: theme.spacing(3),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    heading: {\n        fontSize: '1.1rem',\n        fontWeight: 400,\n        marginBottom: theme.spacing(0),\n    },\n    itemPadding: {\n        marginBottom: theme.spacing(3),\n    },\n    arrowForwardIcon: {\n        fontSize: 50,\n        color: '#ccc',\n        position: 'absolute',\n        top: 90,\n        right: -43,\n    },\n    arrowBackIcon: {\n        fontSize: 50,\n        color: '#ccc',\n        position: 'absolute',\n        top: 30,\n        right: -71,\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: '38px',\n    },\n    btnSpacing: {\n        marginRight: theme.spacing(1),\n    },\n    tierList: {\n        marginLeft: theme.spacing(1),\n        fontFamily: theme.typography.fontFamily,\n    },\n    dialogTitle: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}));\n\n/**\n *\n * Deep coping the properties in API object (what ever the object in the state),\n * making sure that no direct mutations happen when updating the state.\n * You should know the shape of the object that you are keeping in the state,\n * @param {Object} api\n * @returns {Object} Deep copy of an object\n */\nfunction copyAPIConfig(api) {\n    const copiedConfig = {\n        id: api.id,\n        name: api.name,\n        description: api.description,\n        lifeCycleStatus: api.lifeCycleStatus,\n        accessControl: api.accessControl,\n        authorizationHeader: api.authorizationHeader,\n        responseCachingEnabled: api.responseCachingEnabled,\n        cacheTimeout: api.cacheTimeout,\n        visibility: api.visibility,\n        isDefaultVersion: api.isDefaultVersion,\n        enableSchemaValidation: api.enableSchemaValidation,\n        accessControlRoles: [...api.accessControlRoles],\n        visibleRoles: [...api.visibleRoles],\n        tags: [...api.tags],\n        maxTps: api.maxTps,\n        transport: [...api.transport],\n        wsdlUrl: api.wsdlUrl,\n        securityScheme: [...api.securityScheme],\n        categories: [...api.categories],\n        corsConfiguration: {\n            corsConfigurationEnabled: api.corsConfiguration.corsConfigurationEnabled,\n            accessControlAllowCredentials: api.corsConfiguration.accessControlAllowCredentials,\n            accessControlAllowOrigins: [...api.corsConfiguration.accessControlAllowOrigins],\n            accessControlAllowHeaders: [...api.corsConfiguration.accessControlAllowHeaders],\n            accessControlAllowMethods: [...api.corsConfiguration.accessControlAllowMethods],\n        },\n        additionalProperties: [...api.additionalProperties],\n        type: api.type,\n        policies: [...api.policies],\n        endpointConfig: api.endpointConfig,\n    };\n    if (api.advertiseInfo) {\n        copiedConfig.advertiseInfo = {\n            advertised: api.advertiseInfo.advertised,\n            apiExternalProductionEndpoint: api.advertiseInfo.apiExternalProductionEndpoint,\n            apiExternalSandboxEndpoint: api.advertiseInfo.apiExternalSandboxEndpoint,\n            originalDevPortalUrl: api.advertiseInfo.originalDevPortalUrl,\n            apiOwner: api.advertiseInfo.apiOwner,\n            vendor: api.advertiseInfo.vendor,\n        }\n    }\n    return copiedConfig;\n}\n\n/**\n     *\n     * Reduce the configuration UI related actions in to updated state\n     * @param {*} state current state\n     * @param {*} configAction dispatched configuration action\n     * @returns {Object} updated state\n     */\nfunction configReducer(state, configAction) {\n    const { action, value } = configAction;\n    const nextState = copyAPIConfig(state);\n    switch (action) {\n        case 'description':\n        case 'isDefaultVersion':\n        case 'authorizationHeader':\n        case 'responseCachingEnabled':\n        case 'cacheTimeout':\n        case 'enableSchemaValidation':\n        case 'visibility':\n        case 'maxTps':\n        case 'categories':\n        case 'tags':\n            nextState[action] = value;\n            return nextState;\n        case 'accessControl':\n            nextState[action] = value;\n            if (value === 'NONE') {\n                nextState.accessControlRoles = [];\n            }\n            return nextState;\n        case 'accessControlRoles':\n            return { ...copyAPIConfig(state), [action]: value };\n        case 'visibleRoles':\n            return { ...copyAPIConfig(state), [action]: value };\n        case 'github_repo':\n        case 'slack_url': {\n            const targetProperty = nextState.additionalProperties.find((property) => property.name === action);\n            const updatedProperty = {\n                name: action,\n                value,\n                display: true,\n            };\n            if (targetProperty) {\n                nextState.additionalProperties = [\n                    ...nextState.additionalProperties.filter((property) => property.name !== action), updatedProperty];\n            } else {\n                nextState.additionalProperties.push(updatedProperty);\n            }\n            return nextState;\n        }\n        case 'advertised':\n        case 'apiExternalProductionEndpoint':\n        case 'apiExternalSandboxEndpoint':\n        case 'originalDevPortalUrl':\n            if (nextState.advertiseInfo) {\n                nextState.advertiseInfo[action] = value;\n            }\n            return nextState;\n        case 'endpointConfig':\n            return { ...state, [action]: value };\n        case 'policies':\n            return { ...state, [action]: value };\n        default:\n            return state;\n    }\n}\n/**\n * This component handles the basic configurations UI in the API details page\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DesignConfigurations() {\n    const { api, updateAPI } = useContext(APIContext);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [errorInAccessRoles, setErrorInAccessRoles] = useState(false);\n    const [errorInRoleVisibility, setErrorInRoleVisibility] = useState(false);\n    const [errorInTags, setErrorInTags] = useState(false);\n    const [apiConfig, configDispatcher] = useReducer(configReducer, copyAPIConfig(api));\n    const classes = useStyles();\n    const [descriptionType, setDescriptionType] = useState('');\n    const [overview, setOverview] = useState('');\n    const [overviewDocument, setOverviewDocument] = useState(null);\n    const [isOpen, setIsOpen] = useState(false);\n    const [slackURLProperty, githubURLProperty] = useMemo(() => [\n        apiConfig.additionalProperties.find((prop) => prop.name === 'slack_url'),\n        apiConfig.additionalProperties.find((prop) => prop.name === 'github_repo'),\n    ],\n    [apiConfig.additionalProperties]);\n    const invalidTagsExist = apiConfig.tags.find((tag) => {\n        return (/([~!@#;%^&*+=|\\\\<>\"'/,])/.test(tag)) || (tag.length > 30);\n    });\n    const handleChange = (event) => {\n        const type = event.target.value;\n        if (type === CONSTS.DESCRIPTION_TYPES.DESCRIPTION) {\n            if (apiConfig.description === null) {\n                configDispatcher({ action: CONSTS.DESCRIPTION_TYPES.DESCRIPTION, value: overview });\n            }\n        } else if (type === CONSTS.DESCRIPTION_TYPES.OVERVIEW) {\n            if (overviewDocument === null) {\n                setOverview(apiConfig.description);\n            }\n        }\n        setDescriptionType(type);\n    };\n    const updateContent = (content) => {\n        if (descriptionType === CONSTS.DESCRIPTION_TYPES.DESCRIPTION) {\n            configDispatcher({ action: CONSTS.DESCRIPTION_TYPES.DESCRIPTION, value: content });\n        } else if (descriptionType === CONSTS.DESCRIPTION_TYPES.OVERVIEW) {\n            configDispatcher({ action: CONSTS.DESCRIPTION_TYPES.DESCRIPTION, value: null });\n            setOverview(content);\n        }\n    };\n    const loadContentForDoc = (documentId) => {\n        const { apiType } = api.apiType;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const docPromise = restApi.getInlineContentOfDocument(api.id, documentId);\n        docPromise\n            .then((doc) => {\n                let { text } = doc;\n                Object.keys(api).forEach((fieldName) => {\n                    const regex = new RegExp('___' + fieldName + '___', 'g');\n                    text = text.replace(regex, api[fieldName]);\n                });\n                setOverview(text);\n            });\n    };\n    const addDocument = async () => {\n        const { apiType } = api.apiType;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const docPromise = await restApi.addDocument(api.id, {\n            name: 'overview',\n            type: 'OTHER',\n            summary: 'overview',\n            sourceType: 'MARKDOWN',\n            visibility: 'API_LEVEL',\n            sourceUrl: '',\n            otherTypeName: CONSTS.DESCRIPTION_TYPES.OVERVIEW,\n            inlineContent: '',\n        }).then((response) => {\n            return response.body;\n        }).catch((error) => {\n            if (process.env.NODE_ENV !== 'production') {\n                console.log(error);\n            }\n        });\n        return docPromise;\n    };\n\n    const addDocumentContent = (document) => {\n        const { apiType } = api.apiType;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const docPromise = restApi.addInlineContentToDocument(api.id, document.documentId, 'MARKDOWN', overview);\n        docPromise\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    console.log(error);\n                }\n            });\n    };\n\n    const deleteOverviewDocument = () => {\n        const { apiType } = api.apiType;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const docPromise = restApi.deleteDocument(api.id, overviewDocument.documentId);\n        docPromise\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n            });\n    };\n\n    useEffect(() => {\n        const { apiType } = api.apiType;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const promisedApi = restApi.getDocuments(api.id);\n        promisedApi\n            .then((response) => {\n                const overviewDoc = response.body.list.filter((item) => item.otherTypeName === '_overview');\n                if (overviewDoc.length > 0) {\n                    const doc = overviewDoc[0];\n                    setOverviewDocument(doc);\n                    loadContentForDoc(doc.documentId);\n                    setDescriptionType(CONSTS.DESCRIPTION_TYPES.OVERVIEW); // Only one doc we can render\n                } else {\n                    setDescriptionType(CONSTS.DESCRIPTION_TYPES.DESCRIPTION);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    Alert.error('Error occurred');\n                }\n            });\n    }, []);\n\n    /**\n     *\n     * Handle the configuration view save button action\n     */\n    async function handleSave() {\n        setIsUpdating(true);\n        updateAPI(apiConfig)\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                }\n            });\n        if (descriptionType === CONSTS.DESCRIPTION_TYPES.DESCRIPTION) {\n            if (overviewDocument) {\n                deleteOverviewDocument();\n            }\n        }\n\n        if (descriptionType === CONSTS.DESCRIPTION_TYPES.OVERVIEW) {\n            let document = overviewDocument;\n            if (document === null) {\n                document = await addDocument();\n            }\n            addDocumentContent(document);\n        }\n        setIsUpdating(false);\n    }\n\n    const handleClick = (availableTiers, endpointUrl, endpointType) => {\n        configDispatcher({ action: 'policies', value: availableTiers });\n        // create endpoint config\n        let updatedEndpointConfig;\n        if (apiConfig.endpointConfig) {\n            updatedEndpointConfig = { ...apiConfig.endpointConfig };\n            if (endpointType === 'PRODUCTION') {\n                updatedEndpointConfig = {\n                    ...apiConfig.endpointConfig,\n                    production_endpoints: { url: endpointUrl, ...apiConfig.endpointConfig.production_endpoints },\n                };\n            } else {\n                updatedEndpointConfig = {\n                    ...apiConfig.endpointConfig,\n                    sandbox_endpoints: { url: endpointUrl, ...apiConfig.endpointConfig.sandbox_endpoints },\n                };\n            }\n        } else {\n            let endpointTypeForApi = 'http';\n            if (apiConfig.type === 'WS') {\n                endpointTypeForApi = 'ws';\n            }\n            updatedEndpointConfig = {\n                endpoint_type: endpointTypeForApi,\n            };\n            if (endpointType === 'PRODUCTION') {\n                updatedEndpointConfig.production_endpoints = {\n                    url: endpointUrl,\n                };\n            } else {\n                updatedEndpointConfig.sandbox_endpoints = {\n                    url: endpointUrl,\n                };\n            }\n        }\n        if (api.type !== 'WEBSUB') {\n            configDispatcher({ action: 'endpointConfig', value: updatedEndpointConfig });\n        }\n        setIsOpen(false);\n    };\n\n    const handleClose = () => {\n        configDispatcher({ action: 'advertised', value: api.advertiseInfo.advertised });\n        setIsOpen(false);\n    };\n    const restricted = isRestricted(['apim:api_publish', 'apim:api_create'], api\n    || isUpdating || api.isRevision || invalidTagsExist\n    || (apiConfig.visibility === 'RESTRICTED'\n    && apiConfig.visibleRoles.length === 0));\n\n    return (\n        <>\n            <Container maxWidth='md'>\n                <Grid container spacing={2}>\n                    <Grid item md={12}>\n                        <Typography id='itest-api-details-design-config-head' variant='h5' component='h2'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Configuration.Design.topic.header'\n                                defaultMessage='Design Configurations'\n                            />\n                        </Typography>\n                        <Box color='text.secondary'>\n                            {api.apiType === API.CONSTS.APIProduct\n                                ? (\n                                    <Typography variant='caption'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.Design.APIProduct.sub.heading'\n                                            defaultMessage='Configure basic API Product meta information'\n                                        />\n                                    </Typography>\n                                )\n                                : (\n                                    <Typography variant='caption'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.Design.sub.heading'\n                                            defaultMessage='Configure basic API meta information'\n                                        />\n                                    </Typography>\n                                )}\n                        </Box>\n                    </Grid>\n                    <Grid item md={12}>\n                        <Paper elevation={0}>\n                            <div>\n                                <Box px={8} py={5}>\n                                    <Box py={1}>\n                                        <Grid container spacing={0}>\n                                            <Grid item xs={12} md={2} id='edit-api-thumbnail-btn'>\n                                                <ThumbnailView\n                                                    api={api}\n                                                    width={100}\n                                                    height={100}\n                                                    isEditable={!isRestricted(['apim:api_publish',\n                                                        'apim:api_create'], api)}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} md={10}>\n                                                <DescriptionEditor\n                                                    api={apiConfig}\n                                                    updateContent={updateContent}\n                                                    descriptionType={descriptionType}\n                                                    handleChange={handleChange}\n                                                    overview={overview}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Box>\n                                    <Box py={1}>\n                                        <AccessControl api={apiConfig} configDispatcher={configDispatcher}  \n                                            setIsDisabled={setErrorInAccessRoles} />\n                                    </Box>\n                                    <Box py={1}>\n                                        <StoreVisibility api={apiConfig} configDispatcher={configDispatcher}\n                                            setIsDisabled={setErrorInRoleVisibility} />\n                                    </Box>\n                                    <Box py={1}>\n                                        <Tags api={apiConfig} configDispatcher={configDispatcher}\n                                            setIsDisabled={setErrorInTags} />\n                                    </Box>\n                                    <Box py={1}>\n                                        <APICategories\n                                            api={apiConfig}\n                                            configDispatcher={configDispatcher}\n                                            categories={api.categories}\n                                        />\n                                    </Box>\n                                    <Box py={1}>\n                                        <Social\n                                            slackURL={slackURLProperty && slackURLProperty.value}\n                                            githubURL={githubURLProperty && githubURLProperty.value}\n                                            configDispatcher={configDispatcher}\n                                        />\n                                    </Box>\n                                    <Box py={1}>\n                                        {api.apiType !== API.CONSTS.APIProduct && (\n                                            <AdvertiseInfo\n                                                oldApi={api}\n                                                api={apiConfig}\n                                                setIsOpen={setIsOpen}\n                                                configDispatcher={configDispatcher}\n                                            />\n                                        )}\n                                    </Box>\n                                    <Box py={1}>\n                                        {api.apiType !== API.CONSTS.APIProduct && (\n                                            <DefaultVersion api={apiConfig} configDispatcher={configDispatcher} />\n                                        )}\n                                    </Box>\n                                    <Box pt={2}>\n                                        <Button\n                                            disabled={errorInAccessRoles || \n                                                errorInRoleVisibility || \n                                                restricted || \n                                                errorInTags}\n                                            type='submit'\n                                            variant='contained'\n                                            color='primary'\n                                            className={classes.btnSpacing}\n                                            onClick={handleSave}\n                                            id='design-config-save-btn'\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.Configuration.save'\n                                                defaultMessage='Save'\n                                            />\n                                            {isUpdating && <CircularProgress size={15} />}\n                                        </Button>\n                                        <Button\n                                            component={Link}\n                                            to={'/apis/' + api.id + '/overview'}\n                                            aria-label='Cancel'\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.Configuration.cancel'\n                                                defaultMessage='Cancel'\n                                            />\n                                        </Button>\n                                    </Box>\n                                </Box>\n                            </div>\n                        </Paper>\n                    </Grid>\n                </Grid>\n                <UpdateWithoutDetails\n                    classes={classes}\n                    api={api}\n                    apiConfig={apiConfig}\n                    handleClick={handleClick}\n                    handleClose={handleClose}\n                    open={isOpen}\n                />\n            </Container>\n        </>\n    );\n}\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Button from '@material-ui/core/Button';\nimport Chip from '@material-ui/core/Chip';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport API from 'AppData/api';\nimport Joi from '@hapi/joi';\n\n/**\n *\n * @returns\n */\nexport default function UpdateWithoutDetails(props) {\n    const {\n        classes,\n        api,\n        apiConfig: {\n            endpointConfig,\n            policies,\n        },\n        handleClick,\n        open,\n        handleClose,\n    } = props;\n\n    let availableEndpoint = '';\n    let endpointType = 'PRODUCTION';\n    if (endpointConfig) {\n        if (endpointConfig.production_endpoints) {\n            availableEndpoint = endpointConfig.production_endpoints.url;\n            endpointType = 'PRODUCTION';\n        } else if (endpointConfig.sandbox_endpoints) {\n            availableEndpoint = endpointConfig.sandbox_endpoints.url;\n            endpointType = 'SANDBOX';\n        }\n    } else if (api.advertiseInfo && api.advertiseInfo.apiExternalProductionEndpoint) {\n        availableEndpoint = api.advertiseInfo.apiExternalProductionEndpoint;\n        endpointType = 'PRODUCTION';\n    } else if (api.advertiseInfo && api.advertiseInfo.apiExternalSandboxEndpoint) {\n        availableEndpoint = api.advertiseInfo.apiExternalSandboxEndpoint;\n        endpointType = 'SANDBOX';\n    }\n\n    const [endpointUrl, setEndpointUrl] = useState(availableEndpoint);\n    const [isValidEndpoint, setValidEndpoint] = useState(availableEndpoint !== '');\n    const [availableTiers, setAvailableTiers] = useState([]);\n\n    useEffect(() => {\n        if (policies.length > 0) {\n            setAvailableTiers(policies);\n        } else {\n            const isAsyncAPI = (api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE'\n                || api.type === 'ASYNC');\n            if (isAsyncAPI) {\n                API.asyncAPIPolicies().then((response) => {\n                    if (response.body.list && response.body.list.length > 0) {\n                        setAvailableTiers([response.body.list[0].policyName]);\n                    }\n                });\n            } else {\n                API.policies('subscription').then((response) => {\n                    if (response.body.list && response.body.list.length > 0) {\n                        setAvailableTiers([response.body.list[0].name]);\n                    }\n                });\n            }\n        }\n    }, [endpointConfig, policies]);\n\n    /**\n     * Validate external endpoint\n     *\n     * @param event\n     */\n    const handleOnChangeEndpoint = (event) => {\n        const { value } = event.target;\n        setEndpointUrl(value);\n        const urlSchema = Joi.string().uri().empty();\n        setValidEndpoint(!urlSchema.validate(value).error);\n    };\n\n    const handleSave = () => {\n        handleClick(availableTiers, endpointUrl, endpointType);\n    };\n\n    return (\n        <Dialog onClose={handleClose} aria-labelledby='update-api-confirmation' open={open}>\n            <MuiDialogTitle disableTypography className={classes.dialogTitle}>\n                <Typography variant='h6'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.UpdateWithoutDetails.dialog.title'\n                        defaultMessage='Restore to a Regular API'\n                    />\n                </Typography>\n                {handleClose ? (\n                    <IconButton aria-label='close' className={classes.closeButton} onClick={handleClose}>\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </MuiDialogTitle>\n            <Divider light />\n            <MuiDialogContent>\n                <Box my={1}>\n                    <DialogContentText id='itest-confirm-update-text'>\n                        <Typography variant='subtitle1' display='block' gutterBottom>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.UpdateWithoutDetails.confirm.update.message'\n                                defaultMessage={'This API is currently published and by changing to a regular API, '\n                                + 'it will not be available for consumption since it has no active deployments.'}\n                            />\n                        </Typography>\n                    </DialogContentText>\n                </Box>\n                {availableTiers.length > 0 && (\n                    <Box my={1}>\n                        <Grid container direction='row'>\n                            <Grid>\n                                <Typography variant='subtitle1' display='block' gutterBottom>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.UpdateWithoutDetails.tier.message'\n                                        defaultMessage='Business Plans: '\n                                    />\n                                </Typography>\n                            </Grid>\n                            <Grid>\n                                <div className={classes.tierList}>\n                                    {availableTiers.map((tierName) => (\n                                        <Chip label={tierName} />\n                                    ))}\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                )}\n                <Box my={1}>\n                    <TextField\n                        fullWidth\n                        id='itest-id-api-endpoint-input'\n                        label={(\n                            <>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.UpdateWithoutDetails.endpoint'\n                                    defaultMessage='Endpoint'\n                                />\n                                <sup className={classes.mandatoryStar}>*</sup>\n                            </>\n                        )}\n                        name='endpoint'\n                        value={endpointUrl}\n                        onChange={handleOnChangeEndpoint}\n                        helperText={\n                            !isValidEndpoint && (\n                                <div style={{ marginTop: '10px' }}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.UpdateWithoutDetails.endpoint.error'\n                                        defaultMessage='Invalid Endpoint URL'\n                                    />\n                                </div>\n                            )\n                        }\n                        error={!isValidEndpoint}\n                        margin='normal'\n                        variant='outlined'\n                    />\n                </Box>\n            </MuiDialogContent>\n            <MuiDialogActions>\n                <Button\n                    disabled={!isValidEndpoint}\n                    variant='contained'\n                    color='primary'\n                    className={classes.btnSpacing}\n                    onClick={handleSave}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.UpdateWithoutDetails.continue'\n                        defaultMessage='Continue'\n                    />\n                </Button>\n                <Button\n                    onClick={handleClose}\n                    aria-label='Cancel'\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.UpdateWithoutDetails.cancel'\n                        defaultMessage='Cancel'\n                    />\n                </Button>\n            </MuiDialogActions>\n        </Dialog>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport Box from '@material-ui/core/Box';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DefaultVersion(props) {\n    const { api, configDispatcher } = props;\n    const [apiFromContext] = useAPI();\n    return (\n        <Grid container spacing={1} alignItems='flex-start' xs={11}>\n            <Grid item>\n                <Box>\n                    <FormControl component='fieldset' style={{ display: 'flex' }}>\n                        <FormLabel component='legend'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Configuration.isdefault.label'\n                                defaultMessage='Make this the default version'\n                            />\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='Make this the default version'\n                            name='defaultVersion'\n                            value={api.isDefaultVersion}\n                            onChange={({\n                                target: { value },\n                            }) => configDispatcher({\n                                action: 'isDefaultVersion', value: value === 'true',\n                            })}\n                            style={{ display: 'flow-root' }}\n                        >\n                            <FormControlLabel\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                value\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.isdefault.yes'\n                                        defaultMessage='Yes'\n                                    />\n                                )}\n                                id='default-version-yes'\n                            />\n                            <FormControlLabel\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                value={false}\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.isdefault.no'\n                                        defaultMessage='No'\n                                    />\n                                )}\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Box>\n            </Grid>\n            <Grid item xs={1}>\n                <Box>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Configuration.defaultversion.tooltip'\n                                defaultMessage={\n                                    'Indicates if this is the default version of the API. If an '\n                                    + 'API is invoked without specifying a version, the API Gateway will '\n                                    + 'route the request to the default version of the API.'\n                                }\n                            />\n                        )}\n                        aria-label='add'\n                        placement='right-end'\n                        interactive\n                    >\n                        <HelpOutline />\n                    </Tooltip>\n                </Box>\n            </Grid>\n        </Grid>\n    );\n}\n\nDefaultVersion.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, Suspense, lazy } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport CONSTS from 'AppData/Constants';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"MDMonacoEditor\" */));\nconst ReactMarkdown = lazy(() => import('react-markdown' /* webpackChunkName: \"MDReactMarkdown\" */));\n\nconst useStyles = makeStyles(() => ({\n    flex: {\n        flex: 1,\n    },\n    popupHeader: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    splitWrapper: {\n        padding: 0,\n    },\n    editorHeader: {\n        alignItems: 'center',\n        display: 'flex',\n    },\n    markdownViewWrapper: {\n        height: '100vh',\n        overflowY: 'auto',\n    },\n    appBar: {\n        position: 'relative',\n    },\n    button: {\n        height: 30,\n        marginLeft: 30,\n    },\n}));\n\nfunction Transition(props) {\n    return <Slide direction='up' {...props} />;\n}\n\n/**\n * DescriptionEditor for API Description / Overview\n * @param {*} props properties\n * @returns {*} DescriptionEditor component\n */\nexport default function DescriptionEditor(props) {\n    const classes = useStyles();\n    const {\n        api,\n        updateContent,\n        descriptionType,\n        overview,\n        handleChange,\n    } = props;\n    const [open, setOpen] = useState(false);\n    const [content, setContent] = useState(null);\n    const [apiFromContext] = useAPI();\n    const [isUpdating, setIsUpdating] = useState(false);\n\n    const toggleOpen = () => {\n        if (!open) {\n            if (descriptionType === CONSTS.DESCRIPTION_TYPES.DESCRIPTION) {\n                setContent(api.description);\n            } else if (descriptionType === CONSTS.DESCRIPTION_TYPES.OVERVIEW) {\n                setContent(overview);\n            }\n        }\n        setOpen(!open);\n    };\n    const setNewContent = (newContent) => {\n        setContent(newContent);\n    };\n    const handleTextChange = (event) => {\n        const { value } = event.currentTarget;\n        setContent(value);\n    };\n    const modifyContent = () => {\n        setIsUpdating(true);\n        updateContent(content);\n        toggleOpen();\n        setIsUpdating(false);\n    };\n    const editorDidMount = (editor) => {\n        editor.focus();\n    };\n\n    return (\n        <>\n            <Button\n                variant='outlined'\n                color='primary'\n                disabled={api.isRevision || isRestricted(['apim:api_create'], apiFromContext)}\n                onClick={toggleOpen}\n            >\n                <FormattedMessage\n                    id='Apis.Details.Configuration.components.DescriptionEditor.edit.content.button'\n                    defaultMessage='Edit description'\n                />\n            </Button>\n            <Dialog fullScreen open={open} onClose={toggleOpen} TransitionComponent={Transition}>\n                <AppBar color='inherit' className={classes.appBar}>\n                    <Toolbar variant='dense'>\n                        <Grid\n                            container\n                            direction='row'\n                            justify='space-between'\n                            alignItems='center'\n                        >\n                            <Grid item xs={8}>\n                                <Box display='flex'>\n                                    <IconButton edge='start' color='inherit' onClick={toggleOpen} aria-label='close'>\n                                        <CloseIcon />\n                                    </IconButton>\n                                    <Box\n                                        display='flex'\n                                        alignItems='center'\n                                        mx={1}\n                                        fontFamily='fontFamily'\n                                        fontSize='h4.fontSize'\n                                        color='primary.main'\n                                    >\n                                        {api.name}\n                                    </Box>\n                                    <Typography variant='h5' className={classes.editorHeader}>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Configuration.components.DescriptionEditor'\n                                                + '.edit.description.of'}\n                                            defaultMessage='Description :'\n                                        />\n                                    </Typography>\n                                    <Box ml={2}>\n                                        <FormControl component='fieldset'>\n                                            <RadioGroup\n                                                row\n                                                aria-label='description-type'\n                                                value={descriptionType}\n                                                onChange={handleChange}\n                                            >\n                                                <FormControlLabel\n                                                    value={CONSTS.DESCRIPTION_TYPES.DESCRIPTION}\n                                                    control={<Radio />}\n                                                    label='Text'\n                                                />\n                                                <FormControlLabel\n                                                    value={CONSTS.DESCRIPTION_TYPES.OVERVIEW}\n                                                    control={<Radio />}\n                                                    label='Markdown'\n                                                />\n                                            </RadioGroup>\n                                        </FormControl>\n                                        <Box>\n                                            { descriptionType !== CONSTS.DESCRIPTION_TYPES.DESCRIPTION && (\n                                                <Typography variant='caption'>\n                                                    <FormattedMessage\n                                                    // eslint-disable-next-line max-len\n                                                        id='Apis.Details.Configuration.components.DescriptionEditor.markdown.help'\n                                                        // eslint-disable-next-line max-len\n                                                        defaultMessage='The Markdown option allows you to replace the content of the Overview page in devportal with the content given below.'\n                                                    />\n                                                </Typography>)}\n                                        </Box>\n                                    </Box>\n                                </Box>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    className={classes.button}\n                                    variant='contained'\n                                    disabled={isUpdating}\n                                    color='primary'\n                                    onClick={modifyContent}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.DescriptionEditor.update.cont.button'\n                                        defaultMessage='Update Content'\n                                    />\n                                    {isUpdating && <CircularProgress size={24} />}\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Toolbar>\n                </AppBar>\n                <div className={classes.splitWrapper}>\n                    <Grid container spacing={7}>\n                        { descriptionType === CONSTS.DESCRIPTION_TYPES.DESCRIPTION\n                            ? (\n                                <Grid item xs={12}>\n                                    <Box display='flex' m={2}>\n                                        <TextField\n                                            id='itest-description-textfield'\n                                            multiline\n                                            fullWidth\n                                            rows={4}\n                                            variant='outlined'\n                                            onChange={handleTextChange}\n                                            value={content}\n                                        />\n                                    </Box>\n                                </Grid>\n                            ) : (\n                                <>\n                                    <Grid item xs={6}>\n                                        <Suspense fallback={<CircularProgress />}>\n                                            <MonacoEditor\n                                                width='100%'\n                                                language='markdown'\n                                                theme='vs-dark'\n                                                value={content}\n                                                options={{ selectOnLineNumbers: true }}\n                                                onChange={setNewContent}\n                                                editorDidMount={editorDidMount}\n                                            />\n                                        </Suspense>\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <div className={classes.markdownViewWrapper}>\n                                            <Suspense fallback={<CircularProgress />}>\n                                                <ReactMarkdown escapeHtml>{content}</ReactMarkdown>\n                                            </Suspense>\n                                        </div>\n                                    </Grid>\n                                </>\n                            )}\n                    </Grid>\n                </div>\n            </Dialog>\n        </>\n    );\n}\n\nDescriptionEditor.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    updateContent: PropTypes.func.isRequired,\n    descriptionType: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { isRestricted } from 'AppData/AuthManager';\nimport ChipInput from 'material-ui-chip-input'; // DEPRECATED: Do not COPY and use this component.\nimport APIValidation from 'AppData/APIValidation';\nimport base64url from 'base64url';\nimport Error from '@material-ui/icons/Error';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Chip from '@material-ui/core/Chip';\nimport { red } from '@material-ui/core/colors/';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst useStyles = makeStyles((theme) => ({\n    tooltip: {\n        position: 'absolute',\n        right: theme.spacing(-4),\n        top: theme.spacing(1),\n    },\n}));\n\n/**\n *\n * api.accessControl possible values are `NONE` and `RESTRICTED`\n * @export\n * @param {*} props\n * @returns\n */\nexport default function AccessControl(props) {\n    const [roleValidity, setRoleValidity] = useState(true);\n    const [userRoleValidity, setUserRoleValidity] = useState(true);\n    const { api, configDispatcher, setIsDisabled } = props;\n    const isNone = api.accessControl === 'NONE';\n    const [apiFromContext] = useAPI();\n    const classes = useStyles();\n\n    const [invalidRoles, setInvalidRoles] = useState([]);\n    const [otherValidSystemRoles, setOtherValidSystemRoles] = useState([]);\n    useEffect(() => {\n        if (invalidRoles.length === 0) {\n            setRoleValidity(true);\n        }\n    }, [invalidRoles]);\n    useEffect(() => {\n        if (otherValidSystemRoles.length === api.accessControlRoles.length && otherValidSystemRoles.length !== 0\n            && (otherValidSystemRoles.every((val) => api.accessControlRoles.includes(val)))) {\n            setUserRoleValidity(false);\n        } else {\n            setUserRoleValidity(true);\n        }\n    }, [otherValidSystemRoles]);\n    const handleRoleAddition = (role) => {\n        const systemRolePromise = APIValidation.role.validate(base64url.encode(role));\n        const userRolePromise = APIValidation.userRole.validate(base64url.encode(role));\n        systemRolePromise.then(() => {\n            setRoleValidity(true);\n            userRolePromise.then(() => {\n                setUserRoleValidity(true);\n                configDispatcher({\n                    action: 'accessControlRoles',\n                    value: [...api.accessControlRoles, role],\n                });\n            }).catch((error) => {\n                if (error.status === 404) {\n                    configDispatcher({\n                        action: 'accessControlRoles',\n                        value: [...api.accessControlRoles, role],\n                    });\n                    setOtherValidSystemRoles([...otherValidSystemRoles, role]);\n                } else {\n                    Alert.error('Error when validating role: ' + role);\n                    console.error('Error when validating user roles ' + error);\n                }\n            });\n        }).catch((error) => {\n            if (error.status === 404) {\n                setRoleValidity(false);\n                setInvalidRoles([...invalidRoles, role]);\n            } else {\n                Alert.error('Error when validating role: ' + role);\n                console.error('Error when validating roles ' + error);\n            }\n        });\n    };\n\n    const handleRoleDeletion = (role) => {\n        setOtherValidSystemRoles(otherValidSystemRoles.filter((existingRole) => existingRole !== role));\n        setInvalidRoles(invalidRoles.filter((existingRole) => existingRole !== role));\n        configDispatcher({\n            action: 'accessControlRoles',\n            value: api.accessControlRoles.filter((existingRole) => existingRole !== role),\n        });\n    };\n\n    const handleRoleValidationFailure = () => {\n        if(!roleValidity || !userRoleValidity) {\n            setIsDisabled(true);\n        } else {\n            setIsDisabled(false);\n        }\n        if (!roleValidity) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Scopes.Roles.Invalid'\n                    defaultMessage='Role is invalid'\n                />\n            );\n        } else if (!userRoleValidity) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Scopes.Roles.User.Invalid'\n                    defaultMessage='At least one role must be associated with the API creator'\n                />\n            );\n        } else {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.AccessControl.roles.help'\n                    defaultMessage='Enter valid role and press enter'\n                />\n            );\n        }\n    };\n\n    return (\n        <>\n            <Box style={{ position: 'relative', marginBottom: -12 }}>\n                <TextField\n                    fullWidth\n                    id='accessControl-selector'\n                    select\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.AccessControl.head.topic'\n                            defaultMessage='Publisher Access Control'\n                        />\n                    )}\n                    value={api.accessControl}\n                    name='accessControl'\n                    onChange={({ target: { value } }) => configDispatcher({ action: 'accessControl', value })}\n                    SelectProps={{\n                        MenuProps: {\n                            className: classes.menu,\n                        },\n                    }}\n                    helperText={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.AccessControl.form.helper.text'\n                            defaultMessage='There are no access restrictions by default'\n                        />\n                    )}\n                    margin='normal'\n                    variant='outlined'\n                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                >\n                    <MenuItem value='NONE'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.AccessControl.dropdown.none'\n                            defaultMessage='All'\n                        />\n                    </MenuItem>\n                    <MenuItem value='RESTRICTED' id='access-control-restricted-by-roles'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.AccessControl.dropdown.restricted'\n                            defaultMessage='Restrict by role(s)'\n                        />\n                    </MenuItem>\n                </TextField>\n                <Tooltip\n                    title={(\n                        <>\n                            <p>\n                                <strong>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.AccessControl.tooltip.all'\n                                        defaultMessage='All :'\n                                    />\n                                </strong>\n                                {'  '}\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.AccessControl.tooltip.all.desc'\n                                    defaultMessage='The API is viewable, modifiable by all the publishers and creators.'\n                                />\n                                <br />\n                                <br />\n                                <strong>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.AccessControl.tooltip.restrict'\n                                        defaultMessage='Restricted by roles :'\n                                    />\n                                </strong>\n                                {'  '}\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.AccessControl.tooltip.restrict.\n                                    desc'\n                                    defaultMessage={'The API can be viewed and modified only by specific'\n                                    + ' publishers and creators with the roles that you specify'}\n                                />\n                            </p>\n                        </>\n                    )}\n                    aria-label='Publisher Access Control'\n                    placement='right-end'\n                    interactive\n                    className={classes.tooltip}\n                >\n                    <HelpOutline />\n                </Tooltip>\n            </Box>\n            {!isNone && (\n                <Box py={1} style={{ marginTop: 10 }}>\n                    <ChipInput\n                        data-testid='access-control-select-role'\n                        fullWidth\n                        variant='outlined'\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.AccessControl.roles'\n                                defaultMessage='Roles'\n                            />\n                        )}\n                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                        value={api.accessControlRoles.concat(invalidRoles)}\n                        alwaysShowPlaceholder={false}\n                        placeholder='Enter roles and press Enter'\n                        blurBehavior='clear'\n                        InputProps={{\n                            endAdornment: (!roleValidity || !userRoleValidity) && (\n                                <InputAdornment position='end'>\n                                    <Error color='error' style={{ paddingBottom: 8 }} />\n                                </InputAdornment>\n                            ),\n                        }}\n                        onAdd={handleRoleAddition}\n                        error={!roleValidity || !userRoleValidity}\n                        helperText={handleRoleValidationFailure()}\n                        chipRenderer={({ value }, key) => (\n                            <Chip\n                                key={key}\n                                size='small'\n                                label={value}\n                                onDelete={() => {\n                                    handleRoleDeletion(value);\n                                }}\n                                style={{\n                                    backgroundColor: invalidRoles.includes(value) ? red[300] : null,\n                                    margin: '0 8px 12px 0',\n                                    float: 'left',\n                                }}\n                            />\n                        )}\n                    />\n                </Box>\n            )}\n        </>\n    );\n}\n\nAccessControl.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport MuiAlert from 'AppComponents/Shared/MuiAlert';\nimport { useRevisionContext } from 'AppComponents/Shared/RevisionContext';\nimport Joi from '@hapi/joi';\nimport TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport FormControl from '@material-ui/core/FormControl';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(3),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    actionSpace: {\n        margin: '-7px auto',\n    },\n    subHeading: {\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n        paddingBottom: '20px',\n    },\n    mandatoryStar: {\n        color: theme.palette.error.main,\n        marginLeft: theme.spacing(0.1),\n    },\n    alertGrid: {\n        width: '100%',\n    },\n    alertTitle: {\n        fontWeight: theme.typography.fontWeightMedium,\n        marginTop: -2,\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nconst AdvertiseInfo = (props) => {\n    const {\n        configDispatcher,\n        oldApi: { policies: oldPolicies, endpointConfig: oldEndpointConfig },\n        api: {\n            advertiseInfo,\n            type,\n            policies,\n            lifeCycleStatus,\n            endpointConfig,\n        },\n        setIsOpen,\n    } = props;\n    const {\n        allRevisions,\n    } = useRevisionContext();\n    const classes = useStyles();\n    const [apiFromContext] = useAPI();\n    const isDeployed = useMemo(() => {\n        if (allRevisions) {\n            for (let i = 0; i < allRevisions.length; i++) {\n                if (allRevisions[i].deploymentInfo.length > 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }, [allRevisions]);\n\n    const validateUrl = (value, isEmptyAllowed=true) => {\n        let urlSchema = Joi.string().uri().empty();\n        if (isEmptyAllowed) {\n            urlSchema = Joi.string().uri().allow('', null);\n        }\n        return !urlSchema.validate(value).error;\n    };\n\n    const [isValidApiExternalProductionEndpoint, setValidApiExternalProductionEndpoint] = useState(\n        validateUrl(advertiseInfo.apiExternalProductionEndpoint, false),\n    );\n    const [isValidApiExternalSandboxEndpoint, setValidApiExternalSandboxEndpoint] = useState(\n        validateUrl(advertiseInfo.apiExternalSandboxEndpoint),\n    );\n    const [isValidOriginalDevPortalUrl, setValidOriginalDevPortalUrl] = useState(\n        validateUrl(advertiseInfo.originalDevPortalUrl)\n    );\n\n    const handleOnChange = (event) => {\n        const { name, value } = event.target;\n        switch (name) {\n            case 'apiExternalProductionEndpoint':\n                setValidApiExternalProductionEndpoint(validateUrl(value, false));\n                break;\n            case 'apiExternalSandboxEndpoint':\n                setValidApiExternalSandboxEndpoint(validateUrl(value));\n                break;\n            default:\n                setValidOriginalDevPortalUrl(validateUrl(value));\n                break;\n        }\n        configDispatcher({ action: name, value });\n    };\n\n    const handleOnChangeAdvertised = ({ target: { value } }) => {\n        configDispatcher({ action: 'advertised', value: value === 'true' });\n        if (value === 'false' && lifeCycleStatus === 'PUBLISHED' && (policies.length === 0 || !endpointConfig)) {\n            setIsOpen(true);\n        } else if (value === 'true' && lifeCycleStatus === 'PUBLISHED') {\n            configDispatcher({ action: 'policies', value: oldPolicies });\n            configDispatcher({ action: 'endpointConfig', value: oldEndpointConfig });\n        }\n    };\n\n    return (\n        <Grid container spacing={1} alignItems='flex-start'>\n            <Grid item>\n                <Box>\n                    <FormControl component='fieldset' style={{ display: 'flex' }}>\n                        <FormLabel component='legend'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.AdvertiseInfo.advertised.label'\n                                defaultMessage='Mark the API as third party'\n                            />\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='Mark the API as third party'\n                            name='advertised'\n                            value={advertiseInfo.advertised}\n                            onChange={handleOnChangeAdvertised}\n                            style={{ display: 'flow-root' }}\n                        >\n                            <FormControlLabel\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)\n                                    || type === 'ASYNC' || isDeployed}\n                                value\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.AdvertiseInfo.advertised.yes'\n                                        defaultMessage='Yes'\n                                    />\n                                )}\n                            />\n                            <FormControlLabel\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)\n                                    || type === 'ASYNC' || isDeployed}\n                                value={false}\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.AdvertiseInfo.advertised.no'\n                                        defaultMessage='No'\n                                    />\n                                )}\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Box>\n            </Grid>\n            <Grid item xs={1}>\n                <Box>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.AdvertiseInfo.tooltip'\n                                defaultMessage={\n                                    'Indicates if an API is a third party API. You can use third party APIs to expose'\n                                    + ' an externally published API through API Manager.'\n                                }\n                            />\n                        )}\n                        aria-label='add'\n                        placement='right-end'\n                        interactive\n                    >\n                        <HelpOutline />\n                    </Tooltip>\n                </Box>\n            </Grid>\n            <Grid className={classes.alertGrid}>\n                {type === 'ASYNC' && (\n                    <MuiAlert severity='info'>\n                        <Typography gutterBottom component='div' className={classes.alertTitle}>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.AdvertiseInfo.async.api.warning.title'\n                                defaultMessage='The \"Other\" type streaming APIs will serve as third party APIs.'\n                            />\n                        </Typography>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.AdvertiseInfo.async.api.warning'\n                            defaultMessage={'If you want to deploy and API in the gateway, please create a WebSocket,'\n                            + ' SSE or WebSub type of a streaming API.'}\n                        />\n                    </MuiAlert>\n                )}\n                {isDeployed && (\n                    <MuiAlert severity='info' className={classes.alert}>\n                        <Typography gutterBottom component='div' className={classes.alertTitle}>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.AdvertiseInfo.deployed.api.warning.title'\n                                defaultMessage='There are active deployments in the API.'\n                            />\n                        </Typography>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.AdvertiseInfo.deployed.api.warning'\n                            defaultMessage={'Please undeploy the revision before changing the API to a third party'\n                            + ' API.'}\n                        />\n                    </MuiAlert>\n                )}\n            </Grid>\n            <Grid>\n                {advertiseInfo.advertised && (\n                    <>\n                        <TextField\n                            label={(\n                                <>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Configuration.components.AdvertiseInfo'\n                                        + '.apiExternalProductionEndpoint'}\n                                        defaultMessage='API External Production Endpoint'\n                                    />\n                                    <sup className={classes.mandatoryStar}>*</sup>\n                                </>\n                            )}\n                            variant='outlined'\n                            name='apiExternalProductionEndpoint'\n                            value={advertiseInfo.apiExternalProductionEndpoint}\n                            fullWidth\n                            margin='normal'\n                            onChange={handleOnChange}\n                            disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                            error={!isValidApiExternalProductionEndpoint}\n                            helperText={isValidApiExternalProductionEndpoint ? (\n                                <FormattedMessage\n                                    id={'Apis.Details.Configuration.components.AdvertiseInfo'\n                                    + '.apiExternalProductionEndpoint.help'}\n                                    defaultMessage='This is the external production endpoint of the advertised API'\n                                />\n                            ) : (\n                                <FormattedMessage\n                                    id={'Apis.Details.Configuration.components.AdvertiseInfo'\n                                    + '.apiExternalEndpoint.error'}\n                                    defaultMessage='Invalid Endpoint URL'\n                                />\n                            )}\n                        />\n                        <TextField\n                            label={(\n                                <>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Configuration.components.AdvertiseInfo'\n                                        + '.apiExternalSandboxEndpoint'}\n                                        defaultMessage='API External Sandbox Endpoint'\n                                    />\n                                </>\n                            )}\n                            variant='outlined'\n                            name='apiExternalSandboxEndpoint'\n                            value={advertiseInfo.apiExternalSandboxEndpoint}\n                            fullWidth\n                            margin='normal'\n                            onChange={handleOnChange}\n                            disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                            error={!isValidApiExternalSandboxEndpoint}\n                            helperText={isValidApiExternalSandboxEndpoint ? (\n                                <FormattedMessage\n                                    id={'Apis.Details.Configuration.components.AdvertiseInfo.apiExternalSandboxEndpoint'\n                                    + '.help'}\n                                    defaultMessage='This is the external sandbox endpoint of the advertised API'\n                                />\n                            ) : (\n                                <FormattedMessage\n                                    id={'Apis.Details.Configuration.components.AdvertiseInfo'\n                                    + '.apiExternalEndpoint.error'}\n                                    defaultMessage='Invalid Endpoint URL'\n                                />\n                            )}\n                            style={{ marginTop: 0 }}\n                        />\n                        <TextField\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.AdvertiseInfo.originalDevPortalUrl'\n                                    defaultMessage='Original Developer URL'\n                                />\n                            )}\n                            variant='outlined'\n                            name='originalDevPortalUrl'\n                            value={advertiseInfo.originalDevPortalUrl}\n                            fullWidth\n                            margin='normal'\n                            onChange={handleOnChange}\n                            disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                            error={!isValidOriginalDevPortalUrl}\n                            helperText={isValidOriginalDevPortalUrl ? (\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.AdvertiseInfo.originalDevPortalUrl.help'\n                                    defaultMessage='This is the original developer portal of the advertised API'\n                                />\n                            ) : (\n                                <FormattedMessage\n                                    id={'Apis.Details.Configuration.components.AdvertiseInfo'\n                                    + '.originalDevPortalUrl.error'}\n                                    defaultMessage='Invalid Original Developer Portal URL'\n                                />\n                            )}\n                            style={{ marginTop: 0 }}\n                        />\n                    </>\n                )}\n            </Grid>\n        </Grid>\n    );\n};\n\nAdvertiseInfo.propTypes = {\n    configDispatcher: PropTypes.func.isRequired,\n};\n\nexport default React.memo(AdvertiseInfo);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ChipInput from 'material-ui-chip-input'; // DEPRECATED: Do not COPY and use this component.\nimport APIValidation from 'AppData/APIValidation';\nimport base64url from 'base64url';\nimport Error from '@material-ui/icons/Error';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Chip from '@material-ui/core/Chip';\nimport { red } from '@material-ui/core/colors/';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport CONSTS from 'AppData/Constants';\nimport API from 'AppData/api';\n\nconst useStyles = makeStyles((theme) => ({\n    tooltip: {\n        position: 'absolute',\n        right: theme.spacing(-4),\n        top: theme.spacing(1),\n    },\n}));\n\n/**\n *\n * api.accessControl possible values are `NONE` and `RESTRICTED`\n * @export\n * @param {*} props\n * @returns\n */\nexport default function StoreVisibility(props) {\n    const [roleValidity, setRoleValidity] = useState(true);\n    const [roleExists, setRoleExists] = useState(true);\n    const { api, configDispatcher, setIsDisabled } = props;\n    const [invalidRoles, setInvalidRoles] = useState([]);\n    const isRestrictedByRoles = api.visibility === 'RESTRICTED';\n    const [apiFromContext] = useAPI();\n    const classes = useStyles();\n    const restApi = new API();\n    const [tenants, setTenants] = useState([]);\n    useEffect(() => {\n        restApi.getTenantsByState(CONSTS.TENANT_STATE_ACTIVE)\n            .then((result) => {\n                setTenants(result.body.count);\n            });\n    }, []);\n\n    useEffect(() => {\n        if (invalidRoles.length === 0) {\n            setRoleValidity(true);\n        }\n        if (api.visibility === 'RESTRICTED' && api.visibleRoles.length !== 0) {\n            setRoleExists(true);\n        }\n    }, [invalidRoles]);\n    useEffect(() => {\n        setIsDisabled(!roleValidity || !roleExists);\n    }, [roleValidity, roleExists])\n    const handleRoleAddition = (role) => {\n        const promise = APIValidation.role.validate(base64url.encode(role));\n        promise.then(() => {\n            setRoleExists(true);\n            setRoleValidity(true);\n            configDispatcher({\n                action: 'visibleRoles',\n                value: [...api.visibleRoles, role],\n            });\n        }).catch((error) => {\n            if (error.status === 404) {\n                setRoleValidity(false);\n                setInvalidRoles([...invalidRoles, role]);\n            } else {\n                Alert.error('Error when validating role: ' + role);\n                console.error('Error when validating roles ' + error);\n            }\n        });\n    };\n\n    const handleRoleDeletion = (role) => {\n        if (invalidRoles.includes(role)) {\n            setInvalidRoles(invalidRoles.filter((existingRole) => existingRole !== role));\n        }\n        if (api.visibility === 'RESTRICTED' && api.visibleRoles.length > 1) {\n            setRoleExists(true);\n        } else {\n            setRoleExists(false);\n        }\n        configDispatcher({\n            action: 'visibleRoles',\n            value: api.visibleRoles.filter((existingRole) => existingRole !== role),\n        });\n    };\n\n    return (\n        <>\n            <Box style={{ position: 'relative' }}>\n                <TextField\n                    fullWidth\n                    id='storeVisibility-selector'\n                    select\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.storeVisibility.head.topic'\n                            defaultMessage='Developer Portal Visibility'\n                        />\n                    )}\n                    value={api.visibility}\n                    name='storeVisibility'\n                    onChange={({ target: { value } }) => configDispatcher({ action: 'visibility', value })}\n                    SelectProps={{\n                        MenuProps: {\n                            className: classes.menu,\n                        },\n                    }}\n                    helperText={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.storeVisibility.form.helper.text'\n                            defaultMessage='By default API is visible to all developer portal users'\n                        />\n                    )}\n                    margin='normal'\n                    variant='outlined'\n                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                >\n                    <MenuItem value='PUBLIC'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.StoreVisibility.dropdown.public'\n                            defaultMessage='Public'\n                        />\n                    </MenuItem>\n                    <MenuItem value='RESTRICTED' id='visibility-restricted-by-roles'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.storeVisibility.dropdown.restrict'\n                            defaultMessage='Restrict by role(s)'\n                        />\n                    </MenuItem>\n                    {tenants !== 0\n                        && (\n                            <MenuItem value='PRIVATE'>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.storeVisibility.dropdown.private'\n                                    defaultMessage='Visible to my domain'\n                                />\n                            </MenuItem>\n                        )}\n                </TextField>\n                <Tooltip\n                    title={(\n                        <>\n                            <p>\n                                <strong>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.storeVisibility.tooltip.public'\n                                        defaultMessage='Public :'\n                                    />\n                                </strong>\n                                {'  '}\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.storeVisibility.tooltip.public.desc'\n                                    defaultMessage={\n                                        'The API is accessible to everyone and can be advertised '\n                                        + 'in multiple developer portals - a central developer portal '\n                                        + 'and/or non-WSO2 developer portals.'\n                                    }\n                                />\n                                <br />\n                                <br />\n                                <strong>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.storeVisibility.tooltip.restrict'\n                                        defaultMessage='Restricted by roles(s) :'\n                                    />\n                                </strong>\n                                {'  '}\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.storeVisibility.tooltip.restrict.desc'\n                                    defaultMessage={\n                                        'The API is visible only to specific user'\n                                        + ' roles in the tenant developer portal that you specify.'\n                                    }\n                                />\n                            </p>\n                        </>\n                    )}\n                    aria-label='Store Visibility'\n                    placement='right-end'\n                    className={classes.tooltip}\n                    interactive\n                >\n                    <HelpOutline />\n                </Tooltip>\n            </Box>\n            {isRestrictedByRoles && (\n                <Box py={2} style={{ marginTop: -10, marginBottom: 10 }}>\n                    <ChipInput\n                        data-testid='visibility-select-role'\n                        fullWidth\n                        variant='outlined'\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.storeVisibility.roles'\n                                defaultMessage='Roles'\n                            />\n                        )}\n                        disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                        value={api.visibleRoles.concat(invalidRoles)}\n                        alwaysShowPlaceholder={false}\n                        placeholder='Enter roles and press Enter'\n                        blurBehavior='clear'\n                        InputProps={{\n                            endAdornment: !roleValidity && (\n                                <InputAdornment position='end'>\n                                    <Error color='error' style={{ paddingBottom: 8 }} />\n                                </InputAdornment>\n                            ),\n                        }}\n                        onAdd={handleRoleAddition}\n                        error={!roleValidity || !roleExists}\n                        helperText={\n                            roleValidity ? (\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.visibility.CreateScope.roles.help'\n                                    defaultMessage='Enter valid role and press enter'\n                                />\n                            ) : (\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.Roles.Invalid'\n                                    defaultMessage='Role is invalid'\n                                />\n                            )\n                        }\n                        chipRenderer={({ value }, key) => (\n                            <Chip\n                                key={key}\n                                size='small'\n                                label={value}\n                                onDelete={() => {\n                                    handleRoleDeletion(value);\n                                }}\n                                style={{\n                                    backgroundColor: invalidRoles.includes(value) ? red[300] : null,\n                                    margin: '0 8px 12px 0',\n                                    float: 'left',\n                                }}\n                            />\n                        )}\n                    />\n                </Box>\n            )}\n        </>\n    );\n}\n\nStoreVisibility.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ChipInput from 'material-ui-chip-input'; // DEPRECATED: Do not COPY and use this component.\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport Chip from '@material-ui/core/Chip';\nimport { red } from '@material-ui/core/colors/';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function Tags(props) {\n    const { api, configDispatcher, setIsDisabled } = props;\n    const [apiFromContext] = useAPI();\n    const [isTagValid, setIsTagValid] = useState(true);\n    const [invalidTags, setInvalidTags] = useState([]);\n    const [isTagWithinLimit, setIsTagWithinLimit] = useState(true);\n    const regexPattern = /([~!@#;%^&*+=|\\\\<>\"'/,])/;\n    const helperText = () => {\n        if(!isTagWithinLimit || !isTagValid) {\n            setIsDisabled(true);\n        } else {\n            setIsDisabled(false);\n        }\n        if (isTagValid && isTagWithinLimit) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Configuration.components.Tags.helper'\n                    defaultMessage='Press `Enter` after typing the tag name to add a new tag'\n                />\n            );\n        } else if (!isTagValid) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Configuration.components.Tags.error'\n                    defaultMessage={'The tag contains one or more illegal characters '\n                + '( ~ ! @ # ; % ^ & * + = | < > , \\' \" \\\\\\\\ / ) .'}\n                />\n            );\n        } else {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Configuration.components.Tags.limit.error'\n                    defaultMessage='The tag exceeds the maximum length of 30 characters'\n                />\n            );\n        }\n    };\n    return (\n        <React.Fragment style={{ marginTop: 10 }}>\n            <ChipInput\n                fullWidth\n                variant='outlined'\n                id='tags'\n                InputProps={{\n                    name: 'tag-name',\n                }}\n                label={(\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Tags.title'\n                        defaultMessage='Tags'\n                    />\n                )}\n                disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                value={api.tags}\n                error={!(isTagValid && isTagWithinLimit)}\n                helperText={helperText()}\n                onAdd={(tag) => {\n                    if (regexPattern.test(tag) || tag.length > 30) {\n                        if (regexPattern.test(tag)) {\n                            setIsTagValid(false);\n                        } else {\n                            setIsTagWithinLimit(false);\n                        }\n                        setInvalidTags([...invalidTags, tag]);\n                    }\n                    configDispatcher({ action: 'tags', value: [...api.tags, tag] });\n                }}\n                chipRenderer={({ value }, key) => (\n                    <Chip\n                        key={key}\n                        size='small'\n                        label={value}\n                        onDelete={() => {\n                            if (invalidTags.includes(value)) {\n                                const currentInvalidTags = invalidTags.filter((existingTag) => existingTag !== value);\n                                setInvalidTags(currentInvalidTags);\n                                if (currentInvalidTags.length === 0) {\n                                    setIsTagValid(true);\n                                }\n                            }\n                            configDispatcher({ action: 'tags', value: api.tags.filter((oldTag) => oldTag !== value) });\n                        }}\n                        style={{\n                            backgroundColor: (regexPattern.test(value) || value.length > 30) ? red[300] : null,\n                            margin: '0 8px 12px 0',\n                            float: 'left',\n                        }}\n                    />\n                )}\n                style={{ display: 'flex' }}\n            />\n        </React.Fragment>\n    );\n}\n\nTags.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport TextField from '@material-ui/core/TextField';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nconst Social = (props) => {\n    const { slackURL, githubURL, configDispatcher } = props;\n    const [apiFromContext] = useAPI();\n    return (\n        <>\n            <TextField\n                label={(\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Social.giturl'\n                        defaultMessage='GitHub URL'\n                    />\n                )}\n                id='github'\n                variant='outlined'\n                value={githubURL || ''}\n                fullWidth\n                margin='normal'\n                onChange={(e) => configDispatcher({ action: 'github_repo', value: e.target.value })}\n                disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                helperText={(\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Social.giturl.help'\n                        defaultMessage='This GitHub URL will be available in the API overview page in developer portal'\n                    />\n                )}\n                style={{ marginTop: 0 }}\n            />\n            <TextField\n                label={(\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Social.slack'\n                        defaultMessage='Slack URL'\n                    />\n                )}\n                id='slack'\n                variant='outlined'\n                value={slackURL || ''}\n                fullWidth\n                margin='normal'\n                onChange={(e) => configDispatcher({ action: 'slack_url', value: e.target.value })}\n                disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                helperText={(\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Social.slack_url.help'\n                        defaultMessage={'This Slack Channel URL will be available in the'\n                        + ' API overview page in developer portal'}\n                    />\n                )}\n                style={{ marginTop: 0 }}\n            />\n        </>\n    );\n};\n\nSocial.propTypes = {\n    slackURL: PropTypes.string.isRequired,\n    githubURL: PropTypes.string.isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n\nexport default React.memo(Social);\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport { FormattedMessage } from 'react-intl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { makeStyles } from '@material-ui/core/styles';\nimport API from 'AppData/api';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst useStyles = makeStyles((theme) => ({\n    tooltip: {\n        position: 'absolute',\n        right: theme.spacing(-4),\n        top: theme.spacing(1),\n    },\n    listItemText: {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n    },\n}));\n/**\n * Render the categories drop down.\n * @param {JSON} props props passed from it's parents.\n * @returns {JSX} Render the categories drop down.\n */\nfunction APICategories(props) {\n    const [categories, setCategories] = useState({});\n    const { api, configDispatcher } = props;\n    const classes = useStyles();\n    const [apiFromContext] = useAPI();\n\n    useEffect(() => {\n        API.apiCategories().then((response) => setCategories(response.body));\n    }, []);\n\n    if (!categories.list) {\n        return null;\n    } else if (categories.list.length === 0) {\n        return (\n            <Box style={{ position: 'relative', marginTop: 10 }}>\n                <TextField\n                    fullWidth\n                    select\n                    name='Categories'\n                    id='APICategories'\n                    label={(\n                        <>\n                            <FormattedMessage\n                                id='Apis.Details.Configurations.api.categories'\n                                defaultMessage='API Categories'\n                            />\n                        </>\n                    )}\n                    margin='normal'\n                    variant='outlined'\n                    disabled\n                    value='emptyMessage'\n                >\n                    <MenuItem\n                        dense\n                        disableGutters\n                        value='emptyMessage'\n                    >\n                        <ListItemText primary={(\n                            <FormattedMessage\n                                id='Apis.Details.Configurations.api.categories.empty'\n                                defaultMessage='No API Categories defined.'\n                            />\n                        )}\n                        />\n                    </MenuItem>\n                </TextField>\n            </Box>\n        );\n    } else {\n        return (\n            <Box style={{ position: 'relative', marginTop: 10 }}>\n                <TextField\n                    fullWidth\n                    select\n                    id='APICategories'\n                    label={(\n                        <>\n                            <FormattedMessage\n                                id='Apis.Details.Configurations.api.categories'\n                                defaultMessage='API Categories'\n                            />\n                        </>\n                    )}\n                    name='categories'\n                    margin='normal'\n                    variant='outlined'\n                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                    value={api.categories}\n                    SelectProps={{\n                        multiple: true,\n                        renderValue: (selected) => (Array.isArray(selected) ? selected.join(', ') : selected),\n                        MenuProps: {\n                            anchorOrigin: {\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            },\n                            getContentAnchorEl: null,\n                            keepMounted: true,\n                            PaperProps: {\n                                style: {\n                                    maxHeight: 300,\n                                    maxWidth: 300,\n                                },\n                            },\n                        },\n                    }}\n                    onChange={(e) => configDispatcher({ action: 'categories', value: e.target.value })}\n                    InputProps={{\n                        id: 'itest-id-categories-input',\n                    }}\n                    helperText='Select API Categories for the API'\n                >\n                    { categories.list.map((category) => (\n                        <MenuItem\n                            dense\n                            disableGutters\n                            id={category.id}\n                            key={category.name}\n                            value={category.name}\n                        >\n                            <Checkbox color='primary' checked={api.categories.includes(category.name)} />\n                            <ListItemText\n                                primary={category.name}\n                                secondary={category.description}\n                                classes={{ primary: classes.listItemText }}\n                            />\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <Tooltip\n                    title={(\n                        <>\n                            <p>\n                                <FormattedMessage\n                                    id='Api.category.dropdown.tooltip'\n                                    defaultMessage={'Allow to group APIs that have similar attributes.'\n                                        + ' There has to be pre-defined API categories in the'\n                                        + ' environment in order to be attached to an API.'}\n                                />\n                            </p>\n                        </>\n                    )}\n                    aria-label='API Categories'\n                    placement='right-end'\n                    interactive\n                    className={classes.tooltip}\n                >\n                    <HelpOutline />\n                </Tooltip>\n            </Box>\n        );\n    }\n}\n\nAPICategories.defaultProps = {\n    categories: [],\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n\nexport default APICategories;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useReducer, useContext, useState, useEffect,\n} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport { Link, useHistory } from 'react-router-dom';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport Api from 'AppData/api';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { isRestricted } from 'AppData/AuthManager';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport ResponseCaching from './components/ResponseCaching';\nimport CORSConfiguration from './components/CORSConfiguration';\nimport SchemaValidation from './components/SchemaValidation';\nimport MaxBackendTps from './components/MaxBackendTps';\nimport Endpoints from './components/Endpoints';\nimport APISecurity from './components/APISecurity/APISecurity';\nimport QueryAnalysis from './components/QueryAnalysis';\nimport {\n    DEFAULT_API_SECURITY_OAUTH2,\n    API_SECURITY_BASIC_AUTH,\n    API_SECURITY_API_KEY,\n    API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY,\n    API_SECURITY_MUTUAL_SSL_MANDATORY,\n    API_SECURITY_MUTUAL_SSL,\n} from './components/APISecurity/components/apiSecurityConstants';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(3),\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    paper: {\n        padding: theme.spacing(3),\n    },\n    paperCenter: {\n        padding: theme.spacing(3),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    heading: {\n        fontSize: '1.1rem',\n        fontWeight: 400,\n        marginBottom: theme.spacing(0),\n    },\n    itemPadding: {\n        marginBottom: theme.spacing(3),\n    },\n    arrowForwardIcon: {\n        fontSize: 50,\n        color: '#ccc',\n        position: 'absolute',\n        top: 90,\n        right: -43,\n    },\n    arrowBackIcon: {\n        fontSize: 50,\n        color: '#ccc',\n        position: 'absolute',\n        top: 30,\n        right: -71,\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: '38px',\n    },\n    info: {\n        display: 'flex',\n        height: '100%',\n    },\n}));\n\n/**\n *\n * Deep coping the properties in API object (what ever the object in the state),\n * making sure that no direct mutations happen when updating the state.\n * You should know the shape of the object that you are keeping in the state,\n * @param {Object} api\n * @returns {Object} Deep copy of an object\n */\nfunction copyAPIConfig(api) {\n    const apiConfigJson = {\n        id: api.id,\n        name: api.name,\n        description: api.description,\n        lifeCycleStatus: api.lifeCycleStatus,\n        accessControl: api.accessControl,\n        authorizationHeader: api.authorizationHeader,\n        responseCachingEnabled: api.responseCachingEnabled,\n        cacheTimeout: api.cacheTimeout,\n        visibility: api.visibility,\n        isDefaultVersion: api.isDefaultVersion,\n        enableSchemaValidation: api.enableSchemaValidation,\n        accessControlRoles: [...api.accessControlRoles],\n        visibleRoles: [...api.visibleRoles],\n        tags: [...api.tags],\n        maxTps: api.maxTps,\n        wsdlUrl: api.wsdlUrl,\n        transport: [...api.transport],\n        securityScheme: [...api.securityScheme],\n        keyManagers: [...(api.keyManagers || [])],\n        corsConfiguration: {\n            corsConfigurationEnabled: api.corsConfiguration.corsConfigurationEnabled,\n            accessControlAllowCredentials: api.corsConfiguration.accessControlAllowCredentials,\n            accessControlAllowOrigins: [...api.corsConfiguration.accessControlAllowOrigins],\n            accessControlAllowHeaders: [...api.corsConfiguration.accessControlAllowHeaders],\n            accessControlAllowMethods: [...api.corsConfiguration.accessControlAllowMethods],\n        },\n    };\n    if (api.advertiseInfo) {\n        apiConfigJson.advertiseInfo = {\n            advertised: api.advertiseInfo.advertised,\n            apiExternalProductionEndpoint: api.advertiseInfo.apiExternalProductionEndpoint,\n            apiExternalSandboxEndpoint: api.advertiseInfo.apiExternalSandboxEndpoint,\n            originalDevPortalUrl: api.advertiseInfo.originalDevPortalUrl,\n            apiOwner: api.advertiseInfo.apiOwner,\n            vendor: api.advertiseInfo.vendor,\n        }\n    }\n    return apiConfigJson;\n}\n\n\n/**\n * This component handles the basic configurations UI in the API details page\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function RuntimeConfiguration() {\n    const [keyManagersConfigured, setKeyManagersConfigured] = useState([]);\n    const [saveButtonDisabled, setSaveButtonDisabled] = useState(false);\n    /**\n     *\n     * Reduce the configuration UI related actions in to updated state\n     * @param {*} state current state\n     * @param {*} configAction dispatched configuration action\n     * @returns {Object} updated state\n     */\n    function configReducer(state, configAction) {\n        const { action, value, event } = configAction;\n        const nextState = { ...copyAPIConfig(state) };\n        switch (action) {\n            case 'description':\n            case 'isDefaultVersion':\n            case 'authorizationHeader':\n            case 'responseCachingEnabled':\n            case 'cacheTimeout':\n            case 'enableSchemaValidation':\n            case 'accessControl':\n            case 'visibility':\n            case 'maxTps':\n            case 'tags':\n                nextState[action] = value;\n                return nextState;\n            case 'accessControlRoles':\n                return { ...copyAPIConfig(state), [action]: value };\n            case 'visibleRoles':\n                return { ...copyAPIConfig(state), [action]: value };\n            case 'securityScheme':\n                // If event came from mandatory selector of either Application level or Transport level\n                if (\n                    [API_SECURITY_MUTUAL_SSL_MANDATORY, API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY]\n                        .includes(event.name)\n                ) {\n                    // If user select not mandatory (optional) , Remove the respective schema, else add it\n                    if (event.value === 'optional') {\n                        return {\n                            ...copyAPIConfig(state),\n                            [action]: state[action].filter((schema) => schema !== event.name),\n                        };\n                    } else if (state[action].includes(event.name)) {\n                        return state; // Add for completeness, Ideally there couldn't exist this state\n                    } else {\n                        return { ...copyAPIConfig(state), [action]: [...state[action], event.name] };\n                    }\n                }\n                // User checked on one of api security schemas (either OAuth, Basic, ApiKey or Mutual SSL)\n                if (event.checked) {\n                    if (state[action].includes(event.value)) {\n                        return state; // Add for completeness, Ideally there couldn't exist this state\n                    } else {\n                        return { ...copyAPIConfig(state), [action]: [...state[action], event.value] };\n                    }\n                } else if (state[action].includes(event.value)) {\n                    // User has unchecked a security schema type\n                    const newState = {\n                        ...copyAPIConfig(state),\n                        [action]: state[action].filter((schema) => schema !== event.value),\n                    };\n                    if (\n                        !(\n                            newState[action].includes(DEFAULT_API_SECURITY_OAUTH2)\n                            || newState[action].includes(API_SECURITY_BASIC_AUTH)\n                            || newState[action].includes(API_SECURITY_API_KEY)\n                        )\n                    ) {\n                        const noMandatoryOAuthBasicAuth = newState[action]\n                            .filter((schema) => schema !== API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY);\n                        return {\n                            ...newState,\n                            [action]: noMandatoryOAuthBasicAuth,\n                        };\n                    } else if (!newState[action].includes(API_SECURITY_MUTUAL_SSL)) {\n                        const noMandatoryMutualSSL = newState[action]\n                            .filter((schema) => schema !== API_SECURITY_MUTUAL_SSL_MANDATORY);\n                        return {\n                            ...newState,\n                            [action]: noMandatoryMutualSSL,\n                        };\n                    }\n\n                    return newState;\n                } else {\n                    return state; // Add for completeness, Ideally there couldn't exist this state\n                }\n            case 'transport':\n                if (event.checked) {\n                    return { ...copyAPIConfig(state), transport: [...state.transport, event.value] };\n                } else {\n                    return {\n                        ...copyAPIConfig(state),\n                        transport: state.transport.filter((transport) => transport !== event.value),\n                    };\n                }\n            case 'accessControlAllowHeaders':\n            case 'accessControlAllowMethods':\n            case 'accessControlAllowCredentials':\n            case 'corsConfigurationEnabled':\n                nextState.corsConfiguration[action] = value;\n                return nextState;\n            case 'accessControlAllowOrigins':\n                if (event.checked) {\n                    nextState.corsConfiguration[action] = [event.value];\n                } else {\n                    nextState.corsConfiguration[action] = event.checked === false ? [] : event.value;\n                }\n                return nextState;\n            case 'keymanagers':\n                nextState.keyManagers = value;\n                return nextState;\n            case 'allKeyManagersEnabled':\n                if (value) {\n                    nextState.keyManagers = ['all'];\n                } else {\n                    nextState.keyManagers = keyManagersConfigured;\n                }\n                return nextState;\n            case 'saveButtonDisabled':\n                setSaveButtonDisabled(value);\n                return state;\n            default:\n                return state;\n        }\n    }\n    const { api, updateAPI } = useContext(APIContext);\n    const history = useHistory();\n    const isAsyncAPI = api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE' || api.type === 'ASYNC';\n    const isNonWebSubAsyncAPI = api.type === 'WS' || api.type === 'SSE' || api.type === 'ASYNC';\n    const isWebSub = api.type === 'WEBSUB';\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [updateComplexityList, setUpdateComplexityList] = useState(null);\n    const [apiConfig, configDispatcher] = useReducer(configReducer, copyAPIConfig(api));\n    const classes = useStyles();\n    const intl = useIntl();\n    useEffect(() => {\n        if (!isRestricted(['apim:api_create'], api)) {\n            Api.keyManagers().then((response) => {\n                const kmNameList = [];\n                if (response.body.list) {\n                    response.body.list.forEach((km) => kmNameList.push(km.name));\n                }\n                setKeyManagersConfigured(kmNameList);\n            })\n                .catch((error) => {\n                    const { response } = error;\n                    if (response.body) {\n                        const { description } = response.body;\n                        Alert.error(description);\n                    }\n                });\n        }\n    }, []);\n\n    /**\n     * Update the GraphQL Query Complexity Values\n     */\n    function updateComplexity() {\n        const apiId = apiConfig.id;\n        const apiClient = new Api();\n        const promisedComplexity = apiClient.updateGraphqlPoliciesComplexity(\n            apiId, {\n                list: updateComplexityList,\n            },\n        );\n        promisedComplexity\n            .catch((error) => {\n                const { response } = error;\n                if (response.body) {\n                    const { description } = response.body;\n                    Alert.error(description);\n                }\n            });\n    }\n\n    /**\n     *\n     * Handle the configuration view save button action\n     */\n    function handleSave() {\n        if (api.isAPIProduct()) {\n            delete apiConfig.keyManagers; // remove keyManagers property if API type is API Product\n        }\n        if (updateComplexityList !== null) {\n            updateComplexity();\n        }\n        // Validate the key managers\n        if (\n            !api.isAPIProduct()\n            && apiConfig.securityScheme.includes('oauth2')\n            && !apiConfig.keyManagers.includes('all')\n            && (apiConfig.keyManagers && apiConfig.keyManagers.length === 0)\n        ) {\n            Alert.error(\n                intl.formatMessage(\n                    {\n                        id: 'Apis.Details.Configuration.RuntimeConfiguration.no.km.error',\n                        defaultMessage: 'Select one or more Key Managers',\n                    },\n                ),\n            );\n            return;\n        }\n        setIsUpdating(true);\n        updateAPI(apiConfig)\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                }\n            })\n            .finally(() => setIsUpdating(false));\n    }\n\n    /**\n     *\n     * Handle the configuration view save button action\n     */\n    function handleSaveAndDeploy() {\n        if (api.isAPIProduct()) {\n            delete apiConfig.keyManagers; // remove keyManagers property if API type is API Product\n        }\n        if (updateComplexityList !== null) {\n            updateComplexity();\n        }\n        // Validate the key managers\n        if (\n            !api.isAPIProduct()\n            && apiConfig.securityScheme.includes('oauth2')\n            && !apiConfig.keyManagers.includes('all')\n            && (apiConfig.keyManagers && apiConfig.keyManagers.length === 0)\n        ) {\n            Alert.error(\n                intl.formatMessage(\n                    {\n                        id: 'Apis.Details.Configuration.RuntimeConfiguration.no.km.error',\n                        defaultMessage: 'Select one or more Key Managers',\n                    },\n                ),\n            );\n            return;\n        }\n        setIsUpdating(true);\n        updateAPI(apiConfig)\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                }\n            })\n            .finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n    }\n\n    return (\n        <>\n            <Box pb={3}>\n                <Typography id='itest-api-details-runtime-config-head' variant='h5' component='h2'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.RuntimeConfiguration.topic.header'\n                        defaultMessage='Runtime Configurations'\n                    />\n                </Typography>\n            </Box>\n            <div className={classes.contentWrapper}>\n                {(apiConfig.advertiseInfo && apiConfig.advertiseInfo.advertised) ? (\n                    <Paper className={classes.paper} elevation={0}>\n                        <APISecurity api={apiConfig} configDispatcher={configDispatcher} />\n                    </Paper>\n                ) : (\n                    <Grid container direction='row' justify='space-around' alignItems='stretch' spacing={8}>\n                        <Grid item xs={12} md={7}>\n                            <Typography className={classes.heading} variant='h6' component='h3'>\n                                { isAsyncAPI\n                                    ? (\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.section.initial.request'\n                                            defaultMessage='Initial Request'\n                                        />\n                                    ) : (\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.section.request'\n                                            defaultMessage='Request'\n                                        />\n                                    )}\n                            </Typography>\n                            <Grid\n                                direction=' column'\n                                justify='space-between'\n                                alignItems='stretch'\n                                spacing={6}\n                            >\n                                <Grid item xs={12} style={{ marginBottom: 30, position: 'relative' }}>\n                                    <Paper className={classes.paper} elevation={0}>\n                                        <APISecurity api={apiConfig} configDispatcher={configDispatcher} />\n                                        { api.type !== 'WS' && (\n                                            <CORSConfiguration api={apiConfig} configDispatcher={configDispatcher} />\n                                        )}\n\n                                        {(api.type !== 'GRAPHQL' && !isAsyncAPI)\n                                            && <SchemaValidation api={apiConfig} configDispatcher={configDispatcher} />}\n                                        {api.type === 'GRAPHQL' && (\n                                            <Box mt={3}>\n                                                <QueryAnalysis\n                                                    api={apiConfig}\n                                                    setUpdateComplexityList={setUpdateComplexityList}\n                                                    isRestricted={isRestricted(['apim:api_create'], api)}\n                                                />\n                                            </Box>\n                                        )}\n                                    </Paper>\n                                    {!isWebSub && (\n                                        <ArrowForwardIcon className={classes.arrowForwardIcon} />\n                                    )}\n                                </Grid>\n                                { !isNonWebSubAsyncAPI && (\n                                    <>\n                                        <Typography className={classes.heading} variant='h6' component='h3'>\n                                            {!isWebSub ? (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Configuration.Configuration.section.response'\n                                                    defaultMessage='Response'\n                                                />\n                                            ) : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Configuration.Configuration.section.events'\n                                                    defaultMessage='Events'\n                                                />\n                                            )}\n\n                                        </Typography>\n                                        <Grid item xs={12} style={{ position: 'relative' }}>\n                                            <Box mb={3}>\n                                                <Paper className={classes.paper} elevation={0}>\n                                                    {!isAsyncAPI && (\n                                                        <ResponseCaching\n                                                            api={apiConfig}\n                                                            configDispatcher={configDispatcher}\n                                                        />\n                                                    )}\n                                                </Paper>\n                                                {!isWebSub && (\n                                                    <ArrowBackIcon className={classes.arrowBackIcon} />\n                                                )}\n                                            </Box>\n                                        </Grid>\n                                    </>\n                                )}\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={12} md={5}>\n                            {!isWebSub && (\n                                <>\n                                    <Typography className={classes.heading} variant='h6' component='h3'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.section.backend'\n                                            defaultMessage='Backend'\n                                        />\n                                    </Typography>\n                                    <Paper\n                                        className={classes.paper}\n                                        style={{ height: 'calc(100% - 75px)' }}\n                                        elevation={0}\n                                    >\n                                        {!api.isAPIProduct() && (\n                                            <>\n                                                {!isAsyncAPI && (\n                                                    <MaxBackendTps\n                                                        api={apiConfig}\n                                                        configDispatcher={configDispatcher}\n                                                    />\n                                                )}\n                                                { !isWebSub && (\n                                                    <Endpoints api={api} />\n                                                )}\n                                            </>\n                                        )}\n                                        {api.isAPIProduct() && (\n                                            <Box alignItems='center' justifyContent='center' className={classes.info}>\n                                                <Typography variant='body1'>\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.Configuration.RuntimeConfiguration.backend'\n                                                            + '.api.product.endpoint'}\n                                                        defaultMessage={'Please refer respective APIs for endpoint '\n                                                            + 'information'}\n                                                    />\n                                                </Typography>\n                                            </Box>\n                                        )}\n                                    </Paper>\n                                </>\n                            )}\n                        </Grid>\n                    </Grid>\n                )}\n                <Grid container>\n                    <Grid container direction='row' alignItems='center' spacing={1} style={{ marginTop: 20 }}>\n                        <Grid item id='save-runtime-configurations'>\n                            {api.isRevision\n                                || ((apiConfig.visibility === 'RESTRICTED' && apiConfig.visibleRoles.length === 0)\n                                || isRestricted(['apim:api_create'], api)) || saveButtonDisabled ? (\n                                    <Button\n                                        disabled\n                                        type='submit'\n                                        variant='contained'\n                                        color='primary'\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.save'\n                                            defaultMessage='Save'\n                                        />\n                                    </Button>\n                                ) : (\n                                    <CustomSplitButton\n                                        advertiseInfo={api.advertiseInfo}\n                                        api={api}\n                                        handleSave={handleSave}\n                                        handleSaveAndDeploy={handleSaveAndDeploy}\n                                        isUpdating={isUpdating}\n                                    />\n                                )}\n                        </Grid>\n                        <Grid item>\n                            <Button\n                                component={Link}\n                                to={'/apis/' + api.id + '/overview'}\n                                aria-label='Cancel'\n                            >\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.Configuration.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </div>\n        </>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { FormattedMessage } from 'react-intl';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { makeStyles } from '@material-ui/core';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(3),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    actionSpace: {\n        margin: '-7px auto',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n    paper: {\n        padding: theme.spacing(0, 3),\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ResponseCaching(props) {\n    const { api, configDispatcher } = props;\n    const classes = useStyles();\n    const [apiFromContext] = useAPI();\n    const isResponseCachingEnabled = api.responseCachingEnabled;\n\n    const generateElement = (isEnabled) => {\n        if (isEnabled) {\n            return (\n                <ExpandMoreIcon />\n            );\n        }\n        return (null);\n    };\n\n    return (\n        <>\n            <WrappedExpansionPanel className={classes.expansionPanel} id='responseCaching'>\n                <ExpansionPanelSummary expandIcon={generateElement(api.responseCachingEnabled)}>\n                    <Typography className={classes.subHeading} variant='h6' component='h4'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.Configuration.response.caching'\n                            defaultMessage='Response Caching'\n                        />\n                        <Tooltip\n                            title={(\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.ResponseCaching.tooltip'\n                                    defaultMessage={\n                                        'If enabled, the API response will be cached at the gateway level'\n                                        + ' to improve the response time and minimize the backend load'\n                                    }\n                                />\n                            )}\n                            aria-label='Response caching helper text'\n                            placement='right-end'\n                            interactive\n                        >\n                            <HelpOutline className={classes.iconSpace} />\n                        </Tooltip>\n                    </Typography>\n                    <FormControlLabel\n                        className={classes.actionSpace}\n                        control={(\n                            <Switch\n                                id='response-caching-switch'\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                checked={api.responseCachingEnabled}\n                                onChange={({ target: { checked } }) => configDispatcher({\n                                    action: 'responseCachingEnabled',\n                                    value: checked,\n                                })}\n                                color='primary'\n                                inputProps={{\n                                    'aria-label': 'switch response caching',\n                                }}\n                            />\n                        )}\n                    />\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                    <Grid container spacing={1} alignItems='flex-start'>\n                        <Grid item>\n                            {isResponseCachingEnabled && (\n                                <TextField\n                                    value={api.cacheTimeout}\n                                    onChange={({ target: { value } }) => configDispatcher({\n                                        action: 'cacheTimeout',\n                                        value,\n                                    })}\n                                    margin='normal'\n                                    helperText={(\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.cache.timeout'\n                                            defaultMessage='Cache Timeout (seconds)'\n                                        />\n                                    )}\n                                />\n                            )}\n                        </Grid>\n                    </Grid>\n                </ExpansionPanelDetails>\n            </WrappedExpansionPanel>\n        </>\n    );\n}\n\nResponseCaching.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// TODO: Move to `User` class , drawback is updating new property require JSON parse, Stringify cycle ~tmkb\nimport Utils from 'AppData/Utils';\nimport User from 'AppData/User';\n\nconst environmentName = Utils.getCurrentEnvironment().label;\nconst userStorageKey = `${User.CONST.LOCAL_STORAGE_USER}_${environmentName}`;\n\nexport const updateUserLocalStorage = (key, newValue) => {\n    const userData = JSON.parse(localStorage.getItem(userStorageKey));\n    userData[key] = newValue;\n    localStorage.setItem(userStorageKey, JSON.stringify(userData));\n};\n\nexport const getUserLocalStorage = (key) => {\n    const userData = JSON.parse(localStorage.getItem(userStorageKey));\n    return userData[key];\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ChipInput from 'material-ui-chip-input'; // DEPRECATED: Do not COPY and use this component.\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(3),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    actionSpace: {\n        marginLeft: theme.spacing(20),\n        marginTop: '-7px',\n        marginBottom: '-7px',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n}));\n\n/**\n *\n * api.corsConfiguration possible values true and false\n * @export\n * @param {*} props\n * @returns\n */\nexport default function CORSConfiguration(props) {\n    const [apiFromContext] = useAPI();\n    const {\n        configDispatcher,\n        api: { corsConfiguration },\n    } = props;\n    const isCorsEnabled = corsConfiguration.corsConfigurationEnabled;\n    const isAllowAllOrigins = corsConfiguration.accessControlAllowOrigins[0] === '*'\n        && corsConfiguration.accessControlAllowOrigins.length === 1;\n    const classes = useStyles();\n    const generateElement = (isEnabled) => {\n        if (isEnabled) {\n            return (\n                <ExpandMoreIcon />\n            );\n        }\n        return (null);\n    };\n    return (\n        <WrappedExpansionPanel className={classes.expansionPanel} id='corsConfiguration'>\n            <ExpansionPanelSummary expandIcon={generateElement(corsConfiguration.corsConfigurationEnabled)}>\n                <Typography className={classes.subHeading} variant='h6' component='h4'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.CORSConfiguration.cors.configuration'\n                        defaultMessage='CORS Configuration'\n                    />\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.CORSConfiguration.tooltip'\n                                defaultMessage='If enabled, the CORS configuration for the API will be enabled.'\n                            />\n                        )}\n                        aria-label='CORS Configuration helper text'\n                        placement='right-end'\n                        interactive\n                    >\n                        <HelpOutline className={classes.iconSpace} />\n                    </Tooltip>\n                </Typography>\n                <FormControlLabel\n                    className={classes.actionSpace}\n                    control={(\n                        <Switch\n                            disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                            checked={corsConfiguration.corsConfigurationEnabled}\n                            onChange={({ target: { checked } }) => configDispatcher({\n                                action: 'corsConfigurationEnabled',\n                                value: checked,\n                            })}\n                            color='primary'\n                            inputProps={{\n                                'aria-label': 'CORS Configuration',\n                            }}\n                        />\n                    )}\n                />\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                <Grid container>\n                    <Grid item md={12}>\n                        {isCorsEnabled && (\n                            <Grid container>\n                                <Grid item md={12}>\n                                    <Typography variant='subtitle1'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.components.CORSConfiguration.allow.\n                                                    origins'\n                                            defaultMessage='Access Control Allow Origins'\n                                        />\n                                    </Typography>\n                                </Grid>\n                                <Grid item md={12}>\n                                    <Grid container>\n                                        <Grid item md={12}>\n                                            <FormControlLabel\n                                                style={{ display: 'flex' }}\n                                                control={(\n                                                    <Checkbox\n                                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                                        checked={isAllowAllOrigins}\n                                                        onChange={({ target: { checked, value } }) => configDispatcher({\n                                                            action: 'accessControlAllowOrigins',\n                                                            event: { checked, value },\n                                                        })}\n                                                        value='*'\n                                                        color='primary'\n                                                    />\n                                                )}\n                                                label='Allow All Origins'\n                                            />\n                                        </Grid>\n                                        {!isAllowAllOrigins && (\n                                            <Grid item md={12}>\n                                                <ChipInput\n                                                    style={{ marginBottom: 40, display: 'flex' }}\n                                                    value={corsConfiguration.accessControlAllowOrigins}\n                                                    helperText={(\n                                                        <FormattedMessage\n                                                            id={\n                                                                'Apis.Details.Configuration.components'\n                                                                + '.CORSConfigurations.origin.helper'\n                                                            }\n                                                            defaultMessage={\n                                                                'Press `Enter` after typing the origin name,'\n                                                                + 'to add a new origin'\n                                                            }\n                                                        />\n                                                    )}\n                                                    onAdd={(accessControlAllowOrigin) => {\n                                                        configDispatcher({\n                                                            action: 'accessControlAllowOrigins',\n                                                            event: {\n                                                                value: [\n                                                                    ...corsConfiguration.accessControlAllowOrigins,\n                                                                    accessControlAllowOrigin,\n                                                                ],\n                                                            },\n                                                        });\n                                                    }}\n                                                    onDelete={(accessControlAllowOrigin) => {\n                                                        configDispatcher({\n                                                            action: 'accessControlAllowOrigins',\n                                                            event: {\n                                                                value: corsConfiguration\n                                                                    .accessControlAllowOrigins\n                                                                    .filter(\n                                                                        (oldOrigin) => (\n                                                                            oldOrigin !== accessControlAllowOrigin),\n                                                                    ),\n                                                            },\n                                                        });\n                                                    }}\n                                                />\n                                            </Grid>\n                                        )}\n                                    </Grid>\n                                </Grid>\n                                <Grid item md={12}>\n                                    <Typography variant='subtitle1'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.components.CORSConfiguration.allow.\n                                                    headers'\n                                            defaultMessage='Access Control Allow Headers'\n                                        />\n                                    </Typography>\n                                </Grid>\n                                <Grid item md={12}>\n                                    <ChipInput\n                                        style={{ marginBottom: 40, display: 'flex' }}\n                                        value={corsConfiguration.accessControlAllowHeaders}\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                        helperText={(\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.Configuration.components.'\n                                                    + 'CORSConfigurations.header.helper'\n                                                }\n                                                defaultMessage={\n                                                    'Press `Enter` after typing the header name, '\n                                                    + 'to add a new header'\n                                                }\n                                            />\n                                        )}\n                                        onAdd={(accessControlAllowHeader) => {\n                                            configDispatcher({\n                                                action: 'accessControlAllowHeaders',\n                                                value: [\n                                                    ...corsConfiguration.accessControlAllowHeaders,\n                                                    accessControlAllowHeader,\n                                                ],\n                                            });\n                                        }}\n                                        onDelete={(accessControlAllowHeader) => {\n                                            configDispatcher({\n                                                action: 'accessControlAllowHeaders',\n                                                value: corsConfiguration.accessControlAllowHeaders\n                                                    .filter((oldHeader) => oldHeader !== accessControlAllowHeader),\n                                            });\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item md={12}>\n                                    <Typography variant='subtitle1'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.components.CORSConfiguration.allow.\n                                                    methods'\n                                            defaultMessage='Access Control Allow Methods'\n                                        />\n                                    </Typography>\n                                </Grid>\n                                <Grid item md={12}>\n                                    <ChipInput\n                                        style={{ marginBottom: 40, display: 'flex' }}\n                                        value={corsConfiguration.accessControlAllowMethods}\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                        helperText={(\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.Configuration.components'\n                                                    + '.CORSConfigurations.method.helper'\n                                                }\n                                                defaultMessage={\n                                                    'Press `Enter` after typing the method name,'\n                                                    + ' to add a new method'\n                                                }\n                                            />\n                                        )}\n                                        onAdd={(newValue) => {\n                                            let value = [...corsConfiguration.accessControlAllowMethods,\n                                                newValue.toUpperCase()];\n                                            if (\n                                                corsConfiguration\n                                                    .accessControlAllowMethods\n                                                    .find((method) => method === newValue.toUpperCase())\n                                            ) {\n                                                value = [...corsConfiguration.accessControlAllowMethods];\n                                            }\n                                            configDispatcher({\n                                                action: 'accessControlAllowMethods',\n                                                value,\n                                            });\n                                        }}\n                                        onDelete={(accessControlAllowMethod) => {\n                                            configDispatcher({\n                                                action: 'accessControlAllowMethods',\n                                                value: corsConfiguration\n                                                    .accessControlAllowMethods\n                                                    .filter((oldMethod) => oldMethod !== accessControlAllowMethod),\n                                            });\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <FormControlLabel\n                                        control={(\n                                            <Checkbox\n                                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                                checked={corsConfiguration.accessControlAllowCredentials}\n                                                onChange={({ target: { checked } }) => configDispatcher({\n                                                    action: 'accessControlAllowCredentials',\n                                                    value: checked,\n                                                })}\n                                                color='primary'\n                                            />\n                                        )}\n                                        label={(\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.Configuration.components'\n                                                    + '.CORSConfiguration.allow.credentials'\n                                                }\n                                                defaultMessage='Access Control Allow Credentials'\n                                            />\n                                        )}\n                                    />\n                                </Grid>\n                            </Grid>\n                        )}\n                    </Grid>\n                </Grid>\n            </ExpansionPanelDetails>\n        </WrappedExpansionPanel>\n    );\n}\n\nCORSConfiguration.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { withStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { isRestricted } from 'AppData/AuthManager';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Paper from '@material-ui/core/Paper';\n\nconst styles = (theme) => ({\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 2.5,\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    actionSpace: {\n        marginLeft: theme.spacing(20),\n    },\n    paper: {\n        padding: theme.spacing(0, 3),\n        marginBottom: theme.spacing(3),\n    },\n});\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nclass SchemaValidation extends React.Component {\n    /**\n     *Creates an instance of SchemaValidation.\n     * @param {*} props\n     * @memberof SchemaValidation\n     */\n    constructor(props) {\n        super(props);\n        this.state = { isOpen: false };\n        this.setIsOpen = this.setIsOpen.bind(this);\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @param {Object} prevProps\n     * @param {Object} prevState\n     * @memberof SchemaValidation\n     */\n    componentDidUpdate(prevProps) {\n        const { api } = this.props;\n        /*\n        This could have been done using hooks too, But at the moment it requires `useRef` hook to get the previous props\n        Hence using class component and its `componentDidUpdate` life cycle method to open the caution dialog box\n        For more info: https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n         */\n        if (!prevProps.api.enableSchemaValidation && api.enableSchemaValidation) {\n            this.setIsOpen(true);\n        }\n    }\n\n    /**\n     *\n     * Set isOpen state of the dialog box which shows the caution message when enabling schema validation\n     * @param {Boolean} isOpen Should dialog box is open or not\n     * @memberof SchemaValidation\n     */\n    setIsOpen(isOpen) {\n        this.setState({ isOpen });\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @param {*} props\n     * @returns\n     * @memberof SchemaValidation\n     */\n    render() {\n        const { api, configDispatcher, classes } = this.props;\n        const { isOpen } = this.state;\n        const { api: apiFromContext } = this.context;\n\n        return (\n            <Paper className={classes.paper}>\n                <Grid container spacing={1} alignItems='flex-start'>\n                    <Grid item md={12}>\n                        <Typography className={classes.subHeading} variant='h6' component='h4'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Configuration.schema.validation'\n                                defaultMessage='Schema Validation'\n                            />\n                            <Tooltip\n                                title={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.schema.validation.tooltip'\n                                        defaultMessage={'Enable the request and response '\n                                        + 'validation against the OpenAPI definition'}\n                                    />\n                                )}\n                                aria-label='Schema Validation helper text'\n                                placement='right-end'\n                                interactive\n                            >\n                                <HelpOutline className={classes.iconSpace} />\n                            </Tooltip>\n                        </Typography>\n                        <FormControlLabel\n                            className={classes.actionSpace}\n                            control={(\n                                <Switch\n                                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    checked={\n                                        api.enableSchemaValidation === undefined ? false : api.enableSchemaValidation\n                                    }\n                                    onChange={({ target: { checked } }) => configDispatcher({\n                                        action: 'enableSchemaValidation',\n                                        value: checked,\n                                    })}\n                                    color='primary'\n                                    inputProps={{\n                                        'aria-label': 'switch Schema Validation',\n                                    }}\n                                    id='schema-validation-switch'\n                                />\n                            )}\n                        />\n                    </Grid>\n                </Grid>\n                <Dialog\n                    open={isOpen}\n                    onClose={() => this.setIsOpen(false)}\n                    aria-labelledby='alert-dialog-title'\n                    aria-describedby='alert-dialog-description'\n                >\n                    <DialogTitle id='alert-dialog-title'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.SchemaValidation.title'\n                            defaultMessage='Caution!'\n                        />\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id='alert-dialog-description'>\n                            <Typography variant='subtitle1' display='block' gutterBottom>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.SchemaValidation.description'\n                                    defaultMessage={\n                                        'Enabling JSON schema validation will cause to build the'\n                                        + ' payload in every request and response. This will impact'\n                                        + ' the round trip time of an API request!'\n                                    }\n                                />\n                            </Typography>\n                            <Typography variant='subtitle2' display='block' gutterBottom>\n                                <b>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Configuration.components.SchemaValidation'\n                                        + '.description.question'}\n                                        defaultMessage='Do you want to enable schema validation?'\n                                    />\n                                </b>\n                            </Typography>\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            color='primary'\n                            variant='contained'\n                            onClick={() => this.setIsOpen(false)}\n                            id='schema-validation-yes-btn'\n                        >\n                            Yes\n                        </Button>\n                        <Button\n                            onClick={() => {\n                                this.setIsOpen(false);\n                                configDispatcher({\n                                    action: 'enableSchemaValidation',\n                                    value: false,\n                                });\n                            }}\n                            color='primary'\n                        >\n                            No\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Paper>\n        );\n    }\n}\n\nSchemaValidation.propTypes = {\n    api: PropTypes.shape({ enableSchemaValidation: PropTypes.bool }).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nSchemaValidation.contextType = ApiContext;\n\nexport default withStyles(styles)(SchemaValidation);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Collapse } from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(1), // TODO: replace with <Box /> element `mb`\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function MaxBackendTps(props) {\n    const { api, configDispatcher } = props;\n    const classes = useStyles();\n\n    return (\n        <>\n            <Grid item xs={12}>\n                <WrappedExpansionPanel className={classes.expansionPanel} defaultExpanded id='maxBackendTps'>\n                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography className={classes.subHeading} variant='h6' component='h4'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Components.MaxBackendTps.maximum.backend.throughput'\n                                defaultMessage='Backend Throughput'\n                            />\n                            <Tooltip\n                                title={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.MaxBackendTps.tooltip'\n                                        defaultMessage={'Limits the total number of calls the API Manager is allowed'\n                                        + ' to make to the backend'}\n                                    />\n                                )}\n                                aria-label='APISecurity'\n                                placement='right-end'\n                                interactive\n                            >\n                                <HelpOutline className={classes.iconSpace} />\n                            </Tooltip>\n                        </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                        <FormControl component='fieldset'>\n                            <FormLabel component='legend'>Maximum Throughput</FormLabel>\n                            <RadioGroup\n                                aria-label='change-max-TPS'\n                                value={api.maxTps === null ? 'unlimited' : 'specify'}\n                                onChange={(event) => {\n                                    configDispatcher({\n                                        action: 'maxTps',\n                                        value:\n                                            event.target.value === 'specify' ? { production: null, sandbox: null }\n                                                : null,\n                                    });\n                                }}\n                                row\n                            >\n                                <FormControlLabel\n                                    value='unlimited'\n                                    control={(\n                                        <Radio\n                                            color='primary'\n                                            disabled={isRestricted(['apim:api_create'], api)}\n                                        />\n                                    )}\n                                    label='Unlimited'\n                                    labelPlacement='end'\n\n                                />\n                                <FormControlLabel\n                                    value='specify'\n                                    control={(\n                                        <Radio\n                                            color='primary'\n                                            disabled={isRestricted(['apim:api_create'], api)}\n                                        />\n                                    )}\n                                    label='Specify'\n                                    labelPlacement='end'\n                                    disabled={isRestricted(['apim:api_create'], api)}\n                                />\n                            </RadioGroup>\n                        </FormControl>\n                        <Collapse in={api.maxTps !== null}>\n                            <Grid item xs={12} style={{ marginBottom: 10, position: 'relative' }}>\n                                <TextField\n                                    label='Max Production TPS'\n                                    margin='normal'\n                                    variant='outlined'\n                                    onChange={(event) => {\n                                        configDispatcher({\n                                            action: 'maxTps',\n                                            value: { ...api.maxTps, production: event.target.value },\n                                        });\n                                    }}\n                                    value={api.maxTps !== null ? api.maxTps.production : ''}\n                                    disabled={isRestricted(['apim:api_create'], api)}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position='end'>TPS</InputAdornment>,\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} style={{ marginBottom: 10, position: 'relative' }}>\n                                <TextField\n                                    label='Max Sandbox TPS'\n                                    margin='normal'\n                                    variant='outlined'\n                                    onChange={(event) => {\n                                        configDispatcher({\n                                            action: 'maxTps',\n                                            value: { ...api.maxTps, sandbox: event.target.value },\n                                        });\n                                    }}\n                                    value={api.maxTps !== null ? api.maxTps.sandbox : ''}\n                                    disabled={isRestricted(['apim:api_create'], api)}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position='end'>TPS</InputAdornment>,\n                                    }}\n                                />\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.MaxBackendTps.formattedMessage'\n                                        defaultMessage='Maximum backend transactions per second in integers'\n                                    />\n                                </FormHelperText>\n                            </Grid>\n                        </Collapse>\n                    </ExpansionPanelDetails>\n                </WrappedExpansionPanel>\n            </Grid>\n        </>\n    );\n}\n\nMaxBackendTps.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ApiContext, { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\nimport {\n    API_SECURITY_MUTUAL_SSL_MANDATORY,\n    DEFAULT_API_SECURITY_OAUTH2,\n    API_SECURITY_BASIC_AUTH,\n    API_SECURITY_API_KEY,\n    API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY,\n    API_SECURITY_MUTUAL_SSL,\n} from './components/apiSecurityConstants';\nimport ApplicationLevel from './components/ApplicationLevel';\nimport TransportLevel from './components/TransportLevel';\n\nconst useStyles = makeStyles((theme) => ({\n    error: {\n        color: theme.palette.error.main,\n    },\n    bottomSpace: {\n        marginBottom: theme.spacing(4),\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function APISecurity(props) {\n    const {\n        api: { securityScheme, id },\n        configDispatcher,\n        api,\n    } = props;\n    const apiContext = useContext(ApiContext);\n    const isAPIProduct = apiContext.api.apiType === API.CONSTS.APIProduct;\n    let isEndpointAvailable;\n    let isPrototyped;\n    if (isAPIProduct) {\n        isEndpointAvailable = false;\n        isPrototyped = false;\n    } else {\n        isEndpointAvailable = apiContext.api.endpointConfig !== null;\n        isPrototyped = apiContext.api.endpointConfig !== null\n             && apiContext.api.endpointConfig.implementation_status === 'prototyped';\n    }\n\n    const haveMultiLevelSecurity = securityScheme.includes(API_SECURITY_MUTUAL_SSL)\n        && (securityScheme.includes(API_SECURITY_BASIC_AUTH)\n        || securityScheme.includes(\n            DEFAULT_API_SECURITY_OAUTH2,\n        ) || securityScheme.includes(API_SECURITY_API_KEY));\n    const classes = useStyles();\n    const [apiFromContext] = useAPI();\n\n    // Check the validation conditions and return an error message\n    const Validate = () => {\n        let resourcesWithSecurity;\n        if (apiFromContext.apiType === API.CONSTS.APIProduct) {\n            const apiList = apiFromContext.apis;\n            for (const apiInProduct in apiList) {\n                if (Object.prototype.hasOwnProperty.call(apiList, apiInProduct)) {\n                    resourcesWithSecurity = apiList[apiInProduct].operations.findIndex(\n                        (op) => op.authType !== 'None',\n                    ) > -1;\n                    if (resourcesWithSecurity) {\n                        break;\n                    }\n                }\n            }\n        } else {\n            resourcesWithSecurity = apiFromContext.operations.findIndex((op) => op.authType !== 'None') > -1;\n        }\n\n        if (\n            !securityScheme.includes(API_SECURITY_MUTUAL_SSL)\n            && !securityScheme.includes(API_SECURITY_BASIC_AUTH)\n            && !securityScheme.includes(DEFAULT_API_SECURITY_OAUTH2)\n            && !securityScheme.includes(API_SECURITY_API_KEY)\n            && resourcesWithSecurity\n        ) {\n            return (\n                <Typography className={classes.bottomSpace}>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.APISecurity.emptySchemas'\n                        defaultMessage='Please select at least one API security method!'\n                    />\n                </Typography>\n            );\n        } else if (\n            // User has enabled both security levels and set both levels as optional\n            haveMultiLevelSecurity\n            && !(\n                securityScheme.includes(API_SECURITY_MUTUAL_SSL_MANDATORY)\n                || securityScheme.includes(API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY)\n            )\n        ) {\n            return (\n                <Typography className={classes.bottomSpace}>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.APISecurity.allOptional'\n                        defaultMessage=\"Please select at least one API security level as 'Mandatory'!\"\n                    />\n                </Typography>\n            );\n        }\n        return null; // No errors :-)\n    };\n    return (\n        <>\n            <Grid container spacing={2} alignItems='flex-start'>\n                {(isAPIProduct || (!isEndpointAvailable || (isEndpointAvailable && !isPrototyped)))\n                && (\n                    <>\n                        <TransportLevel\n                            haveMultiLevelSecurity={haveMultiLevelSecurity}\n                            securityScheme={securityScheme}\n                            configDispatcher={configDispatcher}\n                            api={api}\n                            id={id}\n                        />\n                        <ApplicationLevel\n                            haveMultiLevelSecurity={haveMultiLevelSecurity}\n                            securityScheme={securityScheme}\n                            api={api}\n                            configDispatcher={configDispatcher}\n                            id={id}\n                        />\n                        <Grid item>\n                            <span className={classes.error}>\n                                <Validate />\n                            </span>\n                        </Grid>\n                    </>\n                )}\n            </Grid>\n        </>\n    );\n}\n\nAPISecurity.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AuthorizationHeader from 'AppComponents/Apis/Details/Configuration/components/AuthorizationHeader.jsx';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport KeyManager from 'AppComponents/Apis/Details/Configuration/components/KeyManager';\nimport API from 'AppData/api';\n\nimport {\n    DEFAULT_API_SECURITY_OAUTH2,\n    API_SECURITY_BASIC_AUTH,\n    API_SECURITY_API_KEY,\n    API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY,\n    API_SECURITY_MUTUAL_SSL,\n} from './apiSecurityConstants';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    bottomSpace: {\n        marginBottom: theme.spacing(4),\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ApplicationLevel(props) {\n    const {\n        haveMultiLevelSecurity, securityScheme, configDispatcher, api,\n    } = props;\n    const [apiFromContext] = useAPI();\n    const classes = useStyles();\n    let mandatoryValue = null;\n    let hasResourceWithSecurity;\n    if (apiFromContext.apiType === API.CONSTS.APIProduct) {\n        const apiList = apiFromContext.apis;\n        for (const apiInProduct in apiList) {\n            if (Object.prototype.hasOwnProperty.call(apiList, apiInProduct)) {\n                hasResourceWithSecurity = apiList[apiInProduct].operations.findIndex(\n                    (op) => op.authType !== 'None',\n                ) > -1;\n                if (hasResourceWithSecurity) {\n                    break;\n                }\n            }\n        }\n    } else {\n        hasResourceWithSecurity = apiFromContext.operations.findIndex((op) => op.authType !== 'None') > -1;\n    }\n\n    mandatoryValue = 'optional';\n    // If not Oauth2, Basic auth or ApiKey security is selected, no mandatory values should be pre-selected\n    if (!(securityScheme.includes(DEFAULT_API_SECURITY_OAUTH2) || securityScheme.includes(API_SECURITY_BASIC_AUTH)\n        || securityScheme.includes(API_SECURITY_API_KEY))) {\n        mandatoryValue = null;\n    } else if (!securityScheme.includes(API_SECURITY_MUTUAL_SSL)) {\n        mandatoryValue = API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY;\n    } else if (securityScheme.includes(API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY)) {\n        mandatoryValue = API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY;\n    }\n\n    return (\n        <>\n            <Grid item xs={12}>\n                <WrappedExpansionPanel className={classes.expansionPanel} id='applicationLevel'>\n                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography className={classes.subHeading} variant='h6' component='h4'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Components.APISecurity.Components.\n                                    ApplicationLevel.http'\n                                defaultMessage='Application Level Security'\n                            />\n                            <Tooltip\n                                title={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.APISecurity.tooltip'\n                                        defaultMessage={\n                                            'This option determines the type of security'\n                                            + ' that will be used to secure this API. An API can be secured '\n                                            + 'with either OAuth2/Basic/ApiKey or it can be secured with all of them. '\n                                            + 'If OAuth2 option is selected, relevant API will require a valid '\n                                            + 'OAuth2 token for successful invocation.'\n                                        }\n                                    />\n                                )}\n                                aria-label='API Security helper text'\n                                placement='right-end'\n                                interactive\n                            >\n                                <HelpOutline className={classes.iconSpace} />\n                            </Tooltip>\n                        </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                        <FormGroup style={{ display: 'flow-root' }}>\n                            <FormControlLabel\n                                control={(\n                                    <Checkbox\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                        checked={securityScheme.includes(DEFAULT_API_SECURITY_OAUTH2)}\n                                        onChange={({ target: { checked, value } }) => configDispatcher({\n                                            action: 'securityScheme',\n                                            event: { checked, value },\n                                        })}\n                                        value={DEFAULT_API_SECURITY_OAUTH2}\n                                        color='primary'\n                                    />\n                                )}\n                                label='OAuth2'\n                            />\n                            <FormControlLabel\n                                control={(\n                                    <Checkbox\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                        checked={securityScheme.includes(API_SECURITY_BASIC_AUTH)}\n                                        onChange={({ target: { checked, value } }) => configDispatcher({\n                                            action: 'securityScheme',\n                                            event: { checked, value },\n                                        })}\n                                        value={API_SECURITY_BASIC_AUTH}\n                                        color='primary'\n                                        id='api-security-basic-auth-checkbox'\n                                    />\n                                )}\n                                label='Basic'\n                            />\n                            <FormControlLabel\n                                control={(\n                                    <Checkbox\n                                        checked={securityScheme.includes(API_SECURITY_API_KEY)}\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                        onChange={({ target: { checked, value } }) => configDispatcher({\n                                            action: 'securityScheme',\n                                            event: { checked, value },\n                                        })}\n                                        value={API_SECURITY_API_KEY}\n                                        color='primary'\n                                        id='api-security-api-key-checkbox'\n                                    />\n                                )}\n                                label='Api Key'\n                            />\n                        </FormGroup>\n                        <FormControl className={classes.bottomSpace} component='fieldset'>\n                            <RadioGroup\n                                aria-label='HTTP security HTTP mandatory selection'\n                                name={API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY}\n                                value={mandatoryValue}\n                                onChange={({ target: { name, value } }) => configDispatcher({\n                                    action: 'securityScheme',\n                                    event: { name, value },\n                                })}\n                                row\n                            >\n                                <FormControlLabel\n                                    value={API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY}\n                                    control={(\n                                        <Radio\n                                            disabled={!haveMultiLevelSecurity\n                                                || isRestricted(['apim:api_create'], apiFromContext)}\n                                            color='primary'\n                                        />\n                                    )}\n                                    label='Mandatory'\n                                    labelPlacement='end'\n                                />\n                                <FormControlLabel\n                                    value='optional'\n                                    control={(\n                                        <Radio\n                                            disabled={!haveMultiLevelSecurity\n                                                || isRestricted(['apim:api_create'], apiFromContext)}\n                                            color='primary'\n                                        />\n                                    )}\n                                    label='Optional'\n                                    labelPlacement='end'\n                                />\n                            </RadioGroup>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.APISecurity.application.mandatory'\n                                    defaultMessage='Choose whether Application level security is mandatory or optional'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                        {(apiFromContext.apiType === API.CONSTS.API) && (\n                            <KeyManager\n                                api={api}\n                                configDispatcher={configDispatcher}\n                            />\n                        )}\n                        <AuthorizationHeader api={api} configDispatcher={configDispatcher} />\n                        <FormControl>\n                            {!hasResourceWithSecurity\n                            && (\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.APISecurity.api.unsecured'\n                                        defaultMessage='Application level security is not required since API\n                                        has no secured resources'\n                                    />\n                                </FormHelperText>\n                            )}\n                        </FormControl>\n                    </ExpansionPanelDetails>\n                </WrappedExpansionPanel>\n            </Grid>\n        </>\n    );\n}\n\nApplicationLevel.propTypes = {\n    configDispatcher: PropTypes.func.isRequired,\n    haveMultiLevelSecurity: PropTypes.bool.isRequired,\n    securityScheme: PropTypes.arrayOf(PropTypes.string).isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\nimport APIValidation from 'AppData/APIValidation';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\n\nexport default function AuthorizationHeader(props) {\n    const { api, configDispatcher } = props;\n    const [apiFromContext] = useAPI();\n    const [isHeaderNameValid, setIsHeaderNameValid] = useState(true);\n    const { settings } = useAppContext();\n    let hasResourceWithSecurity;\n    const authorizationHeaderValue = api.authorizationHeader ? api.authorizationHeader : settings.authorizationHeader;\n    if (apiFromContext.apiType === API.CONSTS.APIProduct) {\n        const apiList = apiFromContext.apis;\n        for (const apiInProduct in apiList) {\n            if (Object.prototype.hasOwnProperty.call(apiList, apiInProduct)) {\n                hasResourceWithSecurity = apiList[apiInProduct].operations.findIndex(\n                    (op) => op.authType !== 'None',\n                ) > -1;\n                if (hasResourceWithSecurity) {\n                    break;\n                }\n            }\n        }\n    } else {\n        hasResourceWithSecurity = apiFromContext.operations.findIndex((op) => op.authType !== 'None') > -1;\n    }\n    if (!hasResourceWithSecurity && api.authorizationHeader !== '') {\n        configDispatcher({ action: 'authorizationHeader', value: '' });\n    }\n\n    function validateHeader(value) {\n        const headerValidity = APIValidation.authorizationHeader.required()\n            .validate(value, { abortEarly: false }).error;\n        if (headerValidity === null) {\n            setIsHeaderNameValid(true);\n            configDispatcher({ action: 'saveButtonDisabled', value: false });\n        } else {\n            setIsHeaderNameValid(false);\n            configDispatcher({ action: 'saveButtonDisabled', value: true });\n        }\n    }\n\n    return (\n        <Grid container spacing={1} alignItems='center'>\n            <Grid item xs={11}>\n                <TextField\n                    disabled={isRestricted(['apim:api_create'], apiFromContext) || !hasResourceWithSecurity}\n                    id='outlined-name'\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.Configuration.auth.header.label'\n                            defaultMessage='Authorization Header'\n                        />\n                    )}\n                    value={hasResourceWithSecurity ? authorizationHeaderValue : ' '}\n                    error={!isHeaderNameValid}\n                    helperText={\n                        (!isHeaderNameValid)\n                        && (\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.AuthHeader.helper.text'\n                                defaultMessage='Authorization header name cannot contain spaces or special characters'\n                            />\n                        )\n                    }\n                    InputProps={{\n                        id: 'itest-id-headerName-input',\n                        onBlur: ({ target: { value } }) => {\n                            validateHeader(value);\n                        },\n                    }}\n                    margin='normal'\n                    variant='outlined'\n                    onChange={({ target: { value } }) => configDispatcher({ action: 'authorizationHeader', value })}\n                    style={{ display: 'flex' }}\n                />\n            </Grid>\n            <Grid item xs={1}>\n                <Tooltip\n                    title={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.Configuration.AuthHeader.tooltip'\n                            defaultMessage={\n                                ' The header name that is used to send the authorization '\n                                + 'information. \"Authorization\" is the default header.'\n                            }\n                        />\n                    )}\n                    aria-label='Auth Header'\n                    placement='right-end'\n                    interactive\n                >\n                    <HelpOutline />\n                </Tooltip>\n            </Grid>\n        </Grid>\n    );\n}\n\nAuthorizationHeader.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Certificates from 'AppComponents/Apis/Details/Endpoints/GeneralConfiguration/Certificates';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport Transports from 'AppComponents/Apis/Details/Configuration/components/Transports.jsx';\n\nimport {\n    API_SECURITY_MUTUAL_SSL,\n    API_SECURITY_MUTUAL_SSL_MANDATORY,\n    DEFAULT_API_SECURITY_OAUTH2,\n    API_SECURITY_BASIC_AUTH,\n    API_SECURITY_API_KEY,\n} from './apiSecurityConstants';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    bottomSpace: {\n        marginBottom: theme.spacing(4),\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nfunction TransportLevel(props) {\n    const {\n        haveMultiLevelSecurity, securityScheme, configDispatcher, intl, id, api,\n    } = props;\n    const isMutualSSLEnabled = securityScheme.includes(API_SECURITY_MUTUAL_SSL);\n    const [apiFromContext] = useAPI();\n    const [clientCertificates, setClientCertificates] = useState([]);\n    const classes = useStyles();\n\n    /**\n     * Method to upload the certificate content by calling the rest api.\n     *\n     * @param {string} certificate The certificate needs to be associated with the API\n     * @param {string} policy The tier to be used for the certificate.\n     * @param {string} alias The alias of the certificate to be deleted.\n     *\n     * */\n    const saveClientCertificate = (certificate, policy, alias) => {\n        return API.addClientCertificate(id, certificate, policy, alias).then((resp) => {\n            if (resp.status === 201) {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Configuration.components.APISecurity.TranportLevel.certificate.add.success',\n                    defaultMessage: 'Certificate added successfully',\n                }));\n                const tmpCertificates = [...clientCertificates];\n                tmpCertificates.push({\n                    apiId: resp.obj.apiId,\n                    alias: resp.obj.alias,\n                    tier: resp.obj.tier,\n                });\n                setClientCertificates(tmpCertificates);\n            }\n        }).catch((error) => {\n            if (error.response) {\n                Alert.error(error.response.body.description);\n            } else {\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Configuration.components.APISecurity.TranportLevel.certificate.alias.error',\n                    defaultMessage: 'Something went wrong while adding the API certificate',\n                }));\n            }\n        });\n    };\n\n    /**\n     * Method to delete the selected certificate.\n     *\n     * @param {string} alias The alias of the certificate to be deleted.\n     * */\n    const deleteClientCertificate = (alias) => {\n        return API.deleteClientCertificate(alias, id).then((resp) => {\n            setClientCertificates(() => {\n                if (resp.status === 200) {\n                    return clientCertificates.filter((cert) => {\n                        return cert.alias !== alias;\n                    });\n                } else {\n                    return -1;\n                }\n            });\n            Alert.info(intl.formatMessage({\n                id: 'Apis.Details.Configuration.components.APISecurity.TranportLevel.certificate.delete.success',\n                defaultMessage: 'Certificate Deleted Successfully',\n            }));\n        }).catch((error) => {\n            if (error.response) {\n                Alert.error(error.response.body.description);\n            } else {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Configuration.components.APISecurity.TranportLevel.certificate.delete.error',\n                    defaultMessage: 'Error while deleting certificate',\n                }));\n            }\n        });\n    };\n\n    // Get the client certificates from backend.\n    useEffect(() => {\n        API.getAllClientCertificates(id).then((resp) => {\n            const { certificates } = resp.obj;\n            setClientCertificates(certificates);\n        }).catch((err) => {\n            console.error(err);\n            setClientCertificates([]);\n        });\n    }, []);\n\n    let mandatoryValue = 'optional';\n    // If not mutual ssl security is selected, no mandatory values should be pre-selected\n    if (!isMutualSSLEnabled) {\n        mandatoryValue = 'null';\n    } else if (\n        !(securityScheme.includes(DEFAULT_API_SECURITY_OAUTH2) || securityScheme.includes(API_SECURITY_BASIC_AUTH)\n            || securityScheme.includes(API_SECURITY_API_KEY))\n    ) {\n        mandatoryValue = API_SECURITY_MUTUAL_SSL_MANDATORY;\n    } else if (securityScheme.includes(API_SECURITY_MUTUAL_SSL_MANDATORY)) {\n        mandatoryValue = API_SECURITY_MUTUAL_SSL_MANDATORY;\n    }\n    return (\n        <>\n            <Grid item xs={12}>\n                <WrappedExpansionPanel className={classes.expansionPanel} id='transportLevel'>\n                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography className={classes.subHeading} variant='h6' component='h4'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Components.APISecurity.Components.\n                                    TransportLevel.transport.level.security'\n                                defaultMessage='Transport Level Security'\n                            />\n                        </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                        <Transports api={api} configDispatcher={configDispatcher} securityScheme={securityScheme} />\n                        <FormControlLabel\n                            control={(\n                                <Checkbox\n                                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    checked={isMutualSSLEnabled}\n                                    onChange={({ target: { checked, value } }) => configDispatcher({\n                                        action: 'securityScheme',\n                                        event: { checked, value },\n                                    })}\n                                    value={API_SECURITY_MUTUAL_SSL}\n                                    color='primary'\n                                    id='mutual-ssl-checkbox'\n                                />\n                            )}\n                            label='Mutual SSL'\n                        />\n                        {isMutualSSLEnabled && (\n                            <FormControl component='fieldset'>\n                                <RadioGroup\n                                    aria-label='HTTP security SSL mandatory selection'\n                                    name={API_SECURITY_MUTUAL_SSL_MANDATORY}\n                                    value={mandatoryValue}\n                                    onChange={({ target: { name, value } }) => configDispatcher({\n                                        action: 'securityScheme',\n                                        event: { name, value },\n                                    })}\n                                    row\n                                >\n                                    <FormControlLabel\n                                        value={API_SECURITY_MUTUAL_SSL_MANDATORY}\n                                        control={(\n                                            <Radio\n                                                disabled={!haveMultiLevelSecurity\n                                                || isRestricted(['apim:api_create'], apiFromContext)}\n                                                color='primary'\n                                            />\n                                        )}\n                                        label='Mandatory'\n                                        labelPlacement='end'\n                                    />\n                                    <FormControlLabel\n                                        value='optional'\n                                        control={(\n                                            <Radio\n                                                disabled={!haveMultiLevelSecurity\n                                                || isRestricted(['apim:api_create'], apiFromContext)}\n                                                color='primary'\n                                            />\n                                        )}\n                                        label='Optional'\n                                        labelPlacement='end'\n                                    />\n                                </RadioGroup>\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.APISecurity.http.mandatory'\n                                        defaultMessage='Choose whether Transport level security is mandatory or\n                                        optional'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        )}\n                        {(isMutualSSLEnabled && (!api.advertiseInfo || !api.advertiseInfo.advertised)) && (\n                            // TODO:\n                            // This is half baked!!!\n                            // Refactor the Certificate component to share its capabilities in here and\n                            // endpoints page ~tmkb\n                            <Certificates\n                                isMutualSSLEnabled={isMutualSSLEnabled}\n                                certificates={clientCertificates}\n                                uploadCertificate={saveClientCertificate}\n                                deleteCertificate={deleteClientCertificate}\n                                apiId={id}\n                            />\n                        )}\n                    </ExpansionPanelDetails>\n                </WrappedExpansionPanel>\n            </Grid>\n        </>\n    );\n}\n\nTransportLevel.propTypes = {\n    configDispatcher: PropTypes.func.isRequired,\n    haveMultiLevelSecurity: PropTypes.bool.isRequired,\n    securityScheme: PropTypes.arrayOf(PropTypes.string).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    id: PropTypes.string.isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl((TransportLevel));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Grid,\n    Icon,\n    TextField,\n    Typography,\n} from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport Dropzone from 'react-dropzone';\nimport Box from '@material-ui/core/Box';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\nimport APIValidation from 'AppData/APIValidation';\nimport SelectEndpoint from 'AppComponents/Apis/Details/Endpoints/GeneralConfiguration/SelectEndpoint';\nimport SelectPolicies from '../../../Create/Components/SelectPolicies';\n\nconst dropzoneStyles = {\n    border: '1px dashed #c4c4c4',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    height: 75,\n    padding: '8px 0px',\n    position: 'relative',\n    textAlign: 'center',\n    width: '100%',\n    margin: '10px 0',\n};\n\nconst useStyles = makeStyles((theme) => ({\n    fileinput: {\n        display: 'none',\n    },\n    dropZoneWrapper: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '& span.material-icons': {\n            color: theme.palette.primary.main,\n        },\n    },\n    uploadedFile: {\n        fontSize: 11,\n    },\n    certificatesHeader: {\n        fontWeight: 600,\n        marginTop: 20,\n    },\n    addCertificateBtn: {\n        borderColor: '#c4c4c4',\n        borderRadius: '8px',\n        borderStyle: 'dashed',\n        borderWidth: 'thin',\n    },\n    certificateList: {\n        maxHeight: '250px',\n        overflow: 'scroll',\n    },\n    certDetailsHeader: {\n        fontWeight: '600',\n    },\n    uploadCertDialogHeader: {\n        fontWeight: '600',\n    },\n}));\n\n/**\n * This component is used to upload the certificates\n * @param {any} props The input props.\n * @returns {any} The HTML representation of the Certificates.\n */\nexport default function UploadCertificate(props) {\n    const {\n        endpoints,\n        uploadCertificate,\n        isMutualSSLEnabled,\n        uploadCertificateOpen,\n        setUploadCertificateOpen,\n        aliasList,\n    } = props;\n    const [alias, setAlias] = useState('');\n    const [policy, setPolicy] = useState('');\n    const [endpoint, setEndpoint] = useState('');\n    const [isSaving, setSaving] = useState(false);\n    const [certificate, setCertificate] = useState({ name: '', content: {} });\n    const [isEndpointEmpty, setIsEndpointEmpty] = useState(false);\n    const [isPoliciesEmpty, setPoliciesEmpty] = useState(false);\n    const [aliasValidity, setAliasValidity] = useState();\n    const classes = useStyles();\n    const [isRejected, setIsRejected] = useState(false);\n\n    const closeCertificateUpload = () => {\n        setUploadCertificateOpen(false);\n        setAliasValidity();\n        setCertificate({ name: '', content: '' });\n        setAlias('');\n        setEndpoint('');\n        setPolicy('');\n    };\n\n    /**\n     * On change functionality to handle the policy dropdown\n     *\n     * @param {*} event\n     */\n    function handleOnChange(event) {\n        const { value } = event.target;\n        setPolicy(value);\n    }\n\n    /**\n     * Method to validate the policies.\n     * @param {string} value selected policy.\n     * */\n    const onValidate = (value) => {\n        setPoliciesEmpty(value === '');\n    };\n\n    /**\n     * Method to upload the certificate content by calling the rest api.\n     * */\n    const saveCertificate = () => {\n        setSaving(true);\n        if (isMutualSSLEnabled) {\n            uploadCertificate(certificate.content, policy, alias)\n                .then(closeCertificateUpload)\n                .finally(() => setSaving(false));\n        } else {\n            uploadCertificate(certificate.content, endpoint, alias)\n                .then(closeCertificateUpload)\n                .finally(() => setSaving(false));\n        }\n    };\n\n    /**\n     * Handled the file upload action of the dropzone.\n     *\n     * @param {array} file The accepted file list by the dropzone.\n     * */\n    const onDrop = (file) => {\n        const certificateFile = file[0];\n        const rejectedFiles = ['pem', 'txt', 'jks', 'key', 'ca-bundle'];\n        const extension = certificateFile.name.split('.');\n        if (rejectedFiles.includes(extension[1])) {\n            setIsRejected(true);\n        } else {\n            setIsRejected(false);\n        }\n        if (certificateFile) {\n            setCertificate({ name: certificateFile.name, content: certificateFile });\n        }\n    };\n\n    const handleEndpointOnChange = (value) => {\n        setEndpoint(value);\n        if (value) {\n            setIsEndpointEmpty(false);\n        } else {\n            setIsEndpointEmpty(true);\n        }\n    };\n\n    const handleAliasOnBlur = () => {\n        const aliasValidation = APIValidation.alias.required().validate(alias).error;\n        if (aliasValidation) {\n            setAliasValidity({ isValid: false, message: aliasValidation.details[0].message });\n        } else {\n            setAliasValidity({ isValid: true, message: '' });\n        }\n    };\n\n    const getHelperText = () => {\n        if (aliasValidity && !aliasValidity.isValid) {\n            return (aliasValidity.message);\n        } else if (aliasList && aliasList.includes(alias)) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.alias.exist.error'\n                    defaultMessage='Alias already exists'\n                />\n            );\n        } else {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.alias.default.message'\n                    defaultMessage='Alias for the Certificate'\n                />\n            );\n        }\n    };\n\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n    return (\n        <Dialog open={uploadCertificateOpen}>\n            <DialogTitle>\n                <Typography className={classes.uploadCertDialogHeader}>\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.uploadCertificate'\n                        defaultMessage='Upload Certificate'\n                    />\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <Grid>\n                    <div>\n                        {isMutualSSLEnabled ? (\n                            <SelectPolicies\n                                multiple={false}\n                                policies={policy}\n                                helperText='Select a throttling policy for the certificate'\n                                onChange={handleOnChange}\n                                required\n                                validate={onValidate}\n                            />\n                        )\n                            : (\n                                <SelectEndpoint\n                                    endpoints={endpoints}\n                                    onChange={handleEndpointOnChange}\n                                    endpoint={endpoint}\n                                    isEndpointEmpty={isEndpointEmpty}\n                                    required\n                                />\n                            )}\n                        <TextField\n                            required\n                            id='certificateAlias'\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.alias'\n                                    defaultMessage='Alias'\n                                />\n                            )}\n                            value={alias}\n                            placeholder='My Alias'\n                            onChange={(event) => setAlias(event.target.value)}\n                            onBlur={() => handleAliasOnBlur()}\n                            margin='normal'\n                            variant='outlined'\n                            error={\n                                (aliasValidity && !aliasValidity.isValid) || (aliasList && aliasList.includes(alias))\n                            }\n                            helperText={getHelperText()}\n                            fullWidth\n                            inputProps={{ maxLength: 45 }}\n                        />\n                        <Dropzone\n                            multiple={false}\n                            accept={\n                                'application/pkcs8,'\n                                    + 'application/pkcs10, application/pkix-crl,'\n                                    + 'application/pkcs7-mime,'\n                                    + 'application/x-x509-ca-cert,'\n                                    + 'application/x-x509-user-cert,'\n                                    + 'application/x-pkcs7-crl,'\n                                    + 'application/x-pkcs12,'\n                                    + 'application/x-pkcs7-certificates,'\n                                    + 'application/x-pkcs7-certreqresp,'\n                                    + '.p8, .p10, .cer, .cert, .p7c, .crt, .der, .p12, .pfx, .p7b, .spc, .p7r'\n                            }\n                            className={classes.dropzone}\n                            activeClassName={classes.acceptDrop}\n                            rejectClassName={classes.rejectDrop}\n                            onDrop={(dropFile) => {\n                                onDrop(dropFile);\n                            }}\n                        >\n                            {({ getRootProps, getInputProps }) => (\n                                <div {...getRootProps({ style: dropzoneStyles })}>\n                                    <input {...getInputProps()} />\n                                    <div className={classes.dropZoneWrapper} data-testid='cert-upload-btn'>\n                                        {certificate.name === '' ? (\n                                            <div>\n                                                <Icon style={{ fontSize: 56 }}>cloud_upload</Icon>\n                                                <Typography>\n                                                    <FormattedMessage\n                                                        id={\n                                                            'Apis.Details.Endpoints.GeneralConfiguration'\n                                                                + '.UploadCertificate.click.or.drop.to.upload.file'\n                                                        }\n                                                        defaultMessage={\n                                                            'Click or drag the certificate'\n                                                                + ' file to upload.'\n                                                        }\n                                                    />\n                                                </Typography>\n                                            </div>\n                                        ) : iff(\n                                            isRejected,\n                                            <div classNames={classes.uploadedFile}>\n                                                <InsertDriveFileIcon color='error' fontSize='large' />\n                                                <Box fontSize='h6.fontSize' color='error' fontWeight='fontWeightLight'>\n                                                    <Grid xs={12}>\n                                                        {certificate.name}\n                                                    </Grid>\n                                                    <Grid xs={12}>\n                                                        <Typography variant='caption' color='error'>\n                                                            <FormattedMessage\n                                                                id={\n                                                                    'Apis.Details.Endpoints.GeneralConfiguration'\n                                                            + '.UploadCertificate.invalid.file'\n                                                                }\n                                                                defaultMessage='Invalid file type'\n                                                            />\n                                                        </Typography>\n                                                    </Grid>\n                                                </Box>\n                                            </div>,\n                                            <div className={classes.uploadedFile}>\n                                                <InsertDriveFileIcon color='primary' fontSize='large' />\n                                                <Box fontSize='h6.fontSize' fontWeight='fontWeightLight'>\n                                                    <Typography>\n                                                        {certificate.name}\n                                                    </Typography>\n                                                </Box>\n                                            </div>,\n                                        )}\n                                    </div>\n                                </div>\n                            )}\n                        </Dropzone>\n                    </div>\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={closeCertificateUpload}>\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.cancel.button'\n                        defaultMessage='Close'\n                    />\n                </Button>\n                <Button\n                    id='upload-cert-save-btn'\n                    onClick={saveCertificate}\n                    variant='contained'\n                    color='primary'\n                    autoFocus\n                    disabled={\n                        alias === '' || (aliasValidity && !aliasValidity.isValid)\n                            || (!isMutualSSLEnabled && endpoint === '')\n                            || certificate.name === ''\n                            || (isMutualSSLEnabled && isPoliciesEmpty)\n                            || isSaving || (aliasList && aliasList.includes(alias)) || isRejected\n                    }\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.config.save.button'\n                        defaultMessage='Save'\n                    />\n                    {isSaving && <CircularProgress size={24} />}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nUploadCertificate.defaultProps = {\n    isMutualSSLEnabled: false,\n    endpoints: [],\n};\n\nUploadCertificate.propTypes = {\n    certificates: PropTypes.shape({}).isRequired,\n    uploadCertificate: PropTypes.func.isRequired,\n    isMutualSSLEnabled: PropTypes.bool,\n    setUploadCertificateOpen: PropTypes.func.isRequired,\n    uploadCertificateOpen: PropTypes.bool.isRequired,\n    endpoints: PropTypes.shape([]),\n    aliasList: PropTypes.shape([]).isRequired,\n};\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React from 'react';\nimport { MenuItem, TextField } from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nexport default function SelectEndpoint(props) {\n    const {\n        onChange,\n        endpoint,\n        isEndpointEmpty,\n        endpoints,\n    } = props;\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n    return (\n        <TextField\n            autoFocus\n            error={isEndpointEmpty || endpoints.length === 0}\n            helperText={endpoints.length === 0 ? (\n                <FormattedMessage\n                    id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.endpoint.empty.error'\n                    defaultMessage='Save endpoints before adding the Certificate'\n                />\n            ) : iff(isEndpointEmpty, <FormattedMessage\n                id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.endpoint.error'\n                defaultMessage='Endpoint should not be empty'\n            />, <FormattedMessage\n                id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.endpoint.helpertext'\n                defaultMessage='Endpoint for the Certificate'\n            />)}\n            required\n            id='endpoint-certificate'\n            label={(\n                <FormattedMessage\n                    id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.endpoint'\n                    defaultMessage='Endpoint'\n                />\n            )}\n            value={endpoint}\n            placeholder='Endpoint'\n            onChange={(event) => onChange(event.target.value)}\n            margin='normal'\n            variant='outlined'\n            fullWidth\n            select\n        >\n            {endpoints !== null && endpoints.map((ep) => {\n                if (ep) {\n                    return (<MenuItem value={ep.url}>{ep.url}</MenuItem>);\n                }\n                return null;\n            })}\n        </TextField>\n    );\n}\n\nSelectEndpoint.propTypes = {\n    endpoints: PropTypes.shape({}).isRequired,\n    onChange: PropTypes.func.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    endpoint: PropTypes.string.isRequired,\n    isEndpointEmpty: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { FormattedMessage } from 'react-intl';\nimport API from 'AppData/api';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    mandatoryStar: {\n        color: theme.palette.error.main,\n        marginLeft: theme.spacing(0.1),\n    },\n}));\n\n/**\n * Trottling Policies dropdown selector used in minimized API Create form\n * @export\n * @param {*} props\n * @returns {React.Component}\n */\nexport default function SelectPolicies(props) {\n    const {\n        onChange, policies: selectedPolicies, multiple, helperText, isAPIProduct, validate,\n    } = props;\n    const [policies, setPolicies] = useState({});\n    const classes = useStyles();\n    useEffect(() => {\n        API.policies('subscription').then((response) => setPolicies(response.body));\n    }, []);\n    const handleValidateAndChange = ({ target: { value, name } }) => {\n        validate('policies', value);\n        onChange({ target: { name, value } });\n    };\n    if (!policies.list) {\n        return <CircularProgress />;\n    } else {\n        return (\n            <TextField\n                fullWidth\n                select\n                label={(\n                    <>\n                        <FormattedMessage\n                            id='Apis.Create.Components.SelectPolicies.business.plans'\n                            defaultMessage='Business plan(s)'\n                        />\n                        {isAPIProduct && (<sup className={classes.mandatoryStar}>*</sup>)}\n                    </>\n                )}\n                value={selectedPolicies}\n                name='policies'\n                onChange={handleValidateAndChange}\n                SelectProps={{\n                    multiple,\n                    renderValue: (selected) => (Array.isArray(selected) ? selected.join(', ') : selected),\n                }}\n                helperText={isAPIProduct ? helperText + 'API Product' : helperText + 'API'}\n                margin='normal'\n                variant='outlined'\n                InputProps={{\n                    id: 'itest-id-apipolicies-input',\n                }}\n                InputLabelProps={{\n                    for: 'itest-id-apipolicies-input',\n                }}\n            >\n                {policies.list.map((policy) => (\n                    <MenuItem\n                        dense\n                        disableGutters={multiple}\n                        id={policy.name}\n                        key={policy.name}\n                        value={policy.displayName}\n                    >\n                        {multiple && <Checkbox color='primary' checked={selectedPolicies.includes(policy.name)} />}\n                        <ListItemText primary={policy.displayName} secondary={policy.description} />\n                    </MenuItem>\n                ))}\n            </TextField>\n        );\n    }\n}\n\nSelectPolicies.defaultProps = {\n    policies: [],\n    multiple: true,\n    required: false,\n    isAPIProduct: PropTypes.bool.isRequired,\n    helperText: 'Select one or more throttling policies for the ',\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Typography from '@material-ui/core/Typography';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { API_SECURITY_MUTUAL_SSL } from './APISecurity/components/apiSecurityConstants';\n\nconst useStyles = makeStyles((theme) => ({\n    error: {\n        color: theme.palette.error.main,\n    },\n}));\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function Transports(props) {\n    const { api, configDispatcher, securityScheme } = props;\n    const [apiFromContext] = useAPI();\n    const classes = useStyles();\n    const isMutualSSLEnabled = securityScheme.includes(API_SECURITY_MUTUAL_SSL);\n    const Validate = () => {\n        if (api.transport && api.transport.length === 0) {\n            return (\n                <Typography>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.transport.empty'\n                        defaultMessage='Please select at least one transport!'\n                    />\n                </Typography>\n            );\n        } else if (isMutualSSLEnabled && !api.transport.includes('https')) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Configuration.components.transport.sslHttps'\n                    defaultMessage='Please select Https as transport with mutual SSL!'\n                />\n            );\n        }\n        return null; // No errors :-)\n    };\n    return (\n        <Grid container spacing={1} alignItems='flex-start'>\n            <Grid item>\n                <FormControl component='fieldset'>\n                    <FormLabel component='legend'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.Configuration.transports'\n                            defaultMessage='Transports'\n                        />\n                    </FormLabel>\n                    <FormGroup style={{ display: 'flow-root' }}>\n                        <FormControlLabel\n                            control={(\n                                <Checkbox\n                                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    checked={api.transport\n                                        ? api.transport.includes('http') : null}\n                                    onChange={({ target: { checked } }) => configDispatcher({\n                                        action: 'transport',\n                                        event: { checked, value: 'http' },\n                                    })}\n                                    value='http'\n                                    color='primary'\n                                    id='http-transport'\n                                />\n                            )}\n                            label='HTTP'\n                        />\n                        <FormControlLabel\n                            control={(\n                                <Checkbox\n                                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    checked={api.transport\n                                        ? api.transport.includes('https') : null}\n                                    onChange={({ target: { checked } }) => configDispatcher({\n                                        action: 'transport',\n                                        event: { checked, value: 'https' },\n                                    })}\n                                    value='https'\n                                    color='primary'\n                                />\n                            )}\n                            label='HTTPS'\n                        />\n                    </FormGroup>\n                </FormControl>\n            </Grid>\n            <Grid item>\n                <Tooltip\n                    title={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.Transports.tooltip'\n                            defaultMessage={\n                                'API will be exposed in selected transport(s) in the gateway(s)'\n                                + ' If Mutual SSL option is selected, a trusted client'\n                                + ' certificate should be presented to access the API'\n                            }\n                        />\n                    )}\n                    aria-label='Transports'\n                    placement='right-end'\n                    interactive\n                >\n                    <HelpOutline />\n                </Tooltip>\n            </Grid>\n            <Grid item>\n                <span className={classes.error}>\n                    <Validate />\n                </span>\n            </Grid>\n        </Grid>\n    );\n}\n\nTransports.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport EditRounded from '@material-ui/icons/EditRounded';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Container from '@material-ui/core/Container';\nimport { isRestricted } from 'AppData/AuthManager';\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { Progress } from 'AppComponents/Shared';\nimport UpdateComplexity from '../../QueryAnalysis/UpdateComplexity';\n\nconst useStyles = makeStyles(() => ({\n    content: {\n        flexGrow: 1,\n    },\n    itemWrapper: {\n        width: 'auto',\n        display: 'flex',\n    },\n    FormControl: {\n        padding: 10,\n        width: '100%',\n        marginTop: 0,\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    subTitle: {\n        marginTop: 20,\n    },\n    subTitleDescription: {\n        marginBottom: 10,\n    },\n    flowWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: 10,\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n    heading: {\n        margin: 'auto',\n        color: 'rgba(0, 0, 0, 0.40)',\n    },\n    paper: {\n        padding: '10px 24px',\n        width: 'auto',\n    },\n    editIcon: {\n        position: 'absolute',\n        top: 8,\n        right: 0,\n    },\n    dialogPaper: {\n        minHeight: '95vh',\n        maxHeight: '95vh',\n        minWidth: '150vh',\n        maxWidth: '150vh',\n    },\n}));\n\n/**\n * The base component of the GraphQL Query Analysis.\n * @param {any} props The props passed to the layout\n * @returns {any} HTML representation.\n */\nexport default function GraphQLQueryAnalysis(props) {\n    const {\n        api,\n        setUpdateComplexityList,\n    } = props;\n    const [open, setOpen] = useState(false);\n    const classes = useStyles();\n    const [list, setList] = useState(null);\n    const [typelist, setTypeList] = useState([]);\n\n    /**\n     * Get Summation of field's complexity value of all types\n     * @param {Object of array} List\n     */\n    function findSummation(List) {\n        const type = [...new Set(List.map((respond) => respond.type))];\n        const array = [];\n        type.map((respond) => {\n            const ob = {};\n            ob.type = respond;\n            ob.summation = 0;\n            List.map((obj) => {\n                if (obj.type === respond) {\n                    ob.summation += obj.complexityValue;\n                }\n                return ob;\n            });\n            array.push(ob);\n            return array;\n        });\n        setTypeList(array);\n    }\n\n    /**\n     * Set the Initial Complexity Values to the field's\n     */\n\n    function setInitialComplexity() {\n        const apiId = api.id;\n        const apiClient = new Api();\n        const promisedComplexityType = apiClient.getGraphqlPoliciesComplexityTypes(apiId);\n        promisedComplexityType\n            .then((res) => {\n                const array = [];\n                res.typeList.map((respond) => {\n                    respond.fieldList.map((ob) => {\n                        const obj = {};\n                        obj.type = respond.type;\n                        obj.field = ob;\n                        obj.complexityValue = 1;\n                        array.push(obj);\n                        return ob;\n                    });\n                    return array;\n                });\n                setList(array);\n                findSummation(array);\n            });\n    }\n\n    useEffect(() => {\n        const apiId = api.id;\n        const apiClient = new Api();\n        const promisedComplexity = apiClient.getGraphqlPoliciesComplexity(apiId);\n        promisedComplexity\n            .then((res) => {\n                setList(res.list);\n                findSummation(res.list);\n                if (res.list.length === 0) {\n                    setInitialComplexity();\n                }\n            })\n            .catch((error) => {\n                const { response } = error;\n                if (response.body) {\n                    const { description } = response.body;\n                    Alert.error(description);\n                }\n            });\n    }, []);\n\n    /**\n    * Edit Custom Complexity Values\n    */\n    function editComplexity() {\n        setUpdateComplexityList(list);\n        findSummation(list);\n        setOpen(false);\n    }\n    /**\n     * set open state of the dialog box\n     */\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    if (list === null) {\n        return <Progress />;\n    }\n\n    return (\n        <>\n            <Paper className={classes.paper} spacing={2}>\n                <Grid container spacing={2} alignItems='flex-start'>\n                    <Grid item md={12} style={{ position: 'relative', display: 'inline-flex' }}>\n                        <Typography className={classes.subHeading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.Configurartion.components.QueryAnalysis'\n                                defaultMessage='Query Analysis'\n                            />\n                        </Typography>\n                        <Typography className={classes.heading}>\n\n                            <span>update complexity</span>\n\n                        </Typography>\n                        <Button\n                            className={classes.editIcon}\n                            size='small'\n                            onClick={handleClickOpen}\n                            disabled={isRestricted(['apim:api_create'], api)}\n                        >\n                            <EditRounded />\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Paper>\n            <Dialog\n                classes={{ paper: classes.dialogPaper }}\n                open={open}\n                aria-labelledby='responsive-dialog-title'\n            >\n                <DialogTitle id='responsive-dialog-title'>\n                    <Typography className={classes.subHeading} variant='h4'>\n                        <FormattedMessage\n                            id='Apis.Details.Configurartion.components.QueryAnalysis.edit'\n                            defaultMessage='Edit Complexity Values'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent dividers>\n                    <DialogContentText>\n                        <Container fixed>\n                            <UpdateComplexity\n                                list={list}\n                                setList={setList}\n                                typelist={typelist}\n                            />\n                        </Container>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Grid item>\n                        <Button\n                            variant='contained'\n                            color='primary'\n                            onClick={editComplexity}\n                            className={classes.saveButton}\n                        >\n\n                            <FormattedMessage\n                                id='Apis.Details.QyeryAnalysis.UpdateComplexity.save'\n                                defaultMessage='Set'\n                            />\n\n                        </Button>\n                    </Grid>\n                    <Button onClick={handleClose} color='primary'>\n                        <FormattedMessage\n                            id='Apis.Details.Configurartion.components.QueryAnalysis.cancle.btn'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n\nGraphQLQueryAnalysis.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    setUpdateComplexityList: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TextField from '@material-ui/core/TextField';\nimport TableCell from '@material-ui/core/TableCell';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport TableRow from '@material-ui/core/TableRow';\nimport PropTypes from 'prop-types';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport Box from '@material-ui/core/Box';\n\nconst useStyles = makeStyles((theme) => ({\n    searchWrapper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n}));\n\n/**\n *\n * @param {any} props The props passed to the layout\n * @returns {any} HTML representation.\n */\nexport default function UpdateComplexity(props) {\n    const classes = useStyles();\n    const [filterKeyWord, setFilter] = useState('');\n    const {\n        setList, typelist, list,\n    } = props;\n\n    /**\n     * Filter the information by Types.\n     */\n\n    const setFilterByKeyWord = (event) => {\n        setFilter(event.target.value.toLowerCase());\n    };\n\n    return (\n        <>\n            <Grid item md={2}>\n                <Box mt={4} pb={2}>\n                    <div className={classes.searchWrapper}>\n                        <TextField\n                            id='outlined-full-width'\n                            label='Type'\n                            placeholder='Search By Types'\n                            onChange={(e) => setFilterByKeyWord(e, typelist)}\n                            fullWidth\n                            variant='outlined'\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </div>\n                </Box>\n            </Grid>\n            <Grid item md={12}>\n                <Table stickyHeader>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant='subtitle2'>\n                                    <FormattedMessage\n                                        id='Apis.Details.QueryAnalysis.UpdateComplexity.typeName'\n                                        defaultMessage='Type'\n                                    />\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography variant='subtitle2'>\n                                    <FormattedMessage\n                                        id='Apis.Details.QueryAnalysis.UpdateComplexity.fieldcomplexity'\n                                        defaultMessage='Fields'\n                                    />\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography variant='subtitle2'>\n                                    <FormattedMessage\n                                        id='Apis.Details.QueryAnalysis.UpdateComplexity.fieldcomplexitysum'\n                                        defaultMessage='Sum of the Complexity'\n                                    />\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {typelist.filter(\n                            (item) => item.type.toLowerCase().includes(filterKeyWord),\n                        ).map((typename) => {\n                            return (\n                                <TableRow style={{ borderStyle: 'hidden' }}>\n                                    <TableCell>\n                                        <Typography variant='body1'>\n                                            {typename.type}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <ExpansionPanel>\n                                            <ExpansionPanelSummary\n                                                expandIcon={<ExpandMoreIcon />}\n                                                aria-controls='panel1a-content'\n                                                id='panel1a-header'\n                                            />\n                                            <ExpansionPanelDetails>\n                                                <Grid item md={12}>\n                                                    <Table>\n                                                        <TableRow>\n                                                            <TableCell>\n                                                                <b>Field</b>\n                                                            </TableCell>\n                                                            <TableCell>\n                                                                <b>ComplexityValue</b>\n                                                            </TableCell>\n                                                        </TableRow>\n                                                        {list.map((respond, index) => ((respond.type === typename.type)\n                                                     && (\n                                                         <TableRow>\n                                                             <TableCell>\n                                                                 {respond.field}\n                                                             </TableCell>\n                                                             <TableCell>\n                                                                 <TextField\n                                                                     id='complexityValue'\n                                                                     label='complexityValue'\n                                                                     margin='normal'\n                                                                     variant='outlined'\n                                                                     value={respond.complexityValue}\n                                                                     onChange={(event) => {\n                                                                         const newArr = [...list];\n                                                                         newArr[index] = {\n                                                                             type: respond.type,\n                                                                             field: respond.field,\n                                                                             complexityValue: +event.target.value,\n                                                                         };\n                                                                         setList(newArr);\n                                                                     }}\n                                                                 />\n                                                             </TableCell>\n                                                         </TableRow>\n                                                     )))}\n                                                    </Table>\n                                                </Grid>\n                                            </ExpansionPanelDetails>\n                                        </ExpansionPanel>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography variant='body1'>\n                                            {typename.summation}\n                                        </Typography>\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </Grid>\n        </>\n    );\n}\n\nUpdateComplexity.propTypes = {\n    setList: PropTypes.func.isRequired,\n    list: PropTypes.arrayOf(\n        PropTypes.shape({\n            type: PropTypes.string,\n            field: PropTypes.string,\n            complexityValue: PropTypes.number,\n        }),\n    ).isRequired,\n    typelist: PropTypes.arrayOf(\n        PropTypes.shape({\n            type: PropTypes.string,\n            summation: PropTypes.number,\n        }),\n    ).isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useReducer, useEffect, useState, useCallback,\n} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport cloneDeep from 'lodash.clonedeep';\nimport isEmpty from 'lodash/isEmpty';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Banner from 'AppComponents/Shared/Banner';\nimport API from 'AppData/api';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\nimport { isRestricted } from 'AppData/AuthManager';\nimport AsyncOperation from '../Resources/components/AsyncOperation';\nimport GroupOfOperations from '../Resources/components/operationComponents/asyncapi/GroupOfOperations';\nimport AddOperation from '../Resources/components/AddOperation';\nimport SubscriptionConfig from '../Resources/components/operationComponents/asyncapi/SubscriptionConfig';\nimport { extractAsyncAPIPathParameters } from '../Resources/operationUtils';\nimport SaveOperations from '../Resources/components/SaveOperations';\n\nconst verbMap = {\n    sub: 'subscribe',\n    pub: 'publish',\n};\n\n/**\n * This component handles the Resource page in API details though it's written in a sharable way\n * that anyone could use this to render resources in anywhere else if needed.\n *\n * @export\n * @returns {React.Component} @inheritdoc\n */\nexport default function Topics(props) {\n    const {\n        disableUpdate,\n        disableAddOperation,\n    } = props;\n\n    const [api, updateAPI] = useAPI();\n    const [pageError, setPageError] = useState(false);\n    const [sharedScopes, setSharedScopes] = useState();\n    const [sharedScopesByName, setSharedScopesByName] = useState();\n    const [asyncAPISpec, setAsyncAPISpec] = useState({});\n    const [securityDefScopes, setSecurityDefScopes] = useState({});\n    const isAsyncAPI = api.type === 'WEBSUB' || api.type === 'WS' || api.type === 'SSE';\n    const [markedOperations, setSelectedOperation] = useState({});\n\n    /**\n     *\n     * @param {*} spec\n     * @param {*} ref\n     */\n    function getRefTarget(spec, ref) {\n        const arr = ref.split('/');\n        const i = (arr[0] === '#') ? 1 : 0;\n        let target = spec;\n        for (let j = i; j < arr.length; j++) {\n            target = target[arr[j]];\n        }\n        return target;\n    }\n\n    /**\n     *\n     * @param {*} spec\n     * @param {*} parent\n     */\n    function resolveSpec(spec, source) {\n        if (typeof source === 'object') {\n            let o = {};\n            Object.entries(source).forEach(([k, v]) => {\n                if (v !== null) {\n                    if (k !== '$ref') {\n                        o[k] = resolveSpec(spec, v);\n                    } else {\n                        const resolvedRef = resolveSpec(spec, getRefTarget(spec, v));\n                        o = { ...o, ...resolvedRef };\n                    }\n                }\n            });\n            return o;\n        }\n        return source;\n    }\n\n    /**\n     *\n     * @param {*} state\n     * @param {*} configAction\n     */\n    function websubSubscriptionConfigReducer(state, configAction) {\n        const { action, value } = configAction;\n        const nextState = { ...state };\n        switch (action) {\n            case 'enable':\n                nextState.enable = value;\n                if (!value) {\n                    nextState.secret = '';\n                }\n                break;\n            case 'signingAlgorithm':\n            case 'signatureHeader':\n            case 'secret':\n                nextState[action] = value;\n                break;\n            default:\n                return nextState;\n        }\n        return nextState;\n    }\n    const initialWebsubSubscriptionConfig = api.websubSubscriptionConfiguration || {\n        enable: false,\n        signingAlgorithm: '',\n        signatureHeader: '',\n        secret: '',\n    };\n\n    const [websubSubscriptionConfiguration, websubSubscriptionConfigDispatcher] = useReducer(\n        websubSubscriptionConfigReducer, initialWebsubSubscriptionConfig,\n    );\n\n    /**\n     *\n     *\n     * @param {*} currenPaths\n     * @param {*} action\n     */\n    function operationsReducer(currentOperations, operationAction) {\n        const { action, data } = operationAction;\n        const { target, verb, value } = data || {};\n        const addedOperations = cloneDeep(currentOperations);\n        let updatedOperation;\n        if (target) {\n            updatedOperation = cloneDeep(currentOperations[target]);\n        }\n\n        switch (action) {\n            case 'init':\n                setSelectedOperation({});\n                return data || asyncAPISpec.channels;\n            case 'description':\n                updatedOperation[action] = value;\n                return {\n                    ...currentOperations,\n                    [target]: { ...currentOperations[target], description: updatedOperation.description },\n                };\n            case 'uriMapping':\n                return {\n                    ...currentOperations,\n                    [target]: {\n                        ...currentOperations[target],\n                        [verb]: {\n                            ...currentOperations[target][verb],\n                            'x-uri-mapping': value,\n                        },\n                    },\n                };\n            case 'authType':\n                updatedOperation['x-auth-type'] = value ? 'Any' : 'None';\n                return {\n                    ...currentOperations,\n                    [target]: { ...currentOperations[target], 'x-auth-type': updatedOperation['x-auth-type'] },\n                };\n            case 'add':\n                // If target is not there add an empty object\n                if (!addedOperations[data.target]) {\n                    addedOperations[data.target] = {};\n                }\n                addedOperations[data.target].parameters = extractAsyncAPIPathParameters(data.target);\n                // eslint-disable-next-line no-case-declarations\n                let alreadyExistCount = 0;\n                for (let currentVerb of data.verbs) {\n                    currentVerb = verbMap[currentVerb];\n                    if (addedOperations[data.target][currentVerb]) {\n                        const message = `Operation already exist with ${data.target} and ${currentVerb}`;\n                        Alert.warning(message);\n                        console.warn(message);\n                        alreadyExistCount++;\n                    } else {\n                        addedOperations[data.target][currentVerb] = { };\n                    }\n                }\n                if (alreadyExistCount === data.verbs.length) {\n                    Alert.error('Operation(s) already exist!');\n                    return currentOperations;\n                }\n                return addedOperations;\n            case 'parameter':\n                updatedOperation.parameters = updatedOperation.parameters || { };\n                updatedOperation.parameters[value.name] = { ...value };\n                delete updatedOperation.parameters[value.name].name;\n                return {\n                    ...currentOperations,\n                    [target]: { ...currentOperations[target], parameters: updatedOperation.parameters },\n                };\n            case 'addPayloadProperty':\n                updatedOperation[verb].message = updatedOperation[verb].message || { };\n                updatedOperation[verb].message.payload = updatedOperation[verb].message.payload || { };\n                updatedOperation[verb].message.payload.type = 'object';\n                updatedOperation[verb].message.payload.properties = updatedOperation[verb].message.payload.properties\n                    || { };\n                updatedOperation[verb].message.payload.properties[value.name] = {\n                    description: value.description,\n                    type: value.type,\n                };\n                break;\n            case 'deletePayloadProperty':\n                delete updatedOperation[verb].message.payload.properties[value];\n                break;\n            case 'payloadProperty':\n                updatedOperation[verb].message.payload.properties[value.name] = value;\n                break;\n            case 'scopes': {\n                const defValue = value[0];\n                updatedOperation[verb]['x-scopes'] = [];\n                for (let i = 0; i < defValue.length; i++) {\n                    updatedOperation[verb]['x-scopes'].push(defValue[i]);\n                }\n\n                for (const selectedScope of defValue) {\n                    if (selectedScope\n                        && !securityDefScopes[selectedScope]\n                        && securityDefScopes[selectedScope] !== '') {\n                        let scopeDescription = '';\n                        if (selectedScope in sharedScopesByName) {\n                            if (sharedScopesByName[selectedScope].scope.description !== null) {\n                                scopeDescription = sharedScopesByName[selectedScope].scope.description;\n                            }\n                            securityDefScopes[selectedScope] = scopeDescription;\n                        }\n                        setSecurityDefScopes(securityDefScopes);\n                    }\n                }\n                break;\n            }\n            default:\n                return currentOperations;\n        }\n        return {\n            ...currentOperations,\n            [target]: { ...currentOperations[target], [verb]: updatedOperation[verb] },\n        };\n    }\n    const [operations, operationsDispatcher] = useReducer(operationsReducer, {});\n\n    /**\n     *\n     *\n     * @param {*} operation\n     * @param {*} checked\n     */\n    function onOperationSelectM(operation, checked) {\n        const { target, verb } = operation;\n        setSelectedOperation((currentSelections) => {\n            const nextSelectedOperations = cloneDeep(currentSelections);\n            if (!nextSelectedOperations[target]) {\n                nextSelectedOperations[target] = {};\n            }\n            if (checked) {\n                nextSelectedOperations[target][verb] = checked;\n            } else {\n                delete nextSelectedOperations[target][verb];\n            }\n            if (isEmpty(nextSelectedOperations[target])) {\n                delete nextSelectedOperations[target];\n            }\n            return nextSelectedOperations;\n        });\n    }\n    const onMarkAsDelete = useCallback(onOperationSelectM, [setSelectedOperation]);\n\n    /**\n     *\n     * @param {*} spec\n     */\n    function verifySecurityScheme(spec) {\n        /* eslint-disable no-param-reassign */\n        spec.components = spec.components || {};\n        spec.components.securitySchemes = spec.components.securitySchemes || {};\n        spec.components.securitySchemes.oauth2 = spec.components.securitySchemes.oauth2 || { type: 'oauth2' };\n        spec.components.securitySchemes.oauth2.flows = spec.components.securitySchemes.oauth2.flows || {};\n        spec.components.securitySchemes.oauth2.flows.implicit = spec.components.securitySchemes.oauth2.flows.implicit\n            || {};\n        spec.components.securitySchemes.oauth2.flows.implicit.scopes = spec.components.securitySchemes.oauth2.flows\n            .implicit.scopes || {};\n        /* eslint-enable no-param-reassign */\n    }\n\n    /**\n     * This method sets the securityDefinitionScopes from the spec\n     * @param {Object} spec The original swagger content.\n     */\n    function setSecurityDefScopesFromSpec(spec) {\n        verifySecurityScheme(spec);\n        setSecurityDefScopes(cloneDeep(spec.components.securitySchemes.oauth2.flows.implicit.scopes));\n    }\n\n    /**\n     * This method sets the scopes of the spec from the securityDefinitionScopes\n     */\n    function setSpecScopesFromSecurityDefScopes() {\n        verifySecurityScheme(asyncAPISpec);\n        asyncAPISpec.components.securitySchemes.oauth2.flows.implicit.scopes = securityDefScopes;\n    }\n\n    /**\n     *\n     * @param {*} rawSpec The original swagger content.\n     * @returns {null}\n     */\n    function resolveAndUpdateSpec(rawSpec) {\n        const resolvedChannels = resolveSpec(rawSpec, rawSpec);\n        const resolvedSpec = { ...rawSpec, channels: resolvedChannels.channels };\n        operationsDispatcher({ action: 'init', data: resolvedSpec.channels });\n        setAsyncAPISpec(resolvedSpec);\n        setSecurityDefScopesFromSpec(rawSpec);\n    }\n\n    /**\n     *\n     * Update the asyncapi using /asyncapi PUT operation and then fetch the updated API Object doing a apis/{api-uuid}\n     * GET\n     * @param {JSON} spec Updated full AsyncAPI spec ready to PUT\n     * @returns {Promise} Promise resolving to updated API object\n     */\n    function updateAsyncAPIDefinition(spec) {\n        return api\n            .updateAsyncAPIDefinition(spec)\n            .then((response) => resolveAndUpdateSpec(response.body))\n            .then(updateAPI)\n            .catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    setPageError(error.response.body);\n                } else {\n                    Alert.error('Error while updating the definition');\n                }\n            });\n    }\n\n    /**\n     *\n     * This method modifies the security definition scopes by removing the scopes which are not present\n     * in operations and which are shared scopes\n     * @param {Array} apiOperations Operations list\n     */\n    function updateSecurityDefinition(apiOperations) {\n        Object.keys(securityDefScopes).forEach((key) => {\n            let isScopeExistsInOperation = false;\n            for (const [, verbs] of Object.entries(apiOperations)) {\n                for (const [, verbInfo] of Object.entries(verbs)) {\n                    // Checking if the scope resides in the operation\n                    for (const secDef of verbInfo.security || []) {\n                        if (secDef\n                            && secDef.default\n                            && secDef.default.includes(key)) {\n                            isScopeExistsInOperation = true;\n                            break;\n                        }\n                    }\n\n                    if (isScopeExistsInOperation) {\n                        break;\n                    }\n                }\n                if (isScopeExistsInOperation) {\n                    break;\n                }\n            }\n        });\n        setSecurityDefScopes(securityDefScopes);\n    }\n\n    /**\n     *\n     * Save the OpenAPI changes using REST API, type parameter is required to\n     * identify the locally created data structured, i:e type `operation` will assume that `data` contains the\n     * object structure of locally created operation object which is a combination of REST API\n     * response `operations` field and OpenAPI spec operation information\n     * @param {String} type Type of data object\n     * @param {Object} data Data object\n     * @returns {Promise|null} A promise object which resolve to Swagger PUT response body.\n     */\n    function updateAsyncAPI() {\n        const copyOfOperations = cloneDeep(operations);\n        for (const [target, verbs] of Object.entries(markedOperations)) {\n            for (const verb of Object.keys(verbs)) {\n                delete copyOfOperations[target][verb];\n                if (!copyOfOperations[target].publish && !copyOfOperations[target].subscribe) {\n                    delete copyOfOperations[target];\n                }\n            }\n        }\n\n        updateSecurityDefinition(copyOfOperations);\n        setSpecScopesFromSecurityDefScopes();\n        if (websubSubscriptionConfiguration !== api.websubSubscriptionConfiguration) {\n            return updateAPI({ websubSubscriptionConfiguration })\n                .catch((error) => {\n                    console.error(error);\n                    Alert.error('Error while updating the API');\n                })\n                .then(() => updateAsyncAPIDefinition({ ...asyncAPISpec, channels: copyOfOperations }));\n        } else {\n            return updateAsyncAPIDefinition({ ...asyncAPISpec, channels: copyOfOperations });\n        }\n    }\n\n    useEffect(() => {\n        if (api.apitype !== 'APIProduct') {\n            API.getAllScopes()\n                .then((response) => {\n                    if (response.body && response.body.list) {\n                        const sharedScopesList = [];\n                        const sharedScopesByNameList = {};\n                        const shared = true;\n                        for (const scope of response.body.list) {\n                            const modifiedScope = {};\n                            modifiedScope.scope = scope;\n                            modifiedScope.shared = shared;\n                            sharedScopesList.push(modifiedScope);\n                            sharedScopesByNameList[scope.name] = modifiedScope;\n                        }\n                        setSharedScopes(sharedScopesList);\n                        setSharedScopesByName(sharedScopesByNameList);\n                    }\n                });\n        }\n    }, []);\n\n    useEffect(() => {\n        // Update the Swagger spec object when API object gets changed\n        api.getAsyncAPIDefinition()\n            .then((response) => {\n                resolveAndUpdateSpec(response.body);\n            })\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                    setPageError(error.response.body);\n                }\n                console.error(error);\n            });\n    }, [api.id]);\n\n    // Note: Make sure not to use any hooks after/within this condition , because it returns conditionally\n    // If you do so, You will probably get `Rendered more hooks than during the previous render.` exception\n    // if ((!pageError && isEmpty(openAPISpec)) || (resolvedSpec.errors.length === 0 && isEmpty(resolvedSpec.spec))) {\n    if ((!pageError && isEmpty(asyncAPISpec))) {\n        return (\n            <Grid container direction='row' justify='center' alignItems='center'>\n                <Grid item>\n                    <CircularProgress disableShrink />\n                </Grid>\n            </Grid>\n        );\n    }\n\n    return (\n        <Grid container direction='row' justify='flex-start' spacing={2} alignItems='stretch'>\n            {pageError && (\n                <Grid item md={12}>\n                    <Banner onClose={() => setPageError(null)} disableActions type='error' message={pageError} />\n                </Grid>\n            )}\n            {!isRestricted(['apim:api_create'], api) && !disableAddOperation\n            && api.type === 'WEBSUB' && (api.gatewayVendor === 'wso2') && (\n                <Grid item md={12} xs={12}>\n                    <SubscriptionConfig\n                        websubSubscriptionConfigDispatcher={websubSubscriptionConfigDispatcher}\n                        websubSubscriptionConfiguration={websubSubscriptionConfiguration}\n                    />\n                </Grid>\n            )}\n            {!isRestricted(['apim:api_create'], api) && !disableAddOperation\n            && (api.gatewayVendor === 'wso2') && (\n                <Grid item md={12} xs={12}>\n                    <AddOperation operationsDispatcher={operationsDispatcher} isAsyncAPI={isAsyncAPI} api={api} />\n                </Grid>\n            )}\n            <Grid item md={12}>\n                <Paper>\n                    {\n                        operations && Object.entries(operations).map(([target, operation]) => (\n                            <GroupOfOperations tag={target} operation={operation}>\n                                <Grid\n                                    container\n                                    direction='row'\n                                    justify='flex-start'\n                                    spacing={1}\n                                    alignItems='stretch'\n                                >\n                                    {operation.subscribe && (\n                                        <Grid key={target + '_subscribe'} item md={12}>\n                                            <AsyncOperation\n                                                target={target}\n                                                verb='subscribe'\n                                                highlight\n                                                operation={operation}\n                                                spec={asyncAPISpec}\n                                                api={api}\n                                                operationsDispatcher={operationsDispatcher}\n                                                sharedScopes={sharedScopes}\n                                                markAsDelete={Boolean(markedOperations[target]\n                                                        && markedOperations[target].subscribe)}\n                                                onMarkAsDelete={onMarkAsDelete}\n                                                disableDelete={api.gatewayVendor === 'solace'}\n                                            />\n                                        </Grid>\n                                    )}\n                                    {operation.publish && (\n                                        <Grid key={target + '_publish'} item md={12}>\n                                            <AsyncOperation\n                                                target={target}\n                                                verb='publish'\n                                                highlight\n                                                operation={operation}\n                                                spec={asyncAPISpec}\n                                                api={api}\n                                                operationsDispatcher={operationsDispatcher}\n                                                sharedScopes={sharedScopes}\n                                                markAsDelete={Boolean(markedOperations[target]\n                                                        && markedOperations[target].publish)}\n                                                onMarkAsDelete={onMarkAsDelete}\n                                                disableDelete={api.gatewayVendor === 'solace'}\n                                            />\n                                        </Grid>\n                                    )}\n                                </Grid>\n                            </GroupOfOperations>\n                        ))\n                    }\n                </Paper>\n                <Grid\n                    style={{ marginTop: '25px' }}\n                    container\n                    direction='row'\n                    justify='space-between'\n                    alignItems='center'\n                >\n                    {!disableUpdate && (\n                        <SaveOperations\n                            operationsDispatcher={operationsDispatcher}\n                            updateAsyncAPI={updateAsyncAPI}\n                            api={api}\n                        />\n                    )}\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\n\nTopics.defaultProps = {\n    operationProps: { disableDelete: false },\n    disableUpdate: false,\n    disableAddOperation: false,\n};\n\nTopics.propTypes = {\n    disableAddOperation: PropTypes.bool,\n    disableUpdate: PropTypes.bool,\n    operationProps: PropTypes.shape({\n        disableDelete: PropTypes.bool,\n    }),\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Utils from 'AppData/Utils';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\n\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport DescriptionAndSummary from './operationComponents/asyncapi/DescriptionAndSummary';\nimport OperationGovernance from './operationComponents/asyncapi/OperationGovernance';\nimport Parameters from './operationComponents/asyncapi/Parameters';\nimport PayloadProperties from './operationComponents/asyncapi/PayloadProperties';\nimport Runtime from './operationComponents/asyncapi/Runtime';\n\n/**\n *\n * Handle the operation UI\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nfunction AsyncOperation(props) {\n    const {\n        operation,\n        operationsDispatcher,\n        highlight,\n        api,\n        disableDelete,\n        disableUpdate,\n        onMarkAsDelete,\n        markAsDelete,\n        spec,\n        target,\n        verb,\n        sharedScopes,\n    } = props;\n\n    const trimmedVerb = verb === 'publish' || verb === 'subscribe' ? verb.substr(0, 3) : verb;\n\n    const [isExpanded, setIsExpanded] = useState(false);\n    const useStyles = makeStyles((theme) => {\n        const backgroundColor = theme.custom.resourceChipColors[trimmedVerb];\n        return {\n            customButton: {\n                backgroundColor: '#ffffff',\n                borderColor: backgroundColor,\n                color: backgroundColor,\n                width: theme.spacing(2),\n            },\n            paperStyles: {\n                border: `1px solid ${backgroundColor}`,\n                borderBottom: '',\n            },\n            customDivider: {\n                backgroundColor,\n            },\n            linearProgress: {\n                height: '2px',\n            },\n            highlightSelected: {\n                backgroundColor: Utils.hexToRGBA(backgroundColor, 0.1),\n            },\n            contentNoMargin: {\n                margin: theme.spacing(0),\n            },\n            overlayUnmarkDelete: {\n                position: 'absolute',\n                zIndex: theme.zIndex.operationDeleteUndo,\n                right: '10%',\n            },\n        };\n    });\n    const isUsedInAPIProduct = false;\n\n    /**\n     *\n     *\n     * @param {*} event\n     */\n    function toggleDelete(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        setIsExpanded(false);\n        onMarkAsDelete({ verb, target }, !markAsDelete);\n    }\n\n    /**\n     *\n     *\n     * @param {*} event\n     * @param {*} expanded\n     */\n    function handleExpansion(event, expanded) {\n        setIsExpanded(expanded);\n    }\n    const classes = useStyles();\n    return (\n        <>\n            {markAsDelete && (\n                <Box className={classes.overlayUnmarkDelete}>\n                    <Tooltip title='Marked for delete' aria-label='Marked for delete'>\n                        <Button onClick={toggleDelete} variant='outlined' style={{ marginTop: '10px' }}>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.Operation.undo.delete'\n                                defaultMessage='Undo Delete'\n                            />\n                        </Button>\n                    </Tooltip>\n                </Box>\n            )}\n            <ExpansionPanel\n                expanded={isExpanded}\n                onChange={handleExpansion}\n                disabled={markAsDelete}\n                className={classes.paperStyles}\n            >\n                <ExpansionPanelSummary\n                    className={highlight ? classes.highlightSelected : ''}\n                    disableRipple\n                    disableTouchRipple\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls='panel2a-content'\n                    id='panel2a-header'\n                    classes={{ content: classes.contentNoMargin }}\n                >\n                    <Grid container direction='row' justify='space-between' alignItems='center' spacing={0}>\n                        <Grid item md={11}>\n                            <Badge invisible='false' color='error' variant='dot'>\n                                <Button\n                                    disableFocusRipple\n                                    variant='outlined'\n                                    size='small'\n                                    className={classes.customButton}\n                                >\n                                    {trimmedVerb.toUpperCase()}\n                                </Button>\n                            </Badge>\n                            <Typography display='inline' style={{ margin: '0px 30px' }} variant='h6' gutterBottom>\n                                {target}\n                            </Typography>\n                        </Grid>\n                        {!(disableDelete || markAsDelete) && (\n                            <Grid item md={1} justify='flex-end' container>\n                                <Tooltip\n                                    title={\n                                        isUsedInAPIProduct\n                                            ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Resources.components.Operation.cannot.delete'\n                                                    + '.when.used.in.api.products'}\n                                                    defaultMessage='Cannot delete operation when used in an API product'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Resources.components.Operation.Delete'\n                                                    defaultMessage='Delete'\n                                                />\n                                            )\n                                    }\n                                    aria-label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.Resources.components.Operation.delete.operation'\n                                            defaultMessage='Delete operation'\n                                        />\n                                    )}\n                                >\n                                    <div>\n                                        <IconButton\n                                            disabled={Boolean(isUsedInAPIProduct)\n                                                || disableUpdate\n                                                || isRestricted(['apim:api_publish', 'apim:api_create'])}\n                                            onClick={toggleDelete}\n                                            aria-label='delete'\n                                        >\n                                            <DeleteIcon fontSize='small' />\n                                        </IconButton>\n                                    </div>\n                                </Tooltip>\n                            </Grid>\n                        )}\n                    </Grid>\n                </ExpansionPanelSummary>\n                <Divider light className={classes.customDivider} />\n                <ExpansionPanelDetails>\n                    <Grid spacing={2} container direction='row' justify='flex-start' alignItems='flex-start'>\n                        <DescriptionAndSummary\n                            operation={operation}\n                            operationsDispatcher={operationsDispatcher}\n                            disableUpdate={disableUpdate}\n                            target={target}\n                            verb={verb}\n                        />\n                        {operation.parameters && (\n                            <Parameters\n                                operation={operation}\n                                operationsDispatcher={operationsDispatcher}\n                                api={api}\n                                disableUpdate={disableUpdate}\n                                spec={spec}\n                                target={target}\n                                verb={verb}\n                            />\n                        )}\n                        <PayloadProperties\n                            operation={operation}\n                            operationsDispatcher={operationsDispatcher}\n                            disableUpdate={disableUpdate}\n                            target={target}\n                            verb={verb}\n                        />\n                        {(api.gatewayVendor === 'wso2') && (\n                            <>\n                                <OperationGovernance\n                                    operation={operation}\n                                    operationsDispatcher={operationsDispatcher}\n                                    api={api}\n                                    disableUpdate={disableUpdate}\n                                    spec={spec}\n                                    target={target}\n                                    verb={verb}\n                                    sharedScopes={sharedScopes}\n                                />\n                                {(api.type === 'WS' || api.type === 'WEBSUB') && (\n                                    <Runtime\n                                        operation={operation}\n                                        operationsDispatcher={operationsDispatcher}\n                                        disableUpdate={disableUpdate}\n                                        target={target}\n                                        verb={verb}\n                                        api={api}\n                                    />\n                                )}\n                            </>\n                        )}\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        </>\n    );\n}\nAsyncOperation.defaultProps = {\n    highlight: false,\n    disableUpdate: false,\n    disableDelete: false,\n    onMarkAsDelete: () => {},\n    markAsDelete: false,\n};\nAsyncOperation.propTypes = {\n    api: PropTypes.shape({ scopes: PropTypes.arrayOf(PropTypes.shape({})), resourcePolicies: PropTypes.shape({}) })\n        .isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    onMarkAsDelete: PropTypes.func,\n    resourcePolicy: PropTypes.shape({}).isRequired,\n    markAsDelete: PropTypes.bool,\n    disableDelete: PropTypes.bool,\n    operation: PropTypes.shape({\n        'x-wso2-new': PropTypes.bool,\n        summary: PropTypes.string,\n    }).isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n    sharedScopes: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    highlight: PropTypes.bool,\n    disableUpdate: PropTypes.bool,\n};\n\nexport default React.memo(AsyncOperation);\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\n/**\n * Renders the operation summary and description sections\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DescriptionAndSummary(props) {\n    const {\n        operation, operationsDispatcher, disableUpdate, target, verb,\n    } = props;\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Description\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={5}>\n                <TextField\n                    margin='dense'\n                    fullWidth\n                    label='Description'\n                    multiline\n                    disabled={disableUpdate}\n                    rows='4'\n                    value={operation.description || ''}\n                    variant='outlined'\n                    onChange={\n                        ({ target: { value } }) => operationsDispatcher(\n                            { action: 'description', data: { target, verb, value } },\n                        )\n                    }\n                />\n            </Grid>\n            <Grid item md={6} />\n        </>\n    );\n}\n\nDescriptionAndSummary.propTypes = {\n    disableUpdate: PropTypes.bool,\n    operation: PropTypes.shape({\n        target: PropTypes.string.isRequired,\n        verb: PropTypes.string.isRequired,\n        spec: PropTypes.shape({}).isRequired,\n    }).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n};\n\nDescriptionAndSummary.defaultProps = {\n    disableUpdate: false,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { Link } from 'react-router-dom';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { getAsyncAPIOperationScopes } from '../../../operationUtils';\n\n/**\n *\n * Renders the security and scopes selection section in the operation collapsed page\n * @export\n * @param {*} props\n * @returns\n */\nexport default function OperationGovernance(props) {\n    const {\n        operation, operationsDispatcher, api, disableUpdate, target, verb, sharedScopes,\n    } = props;\n    const operationScopes = getAsyncAPIOperationScopes(operation[verb]);\n    const filteredApiScopes = api.scopes.filter((sharedScope) => !sharedScope.shared);\n    const intl = useIntl();\n\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography gutterBottom variant='subtitle1'>\n                    <FormattedMessage\n                        id='Apis.Details.Topics.components.operationComponents.OperationGovernance.title'\n                        defaultMessage='Operation Governance'\n                    />\n                    <Typography style={{ marginLeft: '10px' }} gutterBottom variant='caption'>\n                        <FormattedMessage\n                            id='Apis.Details.Topics.components.operationComponents.OperationGovernance.subTitle'\n                            defaultMessage='(Security & Scopes)'\n                        />\n                    </Typography>\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item xs={1} />\n            <Grid item xs={11}>\n                <FormControl disabled={disableUpdate} component='fieldset'>\n                    <FormControlLabel\n                        control={(\n                            <Switch\n                                disabled={isRestricted(['apim:api_publish', 'apim:api_create'])}\n                                checked={operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none'}\n                                onChange={({ target: { checked } }) => operationsDispatcher({\n                                    action: 'authType',\n                                    data: { target, verb, value: checked },\n                                })}\n                                size='small'\n                                color='primary'\n                            />\n                        )}\n                        label='Security'\n                        labelPlacement='start'\n                    />\n                </FormControl>\n                <sup style={{ marginLeft: '10px' }}>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id={'Apis.Details.Topics.components.operationComponents.OperationGovernance.Security'\n                                + '.tooltip'}\n                                defaultMessage='This will enable/disable Application Level securities defined in the\n                                Runtime Configurations page.'\n                            />\n                        )}\n                        fontSize='small'\n                        aria-label='Operation security'\n                        placement='right-end'\n                        interactive\n                    >\n                        <HelpOutline />\n                    </Tooltip>\n                </sup>\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={5}>\n                {\n                    operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none' ? (\n                        <TextField\n                            id='operation_scope'\n                            select\n                            SelectProps={{\n                                multiple: true,\n                                renderValue: (selected) => (Array.isArray(selected) ? selected.join(', ') : selected),\n                            }}\n                            disabled={disableUpdate}\n                            fullWidth\n                            label={api.scopes.length !== 0 || sharedScopes ? intl.formatMessage({\n                                id: 'Apis.Details.Topics.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.label.default',\n                                defaultMessage: 'Operation scope',\n                            }) : intl.formatMessage({\n                                id: 'Apis.Details.Topics.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.label.notAvailable',\n                                defaultMessage: 'No scope available',\n                            })}\n                            value={operationScopes}\n                            onChange={({ target: { value } }) => operationsDispatcher({\n                                action: 'scopes',\n                                data: { target, verb, value: value ? [value] : [] },\n                            })}\n                            helperText={(\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.'\n                                    + 'OperationGovernance.operation.scope.helperText'}\n                                    defaultMessage='Select a scope to control permissions to this operation'\n                                />\n                            )}\n                            margin='dense'\n                            variant='outlined'\n                        >\n                            <ListSubheader>\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.'\n                                    + 'OperationGovernance.operation.scope.select.local'}\n                                    defaultMessage='API Scopes'\n                                />\n                            </ListSubheader>\n                            {filteredApiScopes.length !== 0 ? filteredApiScopes.map((apiScope) => (\n                                <MenuItem\n                                    key={apiScope.scope.name}\n                                    value={apiScope.scope.name}\n                                    dense\n                                >\n                                    <Checkbox checked={operationScopes.includes(apiScope.scope.name)} color='primary' />\n                                    {apiScope.scope.name}\n                                </MenuItem>\n                            )) : (\n                                <MenuItem\n                                    value=''\n                                    disabled\n                                >\n                                    <em>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Topics.components.operationComponents.'\n                                        + 'OperationGovernance.operation.no.api.scope.available'}\n                                            defaultMessage='No API scopes available'\n                                        />\n                                    </em>\n                                </MenuItem>\n                            )}\n                            <ListSubheader>\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.'\n                                    + 'OperationGovernance.operation.scope.select.shared'}\n                                    defaultMessage='Shared Scopes'\n                                />\n                            </ListSubheader>\n                            {sharedScopes && sharedScopes.length !== 0 ? sharedScopes.map((sharedScope) => (\n                                <MenuItem\n                                    key={sharedScope.scope.name}\n                                    value={sharedScope.scope.name}\n                                    dense\n                                >\n                                    <Checkbox\n                                        checked={operationScopes.includes(sharedScope.scope.name)}\n                                        color='primary'\n                                    />\n                                    {sharedScope.scope.name}\n                                </MenuItem>\n                            )) : (\n                                <MenuItem\n                                    value=''\n                                    disabled\n                                >\n                                    <em>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Topics.components.operationComponents.'\n                                        + 'OperationGovernance.operation.no.sharedpi.scope.available'}\n                                            defaultMessage='No shared scopes available'\n                                        />\n                                    </em>\n                                </MenuItem>\n                            )}\n                        </TextField>\n                    ) : null\n                }\n            </Grid>\n            <Grid item md={5} style={{ marginTop: '14px' }}>\n                {\n                    operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none' ? !disableUpdate && (\n                        <Link\n                            to={`/apis/${api.id}/scopes/create`}\n                            target='_blank'\n                        >\n                            <Typography\n                                style={{ marginLeft: '10px' }}\n                                color='primary'\n                                display='inline'\n                                variant='caption'\n                            >\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.'\n                                    + 'OperationGovernance.operation.scope.create.new.scope'}\n                                    defaultMessage='Create New Scope'\n                                />\n                                <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                            </Typography>\n                        </Link>\n                    ) : null\n                }\n            </Grid>\n            <Grid item md={1} />\n        </>\n    );\n}\n\nOperationGovernance.propTypes = {\n    disableUpdate: PropTypes.bool,\n    operation: PropTypes.shape({\n        target: PropTypes.string.isRequired,\n        verb: PropTypes.string.isRequired,\n    }).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    api: PropTypes.shape({ scopes: PropTypes.arrayOf(PropTypes.shape({})) }),\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    sharedScopes: PropTypes.arrayOf(PropTypes.shape({})),\n};\n\nOperationGovernance.defaultProps = {\n    api: { scopes: [] },\n    sharedScopes: [],\n    disableUpdate: false,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport ListParameters from './ListParameters';\n\n/*\n    Paramters will contain: name, description, type\n*/\n\n/**\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function Parameters(props) {\n    const {\n        operation, spec, target, verb, operationsDispatcher, disableForSolace,\n    } = props;\n    let haveParameters = false;\n    Object.entries(operation.parameters).forEach(() => {\n        haveParameters = true;\n    });\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Topic Parameters\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={11}>\n                {haveParameters && (\n                    <ListParameters\n                        target={target}\n                        verb={verb}\n                        operationsDispatcher={operationsDispatcher}\n                        operation={operation}\n                        spec={spec}\n                        disableForSolace={disableForSolace}\n                    />\n                )}\n            </Grid>\n        </>\n    );\n}\n\nParameters.propTypes = {\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    operation: PropTypes.shape({}).isRequired,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n    disableForSolace: PropTypes.bool,\n};\n\nParameters.defaultProps = {\n    disableForSolace: false,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EditIcon from '@material-ui/icons/Edit';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport EditParameter from './EditParameter';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 650,\n    },\n});\n\n/**\n *\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ListParameters(props) {\n    const {\n        operation, operationsDispatcher, target, verb, disableUpdate, disableForSolace,\n    } = props;\n    const classes = useStyles();\n    const [editingParameter, setEditingParameter] = useState(null);\n\n    return (\n        <>\n            {editingParameter !== null && (\n                <EditParameter\n                    operationsDispatcher={operationsDispatcher}\n                    target={target}\n                    verb={verb}\n                    editingParameter={editingParameter}\n                    setEditingParameter={setEditingParameter}\n                    disableForSolaceAPI={disableForSolace}\n                />\n            )}\n            <Table className={classes.table} aria-label='parameters list'>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListParameter.param.name'\n                                defaultMessage='Name'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListParameter.param.datatype'\n                                defaultMessage='Data Type'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListParameter.param.description'\n                                defaultMessage='Description'\n                            />\n                        </TableCell>\n                        {!disableUpdate && (\n                            <TableCell align='left'>\n                                <FormattedMessage\n                                    id='Apis.Details.Topics.components.operationComponents.ListParameter.actions'\n                                    defaultMessage='Actions'\n                                />\n                            </TableCell>\n                        )}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        operation.parameters && Object.entries(operation.parameters).map(([k, v]) => {\n                            return (\n                                <TableRow key={k}>\n                                    <TableCell align='left'>{k}</TableCell>\n                                    <TableCell align='left'>{v.schema.type}</TableCell>\n                                    <TableCell align='left'>{v.description}</TableCell>\n                                    <TableCell align='left'>\n                                        <Tooltip title={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents.'\n                                            + 'ListParameter.edit'}\n                                                defaultMessage='Edit'\n                                            />\n                                        )}\n                                        >\n                                            <IconButton\n                                                disabled={isRestricted(['apim:api_publish', 'apim:api_create'])}\n                                                onClick={() => setEditingParameter({ name: k, ...v })}\n                                                fontSize='small'\n                                            >\n                                                <EditIcon fontSize='small' />\n                                            </IconButton>\n                                        </Tooltip>\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })\n                    }\n                </TableBody>\n            </Table>\n        </>\n    );\n}\n\nListParameters.defaultProps = {\n    disableUpdate: false,\n    disableForSolace: false,\n};\nListParameters.propTypes = {\n    operation: PropTypes.shape({}).isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    disableUpdate: PropTypes.bool,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n    disableForSolace: PropTypes.bool,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { capitalizeFirstLetter } from 'AppData/stringFormatter';\nimport { FormattedMessage } from 'react-intl';\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        display: 'flex',\n        flexDirection: 'column',\n        margin: 'auto',\n        width: 'fit-content',\n    },\n    formControl: {\n        marginTop: theme.spacing(2),\n        minWidth: 120,\n    },\n    formControlLabel: {\n        marginTop: theme.spacing(1),\n    },\n}));\n\n/**\n *\n *\n * @export\n * @returns\n */\nexport default function EditParameter(props) {\n    const {\n        operationsDispatcher, target, verb, editingParameter, setEditingParameter, disableForSolaceAPI,\n    } = props;\n\n    /**\n     *\n     *\n     * @param {*} currentParameter\n     * @param {*} paramAction\n     */\n    function parameterActionReducer(currentParameter, paramAction) {\n        const { action, value } = paramAction;\n        const nextParameter = currentParameter.schema\n            ? { ...currentParameter, schema: { ...currentParameter.schema } } : { ...currentParameter };\n        switch (action) {\n            case 'description':\n                nextParameter[action] = value;\n                break;\n            case 'type':\n                nextParameter.schema = nextParameter.schema || {};\n                nextParameter.schema[action] = value;\n                break;\n            default:\n                break;\n        }\n        return nextParameter;\n    }\n    const [parameter, parameterActionDispatcher] = useReducer(parameterActionReducer, editingParameter);\n    const classes = useStyles();\n\n    const handleClose = () => {\n        setEditingParameter(null);\n    };\n\n    const handelDone = () => {\n        operationsDispatcher({ action: 'parameter', data: { target, verb, value: parameter } });\n        handleClose();\n    };\n\n    const getSupportedDataTypes = () => {\n        return ['integer', 'string', 'long', 'double', 'float'];\n    };\n\n    const isEditing = parameter !== null;\n    if (!isEditing) {\n        return null;\n    }\n    return (\n        <Dialog fullWidth maxWidth='md' open={isEditing} onClose={handleClose} aria-labelledby='edit-parameter'>\n            <DialogTitle disableTypography id='edit-parameter'>\n                <Typography variant='h6'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.title'\n                        defaultMessage='Edit'\n                    />\n                    {' '}\n                    <Typography display='inline' variant='subtitle1'>\n                        {parameter.name}\n                    </Typography>\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <Grid container direction='row' spacing={2} justify='flex-start' alignItems='center'>\n                    {!disableForSolaceAPI && (\n                        <Grid item md={6}>\n                            <FormControl\n                                required\n                                fullWidth\n                                margin='dense'\n                                variant='outlined'\n                                className={classes.formControl}\n                            >\n                                <InputLabel required id='edit-parameter-type'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Topics.components.operationComponents.EditParameter.data.type'\n                                        defaultMessage='Data Type'\n                                    />\n                                </InputLabel>\n\n                                <Select\n                                    value={parameter.schema ? parameter.schema.type : ''}\n                                    onChange={\n                                        ({ target: { name, value } }) => parameterActionDispatcher({\n                                            action: name, value,\n                                        })\n                                    }\n                                    inputProps={{\n                                        name: 'type',\n                                        id: 'edit-parameter-type',\n                                    }}\n                                    MenuProps={{\n                                        getContentAnchorEl: null,\n                                        anchorOrigin: {\n                                            vertical: 'bottom',\n                                            horizontal: 'left',\n                                        },\n                                    }}\n                                >\n                                    {getSupportedDataTypes().map((dataType) => (\n                                        <MenuItem value={dataType} dense>\n                                            {capitalizeFirstLetter(dataType)}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Topics.components.operationComponents.EditParameter.'\n                                        + 'select.data.type'}\n                                        defaultMessage='Select the Data Type'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                    )}\n                    <Grid item md={6} />\n                    <Grid item md={12}>\n                        <TextField\n                            value={parameter.description}\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Topics.components.operationComponents.EditParameter.description'\n                                    defaultMessage='Description'\n                                />\n                            )}\n                            multiline\n                            rows='4'\n                            name='description'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { name, value } }) => {\n                                parameterActionDispatcher({ action: name, value });\n                            }}\n                        />\n                    </Grid>\n                    {/* <Grid item md={6}>\n                        <TextField\n                            value={capitalizeFirstLetter(parameter.in)}\n                            disabled\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.type'\n                                    defaultMessage='Parameter Type'\n                                />\n                            )}\n                            margin='dense'\n                            variant='outlined'\n                        />\n                    </Grid> */}\n                    {/* <Grid item md={6}>\n                        <TextField\n                            value={parameter.name}\n                            disabled\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.name'\n                                    defaultMessage='Name'\n                                />\n                            )}\n                            margin='dense'\n                            variant='outlined'\n                        />\n                    </Grid> */}\n                    {/* <Grid item md={12}>\n                        <TextField\n                            value={parameter.description}\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.description'\n                                    defaultMessage='Description'\n                                />\n                            )}\n                            multiline\n                            rows='4'\n                            name='description'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { name, value } }) => {\n                                parameterActionDispatcher({ action: name, value });\n                            }}\n                        />\n                    </Grid> */}\n                    {/* <Grid item md={6}>\n                        <FormControl\n                            required\n                            fullWidth\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.formControl}\n                        >\n                            <InputLabel required id='edit-parameter-type'>\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.data.type'\n                                    defaultMessage='Data Type'\n                                />\n                            </InputLabel>\n\n                            <Select\n                                value={parameter.schema ? parameter.schema.type : parameter.type}\n                                onChange={\n                                    ({ target: { name, value } }) => parameterActionDispatcher({ action: name, value })\n                                }\n                                inputProps={{\n                                    name: 'type',\n                                    id: 'edit-parameter-type',\n                                }}\n                                MenuProps={{\n                                    getContentAnchorEl: null,\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    },\n                                }}\n                            >\n                                {getSupportedDataTypes(version, parameter.in).map((dataType) => (\n                                    <MenuItem value={dataType} dense>\n                                        {capitalizeFirstLetter(dataType)}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                    + 'select.schema.data.type'}\n                                    defaultMessage='Select the Schema Type'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    </Grid> */}\n                    {/* <Grid item md={6}>\n                        <FormControl\n                            fullWidth\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.formControl}\n                            disabled={parameter.schema\n                                ? iff(\n                                    parameter.schema.type === 'boolean' || parameter.schema.type === 'object',\n                                    true,\n                                    false,\n                                )\n                                : iff(\n                                    parameter.type === 'boolean' || parameter.type === 'object',\n                                    true,\n                                    false,\n                                )}\n                        >\n                            <InputLabel id='edit-parameter-format'>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                    + 'data.format'}\n                                    defaultMessage='Data Format'\n                                />\n                            </InputLabel>\n                            <Select\n                                value={parameter.schema ? parameter.schema.format : parameter.format}\n                                onChange={\n                                    ({ target: { name, value } }) => parameterActionDispatcher({ action: name, value })\n                                }\n                                inputProps={{\n                                    name: 'format',\n                                    id: 'edit-parameter-format',\n                                }}\n                                MenuProps={{\n                                    getContentAnchorEl: null,\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    },\n                                }}\n                            >\n                                {getDataFormats(\n                                    parameter.schema ? parameter.schema.type : parameter.type,\n                                ).map((dataType) => (\n                                    <MenuItem value={dataType} dense>\n                                        {capitalizeFirstLetter(dataType)}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                    + 'select.format.of.data.type'}\n                                    defaultMessage='Select the Format of Data Type'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    </Grid> */}\n                    {/* <Grid item>\n                        <FormControl component='fieldset'>\n                            <FormControlLabel\n                                control={(\n                                    <Checkbox\n                                        checked={parameter.required}\n                                        onChange={(\n                                            { target: { name, checked } },\n                                        ) => parameterActionDispatcher({ action: name, value: checked })}\n                                        value={parameter.required}\n                                        inputProps={{\n                                            name: 'required',\n                                        }}\n                                    />\n                                )}\n                                label={(\n                                    <FormattedMessage\n                                        id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                        + 'required'}\n                                        defaultMessage='Required'\n                                    />\n                                )}\n                            />\n                        </FormControl>\n                    </Grid> */}\n                    {/* <Grid container direction='row' justify='flex-end' alignItems='center'>\n                        <DialogContentText>\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                + 'use.done.button.to.persist.changes'}\n                                defaultMessage='Use DONE button in the page to persist changes'\n                            />\n                        </DialogContentText>\n                    </Grid> */}\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button size='small' onClick={handleClose} color='primary'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.close'\n                        defaultMessage='Close'\n                    />\n                </Button>\n                <Button\n                    size='small'\n                    onClick={handelDone}\n                    variant='contained'\n                    color='primary'\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.done'\n                        defaultMessage='Done'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nEditParameter.propTypes = {\n    // operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    editingParameter: PropTypes.shape({}).isRequired,\n    setEditingParameter: PropTypes.func.isRequired,\n    // version: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport AddPayloadProperty from './AddPayloadProperty';\nimport ListPayloadProperties from './ListPayloadProperties';\n\n/*\n    Paramters will contain: name, description, type\n*/\n\n/**\n * Renders the payload properties section\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function PayloadProperties(props) {\n    const {\n        operation, operationsDispatcher, target, verb, disableUpdate, disableForSolace,\n    } = props;\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Payload Properties\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item xs={1} />\n            <Grid item xs={11}>\n                {!disableUpdate && (\n                    (!disableForSolace) && (\n                        <AddPayloadProperty\n                            target={target}\n                            verb={verb}\n                            operationsDispatcher={operationsDispatcher}\n                            operation={operation}\n                        />\n                    )\n                )}\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={11}>\n                <ListPayloadProperties\n                    disableUpdate={disableUpdate}\n                    target={target}\n                    verb={verb}\n                    operationsDispatcher={operationsDispatcher}\n                    operation={operation}\n                    disableForSolace={disableForSolace}\n                />\n            </Grid>\n        </>\n    );\n}\n\nPayloadProperties.propTypes = {\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    operation: PropTypes.shape({}).isRequired,\n    disableUpdate: PropTypes.bool,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n    disableForSolace: PropTypes.bool,\n};\n\nPayloadProperties.defaultProps = {\n    disableUpdate: false,\n    disableForSolace: false,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst useStyles = makeStyles(() => ({\n    formControl: {\n        minWidth: 120,\n    },\n    parameterContainer: {\n        alignItems: 'center',\n        justifyContent: 'space-between',\n    },\n    checkBox: {\n        color: '#7c7c7c',\n    },\n}));\n\n/**\n *\n * Add payload properties according to the AsyncAPI spec.\n *\n * @export\n * @param {*} props\n * @returns\n */\nfunction AddPayloadProperty(props) {\n    const {\n        operationsDispatcher, target, verb,\n    } = props;\n\n    /**\n     *\n     * @param {*} state\n     * @param {*} action\n     */\n    function newPropertyReducer(state, action) {\n        const { type, value } = action;\n        const nextState = { ...state };\n        switch (type) {\n            case 'name':\n            case 'description':\n            case 'type':\n                nextState[type] = value;\n                break;\n            case 'clear':\n                return {\n                    name: '',\n                    description: '',\n                    type: '',\n                };\n            default:\n                return nextState;\n        }\n        return nextState;\n    }\n\n    const [property, newPropertyDispatcher] = useReducer(newPropertyReducer, { });\n    const classes = useStyles();\n\n    /**\n     * Get supported data types for properies.\n     * @returns {*} data types\n     */\n    function getSupportedDataTypes() {\n        return ['integer', 'string', 'long', 'double', 'float'];\n    }\n\n    /**\n     * Clear inputs\n     */\n    function clearInputs() {\n        newPropertyDispatcher({ type: 'clear' });\n    }\n\n    /**\n     * Add new property\n     */\n    function addNewProperty() {\n        operationsDispatcher({\n            action: 'addPayloadProperty',\n            data: {\n                target, verb, value: property,\n            },\n        });\n        clearInputs();\n    }\n\n    return (\n        <Grid container direction='row' spacing={1} className={classes.parameterContainer}>\n            <Grid item xs={2} md={2}>\n                <TextField\n                    id='parameter-name'\n                    label='Name'\n                    name='name'\n                    disabled={isRestricted(['apim:api_publish', 'apim:api_create'])}\n                    value={property.name}\n                    onChange={({ target: { name, value } }) => newPropertyDispatcher({ type: name, value })}\n                    helperText='Enter property name'\n                    margin='dense'\n                    variant='outlined'\n                    onKeyPress={(event) => {\n                        if (event.key === 'Enter') {\n                            // key code 13 is for `Enter` key\n                            event.preventDefault(); // To prevent form submissions\n                            addNewProperty();\n                        }\n                    }}\n                />\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <FormControl margin='dense' variant='outlined' className={classes.formControl}>\n                    {/* <InputLabel ref={inputLabel} htmlFor='data-type' error={isParameterExist}> */}\n                    <InputLabel\n                        htmlFor='data-type'\n                        disabled={isRestricted(['apim:api_publish', 'apim:api_create'])}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.data.type'\n                            defaultMessage='Data Type'\n                        />\n                    </InputLabel>\n\n                    <Select\n                        value={property.type}\n                        onChange={({ target: { name, value } }) => newPropertyDispatcher({ type: name, value })}\n                        disabled={isRestricted(['apim:api_publish', 'apim:api_create'])}\n                        inputProps={{\n                            name: 'type',\n                            id: 'data-type',\n                        }}\n                        MenuProps={{\n                            getContentAnchorEl: null,\n                            anchorOrigin: {\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            },\n                        }}\n                    >\n                        {\n                            getSupportedDataTypes().map((dataType) => {\n                                return (\n                                    <MenuItem\n                                        value={dataType}\n                                        dense\n                                    >\n                                        {dataType}\n                                    </MenuItem>\n                                );\n                            })\n                        }\n                    </Select>\n                    <FormHelperText id='my-helper-text'>Select the data type</FormHelperText>\n                </FormControl>\n            </Grid>\n            <Grid item xs={6} md={6}>\n                <TextField\n                    id='parameter-description'\n                    label='Description'\n                    name='description'\n                    disabled={isRestricted(['apim:api_publish', 'apim:api_create'])}\n                    value={property.description}\n                    onChange={({ target: { name, value } }) => newPropertyDispatcher({ type: name, value })}\n                    helperText='Enter property description'\n                    margin='dense'\n                    variant='outlined'\n                    onKeyPress={(event) => {\n                        if (event.key === 'Enter') {\n                            // key code 13 is for `Enter` key\n                            event.preventDefault(); // To prevent form submissions\n                            addNewProperty();\n                        }\n                    }}\n                />\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <Tooltip\n                    title={(\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.AddParameter.add.tooltip'\n                            defaultMessage='Add new parameter'\n                        />\n                    )}\n                    aria-label='AddParameter'\n                    placement='bottom'\n                    interactive\n                >\n                    <span>\n                        <Button\n                            style={{ marginLeft: '20px', marginBottom: '15px', marginRight: '20px' }}\n                            size='small'\n                            disabled={isRestricted(['apim:api_publish', 'apim:api_create'])}\n                            variant='outlined'\n                            aria-label='add'\n                            color='primary'\n                            onClick={addNewProperty}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.AddParameter.add'\n                                defaultMessage='Add'\n                            />\n                        </Button>\n                    </span>\n                </Tooltip>\n                <sup>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.AddParameter.clear.inputs.tooltip'\n                                defaultMessage='Clear inputs'\n                            />\n                        )}\n                        aria-label='clear-inputs'\n                        placement='bottom'\n                        interactive\n                    >\n                        <span>\n                            <IconButton\n                                disabled={isRestricted(['apim:api_publish', 'apim:api_create'])}\n                                onClick={clearInputs}\n                                size='small'\n                            >\n                                <ClearIcon />\n                            </IconButton>\n                        </span>\n                    </Tooltip>\n                </sup>\n            </Grid>\n        </Grid>\n    );\n}\n\nAddPayloadProperty.propTypes = {\n    operation: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default React.memo(injectIntl(AddPayloadProperty));\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport EditPayloadProperty from './EditPayloadProperty';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 650,\n    },\n});\n\n/**\n *\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ListPayloadProperties(props) {\n    const {\n        operation, operationsDispatcher, target, verb, disableUpdate, disableForSolace,\n    } = props;\n    const classes = useStyles();\n    const [editingProperty, setEditingProperty] = useState(null);\n    const properties = (operation && operation[verb] && operation[verb].message && operation[verb].message.payload\n            && operation[verb].message.payload.properties) ? operation[verb].message.payload.properties : { };\n\n    return (\n        <>\n            {editingProperty !== null && (\n                <EditPayloadProperty\n                    operationsDispatcher={operationsDispatcher}\n                    target={target}\n                    verb={verb}\n                    editingProperty={editingProperty}\n                    setEditingProperty={setEditingProperty}\n                />\n            )}\n            <Table className={classes.table} aria-label='parameters list'>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListPayloadProps.name'\n                                defaultMessage='Name'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListPayloadProps.data.type'\n                                defaultMessage='Data Type'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListPayloadProps.description'\n                                defaultMessage='Description'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListPayloadProps.actions'\n                                defaultMessage='Actions'\n                            />\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        properties && Object.entries(properties).map(([k, v]) => {\n                            return (\n                                <TableRow key={k}>\n                                    <TableCell align='left'>{k}</TableCell>\n                                    <TableCell align='left'>{v.type}</TableCell>\n                                    <TableCell align='left'>{v.description}</TableCell>\n                                    <TableCell align='left'>\n                                        <Tooltip title={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents.'\n                                            + 'ListPayloadProperties.edit'}\n                                                defaultMessage='Edit'\n                                            />\n                                        )}\n                                        >\n                                            <IconButton\n                                                disabled={disableForSolace\n                                                    || isRestricted(['apim:api_publish', 'apim:api_create'])}\n                                                onClick={() => setEditingProperty({ name: k, ...v })}\n                                                fontSize='small'\n                                            >\n                                                <EditIcon fontSize='small' />\n                                            </IconButton>\n                                        </Tooltip>\n                                        <Tooltip title={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents'\n                                            + '.ListPayloadProps.delete'}\n                                                defaultMessage='Delete'\n                                            />\n                                        )}\n                                        >\n                                            <IconButton\n                                                disabled={disableUpdate || disableForSolace\n                                                    || isRestricted(['apim:api_publish', 'apim:api_create'])}\n                                                onClick={() => operationsDispatcher({\n                                                    action: 'deletePayloadProperty',\n                                                    data: { target, verb, value: k },\n                                                })}\n                                                fontSize='small'\n                                            >\n                                                <DeleteIcon fontSize='small' />\n                                            </IconButton>\n                                        </Tooltip>\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })\n                    }\n                </TableBody>\n            </Table>\n        </>\n    );\n}\n\nListPayloadProperties.defaultProps = {\n    disableUpdate: false,\n    disableForSolace: false,\n};\nListPayloadProperties.propTypes = {\n    operation: PropTypes.shape({}).isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    disableUpdate: PropTypes.bool,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n    disableForSolace: PropTypes.bool,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        display: 'flex',\n        flexDirection: 'column',\n        margin: 'auto',\n        width: 'fit-content',\n    },\n    formControl: {\n        marginTop: theme.spacing(2),\n        minWidth: 120,\n    },\n    formControlLabel: {\n        marginTop: theme.spacing(1),\n    },\n}));\n\n/**\n * Edit payload properties according to the AsyncAPI spec.\n * @export\n * @returns\n */\nexport default function EditPayloadProperty(props) {\n    const {\n        operationsDispatcher, target, verb, editingProperty, setEditingProperty,\n    } = props;\n\n    /**\n     * Payload property reducer\n     *\n     * @param {*} currentProperty\n     * @param {*} paramAction\n     */\n    function propertyActionReducer(currentProperty, paramAction) {\n        const { action, value } = paramAction;\n        const nextProperty = currentProperty.schema\n            ? { ...currentProperty, schema: { ...currentProperty.schema } } : { ...currentProperty };\n        switch (action) {\n            case 'type':\n            case 'description':\n                nextProperty[action] = value;\n                break;\n            default:\n                break;\n        }\n        return nextProperty;\n    }\n\n    const [property, propertyActionDispatcher] = useReducer(propertyActionReducer, editingProperty);\n    const classes = useStyles();\n\n    const handleClose = () => {\n        setEditingProperty(null);\n    };\n\n    const handelDone = () => {\n        operationsDispatcher({ action: 'payloadProperty', data: { target, verb, value: property } });\n        handleClose();\n    };\n\n    const getSupportedDataTypes = () => {\n        return ['integer', 'string', 'long', 'double', 'float'];\n    };\n\n    const isEditing = property !== null;\n    if (!isEditing) {\n        return null;\n    }\n    return (\n        <Dialog fullWidth maxWidth='md' open={isEditing} onClose={handleClose} aria-labelledby='edit-property'>\n            <DialogTitle disableTypography id='edit-property'>\n                <Typography variant='h6'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditPayloadProperty.title'\n                        defaultMessage='Edit'\n                    />\n                    {' '}\n                    <Typography display='inline' variant='subtitle1'>\n                        {property.name}\n                    </Typography>\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <Grid container direction='row' spacing={2} justify='flex-start' alignItems='center'>\n                    <Grid item md={6}>\n                        <FormControl\n                            required\n                            fullWidth\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.formControl}\n                        >\n                            <InputLabel required id='edit-property-type'>\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.EditPayloadProperty'\n                                    + '.data.type'}\n                                    defaultMessage='Data Type'\n                                />\n                            </InputLabel>\n\n                            <Select\n                                value={property.type}\n                                onChange={\n                                    ({ target: { name, value } }) => propertyActionDispatcher({ action: name, value })\n                                }\n                                inputProps={{\n                                    name: 'type',\n                                    id: 'edit-property-type',\n                                }}\n                                MenuProps={{\n                                    getContentAnchorEl: null,\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    },\n                                }}\n                            >\n                                {getSupportedDataTypes().map((dataType) => (\n                                    <MenuItem value={dataType} dense>\n                                        {dataType}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.EditPayloadProperty.'\n                                    + 'select.data.type'}\n                                    defaultMessage='Select the Data Type'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid item md={6} />\n                    <Grid item md={12}>\n                        <TextField\n                            value={property.description}\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.EditPayloadProperty'\n                                    + '.description'}\n                                    defaultMessage='Description'\n                                />\n                            )}\n                            multiline\n                            disabled={isRestricted(['apim:api_publish', 'apim:api_create'])}\n                            rows='4'\n                            name='description'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { name, value } }) => {\n                                propertyActionDispatcher({ action: name, value });\n                            }}\n                        />\n                    </Grid>\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button size='small' onClick={handleClose} color='primary'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditPayloadProperty.close'\n                        defaultMessage='Close'\n                    />\n                </Button>\n                <Button\n                    size='small'\n                    onClick={handelDone}\n                    variant='contained'\n                    color='primary'\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditPayloadProperty.done'\n                        defaultMessage='Done'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nEditPayloadProperty.propTypes = {\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    editingProperty: PropTypes.shape({}).isRequired,\n    setEditingProperty: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport { useRevisionContext } from 'AppComponents/Shared/RevisionContext';\nimport Utils from 'AppData/Utils';\nimport { FileCopy } from '@material-ui/icons';\nimport { isRestricted } from 'AppData/AuthManager';\n\n/**\n * Renders the callback URL for WebSub and URI mapping for WebSocket.\n *\n * @param {*} props\n */\nexport default function Runtime(props) {\n    const {\n        operation, operationsDispatcher, target, verb, api,\n    } = props;\n    const { settings } = useAppContext();\n    const { allEnvRevision } = useRevisionContext();\n    const allEnvDeployments = Utils.getAllEnvironmentDeployments(settings.environment, allEnvRevision);\n\n    const buildCallbackURL = (protocol, host, port) => {\n        const context = api.context.substr(0, 1) !== '/' ? '/' + api.context : api.context;\n        let url = `${protocol}://${host || '{GATEWAY_HOST}'}:${port || `{websub_event_receiver_${protocol}_endpoint}`}`;\n        url += context;\n        url += '/' + api.version;\n        url += '/webhooks_events_receiver_resource?topic=';\n        url += target.toLowerCase();\n        return url;\n    };\n\n    const getUriMappingHelperText = (value) => {\n        let fqPath;\n        if (api.endpointConfig\n            && api.endpointConfig.production_endpoints\n            && api.endpointConfig.production_endpoints.url\n            && api.endpointConfig.production_endpoints.url.length > 0\n            && value\n            && value.length > 0) {\n            const { url } = api.endpointConfig.production_endpoints;\n            const seperator = url.substr(url.length - 1, 1) !== '/' ? '/' : '';\n            fqPath = url + seperator + value;\n        }\n        return fqPath ? 'Production URL will be ' + fqPath : '';\n    };\n    const [uriMappingHelperText, setUriMappingHelperText] = useState(\n        getUriMappingHelperText(operation[verb]['x-uri-mapping']),\n    );\n\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Runtime\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            {api.type === 'WS' && (\n                <>\n                    <Grid item md={1} />\n                    <Grid item md={5}>\n                        <TextField\n                            disabled={isRestricted(['apim:api_publish', 'apim:api_create'])}\n                            margin='dense'\n                            fullWidth\n                            label='URL Mapping'\n                            value={operation[verb]['x-uri-mapping']}\n                            variant='outlined'\n                            helperText={uriMappingHelperText}\n                            onChange={(e) => {\n                                let { value } = e.target;\n                                if (value.length > 0 && value.substr(0, 1) !== '/') {\n                                    value = '/' + value;\n                                }\n                                setUriMappingHelperText(getUriMappingHelperText(value));\n                                operationsDispatcher({ action: 'uriMapping', data: { target, verb, value } });\n                            }}\n                        />\n                    </Grid>\n                    <Grid item md={6} />\n                </>\n            )}\n            {api.type === 'WEBSUB' && settings.environment.map((env) => (\n                <>\n                    <Grid item md={1} />\n                    <Grid item md={10}>\n                        <Typography variant='subtitle1'>{env.displayName}</Typography>\n                        <TextField\n                            margin='dense'\n                            fullWidth\n                            label='HTTP Callback URL'\n                            disabled\n                            value={buildCallbackURL('http', allEnvDeployments[env.name].vhost.host,\n                                allEnvDeployments[env.name].vhost.websubHttpPort)}\n                            variant='outlined'\n                            InputProps={{\n                                endAdornment: (\n                                    <InputAdornment position='end'>\n                                        <CopyToClipboard\n                                            text={buildCallbackURL('http',\n                                                allEnvDeployments[env.name].vhost.host,\n                                                allEnvDeployments[env.name].vhost.websubHttpPort)}\n                                        >\n                                            <IconButton>\n                                                <Icon>\n                                                    <FileCopy />\n                                                </Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                        <TextField\n                            margin='dense'\n                            fullWidth\n                            label='HTTPS Callback URL'\n                            disabled\n                            value={buildCallbackURL('https', allEnvDeployments[env.name].vhost.host,\n                                allEnvDeployments[env.name].vhost.websubHttpsPort)}\n                            variant='outlined'\n                            InputProps={{\n                                endAdornment: (\n                                    <InputAdornment position='end'>\n                                        <CopyToClipboard\n                                            text={buildCallbackURL('https',\n                                                allEnvDeployments[env.name].vhost.host,\n                                                allEnvDeployments[env.name].vhost.websubHttpsPort)}\n                                        >\n                                            <IconButton>\n                                                <Icon>\n                                                    <FileCopy />\n                                                </Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                    </Grid>\n                    <Grid item md={1} />\n                </>\n            ))}\n        </>\n    );\n}\n\nRuntime.propTypes = {\n    operation: PropTypes.shape({\n        target: PropTypes.string.isRequired,\n        verb: PropTypes.string.isRequired,\n        spec: PropTypes.shape({}).isRequired,\n    }).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport PropTypes from 'prop-types';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\n/**\n * Return a group container , User should provide the operations list as the child component\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function GroupOfOperations(props) {\n    const { children, tag } = props;\n    return (\n        <ExpansionPanel defaultExpanded>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} aria-controls='panel1a-content' id='panel1a-header'>\n                <Typography variant='h4'>\n                    {tag}\n                </Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>{children}</ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n}\n\nGroupOfOperations.propTypes = {\n    children: PropTypes.element.isRequired,\n    tag: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport { FormattedMessage } from 'react-intl';\n\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        minWidth: 120,\n    },\n    paper: {\n        paddingLeft: theme.spacing(4),\n        paddingTop: theme.spacing(1.5),\n        paddingBottom: theme.spacing(0.5),\n        marginTop: '12px',\n    },\n}));\n\n/**\n * Renders Subscription configurations for WebSub APIs.\n *\n * @export\n * @param {*} props\n * @returns\n */\nfunction SubscriptionConfig(props) {\n    const {\n        websubSubscriptionConfigDispatcher, websubSubscriptionConfiguration,\n    } = props;\n\n    const [isExpanded, setIsExpanded] = useState(false);\n    const classes = useStyles();\n    const [enabled, setEnabled] = useState(!!websubSubscriptionConfiguration.enable);\n\n    /**\n     *\n     */\n    function generateSecret() {\n        return 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'.replace(/[x]/g, (c) => {\n            // eslint-disable-next-line no-bitwise\n            const r = Math.random() * 16 | 0;\n            // eslint-disable-next-line no-bitwise, no-mixed-operators\n            const v = c === 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n    /**\n     *\n     */\n    function getAlgorithms() {\n        return ['SHA1', 'SHA256', 'SHA384', 'SHA512'];\n    }\n\n    return (\n        <ExpansionPanel\n            expanded={isExpanded}\n            onChange={(e, expanded) => {\n                setIsExpanded(expanded);\n            }}\n            className={classes.paperStyles}\n        >\n            <ExpansionPanelSummary\n                disableRipple\n                disableTouchRipple\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls='panel2a-content'\n                id='panel2a-header'\n                classes={{ content: classes.contentNoMargin }}\n            >\n                <Grid item md={12} xs={12}>\n                    <Box ml={1}>\n                        <Typography variant='subtitle1' gutterBottom>\n                            Subscription Configuration\n                        </Typography>\n                    </Box>\n                </Grid>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n                <Grid container direction='row' spacing={0} justify='center' alignItems='center'>\n                    <Grid item xs={6}>\n                        <FormControl component='fieldset'>\n                            <FormControlLabel\n                                control={(\n                                    <Switch\n                                        checked={websubSubscriptionConfiguration.enable}\n                                        onChange={({ target: { checked } }) => {\n                                            setEnabled(checked);\n                                            websubSubscriptionConfigDispatcher({\n                                                action: 'enable',\n                                                value: checked,\n                                            });\n                                        }}\n                                        size='small'\n                                        color='primary'\n                                    />\n                                )}\n                                label='Enable'\n                                labelPlacement='start'\n                            />\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={6} />\n                    <Grid item xs={6}>\n                        <TextField\n                            autoFocus\n                            fullWidth\n                            select\n                            disabled={!enabled}\n                            label={(\n                                <>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.Subscription.signingAlgorithm'\n                                        defaultMessage='Signing Algortithm'\n                                    />\n                                </>\n                            )}\n                            value={websubSubscriptionConfiguration.signingAlgorithm}\n                            helperText='Select an algorithm to sign the message'\n                            name='secret'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { value } }) => websubSubscriptionConfigDispatcher({\n                                action: 'signingAlgorithm',\n                                value,\n                            })}\n                        >\n                            {\n                                getAlgorithms().map((name) => (\n                                    <MenuItem value={name} dense>\n                                        {name}\n                                    </MenuItem>\n                                ))\n                            }\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={6} />\n                    <Grid item xs={6}>\n                        <TextField\n                            autoFocus\n                            fullWidth\n                            disabled={!enabled}\n                            label={(\n                                <>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.Subscription.signature.header'\n                                        defaultMessage='Signature Header'\n                                    />\n                                </>\n                            )}\n                            value={websubSubscriptionConfiguration.signatureHeader}\n                            helperText='Set the HTTP header use by the provider to send the signature'\n                            name='secret'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { value } }) => websubSubscriptionConfigDispatcher({\n                                action: 'signatureHeader',\n                                value,\n                            })}\n                        />\n                    </Grid>\n                    <Grid item xs={6} />\n                    <Grid item xs={6}>\n                        <Grid container direction='row'>\n                            <Grid item xs={10}>\n                                <TextField\n                                    autoFocus\n                                    fullWidth\n                                    disabled\n                                    label={(\n                                        <>\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.components.Subscription.secret'\n                                                defaultMessage='Secret'\n                                            />\n                                        </>\n                                    )}\n                                    value={websubSubscriptionConfiguration.secret}\n                                    helperText='Use the above secret key while registering at the provider'\n                                    name='secret'\n                                    margin='normal'\n                                    variant='outlined'\n                                />\n                            </Grid>\n                            <Grid item xs={2}>\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    disabled={!enabled}\n                                    onClick={() => websubSubscriptionConfigDispatcher({\n                                        action: 'secret',\n                                        value: generateSecret(),\n                                    })}\n                                    style={{ marginLeft: 10, marginTop: 25 }}\n                                >\n                                    Generate\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={6} />\n                </Grid>\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n}\n\nSubscriptionConfig.propTypes = {\n    websubSubscriptionConfigDispatcher: PropTypes.func.isRequired,\n    websubSubscriptionConfiguration: PropTypes.shape({\n        signingAlgorithm: PropTypes.string.isRequired,\n        signatureHeader: PropTypes.string.isRequired,\n        secret: PropTypes.string.isRequired,\n        enable: PropTypes.bool.isRequired,\n    }).isRequired,\n};\n\nexport default React.memo(SubscriptionConfig);\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useReducer, useContext, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport { Link, useHistory } from 'react-router-dom';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { FormattedMessage } from 'react-intl';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ArrowForwardIcon from '@material-ui/icons/SettingsEthernet';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport { isRestricted } from 'AppData/AuthManager';\nimport API from 'AppData/api';\nimport Endpoints from './components/Endpoints';\nimport KeyManager from './components/KeyManager';\nimport APILevelRateLimitingPolicies from './components/APILevelRateLimitingPolicies';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(3),\n    },\n    boxFlex: {\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    paper: {\n        padding: theme.spacing(3),\n        minHeight: '250px',\n    },\n    paperCenter: {\n        padding: theme.spacing(3),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    heading: {\n        fontSize: '1.1rem',\n        fontWeight: 400,\n        marginBottom: theme.spacing(1),\n    },\n    itemPadding: {\n        marginBottom: theme.spacing(3),\n    },\n    arrowForwardIcon: {\n        fontSize: 50,\n        color: '#ccc',\n        position: 'absolute',\n        top: 175,\n        right: -55,\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: '38px',\n    },\n    info: {\n        display: 'flex',\n        height: '100%',\n    },\n}));\n\n/**\n *\n * Deep coping the properties in API object (what ever the object in the state),\n * making sure that no direct mutations happen when updating the state.\n * You should know the shape of the object that you are keeping in the state,\n * @param {Object} api\n * @returns {Object} Deep copy of an object\n */\nfunction copyAPIConfig(api) {\n    const keyManagers = api.apiType === API.CONSTS.APIProduct ? ['all'] : [...api.keyManagers];\n    return {\n        id: api.id,\n        name: api.name,\n        description: api.description,\n        lifeCycleStatus: api.lifeCycleStatus,\n        accessControl: api.accessControl,\n        authorizationHeader: api.authorizationHeader,\n        responseCachingEnabled: api.responseCachingEnabled,\n        cacheTimeout: api.cacheTimeout,\n        visibility: api.visibility,\n        apiThrottlingPolicy: api.apiThrottlingPolicy,\n        isDefaultVersion: api.isDefaultVersion,\n        enableSchemaValidation: api.enableSchemaValidation,\n        accessControlRoles: [...api.accessControlRoles],\n        visibleRoles: [...api.visibleRoles],\n        tags: [...api.tags],\n        maxTps: api.maxTps,\n        wsdlUrl: api.wsdlUrl,\n        transport: [...api.transport],\n        securityScheme: [...api.securityScheme],\n        corsConfiguration: {\n            corsConfigurationEnabled: api.corsConfiguration.corsConfigurationEnabled,\n            accessControlAllowCredentials: api.corsConfiguration.accessControlAllowCredentials,\n            accessControlAllowOrigins: [...api.corsConfiguration.accessControlAllowOrigins],\n            accessControlAllowHeaders: [...api.corsConfiguration.accessControlAllowHeaders],\n            accessControlAllowMethods: [...api.corsConfiguration.accessControlAllowMethods],\n        },\n        keyManagers,\n    };\n}\n/**\n * This component handles the basic configurations UI in the API details page\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function RuntimeConfiguration() {\n    /**\n     *\n     * Reduce the configuration UI related actions in to updated state\n     * @param {*} state current state\n     * @param {*} configAction dispatched configuration action\n     * @returns {Object} updated state\n     */\n    function configReducer(state, configAction) {\n        const { action, value } = configAction;\n        const nextState = { ...copyAPIConfig(state) };\n        switch (action) {\n            case 'apiThrottlingPolicy':\n            case 'maxTps':\n                nextState[action] = value;\n                return nextState;\n            case 'keymanagers':\n                nextState.keyManagers = value;\n                return nextState;\n            case 'throttlingPoliciesEnabled':\n                if (value) {\n                    nextState.apiThrottlingPolicy = '';\n                } else {\n                    nextState.apiThrottlingPolicy = null;\n                }\n                return nextState;\n            case 'allKeyManagersEnabled':\n                if (value) {\n                    nextState.keyManagers = [];\n                } else {\n                    nextState.keyManagers = ['all'];\n                }\n                return nextState;\n            default:\n                return state;\n        }\n    }\n    const { api, updateAPI } = useContext(APIContext);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const history = useHistory();\n    const [apiConfig, configDispatcher] = useReducer(configReducer, copyAPIConfig(api));\n    const classes = useStyles();\n\n    /**\n     *\n     * Handle the configuration view save button action\n     */\n    function handleSave() {\n        setIsUpdating(true);\n\n        updateAPI(apiConfig)\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                }\n            })\n            .finally(() => setIsUpdating(false));\n    }\n\n    function handleSaveAndDeploy() {\n        setIsUpdating(true);\n\n        updateAPI(apiConfig)\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                }\n            })\n            .finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n    }\n\n    return (\n        <>\n            <Box pb={3}>\n                <Typography variant='h5'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.RuntimeConfigurationWebSocket.topic.header'\n                        defaultMessage='Runtime Configurations'\n                    />\n                </Typography>\n            </Box>\n            <div className={classes.contentWrapper}>\n                <Grid container direction='row' justify='space-around' alignItems='stretch' spacing={8}>\n                    <Grid item xs={12} md={7} style={{ marginBottom: 30, position: 'relative' }}>\n                        <Typography className={classes.heading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.RuntimeConfigurationWebSocket.section.client.websocket'\n                                defaultMessage='Client Websocket'\n                            />\n                        </Typography>\n                        <div className={classes.boxFlex}>\n                            <Paper\n                                className={classes.paper}\n                                elevation={0}\n                                style={{ display: 'flex', alignItems: 'center' }}\n                            >\n                                <Box pr={3}>\n                                    <KeyManager api={apiConfig} configDispatcher={configDispatcher} />\n                                </Box>\n                                <Box pr={3}>\n                                    <APILevelRateLimitingPolicies api={apiConfig} configDispatcher={configDispatcher} />\n                                </Box>\n                            </Paper>\n                            <ArrowForwardIcon className={classes.arrowForwardIcon} />\n                        </div>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                        <Typography className={classes.heading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.RuntimeConfigurationWebSocket.section.backend.websocket'\n                                defaultMessage='Backend Websocket'\n                            />\n                        </Typography>\n                        <Paper className={classes.paper} style={{ height: 'calc(100% - 75px)' }} elevation={0}>\n                            {!api.isAPIProduct() && (\n                                <>\n                                    <Endpoints api={api} />\n                                </>\n                            )}\n                        </Paper>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid container direction='row' alignItems='center' spacing={1} style={{ marginTop: 20 }}>\n                        <Grid item>\n                            {api.isRevision\n                                || ((apiConfig.visibility === 'RESTRICTED' && apiConfig.visibleRoles.length === 0)\n                                || isRestricted(['apim:api_create'], api)) ? (\n                                    <Button\n                                        disabled\n                                        type='submit'\n                                        variant='contained'\n                                        color='primary'\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.save'\n                                            defaultMessage='Save'\n                                        />\n                                    </Button>\n                                ) : (\n                                    <CustomSplitButton\n                                        advertiseInfo={api.advertiseInfo}\n                                        api={api}\n                                        handleSave={handleSave}\n                                        handleSaveAndDeploy={handleSaveAndDeploy}\n                                        isUpdating={isUpdating}\n                                    />\n                                )}\n                        </Grid>\n                        <Grid item>\n                            <Link to={'/apis/' + api.id + '/overview'}>\n                                <Button>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </div>\n        </>\n    );\n}\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(3),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n        display: 'inline-flex',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    actionSpace: {\n        margin: '-7px auto',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n    keyManagerSelect: {\n        minWidth: 180,\n    },\n}));\n\n/**\n *\n * API Level Rate Limiting configuration\n * @param {*} props\n * @returns\n */\nexport default function APILevelRateLimitingPolicies(props) {\n    const [apiFromContext] = useAPI();\n    const classes = useStyles();\n    const {\n        configDispatcher,\n        api: { apiThrottlingPolicy },\n    } = props;\n    const [apiRateLimits, setApiRateLimits] = useState([]);\n    const handleChange = (event) => {\n        configDispatcher({\n            action: 'apiThrottlingPolicy',\n            value: event.target.value,\n        });\n    };\n\n    useEffect(() => {\n        API.policies('api').then((response) => setApiRateLimits(response.body.list));\n    }, []);\n\n    return (\n        <ExpansionPanel className={classes.expansionPanel} defaultExpanded>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                <Typography className={classes.subHeading} variant='h6'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.APILevelRateLimitingPolicies.configuration'\n                        defaultMessage='Rate Limiting Configuration'\n                    />\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.APILevelRateLimitingPolicies.components.Configuration.tooltip'\n                                defaultMessage={'Selected Rate Limiting Policy will be applied to all the'\n                                + ' requests of this API.'}\n                            />\n                        )}\n                        aria-label='Rate Limiting Policies'\n                        placement='right-end'\n                        interactive\n                    >\n                        <HelpOutline className={classes.iconSpace} />\n                    </Tooltip>\n                </Typography>\n                <FormControlLabel\n                    className={classes.actionSpace}\n                    control={(\n                        <Switch\n                            disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                            checked={!(apiThrottlingPolicy === null)}\n                            onChange={({ target: { checked } }) => configDispatcher({\n                                action: 'throttlingPoliciesEnabled',\n                                value: checked,\n                            })}\n                            color='primary'\n                        />\n                    )}\n                />\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                <Grid container spacing={1} alignItems='center'>\n                    <Grid item md={6} xs={12}>\n                        {!(apiThrottlingPolicy === null) && (\n                            <TextField\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                id='operation_throttling_policy'\n                                select\n                                value={apiThrottlingPolicy}\n                                onChange={handleChange}\n                                label='Rate limiting policies'\n                                margin='dense'\n                                variant='outlined'\n                                style={{ display: 'flex', minWidth: 180 }}\n                            >\n                                {apiRateLimits.map((rateLimit) => (\n                                    <MenuItem key={rateLimit.name} value={rateLimit.name}>\n                                        {rateLimit.displayName}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        )}\n                    </Grid>\n                </Grid>\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n}\n\nAPILevelRateLimitingPolicies.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport Api from 'AppData/api';\nimport { Progress } from 'AppComponents/Shared';\nimport { withStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Alert from 'AppComponents/Shared/Alert';\nimport APIProduct from 'AppData/APIProduct';\nimport LifeCycleUpdate from './LifeCycleUpdate';\nimport LifeCycleHistory from './LifeCycleHistory';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    historyHead: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n});\n/**\n *\n *\n * @class LifeCycle\n * @extends {Component}\n */\nclass LifeCycle extends Component {\n    /**\n     * Creates an instance of LifeCycle.\n     * @param {Object} props\n     * @memberof LifeCycle\n     */\n    constructor(props) {\n        super(props);\n        this.api = new Api();\n        this.state = {\n            lcHistory: null,\n            checkList: [],\n            certList: [],\n        };\n        this.updateData = this.updateData.bind(this);\n        this.handleChangeCheckList = this.handleChangeCheckList.bind(this);\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @memberof LifeCycle\n     */\n    componentDidMount() {\n        const { api: { id } } = this.props;\n        const promisedClientCerts = Api.getAllClientCertificates(id);\n        const { intl } = this.props;\n        promisedClientCerts.then((certList) => {\n            const clientCerts = certList.body;\n            this.setState({\n                certList: [...clientCerts.certificates],\n            });\n            this.updateData();\n        }).catch((error) => {\n            if (process.env.NODE_ENV !== 'production') {\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.LifeCycle.LifeCycleUpdate.error.certs',\n                    defaultMessage: 'Error while retrieving certificates',\n                }));\n                console.error(error);\n            }\n        });\n    }\n\n    handleChangeCheckList = (index) => (event, checked) => {\n        const { checkList } = this.state;\n        checkList[index].checked = checked;\n        this.setState({ checkList });\n    };\n\n    /**\n     *\n     *\n     * @memberof LifeCycle\n     */\n    updateData() {\n        const { api: { id }, isAPIProduct } = this.props;\n        const apiProduct = new APIProduct();\n        let promisedAPI;\n        let promisedLcState;\n        let promisedLcHistory;\n        if (isAPIProduct) {\n            promisedAPI = apiProduct.getAPIProductByID(id);\n            promisedLcState = apiProduct.getLCStateOfAPIProduct(id);\n            promisedLcHistory = apiProduct.getLCHistoryOfAPIProduct(id);\n        } else {\n            promisedAPI = Api.get(id);\n            promisedLcState = this.api.getLcState(id);\n            promisedLcHistory = this.api.getLcHistory(id);\n        }\n        Promise.all([promisedAPI, promisedLcState, promisedLcHistory])\n            .then((response) => {\n                let api;\n                if (isAPIProduct) {\n                    api = response[0].body;\n                } else {\n                    /* eslint prefer-destructuring: [\"error\", {VariableDeclarator: {object: true}}] */\n                    api = response[0];\n                }\n                const lcState = response[1].body;\n                const lcHistory = response[2].body.list;\n\n                // Bug fix for issue #12363\n                // Changing internal state PROTOTYPE -> PRE-RELEASED to display in LC History table\n                lcHistory.forEach(element => {\n                    const temp = element;\n                    if (element.previousState === 'PROTOTYPED') {\n                        temp.previousState = 'PRE-RELEASED';\n                    }\n                    if (element.postState === 'PROTOTYPED') {\n                        temp.postState = 'PRE-RELEASED';\n                    }\n                });\n\n                // Creating checklist\n                const checkList = [];\n                let index = 0;\n                for (const item of lcState.checkItems) {\n                    checkList.push({\n                        index,\n                        label: item.name,\n                        value: item.name,\n                        checked: false,\n                    });\n                    index++;\n                }\n                this.setState({\n                    api,\n                    lcState,\n                    lcHistory,\n                    checkList,\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n            });\n    }\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof LifeCycle\n     */\n    render() {\n        const { classes, isAPIProduct } = this.props;\n        const {\n            api, lcState, checkList, lcHistory, certList,\n        } = this.state;\n        const apiFromContext = this.context.api;\n        if (apiFromContext && isRestricted(['apim:api_publish'], apiFromContext)) {\n            return (\n                <Grid container direction='row' alignItems='center' spacing={4} style={{ marginTop: 20 }}>\n                    <Grid item>\n                        <Typography variant='body2' color='primary'>\n                            <FormattedMessage\n                                id='Apis.Details.LifeCycle.LifeCycle.change.not.allowed'\n                                defaultMessage={\n                                    '* You are not authorized to change the life cycle state of the API'\n                                    + ' due to insufficient permissions'\n                                }\n                            />\n                        </Typography>\n                    </Grid>\n                </Grid>\n            );\n        }\n        if (!lcState) {\n            return <Progress />;\n        }\n        return (\n            <>\n                <Typography id='itest-api-details-lifecycle-head' variant='h4' component='h2' gutterBottom>\n                    <FormattedMessage id='Apis.Details.LifeCycle.LifeCycle.lifecycle' defaultMessage='Lifecycle' />\n                </Typography>\n                <div className={classes.contentWrapper}>\n                    <Grid container>\n                        <Grid item xs={12}>\n                            <LifeCycleUpdate\n                                handleUpdate={this.updateData}\n                                lcState={lcState}\n                                checkList={checkList}\n                                handleChangeCheckList={this.handleChangeCheckList}\n                                api={api}\n                                certList={certList}\n                                isAPIProduct={isAPIProduct}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            {lcHistory.length > 1 && (\n                                <div>\n                                    <Typography\n                                        variant='h6'\n                                        component='h3'\n                                        gutterBottom\n                                        className={classes.historyHead}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.LifeCycle.LifeCycle.history'\n                                            defaultMessage='History'\n                                        />\n                                    </Typography>\n                                    <LifeCycleHistory lcHistory={lcHistory} />\n                                </div>\n                            )}\n                        </Grid>\n                    </Grid>\n                </div>\n            </>\n        );\n    }\n}\n\nLifeCycle.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n\nLifeCycle.contextType = ApiContext;\n\nexport default withStyles(styles)(LifeCycle);\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport { injectIntl } from 'react-intl';\nimport API from 'AppData/api';\nimport { CircularProgress } from '@material-ui/core';\nimport { ScopeValidation, resourceMethod, resourcePath } from 'AppData/ScopeValidation';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Banner from 'AppComponents/Shared/Banner';\nimport PublishWithoutDeploy from 'AppComponents/Apis/Details/LifeCycle/Components/PublishWithoutDeploy';\nimport Configurations from 'Config';\nimport APIProduct from 'AppData/APIProduct';\nimport LifeCycleImage from './LifeCycleImage';\nimport CheckboxLabels from './CheckboxLabels';\nimport LifecyclePending from './LifecyclePending';\nimport { API_SECURITY_MUTUAL_SSL_MANDATORY, API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY }\nfrom '../Configuration/components/APISecurity/components/apiSecurityConstants';\n\nconst styles = (theme) => ({\n    buttonsWrapper: {\n        marginTop: 40,\n    },\n    stateButton: {\n        marginRight: theme.spacing(),\n    },\n    paperCenter: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        alignItems: 'left',\n        justifyContent: 'left',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: '38px',\n    },\n    mandatoryStar: {\n        color: theme.palette.error.main,\n        marginLeft: theme.spacing(0.1),\n    },\n});\n\n/**\n *\n *\n * @class LifeCycleUpdate\n * @extends {Component}\n */\nclass LifeCycleUpdate extends Component {\n    /**\n     * @param {*} props @inheritdoc\n     */\n    constructor(props) {\n        super(props);\n        this.updateLifeCycleState = this.updateLifeCycleState.bind(this);\n        this.api = new API();\n        this.apiProduct = new APIProduct();\n        this.WORKFLOW_STATUS = {\n            CREATED: 'CREATED',\n            APPROVED: 'APPROVED',\n        };\n        this.state = {\n            newState: null,\n            isUpdating: null,\n            pageError: null,\n            isOpen: false,\n            deploymentsAvailable: false,\n        };\n        this.setIsOpen = this.setIsOpen.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    /**\n     *\n     * Set Deployment availability\n     */\n    componentDidMount() {\n        const {\n            api: { id: apiUUID },\n        } = this.props;\n        this.api.getRevisionsWithEnv(apiUUID).then((result) => {\n            this.setState({ deploymentsAvailable: result.body.count > 0 });\n        });\n    }\n\n    /**\n     *\n     * Set isOpen state of the dialog box which shows the caution message when publish without deploying\n     * @param {Boolean} isOpen Should dialog box is open or not\n     */\n    setIsOpen(isOpen) {\n        this.setState({ isOpen });\n    }\n\n    /**\n     * @param {*} apiUUID api UUID\n     * @param {*} action life cycle action\n     * @memberof LifeCycleUpdate\n     */\n    updateLCStateOfAPI(apiUUID, action) {\n        this.setState({ isUpdating: action });\n        let promisedUpdate;\n        const lifecycleChecklist = this.props.checkList.map((item) => item.value + ':' + item.checked);\n        const { isAPIProduct } = this.props;\n        if (isAPIProduct) {\n            promisedUpdate = this.apiProduct.updateLcState(apiUUID, action, lifecycleChecklist);\n        } else if (lifecycleChecklist.length > 0) {\n            promisedUpdate = this.api.updateLcState(apiUUID, action, lifecycleChecklist);\n        } else {\n            promisedUpdate = this.api.updateLcState(apiUUID, action);\n        }\n        promisedUpdate\n            .then((response) => {\n                /* TODO: Handle IO erros ~tmkb */\n                // get the latest state of the API\n                this.context.updateAPI();\n                const newState = response.body.lifecycleState.state;\n                const { workflowStatus } = response.body;\n                this.setState({ newState });\n                const { intl } = this.props;\n\n                if (workflowStatus === this.WORKFLOW_STATUS.CREATED) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.LifeCycle.LifeCycleUpdate.success.createStatus',\n                        defaultMessage: 'Lifecycle state change request has been sent',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.LifeCycle.LifeCycleUpdate.success.otherStatus',\n                        defaultMessage: 'Lifecycle state updated successfully',\n                    }));\n                }\n            })\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                    this.setState({ pageError: error.response.body });\n                } else {\n                    // TODO add i18n ~tmkb\n                    const message = 'Something went wrong while updating the lifecycle';\n                    Alert.error(message);\n                    this.setState({ pageError: error.response.body });\n                }\n                console.error(error);\n            })\n            .finally(() => {\n                this.setState({ isUpdating: null });\n            });\n    }\n\n    /**\n     *\n     * Set handle click warning\n     */\n    handleClick() {\n        const {\n            api: { id: apiUUID },\n        } = this.props;\n        this.setIsOpen(false);\n        this.updateLCStateOfAPI(apiUUID, 'Publish');\n    }\n\n    /**\n     *\n     *\n     * @param {*} event event\n     * @memberof LifeCycleUpdate\n     */\n    updateLifeCycleState(event) {\n        const { deploymentsAvailable } = this.state;\n        event.preventDefault();\n        let action = event.currentTarget.getAttribute('data-value');\n        if (action === 'Deploy To Test') {\n            action = 'Deploy as a Prototype';\n        }\n        const {\n            api: { id: apiUUID, advertiseInfo },\n        } = this.props;\n        if (action === 'Publish' && !deploymentsAvailable && advertiseInfo && !advertiseInfo.advertised) {\n            this.setIsOpen(true);\n        } else {\n            this.updateLCStateOfAPI(apiUUID, action);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     * @memberof LifeCycleUpdate\n     */\n    render() {\n        const {\n            api, lcState, classes, theme, handleChangeCheckList, checkList, certList, isAPIProduct,\n        } = this.props;\n        const lifecycleStates = [...lcState.availableTransitions];\n        const { newState, pageError, isOpen, deploymentsAvailable } = this.state;\n        const isWorkflowPending = api.workflowStatus && api.workflowStatus === this.WORKFLOW_STATUS.CREATED;\n        const lcMap = new Map();\n        lcMap.set('Published', 'Publish');\n        lcMap.set('Prototyped', 'Deploy as a prototype');\n        lcMap.set('Deprecated', 'Deprecate');\n        lcMap.set('Blocked', 'Block');\n        lcMap.set('Created', 'Create');\n        lcMap.set('Retired', 'Retire');\n        const isMutualSSLEnabled = api.securityScheme.includes(API_SECURITY_MUTUAL_SSL_MANDATORY);\n        const isAppLayerSecurityMandatory = api.securityScheme.includes(\n            API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY,\n        );\n        const isCertAvailable = certList.length !== 0;\n        const isBusinessPlanAvailable = api.policies.length !== 0;\n        const lifeCycleStatus = isAPIProduct ? api.state : api.lifeCycleStatus;\n        const lifecycleButtons = lifecycleStates.map((item) => {\n            const lifecycleState = { ...item, displayName: item.event };\n            if (lifecycleState.event === 'Deploy as a Prototype') {\n                if (lifecycleState.displayName === 'Deploy as a Prototype') {\n                    lifecycleState.displayName = 'Pre-Release';\n                }\n                return {\n                    ...lifecycleState,\n                    disabled:\n                        (api.type !== 'WEBSUB' && api.endpointConfig == null && !isAPIProduct),\n                };\n            }\n            if (lifecycleState.event === 'Publish') {\n                const buttonDisabled = (isMutualSSLEnabled && !isCertAvailable)\n                                    || (deploymentsAvailable && !isBusinessPlanAvailable)\n                                    || (isAPIProduct && !isBusinessPlanAvailable);\n                // When business plans are not assigned and deployments available\n\n                return {\n                    ...lifecycleState,\n                    disabled: buttonDisabled,\n                };\n            }\n            return {\n                ...lifecycleState,\n                disabled: false,\n            };\n        });\n\n        return (\n            <Grid container>\n                {isWorkflowPending ? (\n                    <Grid item xs={12}>\n                        <LifecyclePending currentState={lcState.state} />\n                    </Grid>\n                ) : (\n                    <Grid item xs={12}>\n                        {theme.custom.lifeCycleImage ? (\n                            <img\n                                src={Configurations.app.context + theme.custom.lifeCycleImage}\n                                alt='life cycles'\n                            />\n                        ) : (\n                            <Grid container spacing={3}>\n                                <Grid item xs={8}>\n                                    <LifeCycleImage lifeCycleStatus={newState || lifeCycleStatus} />\n                                </Grid>\n                                {(lifeCycleStatus === 'CREATED' || lifeCycleStatus === 'PROTOTYPED')\n                                    && (!api.advertiseInfo || !api.advertiseInfo.advertised) && (\n                                    <Grid item xs={3}>\n                                        <CheckboxLabels\n                                            api={api}\n                                            isMutualSSLEnabled={isMutualSSLEnabled}\n                                            isAppLayerSecurityMandatory={isAppLayerSecurityMandatory}\n                                            isCertAvailable={isCertAvailable}\n                                            isBusinessPlanAvailable={isBusinessPlanAvailable}\n                                            isAPIProduct={isAPIProduct}\n                                        />\n                                    </Grid>\n                                )}\n                            </Grid>\n                        )}\n                    </Grid>\n                )}\n                <Grid item xs={12}>\n                    {!isWorkflowPending && (\n                        <FormGroup row>\n                            {checkList.map((checkItem, index) => (\n                                <FormControlLabel\n                                    key={checkList[index].value}\n                                    control={(\n                                        <Checkbox\n                                            checked={checkList[index].checked}\n                                            onChange={handleChangeCheckList(index)}\n                                            value={checkList[index].value}\n                                            color='primary'\n                                        />\n                                    )}\n                                    label={checkList[index].label}\n                                />\n                            ))}\n                        </FormGroup>\n                    )}\n                    <ScopeValidation resourcePath={resourcePath.API_CHANGE_LC} resourceMethod={resourceMethod.POST}>\n                        <div className={classes.buttonsWrapper}>\n                            {!isWorkflowPending\n                            && lifecycleButtons.map((transitionState) => {\n                                /* Skip when transitions available for current state, this occurs in states\n                                where have allowed re-publishing in prototype and published sates */\n                                return (\n                                    <Button\n                                        disabled={transitionState.disabled\n                                        || this.state.isUpdating || api.isRevision}\n                                        variant='contained'\n                                        color='primary'\n                                        className={classes.stateButton}\n                                        key={transitionState.event}\n                                        data-value={transitionState.event}\n                                        onClick={this.updateLifeCycleState}\n                                    >\n                                        {transitionState.displayName}\n                                        {this.state.isUpdating === transitionState.event && (\n                                            <CircularProgress size={18} />\n                                        )}\n                                    </Button>\n                                );\n                            })}\n                        </div>\n                    </ScopeValidation>\n                </Grid>\n                {/* Page error banner */}\n                {pageError && (\n                    <Grid item xs={11}>\n                        <Banner\n                            onClose={() => this.setState({ pageError: null })}\n                            disableActions\n                            dense\n                            paperProps={{ elevation: 1 }}\n                            type='error'\n                            message={pageError}\n                        />\n                    </Grid>\n                )}\n                {/* end of Page error banner */}\n                <PublishWithoutDeploy\n                    classes={classes}\n                    api={api}\n                    handleClick={this.handleClick}\n                    handleClose={() => this.setIsOpen(false)}\n                    open={isOpen}\n                />\n            </Grid>\n        );\n    }\n}\n\nLifeCycleUpdate.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    checkList: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    lcState: PropTypes.shape({}).isRequired,\n    handleChangeCheckList: PropTypes.func.isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nLifeCycleUpdate.contextType = ApiContext;\n\nexport default withStyles(styles, { withTheme: true })(injectIntl(LifeCycleUpdate));\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport LinkIcon from '@material-ui/icons/Link';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\nimport Box from '@material-ui/core/Box';\n// import Link from '@material-ui/core/Link';\nimport Divider from '@material-ui/core/Divider';\nimport { Link as RouterLink } from 'react-router-dom';\nimport TextField from '@material-ui/core/TextField';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Joi from '@hapi/joi';\nimport Collapse from '@material-ui/core/Collapse';\n\nconst styles = (theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n});\n\nconst DialogTitle = withStyles(styles)((props) => {\n    const {\n        children, classes, onClose, ...other\n    } = props;\n    return (\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\n            <Typography variant='h6'>{children}</Typography>\n            {onClose ? (\n                <IconButton aria-label='close' className={classes.closeButton} onClick={onClose}>\n                    <CloseIcon />\n                </IconButton>\n            ) : null}\n        </MuiDialogTitle>\n    );\n});\n\nconst DialogContent = withStyles((theme) => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n    },\n}))(MuiDialogActions);\n\n/**\n *\n * @returns\n */\nexport default function PublishWithoutDeploy(props) {\n    const {\n        classes, api, handleClick, open, handleClose,\n    } = props;\n\n    let isExternalEndpointAvailable = false;\n    let availableExternalEndpoint = '';\n    if (api.advertiseInfo && api.advertiseInfo.apiExternalProductionEndpoint\n        && api.advertiseInfo.apiExternalProductionEndpoint.length > 0) {\n        isExternalEndpointAvailable = true;\n        availableExternalEndpoint = api.advertiseInfo.apiExternalProductionEndpoint;\n    } else if (api.advertiseInfo && api.advertiseInfo.apiExternalSandboxEndpoint\n        && api.advertiseInfo.apiExternalSandboxEndpoint.length > 0) {\n        isExternalEndpointAvailable = true;\n        availableExternalEndpoint = api.advertiseInfo.apiExternalSandboxEndpoint;\n    }\n\n    const [externalEndpoint, setExternalEndpoint] = useState(availableExternalEndpoint);\n    const [isValidExternalEndpoint, setValidExternalEndpoint] = useState(isExternalEndpointAvailable);\n    const [isExpanded, setIsExpanded] = useState(false);\n\n    /**\n     * Validate external endpoint\n     *\n     * @param event\n     */\n    const handleOnChangeExternalEndpoint = (event) => {\n        const { value } = event.target;\n        setExternalEndpoint(value);\n        const urlSchema = Joi.string().uri().empty();\n        setValidExternalEndpoint(!urlSchema.validate(value).error);\n    };\n\n    const handlePublishClick = () => {\n        if (externalEndpoint && externalEndpoint.length > 0) {\n            const updatedAPI = {\n                id: api.id,\n                name: api.name,\n                description: api.description,\n                lifeCycleStatus: api.lifeCycleStatus,\n                accessControl: api.accessControl,\n                authorizationHeader: api.authorizationHeader,\n                responseCachingEnabled: api.responseCachingEnabled,\n                cacheTimeout: api.cacheTimeout,\n                visibility: api.visibility,\n                isDefaultVersion: api.isDefaultVersion,\n                enableSchemaValidation: api.enableSchemaValidation,\n                accessControlRoles: [...api.accessControlRoles],\n                visibleRoles: [...api.visibleRoles],\n                tags: [...api.tags],\n                maxTps: api.maxTps,\n                transport: [...api.transport],\n                wsdlUrl: api.wsdlUrl,\n                securityScheme: [...api.securityScheme],\n                categories: [...api.categories],\n                corsConfiguration: {\n                    corsConfigurationEnabled: api.corsConfiguration.corsConfigurationEnabled,\n                    accessControlAllowCredentials: api.corsConfiguration.accessControlAllowCredentials,\n                    accessControlAllowOrigins: [...api.corsConfiguration.accessControlAllowOrigins],\n                    accessControlAllowHeaders: [...api.corsConfiguration.accessControlAllowHeaders],\n                    accessControlAllowMethods: [...api.corsConfiguration.accessControlAllowMethods],\n                },\n                additionalProperties: [...api.additionalProperties],\n                type: api.type,\n                advertiseInfo: {\n                    advertised: true,\n                    apiExternalProductionEndpoint: externalEndpoint,\n                    apiExternalSandboxEndpoint: externalEndpoint,\n                    originalDevPortalUrl: api.advertiseInfo.originalDevPortalUrl,\n                    apiOwner: api.advertiseInfo.apiOwner,\n                    vendor: api.advertiseInfo.vendor,\n                },\n            };\n            const promisedUpdate = api.update(updatedAPI);\n            promisedUpdate\n                .then(() => {\n                    Alert.info('API updated successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        const message = 'Something went wrong while updating the API';\n                        Alert.error(message);\n                    }\n                    console.error(error);\n                })\n                .finally(() => {\n                    handleClick();\n                });\n        }\n    };\n\n    return (\n        <Dialog onClose={handleClose} aria-labelledby='publish-api-confirmation' open={open}>\n            <DialogTitle id='itest-publish-confirmation' onClose={handleClose}>\n                <FormattedMessage\n                    id='Apis.Details.LifeCycle.components.confirm.publish.title'\n                    defaultMessage='Publish API without deployments'\n                />\n            </DialogTitle>\n            <Divider light />\n            <DialogContent>\n                <Box my={1}>\n                    <DialogContentText id='itest-confirm-publish-text'>\n                        <Typography variant='subtitle1' display='block' gutterBottom>\n                            <FormattedMessage\n                                id='Apis.Details.LifeCycle.components.confirm.publish.message'\n                                defaultMessage='The API will not be available for consumption unless it is deployed.'\n                            />\n                        </Typography>\n                    </DialogContentText>\n                </Box>\n                <Collapse in={isExpanded}>\n                    <Box>\n                        <Box my={1}>\n                            <DialogContentText id='itest-confirm-publish-text'>\n                                <Typography variant='body1' display='block' gutterBottom>\n                                    <FormattedMessage\n                                        // eslint-disable-next-line max-len\n                                        id='Apis.Details.LifeCycle.components.confirm.publish.message.advertise.only'\n                                        // eslint-disable-next-line max-len\n                                        defaultMessage={'If you want to publish as a third party API, please provide '\n                                        + 'the external endpoint and press \"Publish\".'}\n                                    />\n                                </Typography>\n                            </DialogContentText>\n                        </Box>\n                        <Box my={1}>\n                            <TextField\n                                fullWidth\n                                id='itest-id-api-external-endpoint-input'\n                                label={(\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.LifeCycle.components.externalEndpoint'\n                                            defaultMessage='External Endpoint'\n                                        />\n                                        <sup className={classes.mandatoryStar}>*</sup>\n                                    </>\n                                )}\n                                name='externalEndpoint'\n                                value={externalEndpoint}\n                                onChange={handleOnChangeExternalEndpoint}\n                                helperText={!isValidExternalEndpoint && (\n                                    <FormattedMessage\n                                        id='Apis.Details.LifeCycle.externalEndpoint.error'\n                                        defaultMessage='Invalid Endpoint URL'\n                                    />\n                                )}\n                                error={!isValidExternalEndpoint}\n                                margin='normal'\n                                variant='outlined'\n                            />\n                        </Box>\n                    </Box>\n                </Collapse>\n            </DialogContent>\n            <DialogActions>\n                {!isExpanded && (\n                    <Button\n                        color='primary'\n                        onClick={() => setIsExpanded(!isExpanded)}\n                        endIcon={<ArrowDropDownIcon />}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.PublishWithoutDeploy.see.more'\n                            defaultMessage='See more'\n                        />\n                    </Button>\n                )}\n                {isExpanded && (\n                    <>\n                        <Button\n                            color='primary'\n                            onClick={() => setIsExpanded(!isExpanded)}\n                            endIcon={<ArrowDropUpIcon />}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.LifeCycle.PublishWithoutDeploy.see.less'\n                                defaultMessage='See less'\n                            />\n                        </Button>\n                        <Button\n                            variant='contained'\n                            color='primary'\n                            disabled={!isValidExternalEndpoint}\n                            onClick={handlePublishClick}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.LifeCycle.PublishWithoutDeploy.advertise'\n                                defaultMessage='Publish'\n                            />\n                        </Button>\n                    </>\n                )}\n                <Button\n                    variant='contained'\n                    color='primary'\n                    component={RouterLink}\n                    to={'/apis/' + api.id + '/deployments'}\n                    id='deployments-btn'\n                >\n                    <Box fontSize='button.fontSize' alignItems='center' display='flex' fontFamily='fontFamily'>\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.publish.content.info.deployments'\n                            defaultMessage='Deployments'\n                        />\n                        <Box ml={0.5} mt={0.25} display='flex'>\n                            <LinkIcon fontSize='small' />\n                        </Box>\n                    </Box>\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n `max-len` es-lint rule has been disabled for the entire file due to the generated svg elements in the file.\n it's impossible to get them under 120 columns rule\n  */\n/* eslint-disable max-len */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = () => ({\n    root: {\n        marginTop: 30,\n    },\n});\n\n/**\n *\n *\n * @class LifeCycleImage\n * @extends {React.Component}\n */\nclass LifeCycleImage extends React.Component {\n    /**\n     *\n     *\n     * @param {*} element\n     * @returns\n     * @memberof LifeCycleImage\n     */\n    highLightMe(element) {\n        const style = {};\n        if (!element.startsWith(this.props.lifeCycleStatus.toLowerCase())) {\n            style.opacity = 0.4;\n        }\n        return style;\n    }\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof LifeCycleImage\n     */\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <svg\n                xmlns='http://www.w3.org/2000/svg'\n                width='633'\n                height='244'\n                viewBox='0 0 743.09858 287.34519'\n                id='svg5953'\n                className={classes.root}\n                aria-hidden='true'\n            >\n                <defs id='defs5955'>\n                    <path\n                        transform='scale(.26458)'\n                        id='path5588'\n                        d='m 1738.3694,290.45336 a 290.37688,290.37688 0 0 1 268.3994,-179.55952 290.37688,290.37688 0 0 1 5.8758,0.0595'\n                        style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                        color='#000'\n                        overflow='visible'\n                        fill='none'\n                        strokeWidth='6.633'\n                        strokeLinejoin='round'\n                    />\n                    <path\n                        transform='scale(.26458)'\n                        id='path5578'\n                        d='m 2103.6746,127.54094 a 290.37688,290.37688 0 0 1 193.3409,265.03704'\n                        style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                        color='#000'\n                        overflow='visible'\n                        fill='none'\n                        strokeWidth='6.633'\n                        strokeLinejoin='round'\n                    />\n                    <path\n                        transform='scale(.26458)'\n                        id='path5547'\n                        d='m 1748.9295,534.82816 a 290.37688,290.37688 0 0 0 257.8393,156.81941 290.37688,290.37688 0 0 0 5.8709,-0.0593'\n                        style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                        color='#000'\n                        overflow='visible'\n                        fill='none'\n                        strokeWidth='6.633'\n                        strokeLinejoin='round'\n                    />\n                    <path\n                        transform='scale(.26458)'\n                        id='path4189'\n                        d='m 1748.9295,534.82816 a 290.37688,290.37688 0 0 0 257.8393,156.81941 290.37688,290.37688 0 0 0 5.8709,-0.0593'\n                        style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                        color='#000'\n                        overflow='visible'\n                        fill='none'\n                        strokeWidth='6.633'\n                        strokeLinejoin='round'\n                    />\n                </defs>\n                <g id='layer1' transform='translate(51.512 4.77)'>\n                    <path d='m 99,13.3622 24,0 0,24 -24,0 z' id='path6746' fill='none' />\n                    <g id='prototyped' style={this.highLightMe('prototyped')}>\n                        <text\n                            id='text6729'\n                            y='6.362'\n                            x='61'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                            fill='#2b2b2b'\n                        >\n                            <tspan y='6.362' x='61' id='tspan6731'>\n                                PRE-RELEASED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6748'\n                            d='m 118,16.3622 -4.18,0 c -0.42,-1.16 -1.52,-2 -2.82,-2 -1.3,0 -2.4,0.84 -2.82,2 l -4.18,0 c -1.1,0 -2,0.9 -2,2 l 0,14 c 0,1.1 0.9,2 2,2 l 14,0 c 1.1,0 2,-0.9 2,-2 l 0,-14 c 0,-1.1 -0.9,-2 -2,-2 z m -7,0 c 0.55,0 1,0.45 1,1 0,0.55 -0.45,1 -1,1 -0.55,0 -1,-0.45 -1,-1 0,-0.55 0.45,-1 1,-1 z m -2,14 -4,-4 1.41,-1.41 2.59,2.58 6.59,-6.59 1.41,1.42 -8,8 z'\n                        />\n                    </g>\n                    <path d='m 224.5,133.8622 24,0 0,24 -24,0 z' id='path6762' fill='none' />\n                    <g id='published' style={this.highLightMe('published')}>\n                        <text\n                            id='text6524'\n                            y='125.476'\n                            x='207'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                        >\n                            <tspan y='125.476' x='207' id='tspan6526'>\n                                PUBLISHED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6764'\n                            d='m 240.5,144.8622 c 1.66,0 2.99,-1.34 2.99,-3 0,-1.66 -1.33,-3 -2.99,-3 -1.66,0 -3,1.34 -3,3 0,1.66 1.34,3 3,3 z m -8,0 c 1.66,0 2.99,-1.34 2.99,-3 0,-1.66 -1.33,-3 -2.99,-3 -1.66,0 -3,1.34 -3,3 0,1.66 1.34,3 3,3 z m 0,2 c -2.33,0 -7,1.17 -7,3.5 l 0,2.5 14,0 0,-2.5 c 0,-2.33 -4.67,-3.5 -7,-3.5 z m 8,0 c -0.29,0 -0.62,0.02 -0.97,0.05 1.16,0.84 1.97,1.97 1.97,3.45 l 0,2.5 6,0 0,-2.5 c 0,-2.33 -4.67,-3.5 -7,-3.5 z'\n                        />\n                    </g>\n                    <g id='created' style={this.highLightMe('created')}>\n                        <text\n                            id='text6520'\n                            y='282.362'\n                            x='68'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                        >\n                            <tspan y='282.362' x='68' id='tspan6522'>\n                                CREATED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6778'\n                            d='m 97,238.8622 c -1.1,0 -1.99,0.9 -1.99,2 l -0.01,16 c 0,1.1 0.89,2 1.99,2 l 12.01,0 c 1.1,0 2,-0.9 2,-2 l 0,-12 -6,-6 -8,0 z m 7,7 0,-5.5 5.5,5.5 -5.5,0 z'\n                        />\n                    </g>\n                    <path d='m 91,236.8622 24,0 0,24 -24,0 z' id='path6780' fill='none' />\n                    <g id='deprecated' style={this.highLightMe('deprecated')}>\n                        <text\n                            id='text6536'\n                            y='125.476'\n                            x='397.858'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                        >\n                            <tspan y='125.476' x='397.858' id='tspan6538'>\n                                DEPRECATED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6794'\n                            d='m 433.52944,97.811947 c 0,1.1 0.9,2 2,2 l 8,0 c 1.1,0 2,-0.9 2,-2 l 0,-12 -12,0 0,12 z m 13,-15 -3.5,0 -1,-1 -5,0 -1,1 -3.5,0 0,2 14,0 0,-2 z'\n                        />\n                        <path id='path6796' d='m 427.52944,78.811947 24,0 0,24.000003 -24,0 z' fill='none' />\n                    </g>\n                    <path d='m 427.52944,236.8622 24,0 0,24 -24,0 z' id='path6810' clipRule='evenodd' fill='none' />\n                    <g id='blocked' style={this.highLightMe('blocked')}>\n                        <text\n                            id='text6532'\n                            y='282.362'\n                            x='386.858'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                        >\n                            <tspan y='282.362' x='386.858' id='tspan6534'>\n                                BLOCKED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6812'\n                            d='m 450.22944,255.8622 -9.1,-9.1 c 0.9,-2.3 0.4,-5 -1.5,-6.9 -2,-2 -5,-2.4 -7.4,-1.3 l 4.3,4.3 -3,3 -4.4,-4.3 c -1.2,2.4 -0.7,5.4 1.3,7.4 1.9,1.9 4.6,2.4 6.9,1.5 l 9.1,9.1 c 0.4,0.4 1,0.4 1.4,0 l 2.3,-2.3 c 0.5,-0.4 0.5,-1.1 0.1,-1.4 z'\n                        />\n                    </g>\n                    <g id='retired' style={this.highLightMe('retired')}>\n                        <text\n                            id='text6540'\n                            y='125.483'\n                            x='627.485'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                        >\n                            <tspan y='125.483' x='627.485' id='tspan6542'>\n                                RETIRED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6826'\n                            d='m 663.36667,89.811947 0,2 -13,0 0,-6 9,0 c 2.21,0 4,1.79 4,4 z m -20,3 0,2 6,0 0,2 8,0 0,-2 6,0 0,-2 -20,0 z m 5.14,-1.9 c 1.16,-1.19 1.14,-3.08 -0.04,-4.24 -1.19,-1.16 -3.08,-1.14 -4.24,0.04 -1.16,1.19 -1.14,3.08 0.04,4.24 1.19,1.16 3.08,1.14 4.24,-0.04 z'\n                        />\n                        <path id='path6828' d='m 641.36667,78.811947 24,0 0,24.000003 -24,0 z' fill='none' />\n                    </g>\n                    <g id='published_to_created' style={this.highLightMe('published_to_created')}>\n                        <path\n                            id='path6872'\n                            d='m 235.84375,184.86133 c -11.86654,31.99459 -35.12697,58.48216 -65.32031,74.38281 l -5.4624,15.71344 14.85695,3.63617 c 35.16928,-17.95415 62.42125,-48.3249 76.47461,-85.22656 l -15.28708,7.18109 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#065381'\n                        />\n                        <path\n                            id='path6985'\n                            d='m 178.61585,255.22337 -4.875,15.375 14.5,3.625'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            d='m 187.11585,249.22337 -4.875,15.375 14.5,3.625'\n                            id='path6987'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='created_to_published' style={this.highLightMe('created_to_published')}>\n                        <path\n                            id='path6850'\n                            d='m 202.80469,171.18359 c -8.60566,23.79669 -25.78994,43.52064 -48.1836,55.30469 l 15.33148,4.4495 -5.74163,15.30245 c 27.19915,-14.16065 48.15744,-37.93366 58.79687,-66.69335 l -4.08764,-14.98782 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#34b2e4'\n                        />\n                        <path\n                            d='m 200.07828,178.47337 15.66836,-6.25318 3.78013,13.89858'\n                            id='path6979'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            id='path6991'\n                            d='m 195.3937,187.48898 15.66836,-6.25318 3.78013,13.89858'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='prototyped_to_published' style={this.highLightMe('prototyped_to_published')}>\n                        <path\n                            id='path6874'\n                            d='m 181.42383,-4.0683594 5.18392,15.3553234 -15.14681,3.480614 c 26.97521,14.497097 48.38501,37.525806 60.88086,65.484375 l 16.41911,5.795641 4.09261,-14.231188 C 238.22018,39.231643 213.06477,12.507292 181.42383,-4.0683594 Z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#fe912a'\n                        />\n                        <path\n                            id='path6993'\n                            d='m 228.26421,71.982698 16.39604,5.833631 3.93328,-14.097941'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            d='m 224.76421,65.357698 16.39604,5.833631 3.93328,-14.097941'\n                            id='path6995'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='published_to_prototyped' style={this.highLightMe('published_to_prototyped')}>\n                        <path\n                            id='path6855'\n                            d='m 164.61328,27.712891 -16.76273,3.798407 6.57718,15.455499 c 19.64736,10.327117 35.3679,26.809879 44.75391,46.923828 l 6.94786,-12.105746 13.33339,3.763949 C 208.07457,60.73778 188.78631,40.399355 164.61328,27.712891 Z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#ffc95c'\n                        />\n                        <path\n                            id='path6997'\n                            d='m 163.43006,52.336437 -6.45235,-15.202795 16.61701,-3.535534'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            d='M 171.82695,57.993291 165.3746,42.790496 181.99161,39.254962'\n                            id='path6999'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='created_to_prototyped' style={this.highLightMe('created_to_prototyped')}>\n                        <path\n                            id='path6870'\n                            d='M 35.433594,-4.7226562 C -17.800688,22.43674 -51.366944,77.095386 -51.511719,136.85742 c 0.08726,60.42038 34.333636,115.59607 88.439453,142.48828 l -5.963174,-14.43529 14.818643,-3.6858 C -1.8626488,238.10436 -32.152993,189.83798 -32.251953,136.87891 -32.191581,84.271252 -2.3316563,36.239603 44.818359,12.90625 l 7.576833,-14.3582512 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#8b103e'\n                        />\n                        <path\n                            id='path7001'\n                            d='m 25.625,1.1122031 16.25,3 -7.125,13.7499999'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            d='m 16.375,7.1122031 16.25,2.9999999 -7.125,13.75'\n                            id='path7003'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='prototyped_to_created' style={this.highLightMe('prototyped_to_created')}>\n                        <path\n                            id='path6840'\n                            d='M 52.171875,26.720703 C 10.473112,47.61586 -15.897048,90.22032 -16,136.86133 c 0.06835,46.84095 26.630186,89.61173 68.585938,110.43945 l 18.169686,-5.17409 -8.489999,-14.63841 C 27.868397,210.36444 6.0894455,175.28511 6,136.86133 6.0597413,98.328986 27.932967,63.153267 62.464844,46.056641 l -14.466177,-4.2932 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#e34856'\n                        />\n                        <path\n                            id='path7005'\n                            d='m 39.421204,240.07329 17.677669,-4.94975 -7.778174,-14.49569'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            d='m 27.930719,230.8809 17.677669,-4.94975 -7.778174,-14.49569'\n                            id='path7007'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='deprecated_to_retired' style={this.highLightMe('deprecated_to_retired')}>\n                        <path\n                            id='rect7009'\n                            d='m 530.25049,110.51652 68.24164,0 9.89949,9.52539 -9.89949,9.40863 -68.24164,0 9.54594,-9.76218 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#5c5c5c'\n                            strokeWidth='6.016'\n                            strokeLinecap='round'\n                            strokeLinejoin='round'\n                        />\n                        <path\n                            id='path7016'\n                            d='m 589.97554,111.03345 9.31051,8.95242 -9.42988,8.89273'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                        <path\n                            d='m 581.28804,111.03345 9.31051,8.95242 -9.42988,8.89273'\n                            id='path7018'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                    </g>\n                    <g id='published_to_deprecated' style={this.highLightMe('published_to_deprecated')}>\n                        <path\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            d='m 306.25049,110.51652 68.24164,0 9.89949,9.52539 -9.89949,9.40863 -68.24164,0 9.54594,-9.76218 z'\n                            id='path7020'\n                            color='#000'\n                            overflow='visible'\n                            fill='#5c5c5c'\n                            strokeWidth='6.016'\n                            strokeLinecap='round'\n                            strokeLinejoin='round'\n                        />\n                        <path\n                            d='m 365.97554,111.03345 9.31051,8.95242 -9.42988,8.89273'\n                            id='path7022'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                        <path\n                            id='path7024'\n                            d='m 357.28804,111.03345 9.31051,8.95242 -9.42988,8.89273'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                    </g>\n                    <g id='published_to_blocked' style={this.highLightMe('published_to_blocked')}>\n                        <path\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            d='m 306.92162,149.0749 92.7941,75.49823 1.41692,13.66474 -13.63383,0.80053 -92.79411,-75.49822 13.59185,-1.29876 z'\n                            id='path7026'\n                            color='#000'\n                            overflow='visible'\n                            fill='#65daad'\n                            strokeWidth='6.016'\n                            strokeLinecap='round'\n                            strokeLinejoin='round'\n                        />\n                        <path\n                            d='m 392.87565,219.47284 1.33665,12.84698 -12.94218,0.70939'\n                            id='path7028'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                        <path\n                            id='path7030'\n                            d='m 386.23855,213.86735 1.33664,12.84698 -12.94218,0.70939'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                    </g>\n                    <g\n                        id='blocked_to_published'\n                        transform='rotate(180 338.919 207.057)'\n                        style={this.highLightMe('blocked_to_published')}\n                    >\n                        <path\n                            id='path7039'\n                            d='m 306.92162,149.0749 92.7941,75.49823 1.41692,13.66474 -13.63383,0.80053 -92.79411,-75.49822 13.59185,-1.29876 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#64d0da'\n                            strokeWidth='6.016'\n                            strokeLinecap='round'\n                            strokeLinejoin='round'\n                        />\n                        <path\n                            id='path7041'\n                            d='m 392.87565,219.47284 1.33665,12.84698 -12.94218,0.70939'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                        <path\n                            d='m 386.23855,213.86735 1.33664,12.84698 -12.94218,0.70939'\n                            id='path7043'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                    </g>\n                    <g id='blocked_to_deprecated' style={this.highLightMe('blocked_to_deprecated')}>\n                        <path\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            d='m 427.85405,225.05409 0,-68.24164 9.52539,-9.89949 9.40863,9.89949 0,68.24164 -9.76218,-9.54594 z'\n                            id='path7045'\n                            color='#000'\n                            overflow='visible'\n                            fill='#5c5c5c'\n                            strokeWidth='6.016'\n                            strokeLinecap='round'\n                            strokeLinejoin='round'\n                        />\n                        <path\n                            d='m 428.37098,165.32904 8.95242,-9.31051 8.89273,9.42988'\n                            id='path7047'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                        <path\n                            id='path7049'\n                            d='m 428.37098,174.01654 8.95242,-9.31051 8.89273,9.42988'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n}\nLifeCycleImage.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    lifeCycleStatus: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(LifeCycleImage);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport Paper from '@material-ui/core/Paper';\nimport CloseIcon from '@material-ui/icons/Close';\nimport CheckIcon from '@material-ui/icons/Check';\nimport green from '@material-ui/core/colors/green';\nimport yellow from '@material-ui/core/colors/yellow';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nconst useStyles = makeStyles((theme) => ({\n    stateButton: {\n        marginRight: theme.spacing(),\n    },\n    paperCenter: {\n        padding: theme.spacing(2),\n        display: 'block',\n        alignItems: 'left',\n        justifyContent: 'center',\n    },\n    iconTrue: {\n        color: green[500],\n        marginRight: theme.spacing(1),\n        display: 'block',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n    },\n    iconFalse: {\n        color: theme.palette.grey[500],\n        marginRight: theme.spacing(1),\n        display: 'block',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n    },\n    iconWarn: {\n        color: yellow[700],\n        marginRight: theme.spacing(1),\n        display: 'block',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n    },\n    grid: {\n        marginTop: theme.spacing(2),\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'left',\n        alignItems: 'left',\n    },\n    labelsGrid: {\n        fontWeight: 600,\n        marginTop: theme.spacing(3),\n    },\n}));\n/**\n * This component renders the requirements list\n * @param {*} props\n */\nexport default function CheckboxLabels(props) {\n    const classes = useStyles();\n    const {\n        api, isMutualSSLEnabled, isCertAvailable, isAppLayerSecurityMandatory, isBusinessPlanAvailable, isAPIProduct,\n    } = props;\n    const isEndpointAvailable = !isAPIProduct\n        ? api.endpointConfig !== null && !api.endpointConfig.implementation_status\n        : false;\n    const lcState = isAPIProduct ? api.state : api.lifeCycleStatus;\n\n    return (\n        <Paper className={classes.paperCenter}>\n            <Grid xs={12}>\n                <Typography variant='h6' component='h4'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.Configuration.requirements'\n                        defaultMessage='Requirements'\n                    />\n                </Typography>\n                <Typography variant='caption'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.Configuration.requirements.state.transition'\n                        defaultMessage='Requirements for next state transition'\n                    />\n                </Typography>\n            </Grid>\n            {(lcState === 'CREATED' || lcState === 'PROTOTYPED') && (\n                <>\n                    <Grid xs={12} className={classes.labelsGrid}>\n                        <Typography variant='subtitle2' component='h5'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Configuration.publisher'\n                                defaultMessage='Publish'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid xs={12}>\n                        {api.type !== 'WEBSUB' && !isAPIProduct && (\n                            <Grid xs={12} className={classes.grid}>\n                                {isEndpointAvailable ? (\n                                    <CheckIcon className={classes.iconTrue} />\n                                ) : (\n                                    <CloseIcon className={classes.iconFalse} />\n                                )}\n                                <Typography>\n                                    <FormattedMessage\n                                        id='Apis.Details.LifeCycle.CheckboxLabels.endpoints.provided'\n                                        defaultMessage='Endpoint provided'\n                                    />\n                                </Typography>\n                                <Link to={'/apis/' + api.id + '/endpoints'} aria-label='Endpoint provided'>\n                                    <LaunchIcon style={{ marginLeft: '2px' }} color='primary' fontSize='small' />\n                                </Link>\n                            </Grid>\n                        )}\n                        <>\n                            {isAppLayerSecurityMandatory && (\n                                <Grid xs={12} className={classes.grid}>\n                                    {isBusinessPlanAvailable ? (\n                                        <CheckIcon className={classes.iconTrue} />\n                                    ) : (\n                                        <CloseIcon className={classes.iconFalse} />\n                                    )}\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.LifeCycle.CheckboxLabels.business.plans.selected'\n                                            defaultMessage='Business Plan(s) selected'\n                                        />\n                                    </Typography>\n                                    <Link to={'/apis/' + api.id + '/subscriptions'} aria-label='Business Plan(s)'>\n                                        <LaunchIcon style={{ marginLeft: '2px' }} color='primary' fontSize='small' />\n                                    </Link>\n                                </Grid>\n                            )}\n                            {isMutualSSLEnabled && (\n                                <Grid xs={12} className={classes.grid}>\n                                    {isCertAvailable ? (\n                                        <CheckIcon className={classes.iconTrue} />\n                                    ) : (\n                                        <CloseIcon className={classes.iconFalse} />\n                                    )}\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.LifeCycle.CheckboxLabels.cert.provided'\n                                            defaultMessage='Certificate provided'\n                                        />\n                                    </Typography>\n                                    <Link\n                                        to={'/apis/' + api.id + '/runtime-configuration'}\n                                        aria-label='Certificate provided'\n                                    >\n                                        <LaunchIcon style={{ marginLeft: '2px' }} color='primary' fontSize='small' />\n                                    </Link>\n                                </Grid>\n                            ) }\n                        </>\n                    </Grid>\n                </>\n            )}\n        </Paper>\n    );\n}\n\nCheckboxLabels.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Box from '@material-ui/core/Box';\nimport PropTypes from 'prop-types';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport Alert from 'AppComponents/Shared/Alert';\nimport {\n    Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\n} from '@material-ui/core/';\nimport Slide from '@material-ui/core/Slide';\n\nconst lifecyclePending = (props) => {\n    const { currentState } = props;\n    const intl = useIntl();\n    const [isOpen, setOpen] = useState(false);\n    const [api, updateAPI] = useAPI();\n    const deleteTask = () => {\n        const { id } = api;\n        api.cleanupPendingTask(id)\n            .then(() => {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.success',\n                    defaultMessage: 'Lifecycle task deleted successfully',\n                }));\n                updateAPI();\n            })\n            .catch((errorResponse) => {\n                console.error(errorResponse);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.error',\n                    defaultMessage: 'Error while deleting task',\n                }));\n            });\n    };\n    return (\n        <Paper>\n            <Box display='block' p={2} mt={2}>\n                <Box display='block'>\n                    <Typography variant='h6'>\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.pending'\n                            defaultMessage='Pending lifecycle state change.'\n                        />\n                    </Typography>\n                </Box>\n                <Box display='block' mt={0.5}>\n                    <Typography variant='subtitle2'>\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.current.state'\n                            defaultMessage='Current state is'\n                        />\n                        {' '}\n                        {currentState}\n                    </Typography>\n                </Box>\n                <Box display='flex' mt={2}>\n                    <Button\n                        size='small'\n                        variant='contained'\n                        color='primary'\n                        onClick={() => setOpen(true)}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.delete.task'\n                            defaultMessage='Delete Task'\n                        />\n                    </Button>\n\n                </Box>\n            </Box>\n            <Dialog open={isOpen} transition={Slide}>\n                <DialogTitle>\n                    <FormattedMessage\n                        id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.dialog.title'\n                        defaultMessage='Delete Task'\n                    />\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.dialog.text.description'\n                            defaultMessage='The life cycle task will be removed'\n                        />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button dense onClick={() => setOpen(false)}>\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.dialog.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='text'\n                        color='primary'\n                        onClick={deleteTask}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.dialog,delete'\n                            defaultMessage='Delete'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Paper>\n    );\n};\nlifecyclePending.propTypes = {\n    currentState: PropTypes.string.isRequired,\n};\nexport default lifecyclePending;\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Person from '@material-ui/icons/Person';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { FormattedMessage } from 'react-intl';\n\nconst styles = (theme) => ({\n    firstCol: {\n        width: 100,\n    },\n    personIcon: {\n        fontSize: theme.typography.fontSize,\n    },\n    avatar: {\n        width: 25,\n        height: 25,\n    },\n});\nconst LifeCycleHistory = (props) => {\n    const { classes } = props;\n    return (\n        <Paper>\n            <Table className={classes.table}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell className={classes.firstCol}>\n                            <FormattedMessage id='Apis.Details.LifeCycle.LifeCycleHistory.user' defaultMessage='User' />\n                        </TableCell>\n                        <TableCell>\n                            <FormattedMessage\n                                id='Apis.Details.LifeCycle.LifeCycleHistory.action'\n                                defaultMessage='Action'\n                            />\n                        </TableCell>\n                        <TableCell>\n                            <FormattedMessage id='Apis.Details.LifeCycle.LifeCycleHistory.time' defaultMessage='Time' />\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.lcHistory.reverse().map((entry) => entry.previousState && (\n                        <TableRow key={entry.postState}>\n                            <TableCell component='th' scope='row'>\n                                <Avatar className={classes.avatar}>\n                                    <Person className={classes.personIcon} />\n                                </Avatar>\n                                <div>{entry.user}</div>\n                            </TableCell>\n                            <TableCell>\n                                <FormattedMessage\n                                    id='Apis.Details.LifeCycle.LifeCycleHistory.lifecycle.state.history'\n                                    defaultMessage='LC has changed from {previous} to {post}'\n                                    values={{ previous: entry.previousState, post: entry.postState }}\n                                />\n                            </TableCell>\n                            <TableCell>{moment(entry.updatedTime).fromNow()}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </Paper>\n    );\n};\nLifeCycleHistory.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    lcHistory: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n};\nexport default withStyles(styles)(LifeCycleHistory);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Listing from './Listing';\nimport View from './View';\nimport Edit from './Edit';\nimport EditContent from './EditContent';\nimport DocCreate from './Create';\n\nconst Documents = (props) => {\n    const { isAPIProduct } = useContext(APIContext);\n    const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n    return (\n        <div>\n            <Switch>\n                <Route exact path={'/' + urlPrefix + '/:apiUUID/documents'} component={Listing} />\n                <Route exact path={'/' + urlPrefix + '/:apiUUID/documents/:documentId/details'} component={View} />\n                <Route exact path={'/' + urlPrefix + '/:apiUUID/documents/:documentId/edit'} component={Edit} />\n                <Route\n                    exact\n                    path={'/' + urlPrefix + '/:apiUUID/documents/:documentId/edit-content'}\n                    component={EditContent} />\n                <Route exact path={'/' + urlPrefix + '/:apiUUID/documents/create'} component={DocCreate} />\n                <Route component={ResourceNotFound} />\n            </Switch>\n        </div>\n    );\n};\n\nDocuments.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default Documents;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Suspense, lazy } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport MUIDataTable from 'mui-datatables';\nimport API from 'AppData/api.js';\nimport APIProduct from 'AppData/APIProduct';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport Icon from '@material-ui/core/Icon';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Progress from 'AppComponents/Shared/Progress';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { isRestricted } from 'AppData/AuthManager';\nimport Create from './Create';\nimport MarkdownEditor from './MarkdownEditor';\nimport Edit from './Edit';\nimport Delete from './Delete';\nimport DeleteMultiple from './DeleteMultiple';\nimport Download from './Download';\n\nconst TextEditor = lazy(() => import('./TextEditor' /* webpackChunkName: \"ListingTextEditor\" */));\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(2),\n    },\n    mainTitle: {\n        paddingRight: 10,\n    },\n    actionTable: {\n        '& td': {\n            width: 50,\n        },\n        '& td:first-child': {\n            width: 130,\n        },\n    },\n    messageBox: {\n        marginTop: 20,\n    },\n    actions: {\n        padding: '20px 0',\n        '& button': {\n            marginLeft: 0,\n        },\n    },\n    head: {\n        fontWeight: 200,\n        marginBottom: 20,\n    },\n    buttonIcon: {\n        marginRight: theme.spacing(1),\n    },\n});\nfunction LinkGenerator(props) {\n    return props.apiType === 'APIProduct' ? (\n        <Link to={'/api-products/' + props.apiId + '/documents/' + props.docId + '/details'}>{props.docName}</Link>\n    ) : (\n        <Link to={'/apis/' + props.apiId + '/documents/' + props.docId + '/details'}>{props.docName}</Link>\n    );\n}\nclass Listing extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            docs: null,\n            showAddDocs: false,\n            docsToDelete: null,\n        };\n        this.apiId = props.api.id;\n        this.toggleAddDocs = this.toggleAddDocs.bind(this);\n        this.getDocumentsList = this.getDocumentsList.bind(this);\n    }\n    /**\n     * @inheritDoc\n     * @memberof Listing\n     */\n    componentDidMount() {\n        this.getDocumentsList();\n    }\n\n    /*\n     Get the document list attached to current API and set it to the state\n     */\n    getDocumentsList() {\n        const { api, intl } = this.props;\n        const  getSortOrder = (prop) => {    \n            return function(a, b) {    \n                if (a[prop] > b[prop]) {    \n                    return 1;    \n                } else if (a[prop] < b[prop]) {    \n                    return -1;    \n                }    \n                return 0;    \n            }    \n        }  \n        if (api.apiType === API.CONSTS.APIProduct) {\n            const apiProduct = new APIProduct();\n            const docs = apiProduct.getDocuments(api.id);\n            docs.then((response) => {\n                const documentList = response.body.list.filter((item) => item.otherTypeName !== '_overview');\n                documentList.sort(getSortOrder('name'));\n                this.setState({ docs: documentList });\n            }).catch((errorResponse) => {\n                const errorData = JSON.parse(errorResponse.message);\n                const messageTxt =\n                    'Error[' + errorData.code + ']: ' + errorData.description + ' | ' + errorData.message + '.';\n                console.error(messageTxt);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Documents.Listing.documents.listing.fetching.error.message.api.product',\n                    defaultMessage: 'Error in fetching documents list of the API Product',\n                }));\n            });\n        } else {\n            const newApi = new API();\n            const docs = newApi.getDocuments(this.props.api.id);\n            docs.then((response) => {\n                const documentList = response.body.list.filter((item) => item.otherTypeName !== '_overview');\n                documentList.sort(getSortOrder('name'));\n                this.setState({ docs: documentList });\n            }).catch((errorResponse) => {\n                const errorData = JSON.parse(errorResponse.message);\n                const messageTxt =\n                    'Error[' + errorData.code + ']: ' + errorData.description + ' | ' + errorData.message + '.';\n                console.error(messageTxt);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Documents.Listing.documents.listing.fetching.error.message',\n                    defaultMessage: 'Error in fetching documents list of the API',\n                }));\n            });\n        }\n    }\n    toggleAddDocs() {\n        this.setState((oldState) => {\n            return { showAddDocs: !oldState.showAddDocs };\n        });\n    }\n    render() {\n        const { classes, api, isAPIProduct } = this.props;\n        const { docs, showAddDocs, docsToDelete } = this.state;\n        const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n        const url = `/${urlPrefix}/${api.id}/documents/create`;\n        const showActionsColumn = isRestricted(['apim:api_publish', 'apim:api_create'], api) ? 'excluded' : true;\n        const options = {\n            title: false,\n            filter: false,\n            print: false,\n            download: false,\n            viewColumns: false,\n            customToolbar: false,\n            search: false,\n            onRowsDelete: (rowData, rowMeta, that = this) => {\n                that.setState({ docsToDelete: rowData });\n                return false;\n            },\n        };\n        const columns = [\n            {\n                name: 'documentId',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                },\n            },\n            {\n                name: 'name',\n                options: {\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const docName = tableMeta.rowData[1];\n                            const docId = tableMeta.rowData[0];\n                            return (\n                                <LinkGenerator\n                                    docName={docName}\n                                    docId={docId}\n                                    apiId={this.apiId}\n                                    apiType={api.apiType}\n                                />\n                            );\n                        }\n                        return null;\n                    },\n                    filter: false,\n                    sort: false,\n                    label: (\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Listing.column.header.name'\n                            defaultMessage='Name'\n                        />\n                    ),\n                },\n            },\n            {\n                name: 'sourceType',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Listing.column.header.source.type'\n                        defaultMessage='Source Type'\n                    />\n                ),\n                options: {\n                    sort: false,\n                },\n            },\n            {\n                name: 'type',\n                label: (\n                    <FormattedMessage id='Apis.Details.Documents.Listing.column.header.type' defaultMessage='Type' />\n                ),\n                options: {\n                    sort: false,\n                },\n            },\n            {\n                name: 'sourceUrl',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'action',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Listing.column.header.action'\n                        defaultMessage='Action'\n                    />\n                ),\n                options: {\n                    display: showActionsColumn,\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const docName = tableMeta.rowData[1];\n                            const docId = tableMeta.rowData[0];\n                            const sourceType = tableMeta.rowData[2];\n                            const sourceUrl = tableMeta.rowData[4];\n                            if (sourceType === 'MARKDOWN') {\n                                return (\n                                    <table className={classes.actionTable}>\n                                        <tr>\n                                            <td>\n                                                <MarkdownEditor docName={docName} docId={docId} apiId={this.apiId} />\n                                            </td>\n                                            <td>\n                                                <Edit\n                                                    apiType={api.apiType}\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    api\n                                                />\n                                            </td>\n                                            <td>\n                                                <Delete\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    apiType={api.apiType}\n                                                    api\n                                                />\n                                            </td>\n                                        </tr>\n                                    </table>\n                                );\n                            } else if (sourceType === 'INLINE') {\n                                return (\n                                    <table className={classes.actionTable}>\n                                        <tr>\n                                            <td>\n                                                <Suspense\n                                                    fallback={\n                                                        <FormattedMessage\n                                                            id='Apis.Details.Documents.Listing.loading'\n                                                            defaultMessage='Loading...'\n                                                        />\n                                                    }\n                                                >\n                                                    <TextEditor\n                                                        docName={docName}\n                                                        docId={docId}\n                                                        apiId={this.apiId}\n                                                        apiType={api.apiType}\n                                                    />\n                                                </Suspense>\n                                            </td>\n                                            <td>\n                                                <Edit\n                                                    apiType={api.apiType}\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    api\n                                                />\n                                            </td>\n                                            <td>\n                                                <Delete\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    apiType={api.apiType}\n                                                    api\n                                                />\n                                            </td>\n                                        </tr>\n                                    </table>\n                                );\n                            } else if (sourceType === 'URL') {\n                                return (\n                                    <table className={classes.actionTable}>\n                                        <tr>\n                                            <td>\n                                                <a href={sourceUrl}>\n                                                <Button>\n                                                    <Icon>open_in_new</Icon>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Documents.Listing.documents.open'\n                                                        defaultMessage='Open'\n                                                    />\n                                                </Button>\n                                               </a>  \n                                            </td>\n                                            <td>\n                                                <Edit\n                                                    apiType={api.apiType}\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    api\n                                                />\n                                            </td>\n                                            <td>\n                                                <Delete\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    apiType={api.apiType}\n                                                    api\n                                                />\n                                            </td>\n                                        </tr>\n                                    </table>\n                                );\n                            } else if (sourceType === 'FILE') {\n                                return (\n                                    <table className={classes.actionTable}>\n                                        <tr>\n                                            <td>\n                                                <Download docId={docId} apiId={this.apiId} docName={docName} />\n                                            </td>\n                                            <td>\n                                                <Edit\n                                                    apiType={api.apiType}\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    api\n                                                />\n                                            </td>\n                                            <td>\n                                                <Delete\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    apiType={api.apiType}\n                                                    api\n                                                />\n                                            </td>\n                                        </tr>\n                                    </table>\n                                );\n                            } else {\n                                return <span />;\n                            }\n                        }\n                        return null;\n                    },\n                    filter: false,\n                    sort: false,\n                },\n            },\n        ];\n        if(!docs){\n            return (<Progress />);\n        }\n        return (\n            <React.Fragment>\n                {docsToDelete && (\n                    <DeleteMultiple getDocumentsList={this.getDocumentsList} docsToDelete={docsToDelete} docs={docs} />\n                )}\n                <div className={classes.titleWrapper}>\n                    <Typography id='itest-api-details-documents-head' variant='h4' component='h2' className={classes.mainTitle}>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Listing.documents.listing.title'\n                            defaultMessage='Documents'\n                        />\n                    </Typography>\n                    {docs && docs.length > 0 && (\n                        <Button\n                            size='small'\n                            className={classes.button}\n                            component={Link}\n                            to={!isRestricted(['apim:api_create', 'apim:api_publish'], api) && !api.isRevision && url}\n                            disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api) || api.isRevision}\n                        >\n                            <AddCircle className={classes.buttonIcon} />\n                            <FormattedMessage\n                                id='Apis.Details.Documents.Listing.add.new.document.button'\n                                defaultMessage='Add New Document'\n                            />\n                        </Button>\n                    )}\n                </div>\n                <div>\n                    {showAddDocs && (\n                        <Create\n                            toggleAddDocs={this.toggleAddDocs}\n                            getDocumentsList={this.getDocumentsList}\n                            apiType={api.apiType}\n                        />\n                    )}\n\n                    {docs && docs.length > 0 ? (\n                        <MUIDataTable title='' data={docs} columns={columns} options={options} />\n                    ) : (\n                        <InlineMessage type='info' height={140}>\n                            <div className={classes.contentWrapper}>\n                                <Typography variant='h5' component='h3' className={classes.head}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Documents.Listing.add.new.msg.title'\n                                        defaultMessage='Create Documents'\n                                    />\n                                </Typography>\n                                {api.apiType === API.CONSTS.APIProduct\n                                    ? \n                                <Typography component='p' className={classes.content}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Documents.Listing.APIProduct.add.new.msg.content'\n                                        defaultMessage={\n                                            'You can add different types of documents to an API.' +\n                                            ' Proper documentation helps API publishers to market their ' +\n                                            ' APIs better and sustain competition. '\n                                        }\n                                    />\n                                </Typography>\n                                    : \n                                <Typography component='p' className={classes.content}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Documents.Listing.add.new.msg.content'\n                                        defaultMessage={\n                                            'You can add different types of documents to an API.' +\n                                            ' Proper documentation helps API publishers to market their ' +\n                                            ' APIs better and sustain competition. '\n                                        }\n                                    />\n                                </Typography>\n                                }\n                                <div className={classes.actions}>\n                                    <Button\n                                        id='add-new-document-btn'\n                                        variant='contained'\n                                        color='primary'\n                                        component={Link}\n                                        to={!isRestricted(['apim:api_create', 'apim:api_publish'], api) && !api.isRevision && url}\n                                        className={classes.button}\n                                        disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api) || api.isRevision}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.Listing.add.new.msg.button'\n                                            defaultMessage='Add New Document'\n                                        />\n                                    </Button>\n                                </div>\n                            </div>\n                        </InlineMessage>\n                    )}\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nListing.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n        apiType: PropTypes.oneOf([API.CONSTS.API, API.CONSTS.APIProduct]),\n    }).isRequired,\n};\n\nexport default injectIntl(withAPI(withStyles(styles)(Listing)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { FormattedMessage } from 'react-intl';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\n\nfunction GoToEdit(props) {\n    const { doc } = props;\n    const [open, setOpen] = React.useState(true);\n    const { api, isAPIProduct } = useContext(APIContext);\n    const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n    const listingPath = `/${urlPrefix}/${api.id}/documents`;\n    let docContentEditPath = null;\n    if (doc && doc.body && doc.body.documentId) {\n        docContentEditPath = `/${urlPrefix}/${api.id}/documents/${doc.body.documentId}/edit-content`;\n    }\n\n    let displayAddContent;\n    if (doc.body.sourceType === 'INLINE'  || doc.body.sourceType === 'MARKDOWN') {\n        displayAddContent = true;\n    } else {\n        displayAddContent= false;\n    }\n\n    console.info('printing doc', doc);\n    function handleClose() {\n        setOpen(false);\n    }\n\n    return (\n        <Dialog\n            open={open}\n            onClose={handleClose}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle id='alert-dialog-title'>\n                {' '}\n                <FormattedMessage\n                    id='Apis.Details.Documents.GoToEdit.title'\n                    defaultMessage='Document Created Successfully'\n                />\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText id='alert-dialog-description'>\n                    {displayAddContent ? (\n                    <FormattedMessage\n                        id='Apis.Details.Documents.GoToEdit.description.content'\n                        defaultMessage= 'You can add content to the document or go back to the document listing page.'\n                    />\n                    ) : (\n                    <FormattedMessage\n                        id='Apis.Details.Documents.GoToEdit.description.file'\n                        defaultMessage= {'You can go back to the document listing page and upload' + \n                        ' the file by editing the document.'}\n                    />\n                    )}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                {displayAddContent && (<Link\n                    to={{\n                        pathname: docContentEditPath,\n                        state: { doc: doc.body },\n                    }}\n                >\n                    <Button color='primary'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.GoToEdit.add.content'\n                            defaultMessage='Add Content'\n                        />\n                    </Button>\n                </Link>)}\n                <Link to={listingPath}>\n                    <Button color='primary' autoFocus id='add-content-back-to-listing-btn'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.GoToEdit.back.to.listing'\n                            defaultMessage='Back to Listing'\n                        />\n                    </Button>\n                </Link>\n            </DialogActions>\n        </Dialog>\n    );\n}\nGoToEdit.propTypes = {\n    doc: PropTypes.shape({}).isRequired,\n};\nexport default GoToEdit;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext, useState } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport API from 'AppData/api.js';\nimport APIProduct from 'AppData/APIProduct';\nimport Icon from '@material-ui/core/Icon';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\n\nfunction Delete(props) {\n    const { intl } = props;\n    const [open, setOpen] = useState(false);\n    const { api } = useContext(APIContext);\n\n    const runAction = (action) => {\n        if (action === 'yes') {\n            deleteDoc();\n        } else {\n            setOpen(!open);\n        }\n    };\n    const toggleOpen = () => {\n        setOpen(!open);\n    };\n    const deleteDoc = () => {\n        const {\n            apiId, docId, getDocumentsList, apiType,\n        } = props;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const docPromise = restApi.deleteDocument(apiId, docId);\n        docPromise\n            .then(() => {\n                Alert.info(`${intl.formatMessage({\n                    id: 'Apis.Details.Documents.Delete.document.delete.successfully',\n                    defaultMessage: 'deleted successfully.',\n                })}`);\n                setOpen(!open);\n                getDocumentsList();\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ apiNotFound: true });\n                }\n            });\n    };\n\n    const { apiName } = props;\n    return (\n        <div>\n            <Button onClick={toggleOpen} disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api) || api.isRevision}>\n                <Icon>delete_forever</Icon>\n                <FormattedMessage id='Apis.Details.Documents.Delete.document.delete' defaultMessage='Delete' />\n            </Button>\n            <Dialog\n                open={open}\n                onClose={toggleOpen}\n                aria-labelledby='alert-dialog-title'\n                aria-describedby='alert-dialog-description'\n            >\n                <DialogTitle id='alert-dialog-title'>\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.delete.confirm.title'\n                        defaultMessage='Delete Document'\n                    />\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id='alert-dialog-description'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Delete.document.listing.delete.confirm.body'\n                            defaultMessage={\n                                'Selected document will be deleted from the API.' +\n                                'You will not be able to undo this action.'\n                            }\n                        />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => runAction('no')} color='default'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Delete.document.listing.delete.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button onClick={() => runAction('yes')} color='primary' autoFocus>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Delete.document.listing.delete'\n                            defaultMessage='Yes. Delete'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\nDelete.propTypes = {\n    apiId: PropTypes.shape({}).isRequired,\n    apiType: PropTypes.string.isRequired,\n    docId: PropTypes.shape({}).isRequired,\n    getDocumentsList: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n        apiType: PropTypes.oneOf([API.CONSTS.API, API.CONSTS.APIProduct]),\n    }).isRequired,\n};\n\nexport default injectIntl(Delete);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport API from 'AppData/api.js';\nimport APIProduct from 'AppData/APIProduct';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Alert from 'AppComponents/Shared/Alert';\n\nfunction DeleteMultiple(props) {\n    const {\n        intl, docsToDelete, docs, getDocumentsList,\n    } = props;\n    const { api, isAPIProduct } = useContext(APIContext);\n    const restApi = isAPIProduct ? new APIProduct() : new API();\n\n    const [open, setOpen] = useState(true);\n\n    const runAction = (action) => {\n        if (action === 'yes') {\n            deleteDocs();\n        } else {\n            setOpen(!open);\n        }\n    };\n    const toggleOpen = () => {\n        setOpen(!open);\n    };\n    const deleteDocs = () => {\n        const docPromises = [];\n\n        docsToDelete.data.map((docIndexObj) => {\n            const doc = docs[docIndexObj.index];\n            docPromises.push(restApi.deleteDocument(api.id, doc.documentId));\n        });\n        Promise.all(docPromises)\n            .then((values) => {\n                console.log(values);\n                Alert.info(`${intl.formatMessage({\n                    id: 'Apis.Details.Documents.Delete.document.delete.successfully',\n                    defaultMessage: 'deleted successfully.',\n                })}`);\n                setOpen(!open);\n                getDocumentsList();\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(`${intl.formatMessage({\n                        id: 'Apis.Details.Documents.Delete.document.delete.error',\n                        defaultMessage: 'Error while deleting documents!',\n                    })}`);\n                }\n            });\n    };\n    useEffect(() => {\n        setOpen(true);\n    }, [docsToDelete]);\n\n    return (\n        <Dialog\n            open={open}\n            onClose={toggleOpen}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle id='alert-dialog-title'>\n                <FormattedMessage\n                    id='Apis.Details.Documents.Delete.selected.document.listing.delete.confirm.title'\n                    defaultMessage='Delete Selected Documents'\n                />\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText id='alert-dialog-description'>\n                    <strong>{api.name}</strong>\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.selected.document.listing.delete.confirm.body'\n                        defaultMessage={\n                            'Selected documents will be deleted from the API.' +\n                            ' You will not be able to undo this action.'\n                        }\n                    />\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => runAction('no')} color='default'>\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.delete.cancel'\n                        defaultMessage='Cancel'\n                    />\n                </Button>\n                <Button onClick={() => runAction('yes')} color='primary' autoFocus>\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.delete.yes'\n                        defaultMessage='Delete'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\nDeleteMultiple.propTypes = {\n    docs: PropTypes.instanceOf(Array).isRequired,\n    getDocumentsList: PropTypes.func.isRequired,\n    docsToDelete: PropTypes.instanceOf(Array).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(DeleteMultiple);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {useState, useEffect} from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Api from 'AppData/api';\nimport Utils from 'AppData/Utils';\n\nfunction Download(props) {\n    const { intl } = props;\n\n    const { docId, apiId, docName } = props;\n    const [isFileAvailable, setIsFileAvailable] = useState(false);\n    const [isSuccessful, setIsSuccessful] = useState(false);\n\n    useEffect(() => {\n        const api = new Api();\n        const promised_get_content = api.getFileForDocument(apiId, docId);\n        promised_get_content\n            .then((done) => {\n                setIsSuccessful(true);\n                setIsFileAvailable(true);\n            })\n            .catch((error) => {\n                setIsSuccessful(true);\n                setIsFileAvailable(false);\n            });\n    }, []);\n    const handleDownload = () => {\n        const api = new Api();\n        const promised_get_content = api.getFileForDocument(apiId, docId);\n        promised_get_content\n            .then((response) => {\n                Utils.forceDownload(response);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(intl.formatMessage({\n                        id:'Apis.Details.Documents.Download.documents.markdown.editor.download.error',\n                        defaultMessage: 'Error downloading the file',\n                    }));\n                }\n            });\n    };\n\n    return (\n        isSuccessful &&\n        <Button onClick={handleDownload} disabled={!isFileAvailable}  aria-label={'Download ' + docName}>\n            <Icon>arrow_downward</Icon>\n            <FormattedMessage\n                id='Apis.Details.Documents.Download.documents.listing.download'\n                defaultMessage='Download'\n            />\n        </Button>\n    );\n}\nDownload.propTypes = {\n    apiId: PropTypes.shape({}).isRequired,\n    docId: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(Download);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useContext, Suspense, lazy } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Icon from '@material-ui/core/Icon';\nimport Button from '@material-ui/core/Button';\nimport ReactSafeHtml from 'react-safe-html';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport TableRow from '@material-ui/core/TableRow';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Utils from 'AppData/Utils';\n\nconst ReactMarkdown = lazy(() => import('react-markdown' /* webpackChunkName: \"ViewReactMD\" */));\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    titleLink: {\n        color: theme.palette.primary.main,\n    },\n    docTitle: {\n        fontWeight: 100,\n        fontSize: 50,\n        color: theme.palette.grey[500],\n    },\n    docBadge: {\n        padding: theme.spacing(1),\n        background: theme.palette.primary.main,\n        position: 'absolute',\n        top: 0,\n        marginTop: -22,\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n    button: {\n        padding: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    displayURL: {\n        padding: theme.spacing(2),\n        marginTop: theme.spacing(2),\n        background: theme.palette.grey[200],\n        color: theme.palette.getContrastText(theme.palette.grey[200]),\n        display: 'flex',\n    },\n    displayURLLink: {\n        paddingLeft: theme.spacing(2),\n    },\n    paper: {\n        marginTop: 20,\n        padding: theme.spacing(2),\n        height: '100%',\n    },\n    leftCell: {\n        width: 150,\n    },\n    summaryView: {\n        'wordBreak': 'break-word',\n    },\n});\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction View(props) {\n    const {\n        classes,\n        fullScreen,\n        intl,\n        match: {\n            params: { documentId },\n        },\n    } = props;\n    const { api, isAPIProduct } = useContext(APIContext);\n\n    const [code, setCode] = useState('');\n    const [doc, setDoc] = useState(null);\n    const [isFileAvailable, setIsFileAvailable] = useState(true);\n    const restAPI = isAPIProduct ? new APIProduct() : new API();\n\n    useEffect(() => {\n        const docPromise = restAPI.getDocument(api.id, documentId);\n        docPromise\n            .then(doc => {\n                const { body } = doc;\n                setDoc(body);\n                if (body.sourceType === 'MARKDOWN' || body.sourceType === 'INLINE') loadContentForDoc();\n\n                if (body.sourceType === 'FILE') {\n                    const promised_get_content = restAPI.getFileForDocument(api.id, documentId);\n                    promised_get_content\n                        .then((done) => {\n                            setIsFileAvailable(true);\n                        })\n                        .catch((error) => {\n                            console.error(error);\n                            setIsFileAvailable(false);\n                        });\n                 }\n            })\n            .catch(error => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n            });\n    }, [documentId]);\n\n    const loadContentForDoc = () => {\n        const docPromise = restAPI.getInlineContentOfDocument(api.id, documentId);\n        docPromise\n            .then(doc => {\n                setCode(doc.text);\n            })\n            .catch(error => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n            });\n    };\n\n    const handleDownload = () => {\n        const promised_get_content = restAPI.getFileForDocument(api.id, documentId);\n        promised_get_content\n            .then(response => {\n                Utils.forceDownload(response);\n            })\n            .catch(error => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(\n                        intl.formatMessage({\n                            id: 'Apis.Details.Documents.View.error.downloading',\n                            defaultMessage: 'Error downloading the file',\n                        }),\n                    );\n                }\n            });\n    };\n    const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n    const listingPath = `/${urlPrefix}/${api.id}/documents`;\n    return (\n        doc && (\n            <React.Fragment>\n                <div className={classes.root}>\n                    <div className={classes.titleWrapper}>\n                        <Link to={listingPath} className={classes.titleLink}>\n                            <Typography variant=\"h5\" component='h2' align=\"left\" className={classes.mainTitle}>\n                                <FormattedMessage id=\"Apis.Details.Documents.View.heading\" defaultMessage=\"Documents\" />\n                            </Typography>\n                        </Link>\n                        <Icon>keyboard_arrow_right</Icon>\n                        <Typography variant=\"h5\" component='h3'>{doc.name}</Typography>\n                    </div>\n                    <Paper className={classes.paper}>\n                        <Table className={classes.table}>\n                            <TableBody>\n                                <TableRow>\n                                    <TableCell className={classes.leftCell}>\n                                        <Typography variant=\"body1\">\n                                            <FormattedMessage\n                                                id=\"Apis.Details.Documents.View.meta.name\"\n                                                defaultMessage=\"Name\"\n                                            />\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">{doc.name}</Typography>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">\n                                            <FormattedMessage\n                                                id=\"Apis.Details.Documents.View.meta.summary\"\n                                                defaultMessage=\"Summary\"\n                                            />\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell className={classes.summaryView}>\n                                        <Typography variant=\"body1\">{doc.summary}</Typography>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">\n                                            <FormattedMessage\n                                                id=\"Apis.Details.Documents.View.meta.catogery\"\n                                                defaultMessage=\"Categorized as\"\n                                            />\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">\n                                            {doc.type === 'OTHER' ? doc.otherTypeName : doc.type}\n                                        </Typography>{' '}\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">\n                                            <FormattedMessage\n                                                id=\"Apis.Details.Documents.View.meta.source\"\n                                                defaultMessage=\"Source Type\"\n                                            />\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">{doc.sourceType}</Typography>{' '}\n                                    </TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                    </Paper>\n\n                    <Paper className={classes.paper}>\n                        {doc.sourceType === 'MARKDOWN' && (\n                            <Suspense fallback={<CircularProgress />}>\n                                <ReactMarkdown escapeHtml>{code}</ReactMarkdown>\n                            </Suspense>\n                        )}\n                        {doc.sourceType === 'INLINE' && <ReactSafeHtml html={code} />}\n                        {doc.sourceType === 'URL' && (\n                            <a className={classes.displayURL} href={doc.sourceUrl} target=\"_blank\">\n                                {doc.sourceUrl}\n                                <Icon className={classes.displayURLLink}>open_in_new</Icon>\n                            </a>\n                        )}\n                        {doc.sourceType === 'FILE' && (\n                            <Button\n                                variant=\"contained\"\n                                color=\"default\"\n                                className={classes.button}\n                                onClick={handleDownload}\n                                disabled={!isFileAvailable}\n                            >\n                                <FormattedMessage\n                                    id=\"Apis.Details.Documents.View.btn.download\"\n                                    defaultMessage=\"Download\"\n                                />\n\n                                <Icon>arrow_downward</Icon>\n                            </Button>\n                        )}\n                    </Paper>\n                </div>\n            </React.Fragment>\n        )\n    );\n}\n\nView.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    doc: PropTypes.shape({}).isRequired,\n    apiId: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n    fullScreen: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(View));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState, Suspense, lazy } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport isEmpty from 'lodash.isempty';\nimport MarkdownEditor from './MarkdownEditor';\nimport { FormattedMessage } from 'react-intl';\nimport { Progress } from 'AppComponents/Shared';\n\nconst TextEditor = lazy(() => import('./TextEditor' /* webpackChunkName: \"EditContentTextEditor\" */));\n\nfunction EditContent(props) {\n    const [doc, setDoc] = useState(null);\n    const {\n        history: {\n            location: { state, pathname },\n            replace,\n        },\n    } = props;\n    useEffect(() => {\n        // Check if we want to show the add content screen in the case of coming from GoToEdit.jsx with history -> state props\n\n        if (!isEmpty(state)) {\n            const { doc } = state;\n            if (doc) {\n                setDoc(doc);\n            }\n        }\n    }, []);\n    return (\n        <React.Fragment>\n            {doc && doc.sourceType === 'MARKDOWN' && (\n                <MarkdownEditor docName={doc.name} docId={doc.documentId} showAtOnce />\n            )}\n            {doc && doc.sourceType === 'INLINE' && (\n                <Suspense\n                    fallback={<Progress />}\n                >\n                    <TextEditor docName={doc.name} docId={doc.documentId} showAtOnce />\n                </Suspense>\n            )}\n        </React.Fragment>\n    );\n}\nexport default withRouter(EditContent);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Api from 'AppData/api';\nimport { Progress } from 'AppComponents/Shared';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { withRouter } from 'react-router';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIRateLimiting from '../Resources/components/APIRateLimiting';\nimport Operation from './Operation';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 400,\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    scopes: {\n        width: 400,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    button: {\n        marginLeft: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n    buttonMain: {\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n        marginRight: theme.spacing(1),\n    },\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    radioGroup: {\n        display: 'flex',\n        flexDirection: 'row',\n        width: 300,\n    },\n    addResource: {\n        width: 600,\n        marginTop: 0,\n    },\n    buttonIcon: {\n        marginRight: 10,\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n});\n\n/**\n * This class defined for operation List\n */\nclass Operations extends React.Component {\n    /**\n     *\n     * @param {*} props the props parameters\n     */\n    constructor(props) {\n        super(props);\n        const { api } = props;\n        const { operations } = api;\n        const operationCopy = [...operations];\n        operationCopy.sort((a, b) => ((a.target + a.verb > b.target + b.verb) ? 1 : -1));\n        this.state = {\n            notFound: false,\n            apiPolicies: [],\n            operations: operationCopy,\n            apiThrottlingPolicy: api.apiThrottlingPolicy,\n            filterKeyWord: '',\n            isSaving: false,\n            sharedScopes: [],\n            apiScopesByName: {},\n            sharedScopesByName: {},\n        };\n\n        this.newApi = new Api();\n        this.handleUpdateList = this.handleUpdateList.bind(this);\n        this.handleApiThrottlePolicy = this.handleApiThrottlePolicy.bind(this);\n        this.updateOperations = this.updateOperations.bind(this);\n        this.handleSaveAndDeployOperations = this.handleSaveAndDeployOperations.bind(this);\n    }\n\n    /**\n     *\n     */\n    componentDidMount() {\n        const { api } = this.props;\n        const apiScopesByNameList = {};\n        const promisedResPolicies = Api.policies('api');\n        promisedResPolicies\n            .then((policies) => {\n                this.setState({ apiPolicies: policies.obj.list });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error.status;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n\n        for (const scopeObject of api.scopes) {\n            const modifiedScope = {};\n            modifiedScope.scope = scopeObject.scope;\n            modifiedScope.shared = scopeObject.shared;\n            apiScopesByNameList[scopeObject.scope.name] = modifiedScope;\n        }\n        this.setState({ apiScopesByName: apiScopesByNameList });\n        this.getAllSharedScopes();\n    }\n\n    /**\n     *\n     * @param {*} event\n     */\n    setFilterByKeyWord(event) {\n        this.setState({ filterKeyWord: event.target.value.toLowerCase() });\n    }\n\n    /**\n     * @memberof Operations\n     */\n    getAllSharedScopes() {\n        Api.getAllScopes()\n            .then((response) => {\n                if (response.body && response.body.list) {\n                    const sharedScopesList = [];\n                    const sharedScopesByNameList = {};\n                    const shared = true;\n                    for (const scope of response.body.list) {\n                        const modifiedScope = {};\n                        modifiedScope.scope = scope;\n                        modifiedScope.shared = shared;\n                        sharedScopesList.push(modifiedScope);\n                        sharedScopesByNameList[scope.name] = modifiedScope;\n                    }\n                    this.setState({ sharedScopesByName: sharedScopesByNameList });\n                    this.setState({ sharedScopes: sharedScopesList });\n                }\n            });\n    }\n\n    /**\n     *\n     *\n     * @param {*} throttlePolicy\n     * @memberof Operations\n     */\n    handleApiThrottlePolicy(apiThrottlingPolicy) {\n        this.setState({ apiThrottlingPolicy });\n    }\n\n    /**\n     *\n     * @param {*} newOperation\n     */\n    handleUpdateList(newOperation) {\n        const { operations, sharedScopesByName, apiScopesByName } = this.state;\n        const updatedList = operations.map(\n            (operation) => ((operation.target === newOperation.target && operation.verb === newOperation.verb)\n                ? newOperation : operation),\n        );\n\n        for (const selectedScope of newOperation.scopes) {\n            if (selectedScope\n                && !apiScopesByName[selectedScope]\n                && apiScopesByName[selectedScope] !== '') {\n                if (selectedScope in sharedScopesByName) {\n                    apiScopesByName[selectedScope] = sharedScopesByName[selectedScope];\n                }\n            }\n        }\n        this.setState({ apiScopesByName });\n        this.setState({ operations: updatedList });\n    }\n\n    /**\n     *\n     */\n    handleSaveAndDeployOperations() {\n        const { operations, apiThrottlingPolicy, apiScopesByName } = this.state;\n        const { api, history, updateAPI } = this.props;\n        this.setState({ isSaving: true });\n        this.updateApiScopes(operations);\n        const scopes = Object.keys(apiScopesByName).map((key) => { return apiScopesByName[key]; });\n        updateAPI({ operations, apiThrottlingPolicy, scopes }).finally(() => {\n            history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            });\n            this.setState({ isSaving: false });\n        })\n    };\n\n    /**\n     *\n     */\n    updateOperations() {\n        const { operations, apiThrottlingPolicy, apiScopesByName } = this.state;\n        const { updateAPI } = this.props;\n        this.setState({ isSaving: true });\n        this.updateApiScopes(operations);\n        const scopes = Object.keys(apiScopesByName).map((key) => { return apiScopesByName[key]; });\n        updateAPI({ operations, apiThrottlingPolicy, scopes }).finally(() => this.setState({ isSaving: false }));\n    }\n\n    /**\n     *\n     * This method modifies the security definition scopes by removing the scopes which are not present\n     * in operations and which are shared scopes\n     * @param {Array} apiOperations Operations list\n     */\n    updateApiScopes(apiOperations) {\n        const { apiScopesByName, sharedScopesByName } = this.state;\n        Object.keys(apiScopesByName).forEach((key) => {\n            let isScopeExistsInOperation = false;\n            for (const operation of apiOperations) {\n                // Checking if the scope resides in the operation\n                if (operation.scopes.includes(key)) {\n                    isScopeExistsInOperation = true;\n                    break;\n                }\n            }\n            // Checking if the scope exists in operation and is a shared scope\n            if (!isScopeExistsInOperation && (key in sharedScopesByName)) {\n                delete apiScopesByName[key];\n            }\n        });\n        this.setState({ apiScopesByName });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const { api, resourceNotFoundMessage } = this.props;\n        const {\n            operations, apiPolicies, apiThrottlingPolicy, isSaving, filterKeyWord, notFound, sharedScopes,\n        } = this.state;\n        if (notFound) {\n            return <ResourceNotFound message={resourceNotFoundMessage} />;\n        }\n        if (!operations && apiPolicies.length === 0) {\n            return <Progress />;\n        }\n        const { classes } = this.props;\n        return (\n            <>\n                <Box pb={3}>\n                    <Typography variant='h5'>\n                        <FormattedMessage\n                            id='Apis.Details.Operations.Operations.title'\n                            defaultMessage='Operations'\n                        />\n                    </Typography>\n                </Box>\n\n                <Grid container spacing={2}>\n                    <Grid item md={12}>\n                        <APIRateLimiting\n                            operationRateLimits={apiPolicies}\n                            api={api}\n                            value={apiThrottlingPolicy}\n                            onChange={this.handleApiThrottlePolicy}\n                        />\n                    </Grid>\n                    <Grid item md={2}>\n                        <Box mt={4} pb={2}>\n                            <div className={classes.searchWrapper}>\n                                <TextField\n                                    id='outlined-full-width'\n                                    disabled={isRestricted(['apim:api_publish', 'apim:api_create'])}\n                                    label='Operation'\n                                    placeholder='Filter Operations'\n                                    onChange={(e) => this.setFilterByKeyWord(e, api.operations)}\n                                    fullWidth\n                                    variant='outlined'\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                />\n                            </div>\n                        </Box>\n                    </Grid>\n                    <Grid item md={12}>\n                        <Table>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant='subtitle2'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Operations.operation.operationName'\n                                            defaultMessage='Operation'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography variant='subtitle2'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Operations.Operation.OperationType'\n                                            defaultMessage='Operation Type'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography variant='subtitle2'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Operations.Operation.throttling.policy'\n                                            defaultMessage='Rate Limiting'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography variant='subtitle2'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Operations.Operation.scopes'\n                                            defaultMessage='Scope'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography variant='subtitle2'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Operations.Operation.authType'\n                                            defaultMessage='Security Enabled'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                            </TableRow>\n                            {operations.filter(\n                                (operation) => operation.target.toLowerCase().includes(filterKeyWord),\n                            ).map((item) => {\n                                return (\n                                    <Operation\n                                        operation={item}\n                                        handleUpdateList={this.handleUpdateList}\n                                        scopes={api.scopes}\n                                        sharedScopes={sharedScopes}\n                                        isOperationRateLimiting={!apiThrottlingPolicy}\n                                        apiPolicies={apiPolicies}\n                                    />\n                                );\n                            })}\n                        </Table>\n                    </Grid>\n                    <Grid container direction='row' spacing={1} style={{ marginTop: 20 }}>\n                        <Grid item>\n                            {api.isRevision\n                                || isRestricted(['apim:api_create'], api) ? (\n                                    <Button\n                                        disabled\n                                        type='submit'\n                                        variant='contained'\n                                        color='primary'\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Operations.Operation.save'\n                                            defaultMessage='Save'\n                                        />\n                                    </Button>\n                                ) : (\n                                    <CustomSplitButton\n                                        advertiseInfo={api.advertiseInfo}\n                                        api={api}\n                                        handleSave={this.updateOperations}\n                                        handleSaveAndDeploy={this.handleSaveAndDeployOperations}\n                                        isUpdating={isSaving}\n                                    />\n                                )}\n                        </Grid>\n                        <Grid item>\n                            <Link to={'/apis/' + api.id + '/overview'}>\n                                <Button>\n                                    <FormattedMessage\n                                        id='Apis.Details.Operations.Operation.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </>\n        );\n    }\n}\n\nOperations.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        operations: PropTypes.arrayOf(PropTypes.shape({})),\n        scopes: PropTypes.arrayOf(PropTypes.string),\n        updateOperations: PropTypes.func,\n        policies: PropTypes.func,\n        id: PropTypes.string,\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    resourceNotFoundMessage: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n    updateAPI: PropTypes.func.isRequired,\n};\n\nexport default withRouter(injectIntl(withStyles(styles)(Operations)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Chip from '@material-ui/core/Chip';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\nimport Switch from '@material-ui/core/Switch';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    textField: {\n        marginLeft: theme.spacing(),\n        marginRight: theme.spacing(),\n        width: 400,\n    },\n    mainTitle: {\n        paddingLeft: 20,\n    },\n    scopes: {\n        width: 400,\n    },\n    dropDown: {\n        width: theme.spacing(11.25),\n    },\n    divider: {\n        marginTop: 20,\n        marginBottom: 20,\n    },\n    chip: {\n        margin: theme.spacing(),\n        color: theme.palette.text.secondary,\n        minWidth: 100,\n    },\n    chipActive: {\n        margin: theme.spacing(),\n        color: theme.palette.text.secondary,\n        background: theme.palette.background.active,\n        minWidth: 100,\n        borderRadius: theme.shape.borderRadius,\n    },\n    paper: {\n        padding: 20,\n    },\n    link: {\n        cursor: 'pointer',\n    },\n    listItem: {\n        paddingLeft: 0,\n        display: 'flex',\n        alignItems: 'center',\n    },\n    formControl: {\n        paddingRight: 0,\n        marginRight: 0,\n    },\n    resourceRoot: {\n        background: theme.palette.grey['100'],\n        paddingLeft: theme.spacing(),\n        paddingRight: theme.spacing(),\n        borderRadius: theme.shape.borderRadius,\n        marginBottom: theme.spacing(),\n    },\n    deleteButton: {\n        marginLeft: 'auto',\n    },\n    pathDisplay: {\n        marginRight: theme.spacing(2),\n        marginLeft: theme.spacing(2),\n    },\n    descriptionWrapper: {\n        paddingTop: theme.spacing(),\n        paddingBottom: theme.spacing(),\n    },\n    scopeSelect: {\n        width: '100%',\n    },\n    descriptionWrapperUp: {\n        paddingBottom: '0 !important',\n    },\n    addParamRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    propsForm: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    deleteLink: {\n        cursor: 'pointer',\n    },\n    row: {\n        '& td': {\n            borderBottom: 'none',\n            verticalAlign: 'bottom',\n            width: '33%',\n            paddingLeft: 0,\n        },\n    },\n});\n\n/**\n *\n */\nclass Operation extends React.Component {\n    /**\n     *\n     * @param {any} props @inheritdoc\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSecurity: false,\n        };\n        this.handleScopeChange = this.handleScopeChange.bind(this);\n        this.handlePolicyChange = this.handlePolicyChange.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    /**\n     *\n     * @param {*} operationAction event triggered for handle  Scope Change\n     */\n    handleScopeChange(operationAction) {\n        const { operation } = this.props;\n        const { data } = operationAction;\n        const { value } = data || {};\n        const defValue = value[0];\n        const newoperation = {\n            ...operation,\n            scopes: [...operation.scopes],\n        };\n        newoperation.scopes = defValue;\n        this.props.handleUpdateList(newoperation);\n    }\n\n    /**\n     *\n     * @param {*} e event triggered for handle  policy Change\n     */\n    handlePolicyChange(e) {\n        const { operation } = this.props;\n        const newoperation = { ...operation };\n        newoperation.throttlingPolicy = e.target.value;\n        this.props.handleUpdateList(newoperation);\n    }\n\n    /**\n     * @param {*} event event triggered for handle  policy Change\n     */\n    handleChange(event) {\n        const { operation } = this.props;\n        const newoperation = { ...operation };\n        const { checked } = event.target;\n        if (checked) {\n            newoperation.authType = 'Any';\n        } else {\n            newoperation.authType = 'None';\n        }\n        this.setState({\n            isSecurity: checked,\n        });\n        this.props.handleUpdateList(newoperation);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            operation, theme, classes, apiPolicies, scopes, isOperationRateLimiting, sharedScopes, intl,\n        } = this.props;\n        const dropdownScopes = [...scopes];\n        const { isSecurity } = this.state;\n        const filteredApiScopes = dropdownScopes.filter((sharedScope) => !sharedScope.shared);\n        let chipColor = theme.custom.operationChipColor\n            ? theme.custom.operationChipColor[operation.verb.toLowerCase()]\n            : null;\n        let chipTextColor = '#000000';\n        if (!chipColor) {\n            console.log('Check the theme settings. The resourceChipColors is not populated properlly');\n            chipColor = '#cccccc';\n        } else {\n            chipTextColor = theme.palette.getContrastText(\n                theme.custom.operationChipColor[operation.verb.toLowerCase()],\n            );\n        }\n        return (\n            <TableRow style={{ borderStyle: 'hidden' }}>\n                <TableCell>\n                    <Typography variant='body1'>\n                        {operation.target}\n                    </Typography>\n                </TableCell>\n                <TableCell>\n                    <Chip\n                        label={operation.verb}\n                        style={{\n                            backgroundColor: chipColor, color: chipTextColor, height: 20, width: 40, fontSize: 9,\n                        }}\n                        className={classes.chipActive}\n                    />\n                </TableCell>\n                <TableCell>\n                    <Select\n                        className={classes.dropDown}\n                        value={isOperationRateLimiting ? operation.throttlingPolicy : ''}\n                        disabled={(!isOperationRateLimiting || isRestricted(['apim:api_publish', 'apim:api_create']))}\n                        onChange={this.handlePolicyChange}\n                        fieldName='Throttling Policy'\n                    >\n                        {apiPolicies.map((policy) => (\n                            <MenuItem\n                                key={policy.name}\n                                value={policy.name}\n                            >\n                                {policy.displayName}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </TableCell>\n                <TableCell>\n                    <TextField\n                        id='operation_scope'\n                        select\n                        SelectProps={{\n                            multiple: true,\n                            renderValue: (selected) => (Array.isArray(selected) ? selected.join(', ') : selected),\n                        }}\n                        fullWidth\n                        label={dropdownScopes.length !== 0 || sharedScopes ? intl.formatMessage({\n                            id: 'Apis.Details.Operations.Operation.operation.scope.label.default',\n                            defaultMessage: 'Operation scope',\n                        }) : intl.formatMessage({\n                            id: 'Apis.Details.Operations.Operation.operation.scope.label.notAvailable',\n                            defaultMessage: 'No scope available',\n                        })}\n                        value={operation.scopes}\n                        onChange={({ target: { value } }) => this.handleScopeChange({\n                            data: { value: value ? [value] : [] },\n                        })}\n                        helperText={(\n                            <FormattedMessage\n                                id='Apis.Details.Operations.Operation.operation.scope.helperText'\n                                defaultMessage='Select a scope to control permissions to this operation'\n                            />\n                        )}\n                        margin='dense'\n                        variant='outlined'\n                        disabled={isRestricted(['apim:api_publish', 'apim:api_create'])}\n                    >\n                        <ListSubheader>\n                            <FormattedMessage\n                                id='Apis.Details.Operations.Operation.operation.scope.select.local'\n                                defaultMessage='API Scopes'\n                            />\n                        </ListSubheader>\n                        {filteredApiScopes.length !== 0 ? filteredApiScopes.map((apiScope) => (\n                            <MenuItem\n                                key={apiScope.scope.name}\n                                value={apiScope.scope.name}\n                                dense\n                            >\n                                <Checkbox checked={operation.scopes.includes(apiScope.scope.name)} color='primary' />\n                                {apiScope.scope.name}\n                            </MenuItem>\n                        )) : (\n                            <MenuItem\n                                value=''\n                                disabled\n                            >\n                                <em>\n                                    <FormattedMessage\n                                        id='Apis.Details.Operations.Operation.operation.no.api.scope.available'\n                                        defaultMessage='No API scopes available'\n                                    />\n                                </em>\n                            </MenuItem>\n                        )}\n                        <ListSubheader>\n                            <FormattedMessage\n                                id='Apis.Details.Operations.Operation.operation.scope.select.shared'\n                                defaultMessage='Shared Scopes'\n                            />\n                        </ListSubheader>\n                        {sharedScopes && sharedScopes.length !== 0 ? sharedScopes.map((sharedScope) => (\n                            <MenuItem\n                                key={sharedScope.scope.name}\n                                value={sharedScope.scope.name}\n                                dense\n                            >\n                                <Checkbox checked={operation.scopes.includes(sharedScope.scope.name)} color='primary' />\n                                {sharedScope.scope.name}\n                            </MenuItem>\n                        )) : (\n                            <MenuItem\n                                value=''\n                                disabled\n                            >\n                                <em>\n                                    <FormattedMessage\n                                        id='Apis.Details.Operations.Operation.operation.no.sharedpi.scope.available'\n                                        defaultMessage='No shared scopes available'\n                                    />\n                                </em>\n                            </MenuItem>\n                        )}\n                    </TextField>\n                </TableCell>\n                <TableCell>\n                    <Switch\n                        checked={(() => {\n                            if (operation.authType === 'None') {\n                                return false;\n                            }\n                            return true;\n                        })()}\n                        onChange={this.handleChange}\n                        value={isSecurity}\n                        color='primary'\n                        disabled={isRestricted(['apim:api_publish', 'apim:api_create'])}\n                    />\n                </TableCell>\n            </TableRow>\n        );\n    }\n}\n\nOperation.propTypes = {\n    classes: PropTypes.shape({\n    }).isRequired,\n    operation: PropTypes.shape({\n        target: PropTypes.string,\n        verb: PropTypes.string,\n        throttlingPolicy: PropTypes.string,\n        auth: PropTypes.string,\n    }).isRequired,\n    apiPolicies: PropTypes.shape({\n    }).isRequired,\n    isOperationRateLimiting: PropTypes.shape({\n    }).isRequired,\n    scopes: PropTypes.shape({\n    }).isRequired,\n    handleUpdateList: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n    sharedScopes: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Operation));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { FormattedMessage } from 'react-intl';\n\nimport Resources from './Resources';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function APIOperations() {\n    return (\n        <>\n            <Box mb={4}>\n                <Typography id='itest-api-details-resources-head' variant='h4' component='h2' gutterBottom>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.APIOperations.title'\n                        defaultMessage='Resources'\n                    />\n                </Typography>\n            </Box>\n            <Resources />\n        </>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Utils from 'AppData/Utils';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport ReportProblemOutlinedIcon from '@material-ui/icons/ReportProblemOutlined';\nimport LockIcon from '@material-ui/icons//Lock';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\n\nimport { FormattedMessage } from 'react-intl';\nimport DescriptionAndSummary from './operationComponents/DescriptionAndSummary';\nimport OperationGovernance from './operationComponents/OperationGovernance';\nimport AWSLambdaSettings from './operationComponents/AWSLambdaSettings';\nimport Parameters from './operationComponents/Parameters';\nimport SOAPToRESTListing from './operationComponents/SOAPToREST/SOAPToRESTListing';\nimport { getOperationScopes } from '../operationUtils';\n\n/**\n *\n * Handle the operation UI\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nfunction Operation(props) {\n    const {\n        operation,\n        operationsDispatcher,\n        highlight,\n        operationRateLimits,\n        api,\n        disableDelete,\n        disableUpdate,\n        onMarkAsDelete,\n        markAsDelete,\n        hideParameters,\n        spec,\n        resourcePolicy,\n        resourcePoliciesDispatcher,\n        target,\n        verb,\n        arns,\n        resolvedSpec,\n        sharedScopes,\n        setFocusOperationLevel,\n        expandedResource,\n        setExpandedResource,\n    } = props;\n    const useStyles = makeStyles((theme) => {\n        const backgroundColor = theme.custom.resourceChipColors[verb];\n        return {\n            customButton: {\n                '&:hover': { backgroundColor },\n                backgroundColor,\n                width: theme.spacing(12),\n                color: theme.palette.getContrastText(backgroundColor),\n            },\n            paperStyles: {\n                border: `1px solid ${backgroundColor}`,\n                borderBottom: '',\n            },\n            customDivider: {\n                backgroundColor,\n            },\n            linearProgress: {\n                height: '2px',\n            },\n            highlightSelected: {\n                backgroundColor: Utils.hexToRGBA(backgroundColor, 0.1),\n            },\n            contentNoMargin: {\n                margin: theme.spacing(0),\n            },\n            overlayUnmarkDelete: {\n                position: 'absolute',\n                zIndex: theme.zIndex.operationDeleteUndo,\n                right: '10%',\n            },\n            targetText: {\n                maxWidth: 180,\n                margin: '0px 20px',\n                overflow: 'hidden',\n                whiteSpace: 'nowrap',\n                textOverflow: 'ellipsis',\n                display: 'inline-block',\n            },\n            title: {\n                display: 'inline',\n                margin: `0 ${theme.spacing(5)}px`,\n            },\n        };\n    });\n    const apiOperation = api.operations[target] && api.operations[target][verb.toUpperCase()];\n    const isUsedInAPIProduct = apiOperation && Array.isArray(\n        apiOperation.usedProductIds,\n    ) && apiOperation.usedProductIds.length;\n\n    /**\n     *\n     *\n     * @param {*} event\n     */\n    function toggleDelete(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        setExpandedResource(false);\n        onMarkAsDelete({ verb, target }, !markAsDelete);\n    }\n\n    const handleExpansion = (panel) => (event, isExpanded) => {\n        setExpandedResource(isExpanded ? panel : false);\n    };\n\n    const classes = useStyles();\n    return (\n        <>\n            {markAsDelete && (\n                <Box className={classes.overlayUnmarkDelete}>\n                    <Tooltip title='Marked for delete'>\n                        <Button onClick={toggleDelete} variant='outlined' style={{ marginTop: '10px' }}>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.Operation.undo.delete'\n                                defaultMessage='Undo Delete'\n                            />\n                        </Button>\n                    </Tooltip>\n                </Box>\n            )}\n            <ExpansionPanel\n                expanded={expandedResource === verb + target}\n                onChange={handleExpansion(verb + target)}\n                disabled={markAsDelete}\n                className={classes.paperStyles}\n            >\n                <ExpansionPanelSummary\n                    className={highlight ? classes.highlightSelected : ''}\n                    disableRipple\n                    disableTouchRipple\n                    expandIcon={<ExpandMoreIcon />}\n                    id={verb + target}\n                    classes={{ content: classes.contentNoMargin }}\n                >\n                    <Grid container direction='row' justify='space-between' alignItems='center' spacing={0}>\n                        <Grid item md={4} style={{ display: 'flex', alignItems: 'center' }}>\n                            <Badge\n                                invisible={!operation['x-wso2-new']}\n                                color='error'\n                                variant='dot'\n                                style={{ display: 'inline-block' }}\n                            >\n                                <Button\n                                    disableFocusRipple\n                                    variant='contained'\n                                    aria-label={'HTTP verb ' + verb}\n                                    size='small'\n                                    className={classes.customButton}\n                                >\n                                    {verb}\n                                </Button>\n                            </Badge>\n                            <Typography\n                                display='inline-block'\n                                variant='h6'\n                                component='div'\n                                gutterBottom\n                                className={classes.targetText}\n                                title={target}\n                            >\n                                {target}\n                                {(operation.summary && operation.summary !== '') && (\n                                    <Typography\n                                        display='inline-block'\n                                        style={{ margin: '0px 30px' }}\n                                        variant='caption'\n                                        gutterBottom\n                                    >\n                                        {operation.summary}\n                                    </Typography>\n                                )}\n                            </Typography>\n                        </Grid>\n                        {(isUsedInAPIProduct) ? (\n                            <Grid item md={3}>\n                                <Box display='flex' justifyContent='center'>\n                                    <ReportProblemOutlinedIcon fontSize='small' />\n                                    <Box display='flex' ml={1} mt={1 / 4} fontSize='caption.fontSize'>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Resources.components.Operation.this.operation.'\n                                            + 'used.in.products'}\n                                            defaultMessage={'This operation is used in {isUsedInAPIProduct} API '\n                                            + 'product(s)'}\n                                            values={{ isUsedInAPIProduct }}\n                                        />\n                                    </Box>\n                                </Box>\n                            </Grid>\n                        ) : (\n                            <Grid item md={3} />\n                        )}\n                        <Grid item md={4}>\n                            <Typography\n                                display='inline'\n                                style={{ margin: '0px 30px' }}\n                                variant='caption'\n                                gutterBottom\n                            >\n                                <b>{ getOperationScopes(operation, spec).length !== 0 && 'Scope : ' }</b>\n                                { getOperationScopes(operation, spec).join(', ') }\n                            </Typography>\n                        </Grid>\n                        <Grid item md={1} justify='flex-end' alignItems='center' container>\n                            {!(disableDelete || markAsDelete) && (\n                                <Tooltip\n                                    title={\n                                        isUsedInAPIProduct\n                                            ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Resources.components.Operation.cannot.delete'\n                                                    + '.when.used.in.api.products'}\n                                                    defaultMessage='Cannot delete operation when used in an API product'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Resources.components.Operation.Delete'\n                                                    defaultMessage='Delete'\n                                                />\n                                            )\n                                    }\n                                >\n                                    <div>\n                                        <IconButton\n                                            disabled={Boolean(isUsedInAPIProduct) || disableUpdate}\n                                            onClick={toggleDelete}\n                                            aria-label='delete operation'\n                                        >\n                                            <DeleteIcon fontSize='small' />\n                                        </IconButton>\n                                    </div>\n                                </Tooltip>\n                            )}\n                            <Tooltip\n                                title={\n                                    (operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none')\n                                        ? (\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.Operation.disable.security'\n                                                    + '.when.used.in.api.products'}\n                                                defaultMessage='Security enabled'\n                                            />\n                                        )\n                                        : (\n                                            <FormattedMessage\n                                                id='Apis.Details.Resources.components.enabled.security'\n                                                defaultMessage='No security'\n                                            />\n                                        )\n                                }\n                                aria-label={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Resources.components.Operation.security.operation'\n                                        defaultMessage='Security '\n                                    />\n                                )}\n                            >\n                                <IconButton\n                                    aria-label='Security'\n                                >\n                                    {(operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none')\n                                        ? <LockIcon fontSize='small' />\n                                        : <LockOpenIcon fontSize='small' />}\n                                </IconButton>\n                            </Tooltip>\n\n                        </Grid>\n                    </Grid>\n                </ExpansionPanelSummary>\n                <Divider light className={classes.customDivider} />\n                <ExpansionPanelDetails>\n                    <Grid spacing={2} container direction='row' justify='flex-start' alignItems='flex-start'>\n                        <DescriptionAndSummary\n                            operation={operation}\n                            operationsDispatcher={operationsDispatcher}\n                            disableUpdate={disableUpdate}\n                            target={target}\n                            verb={verb}\n                        />\n                        <OperationGovernance\n                            operation={operation}\n                            operationsDispatcher={operationsDispatcher}\n                            operationRateLimits={operationRateLimits}\n                            api={api}\n                            disableUpdate={disableUpdate}\n                            spec={spec}\n                            target={target}\n                            verb={verb}\n                            sharedScopes={sharedScopes}\n                            setFocusOperationLevel={setFocusOperationLevel}\n                        />\n                        {!hideParameters && (\n                            <Parameters\n                                operation={operation}\n                                operationsDispatcher={operationsDispatcher}\n                                operationRateLimits={operationRateLimits}\n                                api={api}\n                                disableUpdate={disableUpdate}\n                                spec={spec}\n                                target={target}\n                                verb={verb}\n                                resolvedSpec={resolvedSpec}\n                            />\n                        )}\n                        {resourcePolicy && (\n                            <SOAPToRESTListing\n                                operation={operation}\n                                operationsDispatcher={operationsDispatcher}\n                                operationRateLimits={operationRateLimits}\n                                resourcePolicy={resourcePolicy}\n                                resourcePoliciesDispatcher={resourcePoliciesDispatcher}\n                                disableUpdate={disableUpdate}\n                                spec={spec}\n                                target={target}\n                                verb={verb}\n                            />\n                        )}\n                        {\n                            api.endpointConfig\n                            && api.endpointConfig.endpoint_type\n                            && api.endpointConfig.endpoint_type === 'awslambda'\n                            && (\n                                <AWSLambdaSettings\n                                    operation={operation}\n                                    operationsDispatcher={operationsDispatcher}\n                                    target={target}\n                                    verb={verb}\n                                    arns={arns}\n                                />\n                            )\n                        }\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        </>\n    );\n}\nOperation.defaultProps = {\n    highlight: false,\n    disableUpdate: false,\n    hideParameters: false,\n    disableDelete: false,\n    onMarkAsDelete: () => {},\n    markAsDelete: false,\n    operationRateLimits: [], // Response body.list from apis policies for `api` throttling policies type\n};\nOperation.propTypes = {\n    api: PropTypes.shape({ scopes: PropTypes.arrayOf(PropTypes.shape({})), resourcePolicies: PropTypes.shape({}) })\n        .isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    onMarkAsDelete: PropTypes.func,\n    resourcePoliciesDispatcher: PropTypes.func.isRequired,\n    markAsDelete: PropTypes.bool,\n    disableDelete: PropTypes.bool,\n    disableUpdate: PropTypes.bool,\n    hideParameters: PropTypes.bool,\n    resourcePolicy: PropTypes.shape({}).isRequired,\n    operation: PropTypes.shape({\n        'x-wso2-new': PropTypes.bool,\n        summary: PropTypes.string,\n    }).isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    highlight: PropTypes.bool,\n    operationRateLimits: PropTypes.arrayOf(PropTypes.shape({})),\n    arns: PropTypes.shape([]).isRequired,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n    sharedScopes: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    expandedResource: PropTypes.string.isRequired,\n    setExpandedResource: PropTypes.func.isRequired,\n};\n\nexport default React.memo(Operation);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\n/**\n *\n * Renders the operation summary and description sections\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DescriptionAndSummary(props) {\n    const {\n        operation, operationsDispatcher, disableUpdate, target, verb,\n    } = props;\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Summary\n                    {' '}\n                    {'&'}\n                    {' '}\n                    Description\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={5}>\n                <TextField\n                    margin='dense'\n                    fullWidth\n                    label='Description'\n                    multiline\n                    disabled={disableUpdate}\n                    rows='4'\n                    value={operation.description}\n                    variant='outlined'\n                    onChange={\n                        ({ target: { value } }) => operationsDispatcher(\n                            { action: 'description', data: { target, verb, value } },\n                        )\n                    }\n                />\n            </Grid>\n            <Grid item md={5}>\n                <TextField\n                    label='Summary'\n                    margin='dense'\n                    variant='outlined'\n                    fullWidth\n                    disabled={disableUpdate}\n                    multiline\n                    rows='4'\n                    value={operation.summary}\n                    onChange={({ target: { value } }) => operationsDispatcher(\n                        { action: 'summary', data: { target, verb, value } },\n                    )}\n                />\n            </Grid>\n            <Grid item md={1} />\n        </>\n    );\n}\n\nDescriptionAndSummary.propTypes = {\n    disableUpdate: PropTypes.bool,\n    operation: PropTypes.shape({\n        target: PropTypes.string.isRequired,\n        verb: PropTypes.string.isRequired,\n        spec: PropTypes.shape({}).isRequired,\n    }).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n};\n\nDescriptionAndSummary.defaultProps = {\n    disableUpdate: false,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { Link } from 'react-router-dom';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport { getOperationScopes } from '../../operationUtils';\n\n/**\n *\n * Renders the security , throttling policies and scopes selection section in the operation collapsed page\n * @export\n * @param {*} props\n * @returns\n */\nexport default function OperationGovernance(props) {\n    const {\n        operation, operationsDispatcher, operationRateLimits, api, disableUpdate, spec, target, verb, sharedScopes,\n        setFocusOperationLevel,\n    } = props;\n    const operationScopes = getOperationScopes(operation, spec);\n    const isOperationRateLimiting = api.apiThrottlingPolicy === null;\n    const filteredApiScopes = api.scopes.filter((sharedScope) => !sharedScope.shared);\n    const intl = useIntl();\n    const scrollToTop = () => {\n        setFocusOperationLevel(true);\n        document.querySelector('#react-root').scrollTop = 195;\n    };\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography gutterBottom variant='subtitle1'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.OperationGovernance.title'\n                        defaultMessage='Operation Governance'\n                    />\n                    <Typography style={{ marginLeft: '10px' }} gutterBottom variant='caption'>\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.OperationGovernance.subTitle'\n                            defaultMessage='(Security, Rate Limiting & Scopes)'\n                        />\n                    </Typography>\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item xs={1} />\n            <Grid item xs={11}>\n                <FormControl disabled={disableUpdate} component='fieldset'>\n                    <FormControlLabel\n                        control={(\n                            <Switch\n                                checked={operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none'}\n                                onChange={({ target: { checked } }) => operationsDispatcher({\n                                    action: 'authType',\n                                    data: { target, verb, value: checked },\n                                })}\n                                size='small'\n                                color='primary'\n                            />\n                        )}\n                        label='Security'\n                        labelPlacement='start'\n                    />\n                </FormControl>\n                <sup style={{ marginLeft: '10px' }}>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.OperationGovernance.Security'\n                                + '.tooltip'}\n                                defaultMessage='This will enable/disable Application Level securities defined in the\n                                Runtime Configurations page.'\n                            />\n                        )}\n                        fontSize='small'\n                        placement='right-end'\n                        interactive\n                    >\n                        <HelpOutline />\n                    </Tooltip>\n                </sup>\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={5}>\n                <Box display='flex' flexDirection='row' alignItems='flex-start'>\n                    <TextField\n                        select\n                        fullWidth={!isOperationRateLimiting}\n                        SelectProps={{\n                            autoWidth: true,\n                            IconComponent: isOperationRateLimiting ? ArrowDropDownIcon : 'span',\n                        }}\n                        disabled={disableUpdate || !isOperationRateLimiting}\n                        label={\n                            isOperationRateLimiting\n                                ? intl.formatMessage({\n                                    id: 'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.rate.limiting.policy',\n                                    defaultMessage: 'Rate limiting policy',\n                                })\n                                : (\n                                    <div>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.governed.by'}\n                                            defaultMessage='Rate limiting is governed by '\n                                        />\n                                        <Box\n                                            fontWeight='fontWeightBold'\n                                            display='inline'\n                                            color='primary.main'\n                                            cursor='pointer'\n                                        >\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.API.level'}\n                                                defaultMessage='API Level'\n                                            />\n                                        </Box>\n                                    </div>\n                                )\n                        }\n                        value={\n                            isOperationRateLimiting\n                            && operation['x-throttling-tier']\n                                ? operation['x-throttling-tier']\n                                : ''\n                        }\n                        onChange={({ target: { value } }) => operationsDispatcher({\n                            action: 'throttlingPolicy',\n                            data: { target, verb, value },\n                        })}\n                        helperText={\n                            isOperationRateLimiting\n                                ? intl.formatMessage({\n                                    id: 'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.rate.limiting.policy.select',\n                                    defaultMessage: 'Select a rate limit policy for this operation',\n                                })\n                                : (\n                                    <span>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.helperText.section1'}\n                                            defaultMessage='Use '\n                                        />\n                                        <Box fontWeight='fontWeightBold' display='inline' color='primary.main'>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.helperText.section2'}\n                                                defaultMessage='Operation Level'\n                                            />\n                                        </Box>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.helperText.section3'}\n                                            defaultMessage=' rate limiting to '\n                                        />\n                                        <b>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.helperText.section4'}\n                                                defaultMessage='enable'\n                                            />\n                                        </b>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.helperText.section5'}\n                                            defaultMessage=' rate limiting per operation'\n                                        />\n                                    </span>\n                                )\n                        }\n                        margin='dense'\n                        variant='outlined'\n                        id={verb + target + '-operation_throttling_policy'}\n                    >\n                        {operationRateLimits.map((rateLimit) => (\n                            <MenuItem\n                                key={rateLimit.name}\n                                value={rateLimit.name}\n                                id={verb + target + '-operation_throttling_policy-' + rateLimit.name}\n                            >\n                                {rateLimit.displayName}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                    {!isOperationRateLimiting && (\n                        <Button onClick={scrollToTop}>\n                            <FormattedMessage\n                                id={\n                                    'Apis.Details.Resources.components.operationComponents.'\n                                    + 'OperationGovernance.rate.limiting.button.text'\n                                }\n                                defaultMessage='Change rate limiting level'\n                            />\n                            <ExpandLessIcon />\n                        </Button>\n                    )}\n                </Box>\n            </Grid>\n            <Grid item md={6} />\n            <Grid item md={1} />\n            <Grid item md={5}>\n                { operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none' ? (\n                    <TextField\n                        select\n                        SelectProps={{\n                            multiple: true,\n                            renderValue: (selected) => (Array.isArray(selected) ? selected.join(', ') : selected),\n                        }}\n                        disabled={disableUpdate}\n                        fullWidth\n                        label={api.scopes.length !== 0 || sharedScopes ? intl.formatMessage({\n                            id: 'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.operation.scope.label.default',\n                            defaultMessage: 'Operation scope',\n                        }) : intl.formatMessage({\n                            id: 'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.operation.scope.label.notAvailable',\n                            defaultMessage: 'No scope available',\n                        })}\n                        value={operationScopes}\n                        onChange={({ target: { value } }) => operationsDispatcher({\n                            action: 'scopes',\n                            data: { target, verb, value: value ? [value] : [] },\n                        })}\n                        helperText={(\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.helperText'}\n                                defaultMessage='Select a scope to control permissions to this operation'\n                            />\n                        )}\n                        margin='dense'\n                        variant='outlined'\n                        id={verb + target + '-operation-scope-select'}\n                    >\n                        <ListSubheader>\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.select.local'}\n                                defaultMessage='API Scopes'\n                            />\n                        </ListSubheader>\n                        {filteredApiScopes.length !== 0 ? filteredApiScopes.map((apiScope) => (\n                            <MenuItem\n                                id={verb + target + '-operation-scope-' + apiScope.scope.name}\n                                key={apiScope.scope.name}\n                                value={apiScope.scope.name}\n                                dense\n                            >\n                                <Checkbox checked={operationScopes.includes(apiScope.scope.name)} color='primary' />\n                                {apiScope.scope.name}\n                            </MenuItem>\n                        )) : (\n                            <MenuItem\n                                value=''\n                                disabled\n                            >\n                                <em>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Resources.components.operationComponents.'\n                                    + 'OperationGovernance.operation.no.api.scope.available'}\n                                        defaultMessage='No API scopes available'\n                                    />\n                                </em>\n                            </MenuItem>\n                        )}\n                        <ListSubheader>\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.select.shared'}\n                                defaultMessage='Shared Scopes'\n                            />\n                        </ListSubheader>\n                        {sharedScopes && sharedScopes.length !== 0 ? sharedScopes.map((sharedScope) => (\n                            <MenuItem\n                                key={sharedScope.scope.name}\n                                value={sharedScope.scope.name}\n                                dense\n                            >\n                                <Checkbox checked={operationScopes.includes(sharedScope.scope.name)} color='primary' />\n                                {sharedScope.scope.name}\n                            </MenuItem>\n                        )) : (\n                            <MenuItem\n                                value=''\n                                disabled\n                            >\n                                <em>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Resources.components.operationComponents.'\n                                    + 'OperationGovernance.operation.no.sharedpi.scope.available'}\n                                        defaultMessage='No shared scopes available'\n                                    />\n                                </em>\n                            </MenuItem>\n                        )}\n                    </TextField>\n                ) : null }\n            </Grid>\n            <Grid item md={5} style={{ marginTop: '14px' }}>\n                { operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none' ? !disableUpdate && (\n                    <Link to={`/apis/${api.id}/scopes/create`} target='_blank'>\n                        <Typography style={{ marginLeft: '10px' }} color='primary' display='inline' variant='caption'>\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.create.new.scope'}\n                                defaultMessage='Create New Scope'\n                            />\n                            <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                        </Typography>\n                    </Link>\n                ) : null}\n            </Grid>\n            <Grid item md={1} />\n        </>\n    );\n}\n\nOperationGovernance.propTypes = {\n    disableUpdate: PropTypes.bool,\n    operation: PropTypes.shape({\n        target: PropTypes.string.isRequired,\n        verb: PropTypes.string.isRequired,\n    }).isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    operationRateLimits: PropTypes.arrayOf(PropTypes.shape({})),\n    api: PropTypes.shape({ scopes: PropTypes.arrayOf(PropTypes.shape({})) }),\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    sharedScopes: PropTypes.arrayOf(PropTypes.shape({})),\n};\n\nOperationGovernance.defaultProps = {\n    operationRateLimits: [],\n    api: { scopes: [] },\n    sharedScopes: [],\n    disableUpdate: false,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport deburr from 'lodash/deburr';\nimport Downshift from 'downshift';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Icon from '@material-ui/core/Icon';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * The renderInput function.\n * @param {any} inputProps The props that are being passed to the function.\n * @returns {any} HTML view of the inputs.\n */\nfunction renderInput(inputProps) {\n    const {\n        InputProps, classes, ref, ...other\n    } = inputProps;\n    return (\n        <TextField\n            InputProps={{\n                inputRef: ref,\n                classes: {\n                    root: classes.inputRoot,\n                    input: classes.inputInput,\n                },\n                ...InputProps,\n            }}\n            {...other}\n        />\n    );\n}\n\nrenderInput.propTypes = {\n    // eslint-disable-next-line react/forbid-prop-types\n    classes: PropTypes.shape({}).isRequired,\n    // eslint-disable-next-line react/forbid-prop-types, react/require-default-props\n    InputProps: PropTypes.shape({}),\n};\n\n/**\n * The renderSuggestion function.\n * @param {any} suggestionProps The props that are being passed to the function.\n * @returns {any} HTML view of the suggestions.\n */\nfunction renderSuggestion(suggestionProps) {\n    const {\n        suggestion, index, itemProps, highlightedIndex, selectedItem,\n    } = suggestionProps;\n    const isHighlighted = highlightedIndex === index;\n    const isSelected = (selectedItem || '').indexOf(suggestion) > -1;\n\n    return (\n        <MenuItem\n            {...itemProps}\n            key={suggestion}\n            selected={isHighlighted}\n            component='div'\n            style={{\n                fontWeight: isSelected ? 500 : 400,\n            }}\n        >\n            {suggestion}\n        </MenuItem>\n    );\n}\n\nrenderSuggestion.propTypes = {\n    highlightedIndex: PropTypes.oneOfType([PropTypes.oneOf([null]), PropTypes.number]).isRequired,\n    index: PropTypes.number.isRequired,\n    // eslint-disable-next-line react/forbid-prop-types\n    itemProps: PropTypes.shape({}).isRequired,\n    selectedItem: PropTypes.string.isRequired,\n    suggestion: PropTypes.shape('').isRequired,\n};\n\n/**\n * The getSuggestions function.\n * @param {any} value The value that are being passed to the function.\n * @param {any} arns The arns that are being passed to the function.\n * @returns {any} suggestion values.\n */\nfunction getSuggestions(value, { showEmpty = false } = {}, arns) {\n    const inputValue = deburr(value.trim()).toLowerCase();\n    const inputLength = inputValue.length;\n    let count = 0;\n    return inputLength === 0 && !showEmpty\n        ? []\n        : arns.filter((suggestion) => {\n            const keep = count < 5 && suggestion.slice(0, inputLength).toLowerCase() === inputValue;\n            if (keep) {\n                count += 1;\n            }\n            return keep;\n        });\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    container: {\n        flexGrow: 1,\n        position: 'relative',\n    },\n    paper: {\n        position: 'absolute',\n        zIndex: 1000,\n        marginTop: theme.spacing(-2),\n        left: 0,\n        right: 0,\n    },\n    chip: {\n        margin: theme.spacing(0.5, 0.25),\n    },\n    inputRoot: {\n        flexWrap: 'wrap',\n    },\n    inputInput: {\n        width: 'auto',\n        flexGrow: 1,\n    },\n}));\n\n/**\n * The autocomplete component. This component lists the ARNs of a specific user role.\n * @returns {any} HTML view of the autocomplete component.\n * @param {any} props The input parameters.\n */\nexport default function IntegrationDownshift(props) {\n    const classes = useStyles();\n    const {\n        operation,\n        operationsDispatcher,\n        target,\n        verb,\n        arns,\n    } = props;\n    const [timeout, setTimeout] = useState(50000);\n    useEffect(() => {\n        if (operation['x-amzn-resource-timeout']) {\n            setTimeout(operation['x-amzn-resource-timeout']);\n        }\n    }, []);\n    const handleTimeoutMin = (event) => {\n        if (event.target.value !== '') {\n            const minutes = parseInt(event.target.value, 10);\n            const seconds = (timeout / 1000) % 60;\n            const milliSeconds = (minutes * 60 + seconds) * 1000;\n            let newTimeout = 0;\n            if (milliSeconds > 900000) {\n                newTimeout = 900000;\n            } else if (milliSeconds < 1000) {\n                newTimeout = 1000;\n            } else {\n                newTimeout = milliSeconds;\n            }\n            setTimeout(newTimeout);\n            operationsDispatcher({\n                action: 'amznResourceTimeout',\n                data: { target, verb, value: newTimeout },\n            });\n        }\n    };\n    const handleTimeoutSec = (event) => {\n        if (event.target.value !== '') {\n            const minutes = Math.floor((timeout / 1000) / 60);\n            const seconds = parseInt(event.target.value, 10);\n            const milliSeconds = (minutes * 60 + seconds) * 1000;\n            let newTimeout = 0;\n            if (milliSeconds > 900000) {\n                newTimeout = 900000;\n            } else if (milliSeconds < 1000) {\n                newTimeout = 1000;\n            } else {\n                newTimeout = milliSeconds;\n            }\n            setTimeout(newTimeout);\n            operationsDispatcher({\n                action: 'amznResourceTimeout',\n                data: { target, verb, value: newTimeout },\n            });\n        }\n    };\n    return (\n        <>\n            <Grid item md={12} xs={12}>\n                <Typography variant='subtitle1'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.AWSLambdaSettings.Title'\n                        defaultMessage='AWS Lambda Settings'\n                    />\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item md={1} xs={1} />\n            <Grid item md={7} xs={7}>\n                <Downshift\n                    id='downshift-options'\n                    onSelect={(changes) => {\n                        if (changes !== null) {\n                            operationsDispatcher({\n                                action: 'amznResourceName',\n                                data: { target, verb, value: changes },\n                            });\n                        }\n                    }}\n                >\n                    {({\n                        clearSelection,\n                        getInputProps,\n                        getItemProps,\n                        getLabelProps,\n                        getMenuProps,\n                        highlightedIndex,\n                        inputValue,\n                        isOpen,\n                        openMenu,\n                        selectedItem,\n                    }) => {\n                        const {\n                            onBlur, onChange, onFocus, ...inputProps\n                        } = getInputProps({\n                            onChange: (event) => {\n                                operationsDispatcher({\n                                    action: 'amznResourceName',\n                                    data: { target, verb, value: event.target.value },\n                                });\n                                if (event.target.value === '') {\n                                    clearSelection();\n                                }\n                            },\n                            onBlur: () => {\n                                clearSelection();\n                            },\n                            value: operation['x-amzn-resource-name'],\n                            onFocus: openMenu,\n                            placeholder: 'Select or type an ARN',\n                        });\n                        return (\n                            <div className={classes.container}>\n                                {renderInput({\n                                    variant: 'outlined',\n                                    required: true,\n                                    fullWidth: true,\n                                    classes,\n                                    InputLabelProps: getLabelProps({ shrink: true }),\n                                    label: 'Amazon Resource Name (ARN)',\n                                    helperText: 'Select or type an ARN',\n                                    InputProps: {\n                                        onBlur,\n                                        onChange,\n                                        onFocus,\n                                        endAdornment: (\n                                            <InputAdornment position='end'>\n                                                <Icon className={classes.helpIcon}>keyboard_arrow_down</Icon>\n                                            </InputAdornment>\n                                        ),\n                                    },\n                                    inputProps,\n                                })}\n\n                                <div {...getMenuProps()}>\n                                    {isOpen ? (\n                                        <Paper className={classes.paper} square>\n                                            {getSuggestions(inputValue, { showEmpty: true }, arns)\n                                                .map((suggestion, index) => renderSuggestion({\n                                                    suggestion,\n                                                    index,\n                                                    itemProps: getItemProps({ item: suggestion }),\n                                                    highlightedIndex,\n                                                    selectedItem,\n                                                }))}\n                                        </Paper>\n                                    ) : null}\n                                </div>\n                            </div>\n                        );\n                    }}\n                </Downshift>\n            </Grid>\n            <Grid item md={1} xs={1} />\n            <Grid item md={1} xs={1}>\n                <TextField\n                    id='timeout-min'\n                    label='min'\n                    variant='outlined'\n                    helperText='Set Timeout'\n                    type='number'\n                    inputProps={{\n                        min: 0,\n                        max: 15,\n                        step: 1,\n                    }}\n                    value={Math.floor((timeout / 1000) / 60)}\n                    onChange={(event) => {\n                        handleTimeoutMin(event);\n                    }}\n                />\n            </Grid>\n            <Grid item md={1} xs={1}>\n                <TextField\n                    id='timeout-sec'\n                    label='sec'\n                    variant='outlined'\n                    type='number'\n                    inputProps={{\n                        min: 0,\n                        max: 59,\n                        step: 1,\n                    }}\n                    value={(timeout / 1000) % 60}\n                    onChange={(event) => {\n                        handleTimeoutSec(event);\n                    }}\n                />\n            </Grid>\n            <Grid item md={1} xs={1} />\n        </>\n    );\n}\n\nIntegrationDownshift.propTypes = {\n    operation: PropTypes.isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    arns: PropTypes.shape([]).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport { getVersion } from 'AppComponents/Apis/Details/Resources/operationUtils';\nimport AddParameter from './AddParameter';\nimport ListParameters from './ListParameters';\n\n/**\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function Parameters(props) {\n    const {\n        operation, spec, target, verb, operationsDispatcher, disableUpdate, resolvedSpec,\n    } = props;\n    const specVersion = getVersion(spec);\n    const haveParameters = (operation.parameters && operation.parameters.length !== 0) || operation.requestBody;\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Parameters\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item xs={1} />\n            <Grid item xs={11}>\n                {!disableUpdate && (\n                    <AddParameter\n                        target={target}\n                        verb={verb}\n                        operationsDispatcher={operationsDispatcher}\n                        operation={operation}\n                        specVersion={specVersion}\n                    />\n                )}\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={11}>\n                {haveParameters && (\n                    <ListParameters\n                        disableUpdate={disableUpdate}\n                        target={target}\n                        verb={verb}\n                        operationsDispatcher={operationsDispatcher}\n                        operation={operation}\n                        spec={spec}\n                        specVersion={specVersion}\n                        resolvedSpec={resolvedSpec}\n                    />\n                )}\n            </Grid>\n        </>\n    );\n}\n\nParameters.propTypes = {\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    operation: PropTypes.shape({}).isRequired,\n    disableUpdate: PropTypes.bool,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n};\n\nParameters.defaultProps = {\n    disableUpdate: false,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useRef, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { capitalizeFirstLetter } from 'AppData/stringFormatter';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport {\n    iff,\n    getParameter,\n    getParameterTypes,\n    getSupportedDataTypes,\n} from 'AppComponents/Apis/Details/Resources/components/operationComponents/parameterUtils';\n\nconst useStyles = makeStyles(() => ({\n    formControl: {\n        minWidth: 120,\n    },\n    parameterContainer: {\n        alignItems: 'center',\n        justifyContent: 'space-between',\n    },\n    checkBox: {\n        color: '#7c7c7c',\n    },\n}));\n\n/**\n *\n * Add resource parameter according to swagger spec\n * A unique parameter is defined by a combination of a name and param type and schema or content is required\n * OpenAPI 3.0 spec: https://swagger.io/specification/#parameterObject\n *\n * @export\n * @param {*} props\n * @returns\n */\nfunction AddParameter(props) {\n    const {\n        operation, operationsDispatcher, target, verb, specVersion, intl,\n    } = props;\n    const inputLabel = useRef(null);\n    const [labelWidth, setLabelWidth] = useState(0);\n    const initParameter = getParameter(specVersion);\n\n    /**\n     *\n     *\n     * @param {*} state\n     * @param {*} action\n     * @returns\n     */\n    function newParameterReducer(state, action) {\n        const { type, value } = action;\n        switch (type) {\n            case 'in':\n            case 'name':\n            case 'required':\n                return { ...state, [type]: value };\n            case 'type': {\n                if (specVersion === '2.0') {\n                    return { ...state, [type]: value };\n                } else {\n                    return { ...state, schema: { [type]: value } };\n                }\n            }\n            case 'clear':\n                return initParameter;\n            default:\n                return state;\n        }\n    }\n    const [newParameter, newParameterDispatcher] = useReducer(newParameterReducer, initParameter);\n    React.useEffect(() => {\n        setLabelWidth(inputLabel.current.offsetWidth);\n    }, []);\n\n    let isParameterExist = false;\n    const isParameterExistValue = operation.parameters && operation.parameters.map(\n        (operations) => (operations.in === newParameter.in && operations.name === newParameter.name),\n    );\n\n    if (isParameterExistValue && isParameterExistValue.includes(true)) {\n        isParameterExist = true;\n    } else {\n        isParameterExist = false;\n    }\n\n    const classes = useStyles();\n\n    /**\n     *\n     *\n     */\n    function clearInputs() {\n        newParameterDispatcher({ type: 'clear' });\n    }\n    /**\n     *\n     *\n     */\n    function addNewParameter() {\n        if (newParameter.in === 'body') {\n            operationsDispatcher(specVersion === '2.0'\n                ? {\n                    action: 'parameter',\n                    data: {\n                        target,\n                        verb,\n                        value: {\n                            name: newParameter.name,\n                            description: '',\n                            required: newParameter.required,\n                            in: newParameter.in,\n                            schema: {\n                                type: newParameter.type,\n                            },\n                        },\n                    },\n                }\n                : {\n                    action: 'requestBody',\n                    data: {\n                        target,\n                        verb,\n                        value: {\n                            description: '',\n                            required: newParameter.required,\n                            content: { [newParameter.name]: { schema: { type: 'object' } } },\n                        },\n                    },\n                });\n        } else {\n            operationsDispatcher({ action: 'parameter', data: { target, verb, value: newParameter } });\n        }\n        clearInputs();\n    }\n\n    function isDisabled() {\n        if (specVersion === '2.0') {\n            return (!newParameter.name || !newParameter.type || !newParameter.in || isParameterExist);\n        }\n        return (!newParameter.name || !newParameter.schema.type || !newParameter.in || isParameterExist);\n    }\n\n    function getParameterNameHelperText(paramIn) {\n        if (isParameterExist) {\n            return intl.formatMessage({\n                id: 'Apis.Details.Resources.components.operationComponents.AddParameter.parameter.name.already.exists',\n                defaultMessage: 'Parameter name already exists',\n            });\n        }\n        if (paramIn === 'body') {\n            if (specVersion !== '2.0') {\n                return intl.formatMessage({\n                    id: 'Apis.Details.Resources.components.operationComponents.AddParameter.enter.content.type',\n                    defaultMessage: 'Enter Content Type',\n                });\n            }\n        }\n        return intl.formatMessage({\n            id: 'Apis.Details.Resources.components.operationComponents.AddParameter.enter.parameter.name',\n            defaultMessage: 'Enter Parameter Name',\n        });\n    }\n\n    return (\n        <Grid container direction='row' spacing={1} className={classes.parameterContainer}>\n            <Grid item xs={2} md={2}>\n                <FormControl margin='dense' variant='outlined' className={classes.formControl}>\n                    <InputLabel ref={inputLabel} htmlFor={'param-' + verb + target} error={isParameterExist}>\n                        Parameter Type\n                    </InputLabel>\n\n                    <Select\n                        value={newParameter.in}\n                        onChange={({ target: { name, value } }) => newParameterDispatcher({ type: name, value })}\n                        labelWidth={labelWidth}\n                        inputProps={{\n                            name: 'in',\n                        }}\n                        id={'param-' + verb + target}\n                        MenuProps={{\n                            getContentAnchorEl: null,\n                            anchorOrigin: {\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            },\n                        }}\n                        error={isParameterExist}\n                    >\n                        {getParameterTypes(specVersion).map((paramType) => {\n                            if ((paramType === 'body' || paramType === 'formData')\n                                && !['post', 'put', 'patch'].includes(verb)) {\n                                return null;\n                            }\n                            return (\n                                <MenuItem value={paramType} dense id={'param-' + verb + target + '/' + paramType}>\n                                    {capitalizeFirstLetter(paramType)}\n                                </MenuItem>\n                            );\n                        })}\n                    </Select>\n                    {isParameterExist\n                        ? (\n                            <FormHelperText error>\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.parameter.name.exists'\n                                    defaultMessage='Parameter type already exists'\n                                />\n                            </FormHelperText>\n                        )\n                        : (\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.select.parameter.type'\n                                    defaultMessage='Select the parameter type'\n                                />\n                            </FormHelperText>\n                        )}\n                </FormControl>\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <TextField\n                    id={'name-' + verb + target}\n                    label={newParameter.in === 'body'\n                        ? iff(specVersion === '2.0',\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.parameter.name'\n                                defaultMessage='Parameter Name'\n                            />,\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.content.type'\n                                defaultMessage='Content Type'\n                            />)\n                        : (\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.parameter.name'\n                                defaultMessage='Parameter Name'\n                            />\n                        )}\n                    name='name'\n                    value={newParameter.name}\n                    onChange={({ target: { name, value } }) => newParameterDispatcher({ type: name, value })}\n                    helperText={getParameterNameHelperText(newParameter.in)}\n                    margin='dense'\n                    variant='outlined'\n                    onKeyPress={(event) => {\n                        if (event.key === 'Enter') {\n                            // key code 13 is for `Enter` key\n                            event.preventDefault(); // To prevent form submissions\n                            addNewParameter();\n                        }\n                    }}\n                    error={isParameterExist}\n                />\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <FormControl margin='dense' variant='outlined' className={classes.formControl}>\n                    <InputLabel ref={inputLabel} htmlFor={'data-' + verb + target} error={isParameterExist}>\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.data.type'\n                            defaultMessage='Data Type'\n                        />\n                    </InputLabel>\n\n                    <Select\n                        value={newParameter.schema !== undefined ? newParameter.schema.type : newParameter.type}\n                        onChange={({ target: { name, value } }) => newParameterDispatcher({ type: name, value })}\n                        labelWidth={labelWidth}\n                        inputProps={{\n                            name: 'type',\n                        }}\n                        id={'data-' + verb + target}\n                        MenuProps={{\n                            getContentAnchorEl: null,\n                            anchorOrigin: {\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            },\n                        }}\n                        error={isParameterExist}\n                    >\n                        {getSupportedDataTypes(specVersion, newParameter.in).map((paramType) => {\n                            return (\n                                <MenuItem value={paramType} dense id={'data-' + verb + target + '/' + paramType}>\n                                    {capitalizeFirstLetter(paramType)}\n                                </MenuItem>\n                            );\n                        })}\n                    </Select>\n                    <FormHelperText>Select the data type</FormHelperText>\n                </FormControl>\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <FormControl component='fieldset' className={classes.formControl}>\n                    <FormControlLabel\n                        className={classes.checkBox}\n                        control={(\n                            <Checkbox\n                                checked={newParameter.required}\n                                onChange={\n                                    ({\n                                        target: { name, value },\n                                    }) => newParameterDispatcher({ type: name, value: !value })\n                                }\n                                value={newParameter.required}\n                                inputProps={{\n                                    name: 'required',\n                                }}\n                            />\n                        )}\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.required'\n                                defaultMessage='Required'\n                            />\n                        )}\n                    />\n                    <FormHelperText>\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.required.helper.text'\n                            defaultMessage='Check whether the parameter is required.'\n                        />\n                    </FormHelperText>\n                </FormControl>\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <Tooltip\n                    title={(\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.AddParameter.add.tooltip'\n                            defaultMessage='Add new parameter'\n                        />\n                    )}\n                    placement='bottom'\n                    interactive\n                >\n                    <span>\n                        <Button\n                            style={{ marginLeft: '20px', marginBottom: '15px', marginRight: '20px' }}\n                            disabled={isDisabled()}\n                            size='small'\n                            variant='outlined'\n                            aria-label='Add Parameter'\n                            color='primary'\n                            onClick={addNewParameter}\n                            id = {`param-${verb}${target}-add-btn`}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.AddParameter.add'\n                                defaultMessage='Add'\n                            />\n                        </Button>\n                    </span>\n                </Tooltip>\n                <sup>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.AddParameter.clear.inputs.tooltip'\n                                defaultMessage='Clear inputs'\n                            />\n                        )}\n                        placement='bottom'\n                        interactive\n                    >\n                        <span>\n                            <IconButton onClick={clearInputs} size='small' aria-label='clear-inputs'>\n                                <ClearIcon />\n                            </IconButton>\n                        </span>\n                    </Tooltip>\n                </sup>\n            </Grid>\n        </Grid>\n    );\n}\n\nAddParameter.propTypes = {\n    operation: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    specVersion: PropTypes.string.isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default React.memo(injectIntl(AddParameter));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { capitalizeFirstLetter } from 'AppData/stringFormatter';\nimport { FormattedMessage } from 'react-intl';\nimport { isRef } from 'AppComponents/Apis/Details/Resources/operationUtils';\nimport RequestBody from 'AppComponents/Apis/Details/Resources/components/operationComponents/RequestBody';\nimport Banner from 'AppComponents/Shared/Banner';\nimport EditParameter from './EditParameter';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 650,\n    },\n});\n\n/**\n *\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ListParameters(props) {\n    const {\n        operation, operationsDispatcher, target, verb, disableUpdate, hideParameterEdit, specVersion, resolvedSpec,\n    } = props;\n    const classes = useStyles();\n    const [editingParameter, setEditingParameter] = useState(null);\n    if (!resolvedSpec) {\n        return (\n            <Banner\n                disableActions\n                dense\n                type='error'\n                message={(\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.ListParameter.parameter.spec.error'\n                        defaultMessage='Error in resolving the definition!'\n                    />\n                )}\n            />\n        );\n    }\n    return (\n        <>\n            {editingParameter !== null && (\n                <EditParameter\n                    operationsDispatcher={operationsDispatcher}\n                    target={target}\n                    verb={verb}\n                    editingParameter={editingParameter}\n                    setEditingParameter={setEditingParameter}\n                    version={specVersion}\n                />\n            )}\n            <Table className={classes.table} aria-label='parameters list'>\n                <TableHead>\n                    <TableRow>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.ListParameter.parameter.type'\n                                defaultMessage='Parameter Type'\n                            />\n                        </TableCell>\n                        <TableCell>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.ListParameter.parameter.name'\n                                defaultMessage='Name/Content Type'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.ListParameter.data.type'\n                                defaultMessage='Data Type'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.ListParameter.required'\n                                defaultMessage='Required'\n                            />\n                        </TableCell>\n                        {!disableUpdate && (\n                            <TableCell align='left'>\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.ListParameter.actions'\n                                    defaultMessage='Actions'\n                                />\n                            </TableCell>\n                        )}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {operation.parameters\n                        && operation.parameters.map((parameter, index) => {\n                            const isRefParam = isRef(parameter);\n                            const paramCopy = isRefParam\n                                ? resolvedSpec.paths[target][verb].parameters[index] : parameter;\n                            return (\n                                <TableRow\n                                    key={paramCopy.name}\n                                    id={`param-list-${paramCopy.in}-${paramCopy.name}-${paramCopy.schema\n                                        ? paramCopy.schema.type : paramCopy.type}`}>\n                                    <TableCell align='left'>{capitalizeFirstLetter(paramCopy.in)}</TableCell>\n                                    <TableCell align='left'>{paramCopy.name}</TableCell>\n                                    <TableCell align='left'>\n                                        {capitalizeFirstLetter(paramCopy.schema\n                                            ? paramCopy.schema.type : paramCopy.type)}\n                                    </TableCell>\n                                    <TableCell align='left'>\n                                        {paramCopy.required\n                                            ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Resources.components.operationComponents'\n                                                        + '.ListParameter.yes'}\n                                                    defaultMessage='Yes'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Resources.components.operationComponents'\n                                                        + '.ListParameter.no'}\n                                                    defaultMessage='No'\n                                                />\n                                            )}\n                                    </TableCell>\n                                    {!disableUpdate && (\n                                        <TableCell align='left'>\n                                            {!isRefParam && (\n                                                <Tooltip title={(\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.Resources.components.operationComponents.'\n                                                            + 'ListParameter.edit'}\n                                                        defaultMessage='Edit'\n                                                    />\n                                                )}\n                                                >\n                                                    <IconButton\n                                                        onClick={() => setEditingParameter(parameter)}\n                                                        fontSize='small'\n                                                    >\n                                                        <EditIcon fontSize='small' />\n                                                    </IconButton>\n                                                </Tooltip>\n                                            )}\n                                            <Tooltip title={(\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Resources.components.operationComponents'\n                                                        + '.ListParameter.delete'}\n                                                    defaultMessage='Delete'\n                                                />\n                                            )}\n                                            >\n                                                <IconButton\n                                                    disabled={disableUpdate}\n                                                    onClick={() => operationsDispatcher({\n                                                        action: 'deleteParameter',\n                                                        data: { target, verb, value: paramCopy },\n                                                    })}\n                                                    fontSize='small'\n                                                >\n                                                    <DeleteIcon fontSize='small' />\n                                                </IconButton>\n                                            </Tooltip>\n                                        </TableCell>\n                                    )}\n                                </TableRow>\n                            );\n                        })}\n                    {operation.requestBody && (isRef(operation.requestBody)\n                        ? Object.entries(resolvedSpec.paths[target][verb].requestBody.content).map(\n                            ([contentType, content]) => {\n                                return (\n                                    <RequestBody\n                                        contentType={contentType}\n                                        content={content}\n                                        operation={operation}\n                                        disableUpdate={disableUpdate}\n                                        hideParameterEdit={hideParameterEdit}\n                                        operationsDispatcher={operationsDispatcher}\n                                        target={target}\n                                        verb={verb}\n                                    />\n                                );\n                            },\n                        ) : Object.entries(operation.requestBody.content).map(([contentType, content]) => {\n                            return (\n                                <RequestBody\n                                    contentType={contentType}\n                                    content={content}\n                                    operation={operation}\n                                    disableUpdate={disableUpdate}\n                                    hideParameterEdit={hideParameterEdit}\n                                    operationsDispatcher={operationsDispatcher}\n                                    target={target}\n                                    verb={verb}\n                                />\n                            );\n                        }))}\n                </TableBody>\n            </Table>\n        </>\n    );\n}\n\nListParameters.defaultProps = {\n    hideParameterEdit: false,\n    disableUpdate: false,\n};\nListParameters.propTypes = {\n    operation: PropTypes.shape({}).isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    hideParameterEdit: PropTypes.bool,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    disableUpdate: PropTypes.bool,\n    specVersion: PropTypes.string.isRequired,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n};\n","/*\n *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport TableCell from '@material-ui/core/TableCell';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport TableRow from '@material-ui/core/TableRow';\n\n/**\n * Component to render the Request b\n *\n * */\nfunction RequestBody(props) {\n    const {\n        contentType, content, operation, disableUpdate, hideParameterEdit, operationsDispatcher, target, verb,\n    } = props;\n    return (\n        <TableRow key={contentType}>\n            <TableCell align='left'>\n                <FormattedMessage\n                    id='Apis.Details.Resources.components.operationComponents.ListParameter.body'\n                    defaultMessage='Body'\n                />\n            </TableCell>\n            <TableCell>{contentType}</TableCell>\n            <TableCell align='left'>{content.schema.type}</TableCell>\n            <TableCell align='left'>\n                {operation.requestBody.required\n                    ? (\n                        <FormattedMessage\n                            id={'Apis.Details.Resources.components.operationComponents'\n                            + '.ListParameter.yes'}\n                            defaultMessage='Yes'\n                        />\n                    )\n                    : (\n                        <FormattedMessage\n                            id={'Apis.Details.Resources.components.operationComponents'\n                            + '.ListParameter.no'}\n                            defaultMessage='No'\n                        />\n                    )}\n            </TableCell>\n            {!disableUpdate && (\n                <TableCell align='left'>\n                    {hideParameterEdit && (\n                        <Tooltip title='Edit'>\n                            <IconButton onClick={() => {}} fontSize='small'>\n                                <EditIcon fontSize='small' />\n                            </IconButton>\n                        </Tooltip>\n                    )}\n                    <Tooltip title={(\n                        <FormattedMessage\n                            id={'Apis.Details.Resources.components.operationComponents'\n                            + '.ListParameter.delete'}\n                            defaultMessage='Delete'\n                        />\n                    )}\n                    >\n                        <IconButton\n                            disabled={disableUpdate}\n                            onClick={() => {\n                                operationsDispatcher({\n                                    action: 'requestBody',\n                                    data: {\n                                        target,\n                                        verb,\n                                        value: {\n                                            description: '',\n                                            required: false,\n                                            content: {},\n                                        },\n                                    },\n                                });\n                            }}\n                            fontSize='small'\n                        >\n                            <DeleteIcon fontSize='small' />\n                        </IconButton>\n                    </Tooltip>\n                </TableCell>\n            )}\n        </TableRow>\n    );\n}\n\nRequestBody.propTypes = {\n    contentType: PropTypes.string.isRequired,\n    content: PropTypes.shape({}).isRequired,\n    operation: PropTypes.shape({}).isRequired,\n    disableUpdate: PropTypes.bool.isRequired,\n    hideParameterEdit: PropTypes.bool.isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n};\n\nexport default RequestBody;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { capitalizeFirstLetter } from 'AppData/stringFormatter';\nimport {\n    getSupportedDataTypes,\n    getDataFormats,\n    iff,\n} from 'AppComponents/Apis/Details/Resources/components/operationComponents/parameterUtils';\nimport { FormattedMessage } from 'react-intl';\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        display: 'flex',\n        flexDirection: 'column',\n        margin: 'auto',\n        width: 'fit-content',\n    },\n    formControl: {\n        marginTop: theme.spacing(2),\n        minWidth: 120,\n    },\n    formControlLabel: {\n        marginTop: theme.spacing(1),\n    },\n    subtleText: {\n        color: theme.palette.grey[400],\n    },\n}));\n\n/**\n *\n *\n * @export\n * @returns\n */\nexport default function EditParameter(props) {\n    const {\n        operationsDispatcher, target, verb, editingParameter, setEditingParameter, version,\n    } = props;\n    /**\n     *\n     *\n     * @param {*} currentParameter\n     * @param {*} paramAction\n     */\n    function parameterActionReducer(currentParameter, paramAction) {\n        const { action, value } = paramAction;\n        const nextParameter = currentParameter.schema\n            ? { ...currentParameter, schema: { ...currentParameter.schema } } : { ...currentParameter };\n        switch (action) {\n            case 'description':\n            case 'required':\n                nextParameter[action] = value;\n                break;\n            case 'type':\n                if (nextParameter.schema) {\n                    nextParameter.schema[action] = value;\n                } else {\n                    nextParameter[action] = value;\n                }\n                break;\n            case 'format':\n                if (nextParameter.schema) {\n                    if (value) {\n                        nextParameter.schema[action] = value;\n                    } else {\n                        delete nextParameter.schema[action];\n                    }\n                } else if (value) {\n                    nextParameter[action] = value;\n                } else {\n                    delete nextParameter[action];\n                }\n                break;\n            default:\n                break;\n        }\n        return nextParameter;\n    }\n    const [parameter, parameterActionDispatcher] = useReducer(parameterActionReducer, editingParameter);\n    const classes = useStyles();\n\n    const handleClose = () => {\n        setEditingParameter(null);\n    };\n\n    /**\n     *\n     *\n     */\n    function handelDone() {\n        operationsDispatcher({ action: 'parameter', data: { target, verb, value: parameter } });\n        handleClose();\n    }\n    const isEditing = parameter !== null;\n    if (!isEditing) {\n        return null;\n    }\n    return (\n        <Dialog fullWidth maxWidth='md' open={isEditing} onClose={handleClose} aria-labelledby='edit-parameter'>\n            <DialogTitle disableTypography id='edit-parameter'>\n                <Typography variant='h6'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.title'\n                        defaultMessage='Edit'\n                    />\n                    {' '}\n                    <Typography display='inline' variant='subtitle1'>\n                        {capitalizeFirstLetter(parameter.in)}\n                        {' '}\n                        :\n                        {parameter.name}\n                    </Typography>\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <Grid container direction='row' spacing={2} justify='flex-start' alignItems='center'>\n                    <Grid item md={6}>\n                        <TextField\n                            value={capitalizeFirstLetter(parameter.in)}\n                            disabled\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.type'\n                                    defaultMessage='Parameter Type'\n                                />\n                            )}\n                            margin='dense'\n                            variant='outlined'\n                        />\n                    </Grid>\n                    <Grid item md={6}>\n                        <TextField\n                            value={parameter.name}\n                            disabled\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.name'\n                                    defaultMessage='Name'\n                                />\n                            )}\n                            margin='dense'\n                            variant='outlined'\n                        />\n                    </Grid>\n                    <Grid item md={12}>\n                        <TextField\n                            value={parameter.description}\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.description'\n                                    defaultMessage='Description'\n                                />\n                            )}\n                            multiline\n                            rows='4'\n                            name='description'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { name, value } }) => {\n                                parameterActionDispatcher({ action: name, value });\n                            }}\n                        />\n                    </Grid>\n                    <Grid item md={6}>\n                        <FormControl\n                            required\n                            fullWidth\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.formControl}\n                        >\n                            <InputLabel required id='edit-parameter-type'>\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.data.type'\n                                    defaultMessage='Data Type'\n                                />\n                            </InputLabel>\n\n                            <Select\n                                value={parameter.schema ? parameter.schema.type : parameter.type}\n                                onChange={\n                                    ({ target: { name, value } }) => parameterActionDispatcher({ action: name, value })\n                                }\n                                inputProps={{\n                                    name: 'type',\n                                    id: 'edit-parameter-type',\n                                }}\n                                MenuProps={{\n                                    getContentAnchorEl: null,\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    },\n                                }}\n                            >\n                                {getSupportedDataTypes(version, parameter.in).map((dataType) => (\n                                    <MenuItem value={dataType} dense>\n                                        {capitalizeFirstLetter(dataType)}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                        + 'select.schema.data.type'}\n                                    defaultMessage='Select the Schema Type'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid item md={6}>\n                        <FormControl\n                            fullWidth\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.formControl}\n                            disabled={parameter.schema\n                                ? iff(\n                                    parameter.schema.type === 'boolean' || parameter.schema.type === 'object',\n                                    true,\n                                    false,\n                                )\n                                : iff(\n                                    parameter.type === 'boolean' || parameter.type === 'object',\n                                    true,\n                                    false,\n                                )}\n                        >\n                            <InputLabel id='edit-parameter-format'>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                        + 'data.format'}\n                                    defaultMessage='Data Format'\n                                />\n                            </InputLabel>\n                            <Select\n                                value={parameter.schema ? parameter.schema.format : parameter.format}\n                                onChange={\n                                    ({ target: { name, value } }) => parameterActionDispatcher({ action: name, value })\n                                }\n                                inputProps={{\n                                    name: 'format',\n                                    id: 'edit-parameter-format',\n                                }}\n                                MenuProps={{\n                                    getContentAnchorEl: null,\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    },\n                                }}\n                            >\n                                <MenuItem value='' dense className={classes.subtleText}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                            + 'select.format.of.data.type.none.option'}\n                                        defaultMessage='No Data Type'\n                                    />\n                                </MenuItem>\n                                {getDataFormats(\n                                    parameter.schema ? parameter.schema.type : parameter.type,\n                                ).map((dataType) => (\n                                    <MenuItem value={dataType} dense>\n                                        {capitalizeFirstLetter(dataType)}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                        + 'select.format.of.data.type'}\n                                    defaultMessage='Select the Format of Data Type'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid item>\n                        <FormControl component='fieldset'>\n                            <FormControlLabel\n                                control={(\n                                    <Checkbox\n                                        checked={parameter.required}\n                                        onChange={(\n                                            { target: { name, checked } },\n                                        ) => parameterActionDispatcher({ action: name, value: checked })}\n                                        value={parameter.required}\n                                        inputProps={{\n                                            name: 'required',\n                                        }}\n                                    />\n                                )}\n                                label={(\n                                    <FormattedMessage\n                                        id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                            + 'required'}\n                                        defaultMessage='Required'\n                                    />\n                                )}\n                            />\n                        </FormControl>\n                    </Grid>\n                    <Grid container direction='row' justify='flex-end' alignItems='center'>\n                        <DialogContentText>\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                    + 'use.done.button.to.persist.changes'}\n                                defaultMessage='Use DONE button in the page to persist changes'\n                            />\n                        </DialogContentText>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button size='small' onClick={handleClose} color='primary'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.close'\n                        defaultMessage='Close'\n                    />\n                </Button>\n                <Button size='small' onClick={handelDone} variant='contained' color='primary'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.done'\n                        defaultMessage='Done'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nEditParameter.propTypes = {\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    editingParameter: PropTypes.shape({}).isRequired,\n    setEditingParameter: PropTypes.func.isRequired,\n    version: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useState, Suspense, lazy, useEffect,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Button from '@material-ui/core/Button';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\n\nimport PolicyEditor from './PolicyEditor';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"SOAPToRESTMonaco\" */));\n\n/**\n *\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function SOAPToRESTListing(props) {\n    const { resourcePolicy, resourcePoliciesDispatcher } = props;\n    const [resourcePolicyIn, setResourcePolicyIn] = useState(resourcePolicy.in);\n    const [resourcePolicyOut, setResourcePolicyOut] = useState(resourcePolicy.out);\n    useEffect(() => {\n        setResourcePolicyIn(resourcePolicy.in);\n        setResourcePolicyOut(resourcePolicy.out);\n    }, [resourcePolicy]);\n    // Get use preference from OS https://material-ui.com/customization/palette/#user-preference\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const [openEditor, setOpenEditor] = useState(false);\n    const [selectedTab, setTabIndex] = useState('in');\n    const editorOptions = {\n        selectOnLineNumbers: true,\n        readOnly: true,\n        smoothScrolling: true,\n        wordWrap: 'on',\n    };\n    const selectedPolicy = selectedTab === 'in' ? resourcePolicyIn : resourcePolicyOut;\n    const editorProps = {\n        language: 'xml',\n        height: 'calc(50vh)',\n        theme: prefersDarkMode ? 'vs-dark' : 'vs',\n        value: selectedPolicy.content,\n        options: editorOptions,\n    };\n\n    /**\n     *\n     *\n     * @param {*} content\n     */\n    function setPolicyContent(content) {\n        if (selectedTab === 'in') {\n            setResourcePolicyIn({ ...resourcePolicyIn, content });\n        } else {\n            setResourcePolicyOut({ ...resourcePolicyOut, content });\n        }\n    }\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Transformation Configurations\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <Tabs\n                    value={selectedTab}\n                    indicatorColor='primary'\n                    textColor='primary'\n                    onChange={(event, tab) => setTabIndex(tab)}\n                    aria-label='Resource mediation in/out tabs'\n                >\n                    <Tab value='in' label='In' />\n                    <Tab value='out' label='Out' />\n                </Tabs>\n                <Box p={1}>\n                    <Button onClick={() => setOpenEditor(true)} variant='outlined' size='small' color='primary'>\n                        Edit\n                        {' '}\n                        <EditIcon />\n                    </Button>\n                    {!openEditor && (\n                        <Paper elevation={4}>\n                            <Suspense fallback={<CircularProgress disableShrink />}>\n                                <MonacoEditor {...editorProps} />\n                            </Suspense>\n                        </Paper>\n                    )}\n                </Box>\n            </Grid>\n            <PolicyEditor\n                resourcePoliciesDispatcher={resourcePoliciesDispatcher}\n                setPolicyContent={setPolicyContent}\n                selectedPolicy={selectedPolicy}\n                originalResourcePolicy={resourcePolicy[selectedTab]}\n                direction={selectedTab}\n                prefersDarkMode={prefersDarkMode}\n                onClose={() => setOpenEditor(false)}\n                open={openEditor}\n            />\n        </>\n    );\n}\n\nSOAPToRESTListing.defaultProps = {\n    disableUpdate: false,\n};\nSOAPToRESTListing.propTypes = {\n    resourcePoliciesDispatcher: PropTypes.func.isRequired,\n    resourcePolicy: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    disableUpdate: PropTypes.bool,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { Suspense, lazy, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Fade from '@material-ui/core/Fade';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Banner from 'AppComponents/Shared/Banner';\nimport CloseConfirmation from './CloseConfirmation';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"PolicyEditorMonaco\" */));\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        // position: 'relative',\n        top: 'auto',\n        bottom: 0,\n    },\n    title: {\n        marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n}));\n\nconst Transition = React.forwardRef((props, ref) => {\n    return <Fade in ref={ref} {...props} />;\n});\n\n/**\n *\n *\n * @export\n * @returns\n */\nexport default function PolicyEditor(props) {\n    const classes = useStyles();\n    const [api] = useAPI();\n    const {\n        open,\n        onClose,\n        prefersDarkMode,\n        originalResourcePolicy,\n        selectedPolicy,\n        setPolicyContent,\n        resourcePoliciesDispatcher,\n        direction,\n    } = props;\n    const [pageError, setPageError] = useState(null);\n    const [openConfirmation, setOpenConfirmation] = useState(false);\n    const [saving, setSaving] = useState(false);\n\n    const editorOptions = {\n        selectOnLineNumbers: true,\n        readOnly: saving,\n        smoothScrolling: true,\n        wordWrap: 'on',\n    };\n    const editorProps = {\n        language: 'xml',\n        height: 'calc(100vh)',\n        theme: prefersDarkMode ? 'vs-dark' : 'vs',\n        value: selectedPolicy.content,\n        options: editorOptions,\n        onChange: setPolicyContent,\n    };\n\n    /**\n     *\n     *\n     */\n    function confirmAndClose() {\n        // No need to confirm if user have not done any changes\n        if (selectedPolicy.content !== originalResourcePolicy.content) {\n            setOpenConfirmation(true);\n        } else {\n            onClose();\n        }\n    }\n    /**\n     *\n     *\n     */\n    function save() {\n        setSaving(true);\n        api.updateResourcePolicy(selectedPolicy)\n            .then((response) => {\n                Alert.success('Resource policy updated successfully');\n                resourcePoliciesDispatcher({ action: 'update', data: { value: response.body, direction } });\n                onClose();\n            })\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                    setPageError(error.response.body);\n                } else {\n                    // TODO add i18n ~tmkb\n                    const message = error.message || 'Something went wrong while updating resource policy!';\n                    Alert.error(message);\n                    setPageError(message);\n                }\n                console.error(error);\n            })\n            .finally(() => setSaving(false));\n    }\n\n    return (\n        <Dialog fullScreen open={open} onClose={onClose} TransitionComponent={Transition}>\n            <AppBar position='fixed' color='default' className={classes.appBar}>\n                <Toolbar variant='dense'>\n                    <Grid container direction='row' justify='flex-start' alignItems='flex-start'>\n                        <Grid item>\n                            <Button\n                                disabled={saving}\n                                variant='outlined'\n                                color='primary'\n                                className={classes.title}\n                                onClick={save}\n                            >\n                                save & close\n                                {saving && <CircularProgress size={18} />}\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button color='inherit' className={classes.title} onClick={confirmAndClose}>\n                                close\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Toolbar>\n            </AppBar>\n            <Grid container direction='row' justify='center' alignItems='center'>\n                {pageError && (\n                    <Grid item xs={12}>\n                        <Banner\n                            onClose={() => setPageError(null)}\n                            disableActions\n                            dense\n                            paperProps={{ elevation: 1 }}\n                            type='error'\n                            message={pageError}\n                        />\n                    </Grid>\n                )}\n            </Grid>\n            <Grid item xs={12}>\n                <Suspense fallback={<CircularProgress disableShrink />}>\n                    <MonacoEditor {...editorProps} />\n                </Suspense>\n            </Grid>\n            <CloseConfirmation\n                open={openConfirmation}\n                onClose={() => {\n                    setPolicyContent(originalResourcePolicy.content);\n                    setOpenConfirmation(false);\n                }}\n                closeEditor={onClose}\n            />\n        </Dialog>\n    );\n}\nPolicyEditor.defaultProps = {\n    open: false,\n    onClose: () => {},\n    prefersDarkMode: false,\n\n};\nPolicyEditor.propTypes = {\n    open: PropTypes.bool,\n    onClose: PropTypes.func,\n    prefersDarkMode: PropTypes.bool,\n    originalResourcePolicy: PropTypes.shape({}).isRequired,\n    selectedPolicy: PropTypes.shape({}).isRequired,\n    setPolicyContent: PropTypes.func.isRequired,\n    resourcePoliciesDispatcher: PropTypes.func.isRequired,\n    direction: PropTypes.oneOf(['in', 'out']).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n/**\n *\n *\n * @export\n * @returns\n */\nexport default function CloseConfirmation(props) {\n    const { open, onClose, closeEditor } = props;\n\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle id='alert-dialog-title'>Discard changes and Close</DialogTitle>\n            <DialogContent>\n                <DialogContentText id='alert-dialog-description'>\n                    All the unsaved changes will be lost\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} color='primary'>\n                    Cancel\n                </Button>\n                <Button\n                    onClick={() => {\n                        onClose();\n                        closeEditor();\n                    }}\n                    color='primary'\n                    autoFocus\n                >\n                    Close\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nCloseConfirmation.propTypes = {\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    closeEditor: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { Link } from 'react-router-dom';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    link: {\n        color: theme.palette.primary.dark,\n        marginLeft: theme.spacing(2),\n        display: 'inline',\n    },\n}));\n\n/**\n *\n * Simply reders the edit api definition link in the bottom of the resources listing\n * @export\n * @param {*} props\n * @returns\n */\nexport default function GoToDefinitionLink(props) {\n    const { api, message } = props;\n    const classes = useStyles();\n    return (\n        <Box m={1}>\n            <Link to={`/apis/${api.id}/api definition`}>\n                <Typography className={classes.link} variant='caption'>\n                    {message}\n                    <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                </Typography>\n            </Link>\n        </Box>\n    );\n}\nGoToDefinitionLink.defaultProps = {\n    message: 'Edit API Definition',\n};\nGoToDefinitionLink.propTypes = {\n    api: PropTypes.shape({ id: PropTypes.string }).isRequired,\n    message: PropTypes.string,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport DeleteSweepIcon from '@material-ui/icons/DeleteSweep';\nimport isEmpty from 'lodash.isempty';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearAllIcon from '@material-ui/icons/ClearAll';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport LockIcon from '@material-ui/icons//Lock';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport LockOpenTwoToneIcon from '@material-ui/icons/LockOpenTwoTone';\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nexport default function OperationsSelector(props) {\n    const {\n        selectedOperations, setSelectedOperation, operations, enableSecurity, disableSecurity,\n    } = props;\n    const [apiFromContext] = useAPI();\n\n    // TODO: Following logic introduce a limitation in showing `indeterminate` icon state if user\n    // select all -> unchecked one operation -> recheck same operation again ~tmkb\n    const isIndeterminate = !isEmpty(selectedOperations);\n    /**\n     *\n     *\n     * @param {*} event\n     */\n    function handleSelector() {\n        setSelectedOperation(isIndeterminate ? {} : operations);\n    }\n\n    let operationCount = 0;\n    let operationWithSecurityCount = 0;\n\n    Object.entries(operations).forEach(([, verbObj]) => {\n        Object.entries(verbObj).forEach(([, operation]) => {\n            if (operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none') {\n                operationWithSecurityCount++;\n            }\n            operationCount++;\n        });\n    });\n\n    return (\n        <Grid container direction='row' justify='space-between' alignItems='center'>\n            <Grid item />\n            <Grid item>\n                <Box mr={17.25} display='flex'>\n                    { (operationWithSecurityCount === 0)\n                    && (\n                        <Tooltip\n                            title='Enable security for all'\n                        >\n                            <div>\n                                <IconButton\n                                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    onClick={enableSecurity}\n                                    aria-label='enable security for all'\n                                    size='large'\n                                >\n                                    <LockOpenIcon />\n                                </IconButton>\n                            </div>\n                        </Tooltip>\n                    )}\n                    { (operationWithSecurityCount === operationCount)\n                    && (\n                        <Tooltip\n                            title='Disable security for all'\n                        >\n                            <div>\n                                <IconButton\n                                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    onClick={disableSecurity}\n                                    aria-label='disable security for all'\n                                    size='large'\n                                >\n                                    <LockIcon />\n                                </IconButton>\n                            </div>\n                        </Tooltip>\n                    )}\n                    { (operationWithSecurityCount !== 0 && operationWithSecurityCount !== operationCount)\n                    && (\n                        <Tooltip\n                            title='Enable security for all'\n                        >\n                            <div>\n                                <IconButton\n                                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    onClick={enableSecurity}\n                                    aria-label='enable security for all'\n                                    size='large'\n                                >\n                                    <LockOpenTwoToneIcon />\n                                </IconButton>\n                            </div>\n                        </Tooltip>\n                    )}\n                    <Tooltip title={isIndeterminate ? 'Clear selections' : 'Mark all for delete'}>\n                        <div>\n                            <IconButton\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                onClick={handleSelector}\n                                aria-label='Mark all for delete'\n                                size='large'\n                            >\n                                {isIndeterminate ? <ClearAllIcon /> : <DeleteSweepIcon />}\n                            </IconButton>\n                        </div>\n                    </Tooltip>\n                </Box>\n            </Grid>\n        </Grid>\n    );\n}\n\nOperationsSelector.defaultProps = {};\n\nOperationsSelector.propTypes = {\n    selectedOperations: PropTypes.shape({}).isRequired,\n    setSelectedOperation: PropTypes.func.isRequired,\n    operations: PropTypes.shape({}).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { FormattedMessage } from 'react-intl';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport Box from '@material-ui/core/Box';\nimport API from 'AppData/api';\nimport { isRestricted } from 'AppData/AuthManager';\n\nimport Resources from 'AppComponents/Apis/Details/Resources/Resources';\nimport APIRateLimiting from '../Resources/components/APIRateLimiting';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function APIProductOperations() {\n    const [api, updateAPI] = useAPI();\n    const [apiThrottlingPolicy, setApiThrottlingPolicy] = useState(api.apiThrottlingPolicy);\n    const [operationRateLimits, setOperationRateLimits] = useState([]);\n    const [isSaving, setIsSaving] = useState(false);\n    useEffect(() => {\n        // Fetch API level throttling policies only when the page get mounted for the first time `componentDidMount`\n        API.policies('api').then((response) => {\n            setOperationRateLimits(response.body.list);\n        });\n        // TODO: need to handle the error cases through catch ~tmkb\n    }, []);\n\n    useEffect(() => {\n        setApiThrottlingPolicy(api.apiThrottlingPolicy);\n    }, [api.apiThrottlingPolicy]);\n\n    /**\n     *\n     *\n     */\n    function saveChanges() {\n        setIsSaving(true);\n        updateAPI({ apiThrottlingPolicy }).finally(() => setIsSaving(false));\n    }\n    return (\n        <Grid container spacing={4}>\n            <Grid item md={12}>\n                <Typography variant='h4' gutterBottom>\n                    Product Resources\n                </Typography>\n                <Box component='div' display='inline'>\n                    <Link to={'/api-products/' + api.id + '/resources/edit'}>\n                        <Button\n                            variant='contained'\n                            color='primary'\n                            disabled={isRestricted(['apim:api_publish', 'apim:api_create'])}\n                        >\n                            <EditIcon />\n                            <FormattedMessage\n                                id='Apis.Details.Resources.Resources.edit.resources.button'\n                                defaultMessage='Edit Resources'\n                            />\n                        </Button>\n                    </Link>\n                </Box>\n            </Grid>\n            <Grid item md={12}>\n                <APIRateLimiting\n                    operationRateLimits={operationRateLimits}\n                    api={api}\n                    isAPIProduct\n                    value={apiThrottlingPolicy}\n                    onChange={setApiThrottlingPolicy}\n                />\n            </Grid>\n            {!isRestricted(['apim:api_create'], api) && (\n                <Grid item md={12}>\n                    <Box ml={1}>\n                        <Button\n                            onClick={saveChanges}\n                            disabled={api.isRevision}\n                            variant='contained'\n                            size='small'\n                            color='primary'\n                        >\n                            Save\n                            {isSaving && <CircularProgress size={24} />}\n                        </Button>\n                        <Box display='inline' ml={1}>\n                            <Button\n                                size='small'\n                                variant='outlined'\n                                onClick={() => setApiThrottlingPolicy(api.apiThrottlingPolicy)}\n                            >\n                                Reset\n                            </Button>\n                        </Box>\n                    </Box>\n                </Grid>\n            )}\n\n            <Grid item md={12}>\n                <Resources\n                    hideAPIDefinitionLink\n                    disableUpdate\n                    disableRateLimiting\n                    operationProps={{ disableDelete: true }}\n                    disableMultiSelect\n                    disableAddOperation\n                />\n            </Grid>\n        </Grid>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable array-callback-return */\n/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"operationObj\"] }] */\n\nimport React, { useState, useContext } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport cloneDeep from 'lodash.clonedeep';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport ProductResourcesEditWorkspace from './ProductResourcesEditWorkspace';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingBottom: theme.spacing(2),\n    },\n    buttonWrapper: {\n        marginTop: theme.spacing(4),\n    },\n}));\n\n/**\n *\n *\n * @returns\n */\nfunction ProductResourcesEdit() {\n    const classes = useStyles();\n\n    // Get the current api product object from the context\n    const { api, updateAPI } = useContext(APIContext);\n    const apiCopy = cloneDeep(api);\n    const history = useHistory();\n    const { apis } = apiCopy;\n\n    // Define states\n    const [apiResources, setApiResources] = useState(apis);\n    const [isUpdating, setUpdating] = useState(false);\n    // Initialize the rest api libraries\n\n    const handleSave = () => {\n        setUpdating(true);\n\n        const updatePromise = updateAPI({ apis: apiResources }, true);\n        updatePromise\n            .then(() => {\n                setUpdating(false);\n            })\n            .catch((error) => {\n                setUpdating(false);\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    };\n\n    const handleSaveAndDeploy = () => {\n        setUpdating(true);\n\n        const updatePromise = updateAPI({ apis: apiResources }, true);\n        updatePromise\n            .then(() => {\n                setUpdating(false);\n            })\n            .catch((error) => {\n                setUpdating(false);\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 401) {\n                    doRedirectToLogin();\n                }\n            }).finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n    };\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.titleWrapper}>\n                <Typography variant='h4' align='left' className={classes.mainTitle}>\n                    <FormattedMessage\n                        id='Apis.Details.ProductResources.ProductResourcesEdit.title'\n                        defaultMessage='Manage Resources'\n                    />\n                </Typography>\n            </div>\n            <div className={classes.contentWrapper}>\n                <ProductResourcesEditWorkspace\n                    apiResources={apiResources}\n                    setApiResources={setApiResources}\n                    api={api}\n                />\n                <div className={classes.buttonWrapper}>\n                    <Grid container direction='row' alignItems='flex-start' spacing={1}>\n                        <Grid item>\n                            <div>\n                                <CustomSplitButton\n                                    advertiseInfo={api.advertiseInfo}\n                                    api={api}\n                                    handleSave={handleSave}\n                                    handleSaveAndDeploy={handleSaveAndDeploy}\n                                    isUpdating={isUpdating}\n                                    id='save-product-resources'\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item>\n                            <Link to={'/apis/' + api.id + '/overview'}>\n                                <Button>\n                                    <FormattedMessage\n                                        id='Apis.Details.ProductResources.ProductResourcesEdit.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ProductResourcesEdit;\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n    useContext, useEffect, useState, useReducer,\n} from 'react';\nimport { Grid } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport { Link, withRouter } from 'react-router-dom';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport NewEndpointCreate from 'AppComponents/Apis/Details/Endpoints/NewEndpointCreate';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport cloneDeep from 'lodash.clonedeep';\nimport { isRestricted } from 'AppData/AuthManager';\nimport EndpointOverview from './EndpointOverview';\nimport { createEndpointConfig, getEndpointTemplateByType } from './endpointUtils';\n\nconst styles = (theme) => ({\n    endpointTypesWrapper: {\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'row',\n        margin: '2px',\n    },\n    root: {\n        flexGrow: 1,\n        paddingRight: '10px',\n    },\n    buttonSection: {\n        marginTop: theme.spacing(2),\n    },\n    radioGroup: {\n        display: 'flex',\n        flexDirection: 'row',\n        marginLeft: theme.spacing(2),\n    },\n    endpointValidityMessage: {\n        color: theme.palette.error.main,\n    },\n    errorMessageContainer: {\n        marginTop: theme.spacing(1),\n    },\n    implSelectRadio: {\n        padding: theme.spacing(1) / 2,\n    },\n});\n\nconst defaultSwagger = { paths: {} };\n\n/**\n * The base component of the endpoints view.\n * @param {any} props The props passed to the layout\n * @returns {any} HTML representation.\n */\nfunction Endpoints(props) {\n    const { classes, intl, history } = props;\n    const { api, updateAPI } = useContext(APIContext);\n    const [swagger, setSwagger] = useState(defaultSwagger);\n    const [endpointValidity, setAPIEndpointsValid] = useState({ isValid: true, message: '' });\n    const [isUpdating, setUpdating] = useState(false);\n\n    const apiReducer = (initState, configAction) => {\n        const tmpEndpointConfig = cloneDeep(initState.endpointConfig);\n        const { action, value } = configAction;\n        switch (action) {\n            case 'production_endpoints':\n            case 'sandbox_endpoints': {\n                if (value) {\n                    return { ...initState, endpointConfig: { ...tmpEndpointConfig, [action]: value } };\n                }\n                delete tmpEndpointConfig[action];\n                return { ...initState, endpointConfig: { ...tmpEndpointConfig } };\n            }\n            case 'select_endpoint_category': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'set_lb_config': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'add_endpoint': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'set_advance_config': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'remove_endpoint': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'endpointImplementationType': { // set implementation status\n                const { endpointType, implementationType } = value;\n                const config = createEndpointConfig(endpointType);\n                if (endpointType === 'prototyped') {\n                    if (implementationType === 'mock') {\n                        api.generateMockScripts(api.id).then((res) => { // generates mock/sample payloads\n                            setSwagger(res.obj);\n                        });\n                        return { ...initState, endpointConfig: config, endpointImplementationType: 'INLINE' };\n                    }\n                    return { ...initState, endpointConfig: config, endpointImplementationType: 'ENDPOINT' };\n                }\n                return { ...initState, endpointConfig: config };\n            }\n            case 'endpointSecurity': { // set endpoint security\n                const config = cloneDeep(initState.endpointConfig);\n                const tmpSecurityInfo = cloneDeep(value);\n                return { ...initState, endpointConfig: { ...config, endpoint_security: tmpSecurityInfo } };\n            }\n            case 'endpoint_type': { // set endpoint type\n                const config = getEndpointTemplateByType(\n                    value.category,\n                    value.endpointType === 'address',\n                    tmpEndpointConfig,\n                );\n                return { ...initState, endpointConfig: { ...config } };\n            }\n            case 'set_inline_or_mocked_oas': {\n                const { endpointImplementationType, endpointConfig } = value;\n                if (endpointImplementationType === 'INLINE') {\n                    api.generateMockScripts(api.id).then((res) => { // generates mock/sample payloads\n                        setSwagger(res.obj);\n                    });\n                }\n                return { ...initState, endpointConfig, endpointImplementationType };\n            }\n            case 'set_prototyped': {\n                const { endpointImplementationType, endpointConfig } = value;\n                return {\n                    ...initState,\n                    endpointImplementationType,\n                    endpointConfig,\n                };\n            }\n            case 'set_awsCredentials': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'select_endpoint_type': {\n                const { endpointImplementationType, endpointConfig } = value;\n                return {\n                    ...initState,\n                    endpointConfig,\n                    endpointImplementationType,\n                };\n            }\n            case 'set_service': {\n                return {\n                    ...initState,\n                    serviceInfo: value\n                };\n            }\n            default: {\n                return initState;\n            }\n        }\n    };\n    const [apiObject, apiDispatcher] = useReducer(apiReducer, api.toJSON());\n\n    /**\n     * Method to update the api.\n     *\n     * @param {boolean} isRedirect Used for dynamic endpoints to redirect to the runtime config page.\n     */\n    const handleSave = (isRedirect) => {\n        const { endpointConfig, endpointImplementationType, serviceInfo } = apiObject;\n        if (endpointConfig.endpoint_type === 'service') {\n            endpointConfig.endpoint_type = 'http';\n        }\n        setUpdating(true);\n        if (endpointImplementationType === 'INLINE' || endpointImplementationType === 'MOCKED_OAS') {\n            api.updateSwagger(swagger).then((resp) => {\n                setSwagger(resp.obj);\n            }).then(() => {\n                updateAPI({ endpointConfig, endpointImplementationType, serviceInfo });\n            }).finally(() => {\n                setUpdating(false);\n                if (isRedirect) {\n                    history.push('/apis/' + api.id + '/policies');\n                }\n            });\n        } else {\n            const apiObjectCopy = cloneDeep(apiObject);\n            if (apiObjectCopy.endpointConfig.endpoint_type === 'service') {\n                apiObjectCopy.endpointConfig.endpoint_type = 'http';\n            }\n            updateAPI(apiObjectCopy).finally(() => {\n                setUpdating(false);\n                if (isRedirect) {\n                    history.push('/apis/' + api.id + '/policies');\n                }\n            });\n        }\n    };\n\n    const handleSaveAndDeploy = () => {\n        const { endpointConfig, endpointImplementationType, endpointSecurity, serviceInfo } = apiObject;\n        if (endpointConfig.endpoint_type === 'service') {\n            endpointConfig.endpoint_type = 'http';\n        }\n        setUpdating(true);\n        if (endpointImplementationType === 'INLINE' || endpointImplementationType === 'MOCKED_OAS') {\n            api.updateSwagger(swagger).then((resp) => {\n                setSwagger(resp.obj);\n            }).then(() => {\n                updateAPI({ endpointConfig, endpointImplementationType, endpointSecurity, serviceInfo });\n            }).finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n        } else {\n            const apiObjectCopy = cloneDeep(apiObject);\n            if (apiObjectCopy.endpointConfig.endpoint_type === 'service') {\n                apiObjectCopy.endpointConfig.endpoint_type = 'http';\n            }\n            updateAPI(apiObjectCopy).finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n        }\n    };\n\n    /**\n     * Validate the provided endpoint config object.\n     *\n     * @param {any} endpointConfig The provided endpoint config for validation.\n     * @param {string} implementationType The api implementation type (INLINE/ENDPOINT/MOCKED_OAS)\n     * @return {{isValid: boolean, message: string}} The endpoint validity information.\n     * */\n    const validate = (implementationType) => {\n        const { endpointConfig } = apiObject;\n        if (endpointConfig && endpointConfig.endpoint_security) {\n            const { production, sandbox } = endpointConfig.endpoint_security;\n            if (production && production.enabled) {\n                if (production.type === 'OAUTH') {\n                    if (production.grantType === 'PASSWORD') {\n                        if (production.tokenUrl === null\n                            || production.tokenUrl === ''\n                            || production.clientId === null\n                            || production.clientSecret === null\n                            || production.username === null\n                            || production.username === ''\n                            || production.password === null) {\n                            return {\n                                isValid: false,\n                                message: intl.formatMessage({\n                                    id: 'Apis.Details.Endpoints.Endpoints.missing.security.oauth.password.error',\n                                    defaultMessage: 'Endpoint Security Token URL'\n                                            + '/API Key/API Secret/Username/Password should not be empty',\n                                }),\n                            };\n                        }\n                    } else if (production.grantType === 'CLIENT_CREDENTIALS') {\n                        if (production.tokenUrl === null\n                            || production.tokenUrl === ''\n                            || production.clientId === null\n                            || production.clientSecret === null) {\n                            return {\n                                isValid: false,\n                                message: intl.formatMessage({\n                                    id: 'Apis.Details.Endpoints.Endpoints.missing.security.oauth.client.error',\n                                    defaultMessage: 'Endpoint Security Token URL'\n                                            + '/API Key/API Secret should not be empty',\n                                }),\n                            };\n                        }\n                    }\n                } else if (production.username === '' || production.password === null) {\n                    return {\n                        isValid: false,\n                        message: intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.Endpoints.missing.security.username.error',\n                            defaultMessage: 'Endpoint Security User Name/ Password should not be empty',\n                        }),\n                    };\n                }\n            }\n            if (sandbox && sandbox.enabled) {\n                if (sandbox.type === 'OAUTH') {\n                    if (sandbox.grantType === 'PASSWORD') {\n                        if (sandbox.tokenUrl === null\n                            || sandbox.tokenUrl === ''\n                            || sandbox.clientId === null\n                            || sandbox.clientSecret === null\n                            || sandbox.username === null\n                            || sandbox.username === ''\n                            || sandbox.password === null) {\n                            return {\n                                isValid: false,\n                                message: intl.formatMessage({\n                                    id: 'Apis.Details.Endpoints.Endpoints.missing.security.oauth.password.error',\n                                    defaultMessage: 'Endpoint Security Token URL'\n                                            + '/API Key/API Secret/Username/Password should not be empty',\n                                }),\n                            };\n                        }\n                    } else if (sandbox.grantType === 'CLIENT_CREDENTIALS') {\n                        if (sandbox.tokenUrl === null\n                            || sandbox.tokenUrl === ''\n                            || sandbox.clientId === null\n                            || sandbox.clientSecret === null) {\n                            return {\n                                isValid: false,\n                                message: intl.formatMessage({\n                                    id: 'Apis.Details.Endpoints.Endpoints.missing.security.oauth.client.error',\n                                    defaultMessage: 'Endpoint Security Token URL'\n                                            + '/API Key/API Secret should not be empty',\n                                }),\n                            };\n                        }\n                    }\n                } else if (sandbox.username === '' || sandbox.password === null) {\n                    return {\n                        isValid: false,\n                        message: intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.Endpoints.missing.security.username.error',\n                            defaultMessage: 'Endpoint Security User Name/ Password should not be empty',\n                        }),\n                    };\n                }\n            }\n        }\n        if (endpointConfig === null) {\n            return { isValid: true, message: '' };\n        }\n        const endpointType = endpointConfig.endpoint_type;\n        if (endpointType === 'awslambda') {\n            if (endpointConfig.access_method === 'stored') {\n                if (endpointConfig.amznAccessKey === '' || endpointConfig.amznSecretKey === ''\n                || endpointConfig.amznRegion === '') {\n                    return {\n                        isValid: false,\n                        message: intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.Endpoints.missing.accessKey.secretKey.error',\n                            defaultMessage: 'Access Key, Secret Key and Region should not be empty',\n                        }),\n                    };\n                }\n            }\n            if (endpointConfig.amznAccessKey !== '' && endpointConfig.amznSecretKey === 'AWS_SECRET_KEY') {\n                return {\n                    isValid: false,\n                    message: '',\n                };\n            }\n        } else if (endpointType === 'load_balance') {\n            /**\n             * Checklist:\n             *  production/ sandbox endpoints should be an array.\n             *  production/ sandbox endpoint [0] must be present.\n             * */\n            if (endpointConfig.production_endpoints && endpointConfig.production_endpoints.length > 0) {\n                if (!endpointConfig.production_endpoints[0].url\n                    || (endpointConfig.production_endpoints[0].url\n                        && endpointConfig.production_endpoints[0].url === '')) {\n                    return {\n                        isValid: false,\n                        message: intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.Endpoints.missing.prod.endpoint.loadbalance',\n                            defaultMessage: 'Default Production Endpoint should not be empty',\n                        }),\n                    };\n                }\n            }\n            if (endpointConfig.sandbox_endpoints && endpointConfig.sandbox_endpoints.length > 0) {\n                if (!endpointConfig.sandbox_endpoints[0].url\n                    || (endpointConfig.sandbox_endpoints[0].url && endpointConfig.sandbox_endpoints[0].url === '')) {\n                    return {\n                        isValid: false,\n                        message: intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.Endpoints.missing.sandbox.endpoint.loadbalance',\n                            defaultMessage: 'Default Sandbox Endpoint should not be empty',\n                        }),\n                    };\n                }\n            }\n        } else {\n            let isValidEndpoint = false;\n            if (endpointConfig.implementation_status === 'prototyped') {\n                if (implementationType === 'ENDPOINT') {\n                    if (endpointConfig.production_endpoints && endpointConfig.production_endpoints.url === '') {\n                        return {\n                            isValid: false,\n                            message: intl.formatMessage({\n                                id: 'Apis.Details.Endpoints.Endpoints.missing.prototype.url',\n                                defaultMessage: 'Prototype Endpoint URL should not be empty',\n                            }),\n                        };\n                    }\n                }\n                isValidEndpoint = true;\n            } else if (endpointConfig.production_endpoints && !endpointConfig.sandbox_endpoints) {\n                isValidEndpoint = endpointConfig.production_endpoints.url !== '';\n            } else if (endpointConfig.sandbox_endpoints && !endpointConfig.production_endpoints) {\n                isValidEndpoint = endpointConfig.sandbox_endpoints.url !== '';\n            } else if (!endpointConfig.sandbox_endpoints && !endpointConfig.production_endpoints) {\n                isValidEndpoint = false;\n            } else {\n                isValidEndpoint = endpointConfig.sandbox_endpoints.url !== ''\n                        || endpointConfig.production_endpoints.url !== '';\n            }\n            if (endpointConfig.sandbox_endpoints) {\n                isValidEndpoint &&= endpointConfig.sandbox_endpoints.url !== '';\n            }\n            if (endpointConfig.production_endpoints) {\n                isValidEndpoint &&= endpointConfig.production_endpoints.url !== '';\n            }\n            return !isValidEndpoint ? {\n                isValid: false,\n                message: intl.formatMessage({\n                    id: 'Apis.Details.Endpoints.Endpoints.missing.endpoint.error',\n                    defaultMessage: 'Either one of Production or Sandbox Endpoints should be added.',\n                }),\n            } : { isValid: true, message: '' };\n        }\n        return {\n            isValid: true,\n            message: '',\n        };\n    };\n\n    useEffect(() => {\n        if (api.type !== 'WS') {\n            api.getSwagger(apiObject.id).then((resp) => {\n                setSwagger(resp.obj);\n            }).catch((err) => {\n                console.err(err);\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        setAPIEndpointsValid(validate(apiObject.endpointImplementationType));\n    }, [apiObject]);\n\n    const saveAndRedirect = () => {\n        handleSave(true);\n    };\n    /**\n     * Method to update the swagger object.\n     *\n     * @param {any} swaggerObj The updated swagger object.\n     * */\n    const changeSwagger = (swaggerObj) => {\n        setSwagger(swaggerObj);\n    };\n\n    /**\n     * Generate endpoint configuration based on the selected endpoint type and set to the api object.\n     *\n     * @param {string} endpointType The endpoint type.\n     * @param {string} implementationType The endpoint implementationType. (Required only for prototype endpoints)\n     * */\n    const generateEndpointConfig = (endpointType, implementationType) => {\n        apiDispatcher({ action: 'endpointImplementationType', value: { endpointType, implementationType } });\n    };\n\n    return (\n        <>\n            {/* Since the api is set to the state in component did mount, check both the api and the apiObject. */}\n            {(api.endpointConfig === null && apiObject.endpointConfig === null)\n                ? <NewEndpointCreate generateEndpointConfig={generateEndpointConfig} apiType={apiObject.type} />\n                : (\n                    <div className={classes.root}>\n                        <Typography\n                            id='itest-api-details-endpoints-head'\n                            variant='h4'\n                            component='h2'\n                            align='left'\n                            gutterBottom\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.Endpoints.endpoints.header'\n                                defaultMessage='Endpoints'\n                            />\n                        </Typography>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={12} className={classes.endpointsContainer}>\n                                    <EndpointOverview\n                                        swaggerDef={swagger}\n                                        updateSwagger={changeSwagger}\n                                        api={apiObject}\n                                        onChangeAPI={apiDispatcher}\n                                        endpointsDispatcher={apiDispatcher}\n                                        saveAndRedirect={saveAndRedirect}\n                                    />\n                                </Grid>\n                            </Grid>\n                            {\n                                endpointValidity.isValid\n                                    ? <div />\n                                    : (\n                                        <Grid item className={classes.errorMessageContainer}>\n                                            <Typography className={classes.endpointValidityMessage}>\n                                                {endpointValidity.message}\n                                            </Typography>\n                                        </Grid>\n                                    )\n                            }\n                            <Grid\n                                container\n                                direction='row'\n                                alignItems='flex-start'\n                                spacing={1}\n                                className={classes.buttonSection}\n                            >\n                                <Grid item>\n                                    {api.isRevision || !endpointValidity.isValid\n                                        || isRestricted(['apim:api_create'], api) ? (\n                                            <Button\n                                                disabled\n                                                type='submit'\n                                                variant='contained'\n                                                color='primary'\n                                            >\n                                                <FormattedMessage\n                                                    id='Apis.Details.Configuration.Configuration.save'\n                                                    defaultMessage='Save'\n                                                />\n                                            </Button>\n                                        ) : (\n                                            <CustomSplitButton\n                                                advertiseInfo={api.advertiseInfo}\n                                                api={api}\n                                                handleSave={handleSave}\n                                                handleSaveAndDeploy={handleSaveAndDeploy}\n                                                isUpdating={isUpdating}\n                                                id='endpoint-save-btn'\n                                            />\n                                        )}\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        component={Link}\n                                        to={'/apis/' + api.id + '/overview'}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Endpoints.Endpoints.cancel'\n                                            defaultMessage='Cancel'\n                                        />\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </div>\n                )}\n        </>\n\n    );\n}\n\nEndpoints.propTypes = {\n    classes: PropTypes.shape({\n        root: PropTypes.shape({}),\n        buttonSection: PropTypes.shape({}),\n        endpointTypesWrapper: PropTypes.shape({}),\n        mainTitle: PropTypes.shape({}),\n    }).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    history: PropTypes.shape({}).isRequired,\n};\n\nexport default withRouter(injectIntl(withStyles(styles)(Endpoints)));\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React, { useState } from 'react';\nimport {\n    Typography,\n    Grid,\n    withStyles,\n    RadioGroup,\n    FormControlLabel,\n    Radio,\n    FormControl,\n    Divider,\n    Button,\n    Card,\n    CardContent,\n    CardActions,\n} from '@material-ui/core';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nconst styles = (theme) => ({\n    inlineMessageContainer: {\n        marginBottom: theme.spacing(1),\n    },\n    endpointTypeCard: {\n        margin: theme.spacing(1),\n        maxWidth: theme.spacing(30),\n        transition: 'box-shadow 0.3s ease-in-out',\n        height: theme.spacing(40),\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    cardContent: {\n        height: theme.spacing(40),\n    },\n    content: {\n        marginTop: theme.spacing(1),\n    },\n    cardActions: {\n        justifyContent: 'flex-end',\n        borderTop: 'solid #e0e0e0 thin',\n    },\n});\n\n/**\n * Component to create new endpoint.\n * This component will render if the api object does not have an endpoint configuration, letting users to create a\n * new endpoint configuration based on their requirement.\n * Following endpoint types are supported.\n * 1. HTTP/ SOAP endpoints\n * 2. Prototyped/ Mock endpoints\n * 3. AWS Lambda endpoints\n * 4. Dynamic Endpoints\n *\n * @param {any} props The input props.\n * @return {any} The HTML representation of the component.\n * */\nfunction NewEndpointCreate(props) {\n    const {\n        classes,\n        intl,\n        generateEndpointConfig,\n        apiType,\n    } = props;\n    const [endpointImplType, setImplType] = useState('mock');\n    const endpointTypes = [\n        {\n            type: 'http',\n            name: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.http.endpoint',\n                defaultMessage: 'HTTP/ REST Endpoint',\n            }),\n            description: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.http.endpoint.description',\n                defaultMessage: 'A REST API endpoint based on a URI template.',\n            }),\n            options: null,\n            disabled: ['SOAPTOREST'],\n        },\n        {\n            type: 'service',\n            name: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.service.endpoint',\n                defaultMessage: 'Service Endpoint',\n            }),\n            description: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.service.endpoint.description',\n                defaultMessage: 'A REST API endpoint based on a Service in the service catalog.',\n            }),\n            options: null,\n            disabled: ['SOAPTOREST'],\n        },\n        {\n            type: 'address',\n            name: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.soap.endpoint',\n                defaultMessage: 'HTTP/ SOAP Endpoint',\n            }),\n            description: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.soap.endpoint.description',\n                defaultMessage: 'The direct URI of the web service.',\n            }),\n            options: null,\n            disabled: ['GRAPHQL', 'SSE'],\n        },\n        {\n            type: 'prototyped',\n            name: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.prototype.endpoint',\n                defaultMessage: 'Mock Implementation',\n            }),\n            description: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.prototype.endpoint.description',\n                defaultMessage: 'Use the inbuilt JavaScript engine to prototype the API '\n                + 'The inbuilt JavaScript engine does support prototype SOAP APIs',\n            }),\n            options: null,\n            disabled: ['GRAPHQL', 'SSE'],\n        },\n        {\n            type: 'dynamic',\n            name: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.dynamic.endpoint',\n                defaultMessage: 'Dynamic Endpoint',\n            }),\n            description: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.dynamic.endpoint.description',\n                defaultMessage: 'If you need to send the request to the URI specified in the TO header.',\n            }),\n            options: null,\n            disabled: ['SSE'],\n        },\n        {\n            type: 'awslambda',\n            name: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.awslambda.endpoint',\n                defaultMessage: 'AWS Lambda Endpoint',\n            }),\n            description: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.awslambda.endpoint.description',\n                defaultMessage: 'If you need to invoke AWS Lambda functions through API gateway.',\n            }),\n            options: null,\n            disabled: ['SOAPTOREST', 'GRAPHQL', 'SSE'],\n        },\n    ];\n\n    const eligibleTypes = endpointTypes.filter((type) => !type.disabled.includes(apiType)).map((type) => {\n        return type;\n    });\n\n    return (\n        <>\n            <Typography variant='h4' align='left' className={classes.titleWrapper}>\n                <FormattedMessage\n                    id='Apis.Details.Endpoints.NewEndpointCreate.add.endpoints.header'\n                    defaultMessage='Select an Endpoint Type to Add'\n                />\n            </Typography>\n            <Grid container justify='flex-start' spacing={2}>\n                {eligibleTypes.map(((type) => {\n                    return (\n                        <Grid item className={classes.inlineMessageContainer}>\n                            <Card className={classes.endpointTypeCard}>\n                                <CardContent className={classes.cardContent}>\n                                    <Typography variant='h5' component='h3' className={classes.head}>\n                                        {type.name}\n                                    </Typography>\n                                    <Divider />\n                                    <Typography component='p' className={classes.content}>\n                                        {type.description}\n                                    </Typography>\n                                    {type.options\n                                        ? (\n                                            <div>\n                                                <FormControl component='fieldset' className={classes.formControl}>\n                                                    <RadioGroup\n                                                        aria-label='EndpointType'\n                                                        name='endpointType'\n                                                        className={classes.radioGroup}\n                                                        value={endpointImplType}\n                                                        onChange={(event) => { setImplType(event.target.value); }}\n                                                    >\n                                                        {type.options.filter((types) => !types.disabled\n                                                            .includes(apiType)).map(((option) => {\n                                                            return (\n                                                                <FormControlLabel\n                                                                    value={option.type}\n                                                                    control={<Radio color='primary' />}\n                                                                    label={option.name}\n                                                                />\n                                                            );\n                                                        }))}\n                                                    </RadioGroup>\n                                                </FormControl>\n                                            </div>\n                                        )\n                                        : <div /> }\n                                </CardContent>\n                                <CardActions className={classes.cardActions}>\n                                    <Button\n                                        color='primary'\n                                        className={classes.button}\n                                        onClick={() => generateEndpointConfig(type.type, endpointImplType)}\n                                        data-testid={type.name.replace(/\\s/g, '').toLowerCase() + '-add-btn'}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Endpoints.NewEndpointCreate.create.button'\n                                            defaultMessage='Add'\n                                        />\n                                    </Button>\n                                </CardActions>\n                            </Card>\n                        </Grid>\n                    );\n                }))}\n            </Grid>\n        </>\n    );\n}\n\nNewEndpointCreate.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    generateEndpointConfig: PropTypes.func.isRequired,\n    apiType: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(injectIntl(NewEndpointCreate));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n    useEffect, useState, useCallback,\n} from 'react';\nimport {\n    FormControl,\n    Grid,\n    Paper,\n    Typography,\n    withStyles,\n    Radio,\n    FormControlLabel,\n    Collapse,\n    RadioGroup, Checkbox, Dialog, DialogTitle, DialogContent, IconButton, Button, DialogActions, Icon,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { Progress } from 'AppComponents/Shared';\nimport CONSTS from 'AppData/Constants';\n\nimport cloneDeep from 'lodash.clonedeep';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport ServiceCatalog from 'AppData/ServiceCatalog';\nimport Alert from 'AppComponents/Shared/Alert';\nimport MockImplEndpoints from 'AppComponents/Apis/Details/Endpoints/Prototype/MockImplEndpoints';\nimport {\n    getEndpointTypeProperty,\n    createEndpointConfig,\n    getEndpointTemplate,\n} from './endpointUtils';\nimport GeneralConfiguration from './GeneralConfiguration';\nimport LoadbalanceFailoverConfig from './LoadbalanceFailoverConfig';\nimport GenericEndpoint from './GenericEndpoint';\nimport AdvanceEndpointConfig from './AdvancedConfig/AdvanceEndpointConfig';\nimport EndpointSecurity from './GeneralConfiguration/EndpointSecurity';\nimport Credentials from './AWSLambda/Credentials.jsx';\nimport ServiceEndpoint from './ServiceEndpoint';\n\nconst styles = (theme) => ({\n    listing: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n    endpointContainer: {\n        paddingLeft: theme.spacing(2),\n        padding: theme.spacing(1),\n    },\n    endpointName: {\n        paddingLeft: theme.spacing(1),\n        fontSize: '1rem',\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n    },\n    endpointTypesWrapper: {\n        padding: theme.spacing(3),\n        marginTop: theme.spacing(2),\n    },\n    sandboxHeading: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    radioGroup: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    endpointsWrapperLeft: {\n        padding: theme.spacing(1),\n        borderRight: '#c4c4c4',\n        borderRightStyle: 'solid',\n        borderRightWidth: 'thin',\n    },\n    endpointsWrapperRight: {\n        padding: theme.spacing(1),\n    },\n    endpointsTypeSelectWrapper: {\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        padding: theme.spacing(1),\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    endpointTypesSelectWrapper: {\n        display: 'flex',\n    },\n    defaultEndpointWrapper: {\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    configDialogHeader: {\n        fontWeight: '600',\n    },\n    addLabel: {\n        padding: theme.spacing(2),\n    },\n    buttonIcon: {\n        marginRight: theme.spacing(1),\n    },\n    button: {\n        textTransform: 'none',\n    },\n});\n\nconst endpointTypes = [\n    { key: 'http', value: 'HTTP/REST Endpoint' },\n    { key: 'default', value: 'Dynamic Endpoints' },\n    { key: 'address', value: 'HTTP/SOAP Endpoint' },\n    { key: 'prototyped', value: 'Prototype Endpoint' },\n    { key: 'INLINE', value: 'Mock Implementation' },\n    { key: 'awslambda', value: 'AWS Lambda' },\n    { key: 'service', value: 'Service Endpoint' },\n    { key: 'MOCKED_OAS', value: 'Mock Implementation' },\n];\n\n/**\n * The endpoint overview component. This component holds the views of endpoint creation and configuration.\n * @param {any} props The props that are being passed to the component.\n * @returns {any} HTML view of the endpoints overview.\n */\nfunction EndpointOverview(props) {\n    const {\n        classes,\n        api,\n        endpointsDispatcher,\n        swaggerDef,\n        updateSwagger,\n        saveAndRedirect,\n    } = props;\n    const { endpointConfig } = api;\n    const [endpointType, setEndpointType] = useState(endpointTypes[0]);\n    const [supportedEnpointTypes, setSupportedEndpointType] = useState([]);\n\n    const [epConfig, setEpConfig] = useState(endpointConfig);\n    const [endpointSecurityInfo, setEndpointSecurityInfo] = useState(null);\n    const [advanceConfigOptions, setAdvancedConfigOptions] = useState({\n        open: false,\n        index: 0,\n        type: '',\n        category: '',\n        config: undefined,\n    });\n    const [endpointSecurityConfig, setEndpointSecurityConfig] = useState({\n        open: false,\n        type: '',\n        category: '',\n        config: undefined,\n    });\n    const [endpointCategory, setEndpointCategory] = useState({ sandbox: false, prod: false });\n    const [typeChangeConfirmation, setTypeChangeConfirmation] = useState({ openDialog: false, serviceInfo:\n    (api.serviceInfo) });\n    const [servicesList, setServicesList] = useState([]);\n\n    const handleToggleEndpointSecurity = () => {\n        const tmpSecurityInfo = !endpointSecurityInfo ? {\n            production: CONSTS.DEFAULT_ENDPOINT_SECURITY,\n            sandbox: CONSTS.DEFAULT_ENDPOINT_SECURITY,\n        } : endpointSecurityInfo;\n        setEndpointSecurityInfo(tmpSecurityInfo);\n    };\n\n    /**\n     * Method to get the type of the endpoint. (HTTP/REST or HTTP/SOAP)\n     * In failover/ loadbalance cases, the endpoint type is presented in the endpoints list. Therefore that property\n     * needs to be extracted separately.\n     *\n     * @param {Object} apiObject  The representative type of the endpoint.\n     * @return {string} The type of the endpoint.\n     * */\n    const getEndpointType = (apiObject) => {\n        const type = apiObject.endpointConfig && apiObject.endpointConfig.endpoint_type;\n        if (apiObject.endpointImplementationType === 'INLINE') {\n            return endpointTypes[4];\n        } else if (apiObject.endpointImplementationType === 'MOCKED_OAS') {\n            return endpointTypes[7];\n        } else if (apiObject.endpointImplementationType === 'ENDPOINT'\n            && apiObject.endpointConfig.implementation_status === 'prototyped') {\n            return endpointTypes[3];\n        } else if (type === 'http') {\n            if (typeChangeConfirmation.serviceInfo) {\n                return endpointTypes[6];\n            }\n            return endpointTypes[0];\n        } else if (type === 'default') {\n            return endpointTypes[1];\n        } else if (type === 'address') {\n            return endpointTypes[2];\n        } else if (type === 'awslambda') {\n            return endpointTypes[5];\n        } else if (type === 'service') {\n            return endpointTypes[6];\n        } else {\n            const availableEndpoints = (endpointConfig.production_endpoints && endpointConfig.production_endpoints)\n                || (endpointConfig.sandbox_endpoints && endpointConfig.sandbox_endpoints);\n            // Handle the all endpoints de-select condition... Rollback to http.\n            if (!availableEndpoints) {\n                return endpointTypes[0];\n            }\n            if (Array.isArray(availableEndpoints)) {\n                return availableEndpoints[0].endpoint_type !== undefined\n                    ? endpointTypes[2] : endpointTypes[0];\n            }\n            return availableEndpoints.endpoint_type !== undefined\n                ? endpointTypes[2] : endpointTypes[0];\n        }\n    };\n\n    /**\n     * Method to get the supported endpoint types by api type.\n     *\n     * @param {Object} apiObject  The representative type of the endpoint.\n     * @return {string} The supported endpoint types.\n     * */\n    const getSupportedType = (apiObject) => {\n        const { type } = apiObject;\n        let supportedEndpointTypes = [];\n        if (type === 'GRAPHQL') {\n            supportedEndpointTypes = [\n                { key: 'http', value: 'HTTP/REST Endpoint' },\n                { key: 'service', value: 'Service Endpoint' },\n                { key: 'default', value: 'Dynamic Endpoints' },\n            ];\n        } else if (type === 'SOAP' || type === 'SOAPTOREST') {\n            supportedEndpointTypes = [\n                { key: 'address', value: 'HTTP/SOAP Endpoint' },\n                { key: 'default', value: 'Dynamic Endpoints' },\n            ];\n        } else if (type === 'SSE') {\n            supportedEndpointTypes = [\n                { key: 'http', value: 'HTTP/REST Endpoint' },\n                { key: 'service', value: 'Service Endpoint' },\n            ];\n        } else {\n            supportedEndpointTypes = [\n                { key: 'http', value: 'HTTP/REST Endpoint' },\n                { key: 'service', value: 'Service Endpoint' },\n                { key: 'address', value: 'HTTP/SOAP Endpoint' },\n                { key: 'default', value: 'Dynamic Endpoints' },\n                { key: 'INLINE', value: 'Mock Implementation' },\n                { key: 'awslambda', value: 'AWS Lambda' },\n            ];\n        }\n        return supportedEndpointTypes;\n    };\n\n    /**\n     * Retrieve the service list from the service catalog\n     */\n    function getServices() {\n        const promisedServices = ServiceCatalog.getServiceList();\n        promisedServices.then((response) => {\n            setServicesList(response.list);\n\n        }).catch((error) => {\n            if (error.response) {\n                Alert.error(error.response.body.description);\n            } else {\n                Alert.error(\n                    <FormattedMessage\n                        id='Apis.Details.APIDefinition.Addservice.service.retrieve.error'\n                        defaultMessage='Something went wrong while retrieving the services'\n                    />,\n                );\n            }\n            console.error(error);\n        });\n    }\n\n    useEffect(() => {\n        const supportedTypeLists = getSupportedType(api);\n        const epType = getEndpointType(api);\n        if (epType.key === 'service') {\n            getServices();\n        }\n        if (epType.key !== 'INLINE' || epType.key !== 'MOCKED_OAS') {\n            setEndpointCategory({\n                prod: !!endpointConfig.production_endpoints,\n                sandbox: !!endpointConfig.sandbox_endpoints,\n            });\n        }\n        setSupportedEndpointType(supportedTypeLists);\n        setEpConfig(endpointConfig);\n        setEndpointType(epType);\n        setEndpointSecurityInfo(endpointConfig.endpoint_security);\n    }, [props]);\n\n\n    const getEndpoints = (type) => {\n        if (epConfig[type]) {\n            return epConfig[type].length > 0\n                ? epConfig[type][0].url : epConfig[type].url;\n        }\n        return '';\n    };\n\n    const getService = () => {\n        if (epConfig.serviceInfo) {\n            return epConfig.serviceInfo\n        }\n        return '';\n    };\n\n    const handleOnChangeEndpointCategoryChange = (category) => {\n        let endpointConfigCopy = cloneDeep(endpointConfig);\n        if (category === 'prod') {\n            const endpointProp = 'production_endpoints';\n            if (endpointCategory[category]) {\n                delete endpointConfigCopy[endpointProp];\n                if (endpointConfigCopy.endpointType === 'failover') {\n                    delete endpointConfigCopy.production_failovers;\n                }\n            } else if (endpointConfigCopy.endpointType === 'load_balance') {\n                endpointConfigCopy[endpointProp] = [getEndpointTemplate(endpointType.key)];\n            } else if (endpointConfigCopy.endpointType === 'failover') {\n                endpointConfigCopy[endpointProp] = getEndpointTemplate(endpointType.key);\n                endpointConfigCopy.production_failovers = [];\n            } else {\n                endpointConfigCopy[endpointProp] = getEndpointTemplate(endpointType.key);\n            }\n        } else {\n            const endpointProp = 'sandbox_endpoints';\n            if (endpointCategory[category]) {\n                delete endpointConfigCopy[endpointProp];\n                if (endpointConfigCopy.endpointType === 'failover') {\n                    delete endpointConfigCopy.sandbox_failovers;\n                }\n            } else if (endpointConfigCopy.endpointType === 'load_balance') {\n                endpointConfigCopy[endpointProp] = [getEndpointTemplate(endpointType.key)];\n            } else if (endpointConfigCopy.endpointType === 'failover') {\n                endpointConfigCopy[endpointProp] = getEndpointTemplate(endpointType.key);\n                endpointConfigCopy.sandbox_failovers = [];\n            } else {\n                endpointConfigCopy[endpointProp] = getEndpointTemplate(endpointType.key);\n            }\n        }\n        // Check whether, config has either prod/ sandbox endpoints. If not, reSet the endpoint type to http\n        if (!endpointConfigCopy.production_endpoints && !endpointConfigCopy.sandbox_endpoints) {\n            endpointConfigCopy = createEndpointConfig('http');\n        }\n        endpointsDispatcher({ action: 'select_endpoint_category', value: endpointConfigCopy });\n    };\n\n    /**\n     * Method to modify the endpoint represented by the given parameters.\n     *\n     * If url is null, remove the endpoint from the endpoint config.\n     *\n     * @param {number} index The index of the endpoint in the listing.\n     * @param {string} category The endpoint category. (production/ sand box)\n     * @param {string} url The new endpoint url.\n     * */\n    const editEndpoint = (index, category, url) => {\n        let modifiedEndpoint = null;\n        // Make a copy of the endpoint config.\n        const endpointConfigCopy = cloneDeep(epConfig);\n        /*\n        * If the index > 0, it means that the endpoint is load balance or fail over.\n        * Otherwise it is the default endpoint. (index = 0)\n        * */\n        if (index > 0) {\n            const endpointTypeProperty = getEndpointTypeProperty(endpointConfigCopy.endpoint_type, category);\n            modifiedEndpoint = endpointConfigCopy[endpointTypeProperty];\n            /*\n            * In failover case, the failover endpoints are a separate object. But in endpoint listing, since we\n            *  consider all the endpoints as a single list, to get the real index of the failover endpoint we use\n            *  index - 1.\n            * */\n            if (endpointConfigCopy.endpoint_type === 'failover') {\n                modifiedEndpoint[index - 1].url = url.trim();\n            } else {\n                modifiedEndpoint[index].url = url.trim();\n            }\n            endpointConfigCopy[endpointTypeProperty] = modifiedEndpoint;\n        } else if (url !== '') {\n            modifiedEndpoint = endpointConfigCopy[category];\n\n            /*\n            * In this case, we are editing the default endpoint.\n            * If the endpoint type is load balance, the production_endpoints or the sandbox_endpoint object is an\n            *  array. Otherwise, in failover mode, the default endpoint is an object.\n            *\n            * So, we check whether the endpoints is an array or an object.\n            *\n            * If This is the first time a user creating an endpoint endpoint config object does not have\n            *  production_endpoints or sandbox_endpoints object.\n            * Therefore create new object and add to the endpoint config.\n            * */\n            if (!modifiedEndpoint) {\n                modifiedEndpoint = getEndpointTemplate(endpointConfigCopy.endpoint_type);\n                modifiedEndpoint.url = url.trim();\n            } else if (Array.isArray(modifiedEndpoint)) {\n                if (url === '') {\n                    modifiedEndpoint.splice(0, 1);\n                } else {\n                    modifiedEndpoint[0].url = url.trim();\n                }\n            } else {\n                modifiedEndpoint.url = url.trim();\n            }\n            endpointConfigCopy[category] = modifiedEndpoint;\n        } else {\n            /*\n            * If the url is empty, delete the respective endpoint object.\n            * */\n            delete endpointConfigCopy[category];\n        }\n        endpointsDispatcher({ action: category, value: modifiedEndpoint });\n\n       \n        // Remove service from the API if any other endpoint type is selected\n        const epType = getEndpointType(api);\n        if (epType.key !== 'service') {\n            endpointsDispatcher({ action: 'set_service',\n                value:  { \n                    key: \"_\",\n                    name: \"_\",\n                    outdated: false,\n                    version: \"_\"\n                }} );\n        }\n         \n    };\n\n    const editService = (value) => {\n\n        const endpointConfigCopy = cloneDeep(epConfig);\n        const newService = { \n            key: value.serviceKey,\n            name: value.name,\n            outdated: false,\n            version: value.version\n        }\n        if (value && value.serviceKey) {\n            endpointConfigCopy.service = newService;\n            endpointsDispatcher({ action: 'set_service',\n                value: newService } ); \n        }\n    }\n\n    const handleEndpointCategorySelect = (event) => {\n        endpointsDispatcher({\n            action: 'endpoint_type',\n            value: { category: event.target.value, endpointType: endpointType.key },\n        });\n    };\n\n    /**\n     * Handles the endpoint type change functionality.\n     *\n     * @param {string} value The selected endpoint type.\n     * */\n    const changeEndpointType = (value) => {\n        setTypeChangeConfirmation({ openDialog: false, serviceInfo: false });\n        const selectedKey = typeChangeConfirmation.type || value;\n        if (selectedKey === 'INLINE' || selectedKey === 'MOCKED_OAS') {\n            const tmpConfig = createEndpointConfig('prototyped');\n            endpointsDispatcher({\n                action: 'set_inline_or_mocked_oas',\n                value: {\n                    endpointConfig: tmpConfig,\n                    endpointImplementationType: selectedKey,\n                },\n            });\n        } else if (selectedKey === 'prototyped') {\n            const tmpConfig = createEndpointConfig(selectedKey);\n            endpointsDispatcher({\n                action: 'set_prototyped',\n                value: {\n                    endpointImplementationType: 'ENDPOINT',\n                    endpointConfig: tmpConfig,\n                },\n            });\n        } else if (selectedKey === 'awslambda') {\n            const generatedEndpointConfig = createEndpointConfig(selectedKey);\n            endpointsDispatcher({\n                action: 'select_endpoint_type',\n                value: {\n                    endpointImplementationType: 'ENDPOINT',\n                    endpointConfig: { ...generatedEndpointConfig },\n                },\n            });\n        } else {\n            const generatedEndpointConfig = createEndpointConfig(selectedKey);\n            endpointsDispatcher({\n                action: 'select_endpoint_type',\n                value: {\n                    endpointImplementationType: 'ENDPOINT',\n                    endpointConfig: { ...generatedEndpointConfig },\n                },\n            });\n        }\n    };\n\n    /**\n     * Handles the endpoint type select event. If endpoint config has existing values, show confirmation dialog.\n     * @param {any} event The select event.\n     * */\n    const handleEndpointTypeSelect = (event) => {\n        // Check whether the endpoint Config has values.\n        if (epConfig.production_endpoints || epConfig.sandbox_endpoints) {\n            // Show confirmation dialog\n            setTypeChangeConfirmation({ type: event.target.value, openDialog: true });\n        } else {\n            changeEndpointType(event.target.value);\n        }\n    };\n\n    /**\n     * Method to get the advance configuration from the selected endpoint.\n     *\n     * @param {number} index The selected endpoint index\n     * @param {string} epType The type of the endpoint. (loadbalance/ failover)\n     * @param {string} category The endpoint category (Production/ sandbox)\n     * @return {object} The advance config object of the endpoint.\n     * */\n    const getAdvanceConfig = (index, epType, category) => {\n        const endpointTypeProperty = getEndpointTypeProperty(epType, category);\n        let advanceConfig = {};\n        if (index > 0) {\n            if (epConfig.endpoint_type === 'failover') {\n                advanceConfig = epConfig[endpointTypeProperty][index - 1].config;\n            } else {\n                advanceConfig = epConfig[endpointTypeProperty][index].config;\n            }\n        } else {\n            const endpointInfo = epConfig[endpointTypeProperty];\n            if (Array.isArray(endpointInfo)) {\n                advanceConfig = endpointInfo[0].config;\n            } else {\n                advanceConfig = endpointInfo.config;\n            }\n        }\n        return advanceConfig;\n    };\n\n    /**\n     * Method to open/ close the advance configuration dialog. This method also sets some information about the\n     * seleted endpoint type/ category and index.\n     *\n     * @param {number} index The index of the selected endpoint.\n     * @param {string} type The endpoint type\n     * @param {string} category The endpoint category.\n     * */\n    const toggleAdvanceConfig = (index, type, category) => {\n        const advanceEPConfig = getAdvanceConfig(index, type, category);\n        setAdvancedConfigOptions(() => {\n            return ({\n                open: !advanceConfigOptions.open,\n                index,\n                type,\n                category,\n                config: advanceEPConfig === undefined ? {} : advanceEPConfig,\n            });\n        });\n    };\n\n    const toggleEndpointSecurityConfig = (type, category) => {\n        handleToggleEndpointSecurity();\n        setEndpointSecurityConfig(() => {\n            return ({\n                open: !endpointSecurityConfig.open,\n                type,\n                category,\n                config: endpointSecurityInfo === undefined ? {} : endpointSecurityInfo,\n            });\n        });\n    };\n\n    /**\n     * Method to handle the endpoint security changes.\n     * @param {string} value The value\n     * @param {string} type The security property that is being modified.\n     * */\n    const handleEndpointSecurityChange = (value, type) => {\n        endpointsDispatcher({\n            action: 'endpointSecurity',\n            value: { ...endpointSecurityInfo, [type]: value },\n        });\n    };\n\n    const saveEndpointSecurityConfig = (endpointSecurityObj, enType) => {\n        const { type } = endpointSecurityObj;\n        let newEndpointSecurityObj = endpointSecurityObj;\n        if (type === 'NONE') {\n            newEndpointSecurityObj = { ...CONSTS.DEFAULT_ENDPOINT_SECURITY, type };\n        } else {\n            newEndpointSecurityObj.enabled = true;\n        }\n        endpointsDispatcher({\n            action: 'endpointSecurity',\n            value: {\n                ...endpointSecurityInfo,\n                [enType]: newEndpointSecurityObj,\n            },\n        });\n        setEndpointSecurityConfig({ open: false });\n    };\n\n    const closeEndpointSecurityConfig = () => {\n        setEndpointSecurityConfig({ open: false });\n    };\n\n    /**\n     * Method to save the advance configurations.\n     *\n     * @param {object} advanceConfig The advance configuration object.\n     * */\n    const saveAdvanceConfig = (advanceConfig) => {\n        const config = cloneDeep(epConfig);\n        const endpointConfigProperty = getEndpointTypeProperty(\n            advanceConfigOptions.type, advanceConfigOptions.category,\n        );\n        const selectedEndpoints = config[endpointConfigProperty];\n        if (Array.isArray(selectedEndpoints)) {\n            if (advanceConfigOptions.type === 'failover') {\n                selectedEndpoints[advanceConfigOptions.index - 1].config = advanceConfig;\n            } else {\n                selectedEndpoints[advanceConfigOptions.index].config = advanceConfig;\n            }\n        } else {\n            selectedEndpoints.config = advanceConfig;\n        }\n        setAdvancedConfigOptions({ open: false });\n        endpointsDispatcher({\n            action: 'set_advance_config',\n            value: { ...config, [endpointConfigProperty]: selectedEndpoints },\n        });\n    };\n\n    /**\n     * Method to close the advance configuration dialog box.\n     * */\n    const closeAdvanceConfig = () => {\n        setAdvancedConfigOptions({ open: false });\n    };\n\n    /**\n     * Method to update the resource paths object in the swagger.\n     * @param {any} paths The updated paths object.\n     * */\n    const updatePaths = useCallback(\n        (paths) => {\n            updateSwagger({ ...swaggerDef, paths });\n        },\n        [swaggerDef],\n    );\n\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n\n    /**\n     *\n     *\n     * @param {*} event\n     */\n    function epCategoryOnChangeHandler() {\n        handleOnChangeEndpointCategoryChange('prod');\n    }\n\n    return (\n        <div className={classes.overviewWrapper}>\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    {api.type === 'WS' ? <div /> : (\n                        <FormControl component='fieldset' className={classes.formControl}>\n                            <RadioGroup\n                                aria-label='EndpointType'\n                                name='endpointType'\n                                className={classes.radioGroup}\n                                value={endpointType.key === 'MOCKED_OAS' ? 'INLINE' : endpointType.key}\n                                onChange={handleEndpointTypeSelect}\n                            >\n                                {supportedEnpointTypes.map((endpoint) => {\n                                    return (\n                                        <FormControlLabel\n                                            value={endpoint.key}\n                                            control={(\n                                                <Radio\n                                                    disabled={(isRestricted(['apim:api_create'], api))}\n                                                    color='primary'\n                                                    id={endpoint.key}\n                                                />\n                                            )}\n                                            label={endpoint.value}\n                                        />\n                                    );\n                                })}\n                            </RadioGroup>\n                        </FormControl>\n                    )}\n                </Grid>\n                <Grid item xs={12}>\n                    {(endpointType.key === 'INLINE' || endpointType.key === 'MOCKED_OAS') ? \n                        iff(Object.keys(swaggerDef.paths).length !== 0, \n                            <MockImplEndpoints \n                                key={endpointType.key}\n                                paths={swaggerDef.paths} \n                                swagger={swaggerDef} \n                                updatePaths={updatePaths} \n                                endpointType={endpointType.key} \n                                endpointConfig={endpointConfig}\n                                endpointsDispatcher={endpointsDispatcher}\n                            />, \n                            <Progress />)\n                        : (\n                            <Paper className={classes.endpointContainer}>\n\n                                {endpointType.key === 'service'\n                                    ? (\n                                        <>\n                                            <FormControlLabel\n                                                control={(\n                                                    <Checkbox\n                                                        disabled={isRestricted(\n                                                            ['apim:api_create'], api)}\n                                                        checked={endpointCategory.prod}\n                                                        value='prod'\n                                                        color='primary'\n                                                        onChange={epCategoryOnChangeHandler}\n                                                    />\n                                                )}\n                                                label={(\n                                                    <Typography>\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.'\n                                                                + 'Endpoints.EndpointOverview'\n                                                                + '.production.endpoint'\n                                                                + '.production.label'}\n                                                            defaultMessage='Production Endpoint'\n                                                        />\n                                                    </Typography>\n                                                )}\n                                            />\n                                            <Collapse in={endpointCategory.prod}>\n                                                <ServiceEndpoint\n                                                    classes={classes}\n                                                    api={api}\n                                                    services={servicesList}\n                                                    category='production_endpoints'\n                                                    type=''\n                                                    setAdvancedConfigOpen={toggleAdvanceConfig}\n                                                    esCategory='production'\n                                                    setESConfigOpen={toggleEndpointSecurityConfig}\n                                                    name={<FormattedMessage\n                                                        id={'Apis.Details.Endpoints.'\n                                                            + 'EndpointOverview.production'\n                                                            + '.endpoint.production.header'}\n                                                        defaultMessage='Production Endpoint'\n                                                    />}\n                                                    editEndpoint={editEndpoint}\n                                                    endpointURL={getEndpoints\n                                                    (\n                                                        'production_endpoints'\n                                                    )}\n                                                    existingService={getService}\n                                                    editService={editService}\n                                                    index={0} />\n                                            </Collapse>\n                                            <FormControlLabel\n                                                control={(\n                                                    <Checkbox\n                                                        disabled={isRestricted(\n                                                            ['apim:api_create'], api)}\n                                                        checked={endpointCategory.sandbox}\n                                                        value='sandbox'\n                                                        color='primary'\n                                                        onChange={() => (\n                                                            handleOnChangeEndpointCategoryChange\n                                                            (\n                                                                'sandbox',\n                                                            ))}\n                                                    />\n                                                )}\n                                                label={(\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.Endpoints.'\n                                                            + 'EndpointOverview.sandbox'\n                                                            + '.endpoint'}\n                                                        defaultMessage='Sandbox Endpoint'\n                                                    />\n                                                )}\n                                            />\n                                            <Collapse in={endpointCategory.sandbox}>\n                                                <ServiceEndpoint\n                                                    classes={classes}\n                                                    api={api}\n                                                    services={servicesList}\n                                                    category='sandbox_endpoints'\n                                                    type=''\n                                                    setAdvancedConfigOpen={toggleAdvanceConfig}\n                                                    esCategory='sandbox'\n                                                    setESConfigOpen={toggleEndpointSecurityConfig}\n                                                    name={ <FormattedMessage\n                                                        id={'Apis.Details.Endpoints.'\n                                                            + 'EndpointOverview.sandbox'\n                                                            + '.endpoint'}\n                                                        defaultMessage='Sandbox Endpoint'\n                                                    />}\n                                                    editEndpoint={editEndpoint}\n                                                    endpointURL={getEndpoints\n                                                    (\n                                                        'sandbox_endpoints'\n                                                    )}\n                                                    index={0} />\n                                            </Collapse>\n\n                                        </>\n\n                                    )\n                                    : (\n                                        <>\n                                            {endpointType.key === 'awslambda'\n                                                ? (\n                                                    <Credentials\n                                                        apiId={api.id}\n                                                        endpointConfig={endpointConfig}\n                                                        endpointsDispatcher={endpointsDispatcher}\n                                                    />\n                                                )\n                                                : (\n                                                    <>\n                                                        {endpointType.key === 'prototyped'\n                                                            ? (\n                                                                <Typography>\n                                                                    <FormattedMessage\n                                                                        id={'Apis.Details.Endpoints.'\n                                                                            + 'EndpointOverview.prototype.endpoint'\n                                                                            + '.prototype.label'}\n                                                                        defaultMessage='Prototype Endpoint'\n                                                                    />\n                                                                </Typography>\n                                                            )\n                                                            : (\n                                                                <FormControlLabel\n                                                                    control={(\n                                                                        <Checkbox\n                                                                            id='production-endpoint-checkbox'\n                                                                            disabled={isRestricted(\n                                                                                ['apim:api_create'], api)}\n                                                                            checked={endpointCategory.prod}\n                                                                            value='prod'\n                                                                            color='primary'\n                                                                            onChange={epCategoryOnChangeHandler}\n                                                                        />\n                                                                    )}\n                                                                    label={(\n                                                                        <Typography>\n                                                                            <FormattedMessage\n                                                                                id={'Apis.Details.'\n                                                                                    + 'Endpoints.EndpointOverview'\n                                                                                    + '.production.endpoint'\n                                                                                    + '.production.label'}\n                                                                                defaultMessage='Production Endpoint'\n                                                                            />\n                                                                        </Typography>\n                                                                    )}\n                                                                />\n                                                            )}\n                                                        <Collapse in={endpointCategory.prod}>\n                                                            {endpointType.key === 'default'\n                                                                ? (\n\n                                                                    <InlineMessage>\n                                                                        <div className={classes.contentWrapper}>\n                                                                            <Typography component='p'\n                                                                                className={classes.content}>\n                                                                                <FormattedMessage\n                                                                                    id={'Apis.Details.Endpoints'\n                                                                                        + '.EndpointOverview'\n                                                                                        + '.upload.mediation.message'}\n                                                                                    defaultMessage={\n                                                                                        'Please upload a mediation'\n                                                                                        + ' sequence file to'\n                                                                                        + ' Message Mediation Policies,'\n                                                                                        + ' which sets the endpoints.'\n                                                                                    }\n                                                                                />\n                                                                                <IconButton\n                                                                                    onClick={saveAndRedirect}\n                                                                                >\n                                                                                    <LaunchIcon\n                                                                                        style={{ marginLeft: '2px' }}\n                                                                                        fontSize='small'\n                                                                                        color='primary'\n                                                                                    />\n                                                                                </IconButton>\n                                                                            </Typography>\n                                                                        </div>\n                                                                        <Button\n                                                                            className={classes.button}\n                                                                            aria-label='Settings'\n                                                                            onClick={() => toggleAdvanceConfig(\n                                                                                0, '', 'production_endpoints',\n                                                                            )}\n                                                                            disabled={\n                                                                                (isRestricted(\n                                                                                    ['apim:api_create'], api,\n                                                                                )\n                                                                                )\n                                                                            }\n                                                                            variant='outlined'\n                                                                        >\n                                                                            <Icon\n                                                                                className={classes.buttonIcon}\n                                                                            >\n                                                                                settings\n                                                                            </Icon>\n                                                                            <Typography>\n                                                                                <FormattedMessage\n                                                                                    id={'Apis.Details.Endpoints'\n                                                                                        + '.EndpointOverview.advance'\n                                                                                        + '.endpoint.configuration'}\n                                                                                    defaultMessage='Advanced \n                                                                                    Configurations'\n                                                                                />\n                                                                            </Typography>\n                                                                        </Button>\n                                                                        <Button\n                                                                            className={classes.button}\n                                                                            aria-label='Settings'\n                                                                            onClick={() => toggleEndpointSecurityConfig(\n                                                                                '', 'production',\n                                                                            )}\n                                                                            disabled={\n                                                                                (isRestricted(\n                                                                                    ['apim:api_create'], api,\n                                                                                )\n                                                                                )\n                                                                            }\n                                                                            variant='outlined'\n                                                                        >\n                                                                            <Icon\n                                                                                className={classes.buttonIcon}\n                                                                            >\n                                                                                security\n                                                                            </Icon>\n                                                                            <Typography>\n                                                                                <FormattedMessage\n                                                                                    id={'Apis.Details.Endpoints'\n                                                                                        + '.EndpointOverview.endpoint'\n                                                                                        + '.security.configuration'}\n                                                                                    defaultMessage={'Endpoint '\n                                                                                        + 'Security Configurations'}\n                                                                                />\n                                                                            </Typography>\n                                                                        </Button>\n                                                                    </InlineMessage>\n                                                                )\n                                                                : (\n                                                                    <GenericEndpoint\n                                                                        autoFocus\n                                                                        name={endpointType.key === 'prototyped'\n                                                                            ? (\n                                                                                <FormattedMessage\n                                                                                    id={'Apis.Details.Endpoints.'\n                                                                                        + 'EndpointOverview.prototype'\n                                                                                        + '.endpoint.prototype.header'}\n                                                                                    defaultMessage='Prototype Endpoint'\n                                                                                />\n                                                                            ) : (\n                                                                                <FormattedMessage\n                                                                                    id={'Apis.Details.Endpoints.'\n                                                                                        + 'EndpointOverview.production'\n                                                                                        + '.endpoint.production.header'}\n                                                                                    defaultMessage='Production Endpoint'\n                                                                                />\n                                                                            )}\n                                                                        className={classes.defaultEndpointWrapper}\n                                                                        endpointURL={getEndpoints\n                                                                        (\n                                                                            'production_endpoints'\n                                                                        )}\n                                                                        type=''\n                                                                        index={0}\n                                                                        category='production_endpoints'\n                                                                        editEndpoint={editEndpoint}\n                                                                        setAdvancedConfigOpen={toggleAdvanceConfig}\n                                                                        esCategory='production'\n                                                                        setESConfigOpen={toggleEndpointSecurityConfig}\n                                                                        apiId={api.id}\n                                                                    />\n                                                                )}\n                                                        </Collapse>\n                                                        {endpointType.key === 'prototyped' ? <div />\n                                                            : (\n                                                                <div>\n                                                                    <FormControlLabel\n                                                                        control={(\n                                                                            <Checkbox\n                                                                                id='sandbox-endpoint-checkbox'\n                                                                                disabled={isRestricted(\n                                                                                    ['apim:api_create'], api)}\n                                                                                checked={endpointCategory.sandbox}\n                                                                                value='sandbox'\n                                                                                color='primary'\n                                                                                onChange={() => (\n                                                                                    handleOnChangeEndpointCategoryChange\n                                                                                    (\n                                                                                        'sandbox',\n                                                                                    ))}\n                                                                            />\n                                                                        )}\n                                                                        label={(\n                                                                            <FormattedMessage\n                                                                                id={'Apis.Details.Endpoints.'\n                                                                                    + 'EndpointOverview.sandbox'\n                                                                                    + '.endpoint'}\n                                                                                defaultMessage='Sandbox Endpoint'\n                                                                            />\n                                                                        )}\n                                                                    />\n                                                                    <Collapse in={endpointCategory.sandbox}>\n                                                                        {endpointType.key === 'default'\n                                                                            ? (\n                                                                                <InlineMessage>\n                                                                                    <div className={classes.\n                                                                                        contentWrapper}>\n                                                                                        <Typography\n                                                                                            component='p'\n                                                                                            className={classes.content}\n                                                                                        >\n                                                                                            <FormattedMessage\n                                                                                                id={'Apis.Details'\n                                                                                                    + '.Endpoints'\n                                                                                                    + '.Endpoint'\n                                                                                                    + 'Overview'\n                                                                                                    + '.upload'\n                                                                                                    + '.mediation'\n                                                                                                    + '.message'}\n                                                                                                defaultMessage={\n                                                                                                    'Please upload '\n                                                                                                    + ' a mediation'\n                                                                                                    + ' sequence '\n                                                                                                    + 'file to'\n                                                                                                    + ' Message '\n                                                                                                    + '  Mediation'\n                                                                                                    + ' Policies,'\n                                                                                                    + ' which sets the'\n                                                                                                    + ' endpoints.'\n                                                                                                }\n                                                                                            />\n                                                                                            <IconButton\n                                                                                                onClick={\n                                                                                                    saveAndRedirect\n                                                                                                }\n                                                                                            >\n                                                                                                <LaunchIcon\n                                                                                                    style={{\n                                                                                                        marginLeft:\n                                                                                                            '2px'\n                                                                                                    }}\n                                                                                                    fontSize='small'\n                                                                                                    color='primary'\n                                                                                                />\n                                                                                            </IconButton>\n                                                                                        </Typography>\n                                                                                    </div>\n                                                                                    <Button\n                                                                                        className={classes.button}\n                                                                                        aria-label='Settings'\n                                                                                        onClick={() =>\n                                                                                            toggleAdvanceConfig(\n                                                                                                0, '',\n                                                                                                'sandbox_endpoints',\n                                                                                            )}\n                                                                                        disabled={\n                                                                                            (isRestricted(\n                                                                                                ['apim:api_create'],\n                                                                                                api,\n                                                                                            )\n                                                                                            )\n                                                                                        }\n                                                                                        variant='outlined'\n                                                                                    >\n                                                                                        <Icon\n                                                                                            className={\n                                                                                                classes.buttonIcon}\n                                                                                        >\n                                                                                            settings\n                                                                                        </Icon>\n                                                                                        <Typography>\n                                                                                            <FormattedMessage\n                                                                                                id={'Apis.Details.'\n                                                                                                + 'Endpoints'\n                                                                                                + '.EndpointOverview.'\n                                                                                                + 'advance'\n                                                                                                + '.endpoint.'\n                                                                                                + 'configuration'}\n                                                                                                defaultMessage={\n                                                                                                    'Advanced '\n                                                                                                    + 'Configurations'}\n                                                                                            />\n                                                                                        </Typography>\n                                                                                    </Button>\n                                                                                </InlineMessage>\n                                                                            )\n                                                                            : (\n                                                                                <GenericEndpoint\n                                                                                    autoFocus\n                                                                                    name='Sandbox Endpoint'\n                                                                                    className={classes.\n                                                                                        defaultEndpointWrapper}\n                                                                                    endpointURL={getEndpoints\n                                                                                    (\n                                                                                        'sandbox_endpoints'\n                                                                                    )}\n                                                                                    type=''\n                                                                                    index={0}\n                                                                                    category='sandbox_endpoints'\n                                                                                    editEndpoint={editEndpoint}\n                                                                                    esCategory='sandbox'\n                                                                                    setAdvancedConfigOpen=\n                                                                                        {toggleAdvanceConfig}\n                                                                                    setESConfigOpen=\n                                                                                        {toggleEndpointSecurityConfig}\n                                                                                    apiId={api.id}\n                                                                                />\n                                                                            )}\n\n                                                                    </Collapse>\n                                                                </div>\n                                                            )}\n                                                    </>\n                                                )}\n                                        </>\n                                    )}\n                            </Paper>\n                        )}\n                </Grid>\n                {endpointType.key === 'INLINE' || endpointType.key === 'MOCKED_OAS' || \n                    endpointType.key === 'prototyped' || endpointType.key === 'awslambda' || api.type === 'WS'\n                    ? <div />\n                    : (\n                        <Grid item xs={12}>\n                            <Typography variant='h4' align='left' className={classes.titleWrapper} gutterBottom>\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.EndpointOverview.general.config.header'\n                                    defaultMessage='General Endpoint Configurations'\n                                />\n                            </Typography>\n                            <GeneralConfiguration\n                                epConfig={(cloneDeep(epConfig))}\n                                endpointType={endpointType}\n                                endpointsDispatcher={endpointsDispatcher}\n                            />\n                        </Grid>\n                    )}\n                {\n                    endpointType.key === 'INLINE'\n                        || endpointType.key === 'MOCKED_OAS'\n                        || endpointType.key === 'default'\n                        || endpointType.key === 'prototyped'\n                        || api.type === 'WS'\n                        || endpointType.key === 'awslambda'\n                        || endpointType.key === 'service'\n                        ? <div />\n                        : (\n                            <Grid item xs={12}>\n                                <Typography\n                                    variant='h4'\n                                    align='left'\n                                    className={classes.titleWrapper}\n                                    gutterBottom\n                                >\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.'\n                                            + 'EndpointOverview.lb.failover.endpoints.header'}\n                                        defaultMessage='Load balance and Failover Configurations'\n                                    />\n                                </Typography>\n                                <LoadbalanceFailoverConfig\n                                    handleEndpointCategorySelect={handleEndpointCategorySelect}\n                                    toggleAdvanceConfig={toggleAdvanceConfig}\n                                    toggleESConfig={toggleEndpointSecurityConfig}\n                                    endpointsDispatcher={endpointsDispatcher}\n                                    epConfig={(cloneDeep(epConfig))}\n                                    endpointSecurityInfo={endpointSecurityInfo}\n                                    handleEndpointTypeSelect={handleEndpointTypeSelect}\n                                    globalEpType={endpointType}\n                                    apiType={api.type}\n                                />\n                            </Grid>\n                        )\n                }\n            </Grid>\n            <Dialog open={advanceConfigOptions.open}>\n                <DialogTitle>\n                    <Typography className={classes.configDialogHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.advance.endpoint.configuration'\n                            defaultMessage='Advanced Configurations'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <AdvanceEndpointConfig\n                        isSOAPEndpoint={endpointType.key === 'address'}\n                        advanceConfig={advanceConfigOptions.config}\n                        onSaveAdvanceConfig={saveAdvanceConfig}\n                        onCancel={closeAdvanceConfig}\n                    />\n                </DialogContent>\n            </Dialog>\n            <Dialog open={endpointSecurityConfig.open}>\n                <DialogTitle>\n                    <Typography className={classes.configDialogHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.endpoint.security.configuration'\n                            defaultMessage='Endpoint Security Configurations'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    {endpointSecurityConfig.category === 'production' ? (\n                        <EndpointSecurity\n                            securityInfo={endpointSecurityInfo\n                                && (endpointSecurityInfo.production\n                                    ? endpointSecurityInfo.production : endpointSecurityInfo)}\n                            onChangeEndpointAuth={handleEndpointSecurityChange}\n                            saveEndpointSecurityConfig={saveEndpointSecurityConfig}\n                            closeEndpointSecurityConfig={closeEndpointSecurityConfig}\n                            isProduction\n                        />\n                    ) : (\n                        <EndpointSecurity\n                            securityInfo={endpointSecurityInfo\n                                && (endpointSecurityInfo.sandbox\n                                    ? endpointSecurityInfo.sandbox : endpointSecurityInfo)}\n                            onChangeEndpointAuth={handleEndpointSecurityChange}\n                            saveEndpointSecurityConfig={saveEndpointSecurityConfig}\n                            closeEndpointSecurityConfig={closeEndpointSecurityConfig}\n                        />\n                    )}\n                </DialogContent>\n            </Dialog>\n            <Dialog open={typeChangeConfirmation.openDialog}>\n                <DialogTitle>\n                    <Typography className={classes.configDialogHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.endpoint.type.change.confirmation'\n                            defaultMessage='Change Endpoint Type'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <Typography>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.endpoint.type.change.confirmation.message'\n                            defaultMessage='Your current endpoint configuration will be lost.'\n                        />\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        onClick={() => { setTypeChangeConfirmation({ openDialog: false, serviceInfo: false }); }}\n                        color='primary'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.change.type.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button\n                        onClick={() => { changeEndpointType(typeChangeConfirmation.type); }}\n                        color='primary'\n                        id='change-endpoint-type-btn'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints..EndpointOverview.change.type.proceed'\n                            defaultMessage='Proceed'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nEndpointOverview.propTypes = {\n    classes: PropTypes.shape({\n        overviewWrapper: PropTypes.shape({}),\n        endpointTypesWrapper: PropTypes.shape({}),\n        endpointName: PropTypes.shape({}),\n    }).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    endpointsDispatcher: PropTypes.func.isRequired,\n    swaggerDef: PropTypes.shape({}).isRequired,\n    updateSwagger: PropTypes.func.isRequired,\n    saveAndRedirect: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(EndpointOverview));\n","/*\n *  Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React, {\n    useContext,\n    useEffect,\n    useState,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    FormControlLabel,\n    Grid,\n    Icon,\n    Paper,\n    Radio,\n    RadioGroup,\n    Tooltip,\n    Typography,\n} from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport MockedOASOperation from 'AppComponents/Apis/Details/Endpoints/Prototype/MockedOASOperation';\nimport MockScriptOperation from 'AppComponents/Apis/Details/Endpoints/Prototype/MockScriptOperation';\nimport GenericOperation from 'AppComponents/Apis/Details/Resources/components/GenericOperation';\nimport GroupOfOperations from 'AppComponents/Apis/Details/Resources/components/GroupOfOperations';\nimport CONSTS from 'AppData/Constants';\nimport { Progress, Alert } from 'AppComponents/Shared';\n\n/**\n * Fetches example mock impl scripts\n * @return {{ mockScripts: Array | null, error : Error | null, progress: boolean }} status of the api call\n */\nconst useFetchScripts = () => {\n    const { api } = useContext(APIContext);\n    const [error, setError] = useState(null);\n    const [progress, setProgress] = useState(true);\n    const [mockScripts, setMockScripts] = useState(null);\n\n    useEffect(() => {\n        api.getGeneratedMockScriptsOfAPI(api.id)\n            .then((response) => {\n                setMockScripts(response.obj.list);\n            })\n            .catch((e) => {\n                console.error(error);\n                Alert.error(`Something went wrong while fetching example mock scripts!!`);\n                setError(e);\n            }).finally(() => {\n                setProgress(false);\n            });\n    }, []);\n    return { mockScripts, error, progress };\n};\n\n/**\n * The mock impl endpoints base component.\n * This component lists the api resources to add custom mediation scripts.\n *\n * @param {any} props The input props.\n * @return {any} The JSX representation of the component.\n * */\nfunction MockImplEndpoints(props) {\n    const {\n        paths, swagger, updatePaths, endpointType, endpointConfig, endpointsDispatcher\n    } = props;\n    const scriptType = ['INLINE', 'MOCKED_OAS'].includes(endpointType) ? endpointType : 'INLINE';\n    const [changedToType, setChangedToType] = useState(scriptType);\n    const [typeChangeConfirmation, setTypeChangeConfirmation] = useState(false);\n\n    const { mockScripts, progress } = useFetchScripts();\n\n    /**\n     * Handles the endpoint type change event. \n     * @param {any} type The endpoint type to change in to.\n     * */\n    const handleEndpointTypeChange = (type) => {\n        setTypeChangeConfirmation(false)\n        endpointsDispatcher({\n            action: 'set_inline_or_mocked_oas',\n            value: {\n                endpointConfig,\n                endpointImplementationType: type,\n            },\n        });\n    };\n\n    /**\n     * Handles the endpoint type select event. If endpoint scripts has existing values, show confirmation dialog.\n     * @param {any} event The select event.\n     * */\n    const handleEndpointTypeSelect = (event) => {\n        // endpoint type changed from inline to mocked_oas need the confirmation dialog.\n        // also the selected type should be temperarily keep till the change has confirmed.\n        if (event.target.value === 'MOCKED_OAS') {\n            setTypeChangeConfirmation(true);\n            setChangedToType(event.target.value);\n        } else {\n            handleEndpointTypeChange(event.target.value)\n        }\n    };\n\n    if (progress) {\n        return <Progress />\n    }\n\n    return (\n        <>\n            <Grid item>\n                <Typography>\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.EndpointOverview.MockImpl.Options'\n                        defaultMessage='Select the gateway type'\n                    />\n                </Typography>\n                <RadioGroup\n                    aria-label='accessMethod'\n                    name='accessMethod'\n                    value={scriptType}\n                    onChange={handleEndpointTypeSelect}\n                >\n                    <div>\n                        <FormControlLabel\n                            value='INLINE'\n                            control={<Radio color='primary' />}\n                            label={\n                                (\n                                    <FormattedMessage\n                                        id='Apis.Details.Endpoints.EndpointOverview.MockImpl.Option.Inline'\n                                        defaultMessage='Regular gateway (Synapse gateway)'\n                                    />\n                                )\n                            }\n                        />\n                    </div>\n                    <div>\n                        <FormControlLabel\n                            value='MOCKED_OAS'\n                            control={<Radio color='primary' />}\n                            label={\n                                (\n                                    <FormattedMessage\n                                        id='Apis.Details.Endpoints.EndpointOverview.MockImpl.Option.MockedOAS'\n                                        defaultMessage='Choreo Connect'\n                                    />\n                                )\n                            }\n                        />\n                        <Tooltip\n                            title={\n                                (\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.EndpointOverview.MockImpl.Option.MockedOAS'\n                                            + '.description'}\n                                        defaultMessage='If you want to add/update examples, update the API Definition'\n                                    />\n                                )\n                            }\n                        >\n                            <Icon>help_outline</Icon>\n                        </Tooltip>\n                    </div>\n                </RadioGroup>\n            </Grid>\n            <Grid container direction='row' justify='flex-start' spacing={2} alignItems='stretch'>\n                <Grid item md={12}>\n                    <Paper>\n                        {Object.keys(paths).map((path) => {\n                            return (\n                                <Grid key={path} item md={12}>\n                                    <GroupOfOperations openAPI={swagger} tag={path}>\n                                        <Grid\n                                            container\n                                            direction='column'\n                                            justify='flex-start'\n                                            spacing={1}\n                                            alignItems='stretch'\n                                        >\n                                            {Object.keys(paths[path]).map((method) => {\n                                                return CONSTS.HTTP_METHODS.includes(method) ? (\n                                                    <Grid key={`${path}/${method}`} item>\n                                                        <GenericOperation\n                                                            target={path}\n                                                            verb={method}>\n                                                            {scriptType === 'MOCKED_OAS' ?\n                                                                <MockedOASOperation\n                                                                    operation={paths[path][method]}\n                                                                />\n                                                                :\n                                                                <MockScriptOperation\n                                                                    resourcePath={path}\n                                                                    resourceMethod={method}\n                                                                    operation={paths[path][method]}\n                                                                    updatePaths={updatePaths}\n                                                                    paths={paths}\n                                                                    mockScripts={mockScripts}\n                                                                />\n                                                            }\n                                                        </GenericOperation>\n                                                    </Grid>\n                                                ) : null;\n                                            })}\n                                        </Grid>\n                                    </GroupOfOperations>\n                                </Grid>\n                            );\n                        })}\n                    </Paper>\n                </Grid>\n            </Grid>\n\n            <Dialog open={typeChangeConfirmation}>\n                <DialogTitle>\n                    <Typography>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.MockImpl.type.change.confirmation'\n                            defaultMessage='Change Mock implementation'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <Typography>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.MockImpl.type.change.confirmation.message'\n                            defaultMessage='Your current mock endpoint implementation scripts will be lost.'\n                        />\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        onClick={() => { setTypeChangeConfirmation(false) }}\n                        color='primary'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.MockImpl.type.change.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button\n                        onClick={() => { handleEndpointTypeChange(changedToType) }}\n                        color='primary'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints..EndpointOverview.MockImpl.type.change.proceed'\n                            defaultMessage='Proceed'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n\nMockImplEndpoints.propTypes = {\n    paths: PropTypes.shape({}).isRequired,\n    updatePaths: PropTypes.func.isRequired,\n    endpointsDispatcher: PropTypes.func.isRequired,\n    endpointConfig: PropTypes.shape({}).isRequired,\n    swagger: PropTypes.shape({}).isRequired,\n    endpointType: PropTypes.string.isRequired,\n};\n\nexport default React.memo(MockImplEndpoints);\n","/*\n *  Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React, { lazy, Suspense, useState, useEffect } from 'react';\nimport {\n    CircularProgress,\n    Divider,\n    Grid,\n    makeStyles,\n    MenuItem,\n    TextField,\n    Typography,\n} from '@material-ui/core';\nimport { ArrowDropDown } from '@material-ui/icons';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"GenResourceMonaco\" */));\n\nconst useStyles = makeStyles((theme) => {\n    return {\n        dropdown: {\n            marginRight: theme.spacing(5),\n        },\n    };\n});\n\n/**\n * The OAS mock impl for operation.\n *\n * @param {any} props The input props\n * @return {any} The JSX representation of the component.\n * */\nfunction MockedOASOperation(props) {\n    const { operation } = props;\n    return (\n        <>\n            {operation.responses ?\n                <Grid spacing={2} container direction='row' justify='flex-start' alignItems='flex-start'>\n                    <Grid item xs={12}>\n                        <Typography gutterBottom variant='subtitle1'>\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.Prototype.MockedOAS.title'\n                                defaultMessage='Responses'\n                            />\n                            <Typography style={{ marginLeft: '10px' }} gutterBottom variant='caption'>\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.Prototype.MockedOAS.subTitle'\n                                    defaultMessage='Mocked examples generated from OAS'\n                                />\n                            </Typography>\n                            <Divider variant='middle' />\n                        </Typography>\n                    </Grid>\n\n                    {Object.entries(operation.responses).map(([responseCode, response]) => (\n                        <Grid item xs={12} key={responseCode}>\n                            <MockedOASExample response={response}\n                                responseCode={responseCode} />\n                        </Grid>\n                    ))}\n                </Grid> : <FormattedMessage\n                    id='Apis.Details.Endpoints.Prototype.MockedOAS.Response.NotProvided'\n                    defaultMessage='Responses are not provided in the API definition'\n                />\n            }\n        </>\n    );\n}\n\n/**\n * The example response component.\n *\n * @param {any} props The input props\n * @return {any} JSX element\n * */\nfunction MockedOASExample(props) {\n    const { response, responseCode } = props\n    // oas3 has examples in content, where as oas2 has in examples\n    const { content } = response\n    const oas2Examples = response.examples\n    const isEmptyOAS3Content = !content || Object.keys(content).length < 1\n    const isEmptyOAS2Examples = !oas2Examples || Object.keys(oas2Examples).length < 1\n\n    const [selectedMediaType, setSelectedMediaType] = useState(() => {\n        if (!isEmptyOAS3Content) {\n            return Object.keys(content)[0];\n        } else if (!isEmptyOAS2Examples) {\n            return Object.keys(oas2Examples)[0]\n        }\n        return null\n    });\n    const [selectedExample, setSelectedExample] = useState();\n    // in oas3, multiple examples can be provided \n    const [selectedExampleType, setSelectedExampleType] = useState();\n    const classes = useStyles();\n\n    useEffect(() => {\n        if (!isEmptyOAS3Content && selectedMediaType) {\n            const { example, examples } = content[selectedMediaType]\n            if (example) {\n                setSelectedExample(JSON.stringify(example, null, '\\t'))\n            } else if (examples && Object.keys(examples).length > 0) {\n                setSelectedExampleType(Object.keys(examples)[0])\n            }\n        } else if (!isEmptyOAS2Examples && selectedMediaType) {\n            const example = oas2Examples[selectedMediaType]\n            if (example) {\n                setSelectedExample(JSON.stringify(example, null, '\\t'))\n            }\n        }\n    }, [selectedMediaType]);\n\n    useEffect(() => {\n        if (selectedExampleType) {\n            const example = content[selectedMediaType].examples[selectedExampleType].value\n            if (example) {\n                setSelectedExample(JSON.stringify(example, null, '\\t'))\n            }\n        }\n    }, [selectedExampleType]);\n\n    return (\n        <Grid container>\n            <Grid item xs={1}>{responseCode}</Grid>\n            <Grid item xs={11}>\n                {selectedExample ?\n                    <>\n                        <TextField\n                            select\n                            SelectProps={{\n                                autoWidth: true,\n                                IconComponent: ArrowDropDown,\n                            }}\n                            className={classes.dropdown}\n                            label='Media Type'\n                            value={selectedMediaType}\n                            onChange={({ target: { value } }) => {\n                                setSelectedMediaType(value)\n                            }}\n                            helperText='Controls Accept header'\n                            margin='dense'\n                            variant='outlined'\n                        >\n                            {!isEmptyOAS3Content ? Object.keys(content)\n                                .map((mediaType,) => (\n                                    <MenuItem\n                                        key={mediaType}\n                                        value={mediaType}>\n                                        {mediaType}\n                                    </MenuItem>\n                                ))\n                                :\n                                !isEmptyOAS2Examples && Object.keys(oas2Examples)\n                                    .map((mediaType,) => (\n                                        <MenuItem\n                                            key={mediaType}\n                                            value={mediaType}>\n                                            {mediaType}\n                                        </MenuItem>\n                                    ))\n                            }\n                        </TextField>\n                        {selectedExampleType &&\n                            <TextField\n                                select\n                                SelectProps={{\n                                    autoWidth: true,\n                                    IconComponent: ArrowDropDown,\n                                }}\n                                className={classes.dropdown}\n                                label='Examples'\n                                value={selectedExampleType}\n                                onChange={({ target: { value } }) => {\n                                    setSelectedExampleType(value)\n                                }}\n                                margin='dense'\n                                variant='outlined'\n                            >\n                                {Object.keys(content[selectedMediaType].examples)\n                                    .map((exampleType,) => (\n                                        <MenuItem\n                                            key={exampleType}\n                                            value={exampleType}>\n                                            {exampleType}\n                                        </MenuItem>\n                                    ))\n                                }\n                            </TextField>}\n                        <Typography variant='body1' gutterBottom>\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.Prototype.MockedOAS.Response.Example'\n                                defaultMessage='Example Value'\n                            />\n                        </Typography>\n                        <Suspense fallback={<CircularProgress />}>\n                            <MonacoEditor\n                                // 19 is the default line height\n                                height={selectedExample.split(/\\r\\n|\\r|\\n/).length * 19}\n                                theme='vs-dark'\n                                value={selectedExample}\n                                options={{\n                                    readOnly: true,\n                                    lineNumbers: 'off',\n                                    scrollbar: { vertical: 'hidden' },\n                                    renderWhitespace: 'none',\n                                    automaticLayout: true,\n                                    minimap: { enabled: false },\n                                }}\n                                language='json'\n                            />\n                        </Suspense>\n                    </>\n                    :\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.Prototype.MockedOAS.Response.Example.NotProvided'\n                        defaultMessage='Response Examples are not provided in the API definition'\n                    />\n                }\n            </Grid>\n        </Grid>\n    );\n}\n\nMockedOASExample.propTypes = {\n    responseCode: PropTypes.string.isRequired,\n    response: PropTypes.shape({ content: PropTypes.shape({}), examples: PropTypes.shape({}) }).isRequired,\n};\n\nMockedOASOperation.propTypes = {\n    operation: PropTypes.shape({ responses: PropTypes.shape({}), }).isRequired,\n};\n\nexport default React.memo(MockedOASOperation);\n","/*\n *  Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React, {\n    useCallback,\n    lazy,\n    Suspense,\n    useContext,\n    useState,\n} from 'react';\nimport {\n    Grid,\n    Typography,\n    makeStyles,\n    Button,\n} from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"GenResourceMonaco\" */));\n\nconst xMediationScriptProperty = 'x-mediation-script';\nconst defaultScript = '/* mc.setProperty(\\'CONTENT_TYPE\\', \\'application/json\\');\\n\\t'\n    + 'mc.setPayloadJSON(\\'{ \"data\" : \"sample JSON\"}\\');*/\\n'\n    + '/*Uncomment the above comment block to send a sample response.*/';\n\nconst useStyles = makeStyles(() => {\n    return {\n        scriptResetButton: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            marginBottom: '10px',\n        },\n    };\n});\n\n/**\n * Retrieve mock script for the method of the resource.\n * @param {*} mockScripts mock scripts array\n * @param {*} path path/target\n * @param {*} method method/verb\n * @returns {any} js mock script\n */\nfunction getGeneratedMockScriptOfAPI(mockScripts, path, method) {\n    if (mockScripts) {\n        const matchedResource = mockScripts.find(\n            mockScript => (mockScript.verb.toLowerCase() === method.toLowerCase() && mockScript.path === path));\n        if (matchedResource) {\n            return matchedResource.content;\n        }\n    }\n    return null;\n}\n\n/**\n * Script mock impl for operation.\n *\n * @param {any} props The input props\n * @return {any} The JSX representation of the component.\n * */\nfunction MockScriptOperation(props) {\n    const {\n        resourcePath, resourceMethod, operation, updatePaths, paths, mockScripts\n    } = props;\n    const { api } = useContext(APIContext);\n    const [showReset, setShowReset] = useState(false);\n    const [mockValueDetails, setMockValueDetails] = useState({ resourcePath: '', resourceMethod: '' });\n    const classes = useStyles();\n\n    /**\n     * Handles the onChange event of the script editor.\n     *\n     * @param {string} value The editor content\n     * @param {string} path The path value of the resource.\n     * @param {string} method The resource method.\n     * */\n    const onScriptChange = useCallback(\n        (value, path, method) => {\n            const tmpPaths = JSON.parse(JSON.stringify(paths));\n            tmpPaths[path][method][xMediationScriptProperty] = value;\n            updatePaths(tmpPaths);\n        },\n        [mockValueDetails.resourcePath, mockValueDetails.resourceMethod],\n    );\n\n    const mediationScript = operation[xMediationScriptProperty];\n    const script = mediationScript === undefined ? defaultScript : mediationScript;\n    const originalScript = getGeneratedMockScriptOfAPI(mockScripts, resourcePath, resourceMethod);\n\n    return (\n        <Grid container direction='column'>\n            <Grid item className={classes.scriptResetButton}>\n                <Typography variant='subtitle2'>\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.Prototype.MockImplEndpoints.script'\n                        defaultMessage='Script'\n                    />\n                </Typography>\n                {showReset\n                    && (\n                        <Button\n                            variant='contained'\n                            color='primary'\n                            onClick={() => {\n                                setShowReset(false);\n                                setMockValueDetails({ resourcePath, resourceMethod });\n                                onScriptChange(originalScript, resourcePath, resourceMethod);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.Prototype.MockImplEndpoints.script.reset'\n                                defaultMessage='Reset'\n                            />\n                        </Button>\n                    )}\n            </Grid>\n            <Grid item>\n                <Suspense fallback={<CircularProgress />}>\n                    <MonacoEditor\n                        height='50vh'\n                        width='100%'\n                        theme='vs-dark'\n                        value={script}\n                        options={{\n                            selectOnLineNumbers: true,\n                            readOnly: `${isRestricted(['apim:api_create'], api)}`,\n                        }}\n                        language='javascript'\n                        onChange={(content) => {\n                            setShowReset(true);\n                            setMockValueDetails({ resourcePath, resourceMethod });\n                            onScriptChange(content, resourcePath, resourceMethod);\n                        }}\n                    />\n                </Suspense>\n            </Grid>\n        </Grid>\n    );\n}\n\nMockScriptOperation.propTypes = {\n    resourcePath: PropTypes.string.isRequired,\n    resourceMethod: PropTypes.string.isRequired,\n    paths: PropTypes.shape({}).isRequired,\n    updatePaths: PropTypes.func.isRequired,\n    operation: PropTypes.shape({}).isRequired,\n    mockScripts: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.shape({}), PropTypes.string])).isRequired,\n};\n\nexport default React.memo(MockScriptOperation);\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Button,\n    Divider,\n    Grid,\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary,\n    Typography,\n} from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Utils from 'AppData/Utils';\n\nconst useStyles = verb => makeStyles((theme) => {\n    const backgroundColor = theme.custom.resourceChipColors[verb];\n    return {\n        customButton: {\n            '&:hover': { backgroundColor },\n            backgroundColor,\n            width: theme.spacing(12),\n            color: theme.palette.getContrastText(backgroundColor),\n        },\n        paperStyles: {\n            border: `1px solid ${backgroundColor}`,\n            borderBottom: '',\n        },\n        customDivider: {\n            backgroundColor,\n        },\n        highlightSelected: {\n            backgroundColor: Utils.hexToRGBA(backgroundColor, 0.1),\n        },\n        contentNoMargin: {\n            margin: theme.spacing(0),\n        },\n        targetText: {\n            maxWidth: 180,\n            margin: '0px 20px',\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n            display: 'inline-block',\n        },\n        title: {\n            display: 'inline',\n            margin: `0 ${theme.spacing(5)}px`,\n        },\n    };\n});\n\n/**\n *\n * Common resource component for mock impl endpoints\n * @export\n * @param {*} props input props\n * @returns {React.Component} @inheritdoc\n */\nfunction GenericOperation(props) {\n    const {\n        target,\n        verb,\n        children,\n    } = props;\n    const [isExpanded, setIsExpanded] = useState(false);\n    const classes = useStyles(verb)();\n\n    /**\n     * Handle panel expansions when navigation happen between mockimpl options\n     *\n     * @param {*} event event\n     * @param {*} expanded status of the expansion panel\n     */\n    function handleExpansion(event, expanded) {\n        setIsExpanded(expanded);\n    }\n\n    return (\n        <>\n            <ExpansionPanel\n                expanded={isExpanded}\n                onChange={handleExpansion}\n                className={classes.paperStyles}\n            >\n                <ExpansionPanelSummary\n                    className={classes.highlightSelected}\n                    disableRipple\n                    disableTouchRipple\n                    expandIcon={<ExpandMoreIcon />}\n                    id={verb + target}\n                    classes={{ content: classes.contentNoMargin }}\n                >\n                    <Grid container direction='row' justify='space-between' alignItems='center' spacing={0}>\n                        <Grid item md={4} style={{ display: 'flex', alignItems: 'center' }}>\n                            <Button\n                                disableFocusRipple\n                                variant='contained'\n                                aria-label={'HTTP verb ' + verb}\n                                size='small'\n                                className={classes.customButton}\n                            >\n                                {verb}\n                            </Button>\n                            <Typography\n                                display='inline-block'\n                                variant='h6'\n                                component='div'\n                                gutterBottom\n                                className={classes.targetText}\n                                title={target}\n                            >\n                                {target}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </ExpansionPanelSummary>\n                <Divider light className={classes.customDivider} />\n                <ExpansionPanelDetails>\n                    {children}\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        </>\n    );\n}\n\nGenericOperation.propTypes = {\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    children: PropTypes.element.isRequired,\n};\n\nexport default React.memo(GenericOperation);\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport {\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary,\n    Grid,\n    Typography,\n    withStyles,\n    Box,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Certificates from './GeneralConfiguration/Certificates';\nimport API from '../../../../data/api'; // TODO: Use webpack aliases instead of relative paths ~tmkb\nimport Alert from '../../../Shared/Alert';\nimport { endpointsToList } from './endpointUtils';\n\nconst styles = (theme) => ({\n    configHeaderContainer: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    generalConfigContent: {\n        boxShadow: 'inset -1px 2px 3px 0px #c3c3c3',\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n        display: 'flex',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        flexBasis: '33.33%',\n        flexShrink: 0,\n        fontWeight: '900',\n    },\n    endpointConfigSection: {\n        padding: '10px',\n    },\n    generalConfigPanel: {\n        width: '100%',\n    },\n    securityHeading: {\n        fontWeight: 600,\n    },\n    sandboxEndpointSwitch: {\n        marginLeft: theme.spacing(2),\n    },\n});\n\n/**\n * The component which holds the general configurations of the endpoints.\n *\n * @param {any} props The input properties to the component\n * @returns {any} The HTML representation of the component.\n * */\nfunction GeneralConfiguration(props) {\n    const {\n        intl,\n        epConfig,\n        endpointType,\n        classes,\n    } = props;\n    const [isConfigExpanded, setConfigExpand] = useState(false);\n    const [endpointCertificates, setEndpointCertificates] = useState([]);\n    const [aliasList, setAliasList] = useState([]);\n\n    /**\n     * Method to upload the certificate content by calling the rest api.\n     * */\n    const saveCertificate = (certificate, endpoint, alias) => {\n        return API.addCertificate(certificate, endpoint, alias)\n            .then((resp) => {\n                if (resp.status === 201) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.add.success',\n                        defaultMessage: 'Certificate added successfully',\n                    }));\n                    const tmpCertificates = [...endpointCertificates];\n                    tmpCertificates.push({\n                        alias: resp.obj.alias,\n                        endpoint: resp.obj.endpoint,\n                    });\n                    setEndpointCertificates(tmpCertificates);\n                }\n            })\n            .catch((err) => {\n                console.error(err.message);\n                if (err.message === 'Conflict') {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.alias.exist',\n                        defaultMessage: 'Adding Certificate Failed. Certificate Alias Exists.',\n                    }));\n                } else if (err.response) {\n                    Alert.error(err.response.body.description);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.error',\n                        defaultMessage: 'Something went wrong while adding the certificate.',\n                    }));\n                }\n            });\n    };\n    /**\n     * Method to delete the selected certificate.\n     *\n     * @param {string} alias The alias of the certificate to be deleted.\n     * */\n    const deleteCertificate = (alias) => {\n        return API.deleteEndpointCertificate(alias)\n            .then((resp) => {\n                setEndpointCertificates(() => {\n                    if (resp.status === 200) {\n                        return endpointCertificates.filter((cert) => {\n                            return cert.alias !== alias;\n                        });\n                    } else {\n                        return -1;\n                    }\n                });\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.delete.success',\n                    defaultMessage: 'Certificate Deleted Successfully',\n                }));\n            })\n            .catch((err) => {\n                console.log(err);\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.delete.error',\n                    defaultMessage: 'Error Deleting Certificate',\n                }));\n            });\n    };\n\n    // Get the certificates from backend.\n    useEffect(() => {\n        if (!isRestricted(['apim:ep_certificates_view', 'apim:api_view'])) {\n            const endpointCertificatesList = [];\n            const aliases = [];\n\n            let endpoints = endpointsToList(epConfig);\n            const filteredEndpoints = [];\n            const epLookup = [];\n            for (const ep of endpoints) {\n                if (ep) {\n                    if (!epLookup.includes(ep.url)) {\n                        filteredEndpoints.push(ep);\n                        epLookup.push(ep.url);\n                    }\n                }\n            }\n            endpoints = filteredEndpoints;\n\n            for (const ep of endpoints) {\n                if (ep && ep.url) {\n                    const params = {};\n                    params.endpoint = ep.url;\n                    API.getEndpointCertificates(params)\n                        .then((response) => {\n                            const { certificates } = response.obj;\n                            for (const cert of certificates) {\n                                endpointCertificatesList.push(cert);\n                                aliases.push(cert.alias);\n                            }\n                        })\n                        .catch((err) => {\n                            console.error(err);\n                        });\n                }\n            }\n            setEndpointCertificates(endpointCertificatesList);\n            setAliasList(aliases);\n        } else {\n            setEndpointCertificates([]);\n        }\n    }, []);\n\n    return (\n        <>\n            <ExpansionPanel\n                expanded={isConfigExpanded}\n                onChange={() => setConfigExpand(!isConfigExpanded)}\n                className={classes.generalConfigPanel}\n                disabled={isRestricted(['apim:ep_certificates_view', 'apim:api_view'])}\n            >\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    id={endpointType.key + '-panel1bh-header'}\n                    className={classes.configHeaderContainer}\n                >\n                    {endpointType.key === 'awslambda' ? (\n                        <div />\n                    ) : (\n                        <Typography\n                            className={classes.secondaryHeading}\n                            hidden={endpointType.key === 'awslambda'}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.GeneralConfiguration.certificates.sub.heading'\n                                defaultMessage='Certificates'\n                            />\n                            :\n                            {' '}\n                            {endpointCertificates.length}\n                            {isRestricted(['apim:ep_certificates_view', 'apim:api_view']) && (\n                                <Box ml={2}>\n                                    <Typography variant='body2' color='primary'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Endpoints.GeneralConfiguration.not.allowed'\n                                            defaultMessage={'*You are not authorized to view certificates'\n                                        + ' due to insufficient permissions'}\n                                        />\n                                    </Typography>\n                                </Box>\n                            )}\n                        </Typography>\n                    )}\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.generalConfigContent}>\n                    <Grid\n                        container\n                        className={classes.endpointConfigSection}\n                        hidden={endpointType.key === 'default' || endpointType.key === 'awslambda'}\n                    >\n                        <Certificates\n                            endpoints={endpointsToList(epConfig)}\n                            certificates={endpointCertificates}\n                            uploadCertificate={saveCertificate}\n                            deleteCertificate={deleteCertificate}\n                            aliasList={aliasList}\n                        />\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        </>\n    );\n}\n\nGeneralConfiguration.propTypes = {\n    epConfig: PropTypes.shape({}).isRequired,\n    endpointType: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(GeneralConfiguration));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport {\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary,\n    Grid,\n    Icon,\n    IconButton,\n    MenuItem,\n    TextField,\n    Typography,\n    withStyles,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport cloneDeep from 'lodash.clonedeep';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport EndpointListing from 'AppComponents/Apis/Details/Endpoints/EndpointListing';\nimport LoadBalanceConfig from 'AppComponents/Apis/Details/Endpoints/LoadBalanceConfig';\nimport Collapse from '@material-ui/core/Collapse';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { getEndpointTypeProperty } from './endpointUtils';\n\nconst styles = (theme) => ({\n    endpointTypeSelect: {\n        width: '50%',\n        marginTop: theme.spacing(1),\n    },\n    configHeaderContainer: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    generalConfigContent: {\n        boxShadow: 'inset -1px 2px 3px 0px #c3c3c3',\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n        display: 'flex',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        flexBasis: '33.33%',\n        flexShrink: 0,\n        fontWeight: '900',\n    },\n    endpointConfigSection: {\n        padding: '10px',\n    },\n    generalConfigPanel: {\n        width: '100%',\n    },\n    endpointsTypeSelectWrapper: {\n        display: 'flex',\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    lbConfigBtn: {\n        position: 'relative',\n        top: '10px',\n    },\n    endpointName: {\n        fontWeight: 600,\n    },\n    wrapper: {\n        width: '100%',\n    },\n});\n\nconst endpointTypes = [\n    { key: 'none', value: 'None' },\n    { key: 'failover', value: 'Failover' },\n    { key: 'load_balance', value: 'Load Balanced' },\n];\n\n/**\n * The component which holds the load balance and failover configuration.\n *\n * @param {any} props The input properties to the component\n * @returns {any} The HTML representation of the component.\n * */\nfunction LoadbalanceFailoverConfig(props) {\n    const {\n        epConfig,\n        classes,\n        endpointsDispatcher,\n        toggleAdvanceConfig,\n        toggleESConfig,\n        globalEpType,\n        handleEndpointCategorySelect,\n    } = props;\n    const { api } = useContext(APIContext);\n    const [isConfigExpanded, setConfigExpand] = useState(false);\n    const [endpointType, setEndpointType] = useState(props);\n    const [isLBConfigOpen, setLBConfigOpen] = useState(false);\n\n    useEffect(() => {\n        const epType = epConfig.endpoint_type;\n        if (epType === 'http' || epType === 'address') {\n            setEndpointType('none');\n        } else {\n            setEndpointType(epType);\n        }\n    }, [props]);\n\n    /**\n     * Method to add new loadbalance/ failover endpoint to the existing endpoints.\n     *\n     * @param {string} category The endpoint category (production/ sandbox)\n     * @param {string} type The endpoint type. (load_balance/ failover)\n     * @param {string} newURL The url of the new endpoint.\n     * */\n    const addEndpoint = (category, type, newURL) => {\n        const endpointConfigCopy = cloneDeep(epConfig);\n        const endpointTemplate = {\n            endpoint_type: globalEpType.key,\n            template_not_supported: false,\n            url: newURL,\n        };\n        const epConfigProperty = getEndpointTypeProperty(type, category);\n        let endpointList = endpointConfigCopy[epConfigProperty];\n        /**\n         * Check whether we have existing endpoints added.\n         * */\n        if (endpointList) {\n            if (!Array.isArray(endpointList)) {\n                endpointList = [endpointList].concat(endpointTemplate);\n            } else {\n                endpointList = endpointList.concat(endpointTemplate);\n            }\n        } else {\n            endpointList = [endpointTemplate];\n        }\n        endpointConfigCopy[epConfigProperty] = endpointList;\n        endpointsDispatcher({ action: 'add_endpoint', value: endpointConfigCopy });\n    };\n\n    /**\n     * Method to handle the loadbalance configuration changes.\n     *\n     * @param {object} lbConfig The modified loadbalance configuration.\n     * */\n    const handleLBConfigChange = (lbConfig) => {\n        endpointsDispatcher({ action: 'set_lb_config', value: { ...epConfig, ...lbConfig } });\n        setLBConfigOpen(false);\n    };\n\n    const getEndpointTypeHeading = () => {\n        switch (endpointType) {\n            case 'none':\n                return (\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.none.heading'\n                        defaultMessage='Not Configured'\n                    />\n                );\n            case 'failover':\n                return (\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.failover.heading'\n                        defaultMessage='Failover Endpoints'\n                    />\n                );\n            default:\n                return (\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.loadbalance.heading'\n                        defaultMessage='Load Balanced Endpoints'\n                    />\n                );\n        }\n    };\n\n    /**\n     * Method to remove the selected endpoint from the endpoints list.\n     *\n     * @param {number} index The selected endpoint index\n     * @param {string} epType The type of the endpoint. (loadbalance/ failover)\n     * @param {string} category The endpoint category (production/ sandbox)\n     * */\n    const removeEndpoint = (index, epType, category) => {\n        const tmpEndpointConfig = cloneDeep(epConfig);\n        const endpointConfigProperty = getEndpointTypeProperty(epType, category);\n        const indexToRemove = epType === 'failover' ? index - 1 : index;\n        const tmpEndpoints = tmpEndpointConfig[endpointConfigProperty];\n        tmpEndpoints.splice(indexToRemove, 1);\n        endpointsDispatcher({\n            action: 'remove_endpoint',\n            value: { ...epConfig, [endpointConfigProperty]: tmpEndpoints },\n        });\n    };\n\n    const editEndpoint = () => {};\n    const handleEndpointTypeSelect = (event) => {\n        setEndpointType(event.target.value);\n        handleEndpointCategorySelect(event);\n    };\n\n    return (\n        <>\n            <ExpansionPanel\n                expanded={isConfigExpanded || endpointType === 'load_balance' || endpointType === 'failover'}\n                onChange={() => setConfigExpand(!isConfigExpanded)}\n                className={classes.generalConfigPanel}\n            >\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls='panel1bh-content'\n                    id='panel1bh-header'\n                    className={classes.configHeaderContainer}\n                >\n                    <Typography className={classes.secondaryHeading}>\n                        {getEndpointTypeHeading()}\n                    </Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.generalConfigContent}>\n                    {(!epConfig.production_endpoints && !epConfig.sandbox_endpoints)\n                        ? (\n                            <InlineMessage>\n                                <div className={classes.contentWrapper}>\n                                    <Typography component='p' className={classes.content}>\n                                        <FormattedMessage\n                                            id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.no.endpoints.message'\n                                            defaultMessage='Add Production/ Sandbox endpoints to configure.'\n                                        />\n                                    </Typography>\n                                </div>\n                            </InlineMessage>\n                        )\n                        : (\n                            <Grid container item xs={12}>\n                                <Grid xs={12} className={classes.endpointsTypeSelectWrapper}>\n                                    <TextField\n                                        disabled={isRestricted(['apim:api_create'], api)}\n                                        id='certificateEndpoint'\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.endpoint.type'\n                                                defaultMessage='Endpoint Type'\n                                            />\n                                        )}\n                                        value={endpointType}\n                                        placeholder='Endpoint'\n                                        onChange={handleEndpointTypeSelect}\n                                        margin='normal'\n                                        variant='outlined'\n                                        select\n                                        className={classes.endpointTypeSelect}\n                                    >\n                                        {endpointTypes.map((type) => {\n                                            return <MenuItem\n                                                value={type.key}\n                                                id={'config-type-' + type.key}\n                                            >\n                                                {type.value}\n                                            </MenuItem>;\n                                        })}\n                                    </TextField>\n                                    <div className={classes.lpConfigWrapper}>\n                                        <IconButton\n                                            className={classes.lbConfigBtn}\n                                            disabled={epConfig.endpoint_type !== 'load_balance'}\n                                            aria-label='Delete'\n                                            onClick={() => setLBConfigOpen(true)}\n                                        >\n                                            <Icon>\n                                                settings\n                                            </Icon>\n                                        </IconButton>\n                                    </div>\n                                </Grid>\n                                <Grid xs={12} container spacing={2}>\n                                    <Collapse className={classes.wrapper} in={endpointType !== 'none'}>\n                                        {epConfig.production_endpoints\n                                    && (\n                                        <Grid xs={12} className={classes.endpointsWrapperLeft}>\n                                            <Typography className={classes.endpointName}>\n                                                {epConfig.endpoint_type === 'failover'\n                                                    ? (\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.Endpoints.'\n                                                            + 'LoadbalanceFailoverConfig.production.'\n                                                            + 'failover.endpoint'}\n                                                            defaultMessage='Production Failover Endpoints'\n                                                        />\n                                                    )\n                                                    : (\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.Endpoints.LoadbalanceFailoverConfig.'\n                                                    + 'production.loadbalance.endpoint'}\n                                                            defaultMessage='Production Loadbalanced Endpoints'\n                                                        />\n                                                    )}\n                                            </Typography>\n                                            <EndpointListing\n                                                apiEndpoints={epConfig.production_endpoints}\n                                                failOvers={epConfig.production_failovers}\n                                                epType={epConfig.endpoint_type}\n                                                addNewEndpoint={addEndpoint}\n                                                removeEndpoint={removeEndpoint}\n                                                editEndpoint={editEndpoint}\n                                                setAdvancedConfigOpen={toggleAdvanceConfig}\n                                                setESConfigOpen={toggleESConfig}\n                                                category='production_endpoints'\n                                                apiId={api.id}\n                                            />\n                                        </Grid>\n                                    )}\n                                        {epConfig.sandbox_endpoints\n                                    && (\n                                        <Grid xs={12} className={classes.endpointsWrapperRight}>\n                                            <Typography className={classes.endpointName}>\n                                                {epConfig.endpoint_type === 'failover'\n                                                    ? (\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.Endpoints.'\n                                                            + 'LoadbalanceFailoverConfig.sandbox.'\n                                                            + 'failover.endpoint'}\n                                                            defaultMessage='Sandbox Failover Endpoints'\n                                                        />\n                                                    )\n                                                    : (\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.Endpoints.LoadbalanceFailoverConfig.'\n                                                    + 'sandbox.loadbalance.endpoint'}\n                                                            defaultMessage='Sandbox Loadbalanced Endpoints'\n                                                        />\n                                                    )}\n                                            </Typography>\n                                            <EndpointListing\n                                                apiEndpoints={epConfig.sandbox_endpoints}\n                                                failOvers={epConfig.sandbox_failovers}\n                                                epType={epConfig.endpoint_type}\n                                                addNewEndpoint={addEndpoint}\n                                                removeEndpoint={removeEndpoint}\n                                                editEndpoint={editEndpoint}\n                                                setAdvancedConfigOpen={toggleAdvanceConfig}\n                                                setESConfigOpen={toggleESConfig}\n                                                category='sandbox_endpoints'\n                                                apiId={api.id}\n                                            />\n                                        </Grid>\n                                    )}\n                                    </Collapse>\n                                </Grid>\n                            </Grid>\n                        )}\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n            <Dialog open={isLBConfigOpen}>\n                <DialogTitle>\n                    <Typography className={classes.configDialogHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.load.balance.configuration.title'\n                            defaultMessage='Load Balance Configurations'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <LoadBalanceConfig\n                        handleLBConfigChange={handleLBConfigChange}\n                        closeLBConfigDialog={() => setLBConfigOpen(false)}\n                        algoCombo={epConfig.algoCombo}\n                        algoClassName={epConfig.algoClassName}\n                        sessionTimeOut={epConfig.sessionTimeOut}\n                        failOver={epConfig.failOver}\n                        sessionManagement={epConfig.sessionManagement}\n                    />\n                </DialogContent>\n            </Dialog>\n        </>\n    );\n}\n\nLoadbalanceFailoverConfig.propTypes = {\n    epConfig: PropTypes.shape({}).isRequired,\n    endpointSecurityInfo: PropTypes.shape({}).isRequired,\n    endpointType: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    endpointsDispatcher: PropTypes.func.isRequired,\n    toggleAdvanceConfig: PropTypes.func.isRequired,\n    toggleESConfig: PropTypes.func.isRequired,\n    handleEndpointCategorySelect: PropTypes.func.isRequired,\n    globalEpType: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(LoadbalanceFailoverConfig));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Grid, withStyles } from '@material-ui/core';\nimport { injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport GenericEndpoint from './GenericEndpoint';\nimport GenericEndpointAdd from './GenericEndpointAdd';\n\nconst styles = (theme) => ({\n    endpointInputWrapper: {\n        display: 'flex',\n    },\n    epInput: {\n        width: '100%',\n    },\n    epTypeWrapper: {\n        display: 'flex',\n        padding: '5px',\n    },\n    epTypeName: {\n        paddingTop: '10px',\n        fontWeight: 600,\n    },\n    epConfig: {\n        justifyContent: 'flex-end',\n    },\n    leftArrow: {\n        paddingTop: '6px',\n    },\n    leftArrowLight: {\n        color: '#c5c5c5',\n        paddingTop: '6px',\n    },\n    dialogHeader: {\n        fontWeight: 600,\n    },\n    listItemOdd: {\n        background: '#ececec',\n        borderRadius: '5px',\n        '&:hover': {\n            backgroundColor: theme.palette.grey[300],\n        },\n        '&:focus': {\n            backgroundColor: theme.palette.grey[400],\n        },\n    },\n    listItem: {\n        borderRadius: '5px',\n        '&:hover': {\n            backgroundColor: theme.palette.grey[300],\n        },\n        '&:focus': {\n            backgroundColor: theme.palette.grey[400],\n        },\n    },\n});\n\n/**\n * The Component for endpoint listing.\n * @param {*} props The props that are being passed to the component.\n * @returns {any} The HTML view of the ep listing component.\n */\nfunction EndpointListing(props) {\n    const {\n        classes,\n        category,\n        apiEndpoints,\n        epType,\n        failOvers,\n        editEndpoint,\n        addNewEndpoint,\n        removeEndpoint,\n        setAdvancedConfigOpen,\n        setESConfigOpen,\n        apiId,\n    } = props;\n    const [endpointType, setEndpointType] = useState(epType);\n    const [endpoints, setEndpoints] = useState([{ url: 'http://myservice/endpoint' }]);\n    const selectedRef = useRef(null);\n\n    /**\n     * Method to add a new endpoint.\n     *\n     * @param {string} url The url of the endpoint that needs to be added.\n     * */\n    const addEndpoint = (url) => {\n        addNewEndpoint(category, epType, url);\n    };\n\n    useEffect(() => {\n        setEndpointType(epType);\n        setEndpoints(() => {\n            if (apiEndpoints !== null && epType === 'failover') {\n                return ([apiEndpoints].concat(failOvers));\n            } else {\n                if (apiEndpoints !== undefined) {\n                    return Array.isArray(apiEndpoints) ? apiEndpoints : [apiEndpoints];\n                }\n                return [{ url: 'http://myservice/' }];\n            }\n        });\n    }, [props]);\n\n    return (\n        <div className={classes.listingWrapper} ref={selectedRef}>\n            <Grid container xs={12}>\n                <Grid xs={12}>\n                    {(endpointType === 'failover' || endpointType === 'load_balance') ?\n                        <GenericEndpointAdd\n                            addEndpoint={addEndpoint}\n                            endpointType={endpointType}\n                            category={category}\n                        /> : <div />\n                    }\n                </Grid>\n                <Grid xs={12}>\n                    {\n                        (endpoints.map((ep, index) => {\n                            if (index > 0) {\n                                return (\n                                    <GenericEndpoint\n                                        readOnly\n                                        endpointURL={endpoints[index] ? endpoints[index].url : ''}\n                                        type={endpointType}\n                                        index={index}\n                                        category={category}\n                                        editEndpoint={editEndpoint}\n                                        deleteEndpoint={removeEndpoint}\n                                        setAdvancedConfigOpen={setAdvancedConfigOpen}\n                                        setESConfigOpen={setESConfigOpen}\n                                        apiId={apiId}\n                                    />\n                                );\n                            }\n                            return (<div />);\n                        }))\n                    }\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nEndpointListing.propTypes = {\n    classes: PropTypes.shape({\n        epTypeWrapper: PropTypes.shape({}),\n        epTypeName: PropTypes.shape({}),\n        listingWrapper: PropTypes.shape({}),\n        epConfig: PropTypes.shape({}),\n    }).isRequired,\n    epType: PropTypes.string.isRequired,\n    category: PropTypes.string.isRequired,\n    apiEndpoints: PropTypes.shape({}).isRequired,\n    failOvers: PropTypes.shape({}).isRequired,\n    addNewEndpoint: PropTypes.func.isRequired,\n    removeEndpoint: PropTypes.func.isRequired,\n    editEndpoint: PropTypes.func.isRequired,\n    setAdvancedConfigOpen: PropTypes.func.isRequired,\n    setESConfigOpen: PropTypes.func.isRequired,\n    apiId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(EndpointListing));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useState, useContext } from 'react';\n\nimport {\n    Icon,\n    IconButton,\n    InputAdornment,\n    TextField,\n    withStyles,\n} from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst styles = (theme) => ({\n    endpointInputWrapper: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    textField: {\n        width: '100%',\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: theme.spacing(1),\n    },\n});\n\n/**\n * This component represents the view and functions of endpoint add.\n *\n * @param {any} props The input props.\n * @returns {any} HTML representation of the component.\n * */\nfunction GenericEndpointAdd(props) {\n    const {\n        classes,\n        addEndpoint,\n        endpointType,\n        category\n    } = props;\n    const [serviceUrl, setServiceUrl] = useState('');\n    const { api } = useContext(APIContext);\n\n    /**\n     * The method to handle endpoint add button click action.\n     * */\n    const onAddEndpoint = () => {\n        setServiceUrl('');\n        addEndpoint(serviceUrl);\n    };\n\n    return (\n        <div className={classes.endpointInputWrapper}>\n            <TextField\n                label={(\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GenericEndpoint.service.url.input'\n                        defaultMessage='Service URL'\n                    />\n                )}\n                disabled={isRestricted(['apim:api_create'], api)}\n                className={classes.textField}\n                value={serviceUrl}\n                fullWidth\n                onChange={(event) => setServiceUrl(event.target.value)}\n                variant='outlined'\n                margin='normal'\n                placeholder='Enter the Endpoint URL and press + button'\n                InputProps={{\n                    id: category + '-' + endpointType,\n                    endAdornment: (\n                        <InputAdornment position='end'>\n                            <IconButton\n                                onClick={onAddEndpoint}\n                                color='green'\n                                className={classes.iconButton}\n                                aria-label='Search'\n                                disabled={serviceUrl === ''}\n                                id={category + '-' + endpointType + '-add-btn'}\n                            >\n                                <Icon>\n                                    add\n                                </Icon>\n                            </IconButton>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n        </div>\n    );\n}\n\nGenericEndpointAdd.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    addEndpoint: PropTypes.func.isRequired,\n    endpointType: PropTypes.string.isRequired,\n    category: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(GenericEndpointAdd);\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport {\n    TextField, MenuItem, Grid, Button, withStyles,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst algorithms = [\n    {\n        key: 'org.apache.synapse.endpoints.algorithms.RoundRobin',\n        value: 'Round-Robin',\n    },\n    { key: 'other', value: 'Other' },\n];\nconst sessionManagementOps = [\n    { key: 'http', value: 'Transport' },\n    { key: 'soap', value: 'SOAP' },\n    { key: 'simpleClientSession', value: 'Client Id' },\n    { key: 'none', value: 'None' },\n];\n\nconst defaultTemplateObj = {\n    algoClassName: algorithms[0].key,\n    algoCombo: algorithms[0].key,\n    sessionManagement: sessionManagementOps[0].key,\n    sessionTimeOut: 300,\n    failOver: false,\n};\n\nconst styles = (theme) => ({\n    configButtonContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: theme.spacing(1),\n    },\n});\n\n/**\n * The component for loadbalance endpoint configuration.\n * @param {any} props The props that are being passed.\n * @returns {any} The HTML contents of the Configuration component.\n */\nfunction LoadBalanceConfig(props) {\n    const {\n        algoClassName,\n        algoCombo,\n        sessionManagement,\n        sessionTimeOut,\n        failOver,\n        handleLBConfigChange,\n        closeLBConfigDialog,\n        classes,\n    } = props;\n    const [lbConfig, setLbConfigObject] = useState(defaultTemplateObj);\n    const [algoClassNameError, setAlgoClassNameError] = useState(false);\n    const { api } = useContext(APIContext);\n\n    useEffect(() => {\n        setLbConfigObject(() => {\n            const tmpLBConfig = { ...defaultTemplateObj };\n            if (algoCombo) {\n                tmpLBConfig.algoCombo = algoCombo;\n            }\n            if (sessionManagement) {\n                tmpLBConfig.sessionManagement = sessionManagement;\n            }\n            if (algoClassName) {\n                tmpLBConfig.algoClassName = algoClassName;\n            }\n            if (sessionTimeOut) {\n                tmpLBConfig.sessionTimeOut = sessionTimeOut;\n            }\n            if (failOver) {\n                tmpLBConfig.failOver = failOver;\n            }\n            return tmpLBConfig;\n        });\n    }, [props]);\n\n    /**\n     * Method to capture the alogrithm select changes.\n     *\n     * @param {any} event The event triggered by the element.\n     * */\n    const handleAlgorithmChange = (event) => {\n        const { value } = event.target;\n        setLbConfigObject({\n            ...lbConfig,\n            algoCombo: value,\n            algoClassName: value === 'other' ? '' : defaultTemplateObj.algoClassName,\n        });\n    };\n\n    /**\n     * Method to capture the onChange event of the elements.\n     *\n     * @param {any} event The event triggered by the element.\n     * @param {string} field The respective field which is being changed.\n     * */\n    const handleFieldChange = (event, field) => {\n        setLbConfigObject({ ...lbConfig, [field]: event.target.value });\n    };\n\n    /**\n     * Method to capture the onChange event of the elements.\n     *\n     * @param {any} event The event triggered by the element.\n     * @param {string} field The respective field which is being changed.\n     * */\n    const handleFailoverFieldChange = (event, field) => {\n        setLbConfigObject({ ...lbConfig, [field]: event.target.checked });\n    };\n\n    /**\n     * Method to set the configuration changes to the original endpoints config object.\n     * */\n    const submitConfiguration = () => {\n        handleLBConfigChange(lbConfig);\n    };\n\n    return (\n        <>\n            <Grid container direction='column'>\n                <TextField\n                    id='algorithmSelect'\n                    select\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.LoadBalanceConfig.algorithm'\n                            defaultMessage='Algorithm'\n                        />\n                    )}\n                    value={lbConfig.algoCombo}\n                    onChange={handleAlgorithmChange}\n                    helperText='Please select the Loadbalance Algorithm.'\n                    margin='normal'\n                    disabled={isRestricted(['apim:api_create'], api)}\n                >\n                    {algorithms.map((algo) => (\n                        <MenuItem key={algo.key} value={algo.key} selected={lbConfig.algoCombo}>\n                            {algo.value}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                {(lbConfig.algoCombo === 'other')\n                    ? (\n                        <TextField\n                            id='customAlgoInput'\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.LoadBalanceConfig.class.name.for.algorithm'\n                                    defaultMessage='Class Name for Algorithm'\n                                />\n                            )}\n                            required\n                            error={algoClassNameError}\n                            value={lbConfig.algoClassName}\n                            onChange={(event) => handleFieldChange(event, 'algoClassName')}\n                            onBlur={() => setAlgoClassNameError(lbConfig.algoClassName === '')}\n                            helperText='Enter the class name of the loadbalance algorithm'\n                            disabled={isRestricted(['apim:api_create'], api)}\n                            margin='normal'\n                        />\n                    ) : <div /> }\n                <TextField\n                    id='sessionMgtSelect'\n                    select\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.LoadBalanceConfig.session.management'\n                            defaultMessage='Session Management'\n                        />\n                    )}\n                    value={lbConfig.sessionManagement}\n                    onChange={(event) => handleFieldChange(event, 'sessionManagement')}\n                    helperText='Please select the Session Management mechanism.'\n                    margin='normal'\n                    disabled={isRestricted(['apim:api_create'], api)}\n                >\n                    {sessionManagementOps.map((option) => (\n                        <MenuItem key={option.key} value={option.key}>\n                            {option.value}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    id='sessionTimeout'\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.LoadBalanceConfig.session.timeout'\n                            defaultMessage='Session Timeout (Millis)'\n                        />\n                    )}\n                    value={lbConfig.sessionTimeOut}\n                    onChange={(event) => handleFieldChange(event, 'sessionTimeOut')}\n                    type='number'\n                    placeholder='300'\n                    margin='normal'\n                    disabled={isRestricted(['apim:api_create'], api)}\n                />\n                <FormControlLabel\n                    control={(\n                        <Checkbox\n                            id='failOver'\n                            checked={lbConfig.failOver}\n                            onChange={(event) => handleFailoverFieldChange(event, 'failOver')}\n                            margin='normal'\n                            disabled={isRestricted(['apim:api_create'], api)}\n                        />\n                    )}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.LoadBalanceConfig.failover'\n                            defaultMessage='Enable Failover'\n                        />\n                    )}\n                />\n            </Grid>\n            <Grid className={classes.configButtonContainer}>\n                <Button\n                    color='primary'\n                    variant='contained'\n                    autoFocus\n                    onClick={submitConfiguration}\n                    disabled={lbConfig.algoClassName === '' || isRestricted(['apim:api_create'], api)}\n                    style={{ marginRight: '10px' }}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.EndpointOverview.loadbalance.config.save.button'\n                        defaultMessage='Save'\n                    />\n                </Button>\n                <Button\n                    onClick={closeLBConfigDialog}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.EndpointOverview.loadbalance.config.cancel.button'\n                        defaultMessage='Close'\n                    />\n                </Button>\n            </Grid>\n        </>\n    );\n}\n\nLoadBalanceConfig.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    algoClassName: PropTypes.string.isRequired,\n    algoCombo: PropTypes.string.isRequired,\n    sessionManagement: PropTypes.string.isRequired,\n    sessionTimeOut: PropTypes.string.isRequired,\n    failOver: PropTypes.bool.isRequired,\n    handleLBConfigChange: PropTypes.func.isRequired,\n    closeLBConfigDialog: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(LoadBalanceConfig));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport {\n    Divider,\n    FormControl,\n    Grid,\n    Input,\n    InputLabel,\n    MenuItem,\n    Select,\n    TextField,\n    Typography,\n    Button,\n    withStyles,\n    Checkbox,\n    ListItemText,\n} from '@material-ui/core';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst itemHeight = 48;\nconst itemPaddingTop = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: (itemHeight * 4.5) + itemPaddingTop, width: 250,\n        },\n    },\n};\nconst styles = (theme) => ({\n    formControl: {\n        width: '500px',\n    },\n    subTitle: {\n        fontSize: '1rem',\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    configContainer: {\n        paddingTop: '10px',\n    },\n    configSubContainer: {\n        paddingBottom: '10px',\n        marginTop: '5px',\n        padding: '5px',\n    },\n    textField: {\n        marginRight: theme.spacing(1),\n        width: '45%',\n    },\n    advanceDialogActions: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n});\n\n/**\n * The component for advanced endpoint configurations.\n * @param {any} props The input props\n * @returns {any} The HTML representation of the compoenent.\n */\nfunction AdvanceEndpointConfig(props) {\n    const { api } = useContext(APIContext);\n    const {\n        classes,\n        intl,\n        advanceConfig,\n        isSOAPEndpoint,\n        onSaveAdvanceConfig,\n        onCancel,\n    } = props;\n    const [advanceConfigObj, setAdvanceConfig] = useState(() => {\n        const config = {};\n        if (isSOAPEndpoint) {\n            config.format = 'soap11';\n            config.optimize = 'leave-as-is';\n        }\n        config.actionDuration = '30000';\n        config.actionSelect = 'fault';\n        config.factor = '';\n        config.retryDelay = '';\n        config.retryErroCode = [];\n        config.retryTimeOut = '';\n        config.suspendDuration = '';\n        config.suspendErrorCode = [];\n        config.suspendMaxDuration = '';\n        return config;\n    });\n\n    /**\n     * The error codes definition.\n     * */\n    const errorCodes = [\n        {\n            key: '101001',\n            value: '101001 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.receiver.io.error.receiving',\n                defaultMessage: 'Receiver IO error Receiving',\n            }),\n        },\n        {\n            key: '101500',\n            value: '101500 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.sender.io.error.sending',\n                defaultMessage: 'Sender IO Error Sending',\n            }),\n        },\n        {\n            key: '101000',\n            value: '101000 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.receiver.io.error.sending',\n                defaultMessage: 'Retriever IO Error Sending',\n            }),\n        },\n        {\n            key: '101501',\n            value: '101501 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.sender.io.error.receiving',\n                defaultMessage: 'Sender IO Error Receiving',\n            }),\n        },\n        {\n            key: '101503',\n            value: '101503 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.connection.failed',\n                defaultMessage: 'Connection Failed',\n            }),\n        },\n        {\n            key: '101504',\n            value: '101504 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.connection.timed.out',\n                defaultMessage: 'Connection Timed Out',\n            }),\n        },\n        {\n            key: '101505',\n            value: '101505 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.connection.closed',\n                defaultMessage: 'Connection Closed',\n            }),\n        },\n        {\n            key: '101506',\n            value: '101506 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.tpp.protocol.violation',\n                defaultMessage: 'TTP Protocol Violation',\n            }),\n        },\n        {\n            key: '101507',\n            value: '101507 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.connect.cancel',\n                defaultMessage: 'Connect Cancel',\n            }),\n        },\n        {\n            key: '101508',\n            value: '101508 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.connect.timeout',\n                defaultMessage: 'Connect Timeout',\n            }),\n        },\n        {\n            key: '101509',\n            value: '101509 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.send.abort',\n                defaultMessage: 'Send Abort',\n            }),\n        },\n        {\n            key: '101510',\n            value: '101510 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.response.processing.failure',\n                defaultMessage: 'Response Processing Failure',\n            }),\n        }];\n\n    /**\n     * Supported action items.\n     * */\n    const actionItems = [\n        {\n            key: 'fault',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.execute.fault.sequence',\n                defaultMessage: 'Execute Fault Sequence',\n            }),\n        },\n        {\n            key: 'discard',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.discard.message',\n                defaultMessage: 'Discard Message',\n            }),\n        },\n    ];\n\n    /**\n     * Message types for the address endpoint type.\n     * */\n    const messageTypes = [\n        { key: 'soap11', value: 'SOAP 1.1' },\n        { key: 'soap12', value: 'SOAP 1.2' },\n        {\n            key: 'POX',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.plain.old.xml',\n                defaultMessage: 'Plain Old XML (POX)',\n            }),\n        },\n        {\n            key: 'REST',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.representational.state.transfer',\n                defaultMessage: 'Representational State Transfer (REST)',\n            }),\n        },\n        {\n            key: 'GET',\n            value: 'GET',\n        },\n        {\n            key: 'leave-as-is',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.leave.as.is',\n                defaultMessage: 'Leave As-Is',\n            }),\n        },\n    ];\n\n    /**\n     * Address endpoint message optimizations.\n     * */\n    const optimizeOptions = [\n        { key: 'SWA', value: 'SWA' },\n        { key: 'MTOM', value: 'MTOM' },\n        {\n            key: 'leave-as-is',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.leave.as.is',\n                defaultMessage: 'Leave As-Is',\n            }),\n        },\n    ];\n\n    useEffect(() => {\n        setAdvanceConfig(() => {\n            if (advanceConfig === {}) {\n                return { ...advanceConfigObj };\n            }\n            return { ...advanceConfigObj, ...advanceConfig };\n        });\n    }, [props]);\n\n    /**\n     * Method to handle the advance endpoint field change. In each change, the advance config object is getting updated.\n     *\n     * @param {any} event The HTML event triggered by the element.\n     * @param {string} field The HTML element that is being changed.\n     * */\n    const handleConfigFieldChange = (event, field) => {\n        const di = { ...advanceConfigObj, [field]: event.target.value };\n        setAdvanceConfig(di);\n    };\n\n    return (\n        <Grid container direction='column' className={classes.configContainer}>\n            {(isSOAPEndpoint) ? (\n                <Grid item container className={classes.configSubContainer}>\n                    <Typography className={classes.subTitle}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.message.content'\n                            defaultMessage='Message Content'\n                        />\n                    </Typography>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel htmlFor='err-code-select'>\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.format.select'\n                                defaultMessage='Format'\n                            />\n                        </InputLabel>\n                        <Select\n                            autoWidth={false}\n                            value={advanceConfigObj.format}\n                            onChange={(event) => handleConfigFieldChange(event, 'format')}\n                            input={<Input id='err-code-select' />}\n                            MenuProps={MenuProps}\n                        >\n                            {messageTypes.map((messageType) => (\n                                <MenuItem key={messageType.key} value={messageType.key}>\n                                    {messageType.value}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel htmlFor='err-code-select'>\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.optimize.select'\n                                defaultMessage='Optimize'\n                            />\n                        </InputLabel>\n                        <Select\n                            autoWidth={false}\n                            value={advanceConfigObj.optimize}\n                            onChange={(event) => handleConfigFieldChange(event, 'optimize')}\n                            input={<Input id='err-code-select' />}\n                            MenuProps={MenuProps}\n                        >\n                            {optimizeOptions.map((option) => (\n                                <MenuItem key={option.key} value={option.key}>\n                                    {option.value}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                    <Divider />\n                </Grid>\n            ) : (<div />)}\n            <Grid item container className={classes.configSubContainer}>\n                <Typography className={classes.subTitle}>\n                    <FormattedMessage id='Endpoint.Suspension.State' defaultMessage='Endpoint Suspension State' />\n                </Typography>\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor='err-code-select'>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.error.code'\n                            defaultMessage='Error Code'\n                        />\n                    </InputLabel>\n                    <Select\n                        multiple\n                        autoWidth={false}\n                        value={advanceConfigObj.suspendErrorCode}\n                        onChange={(event) => handleConfigFieldChange(event, 'suspendErrorCode')}\n                        input={<Input id='err-code-select' />}\n                        MenuProps={MenuProps}\n                        variant='outlined'\n                        renderValue={(allSelected) => \n                            allSelected.map(selected => errorCodes.find(code => code.key === selected).value)}\n                    >\n                        {errorCodes.map((code) => (\n                            <MenuItem key={code.key} value={code.key}>\n                                <Checkbox checked={advanceConfigObj.suspendErrorCode.indexOf(code.key) > -1}         \n                                    color='primary'\n                                />\n                                <ListItemText primary={code.value} />\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n                <TextField\n                    className={classes.textField}\n                    id='initial-duration-input'\n                    value={advanceConfigObj.suspendDuration}\n                    onChange={(event) => handleConfigFieldChange(event, 'suspendDuration')}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.initial.duration.ms'\n                            defaultMessage='Initial Duration (ms)'\n                        />\n                    )}\n                    margin='normal'\n                    type='number'\n                />\n                <TextField\n                    className={classes.textField}\n                    id='max-duration-input'\n                    value={advanceConfigObj.suspendMaxDuration}\n                    onChange={(event) => handleConfigFieldChange(event, 'suspendMaxDuration')}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.max.duration.ms'\n                            defaultMessage='Max Duration (ms)'\n                        />\n                    )}\n                    margin='normal'\n                    type='number'\n                />\n                <TextField\n                    className={classes.textField}\n                    value={advanceConfigObj.factor}\n                    onChange={(event) => handleConfigFieldChange(event, 'factor')}\n                    id='factor-input'\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.factor'\n                            defaultMessage='Factor'\n                        />\n                    )}\n                    margin='normal'\n                />\n            </Grid>\n            <Divider />\n            <Grid item container className={classes.configSubContainer}>\n                <Typography className={classes.subTitle}>\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.endpoint.timeout.state'\n                        defaultMessage='Endpoint Timeout State'\n                    />\n                </Typography>\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor='err-code-select'>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.error.code'\n                            defaultMessage='Error Code'\n                        />\n                    </InputLabel>\n                    <Select\n                        multiple\n                        autoWidth={false}\n                        value={advanceConfigObj.retryErroCode}\n                        onChange={(event) => handleConfigFieldChange(event, 'retryErroCode')}\n                        input={<Input id='err-code-select' />}\n                        MenuProps={MenuProps}\n                        renderValue={(allSelected) => \n                            allSelected.map(selected => errorCodes.find(code => code.key === selected).value)}\n                    >\n                        {errorCodes.map((code) => (\n                            <MenuItem key={code.key} value={code.key}>\n                                <Checkbox checked={advanceConfigObj.retryErroCode.indexOf(code.key) > -1}         \n                                    color='primary'\n                                />\n                                <ListItemText primary={code.value} />\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n                <TextField\n                    className={classes.textField}\n                    id='retries-input'\n                    value={advanceConfigObj.retryTimeOut}\n                    onChange={(event) => handleConfigFieldChange(event, 'retryTimeOut')}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.retries.before.suspension'\n                            defaultMessage='Retries Before Suspension'\n                        />\n                    )}\n                    type='number'\n                    margin='normal'\n                />\n                <TextField\n                    className={classes.textField}\n                    id='retry-delay-input'\n                    value={advanceConfigObj.retryDelay}\n                    onChange={(event) => handleConfigFieldChange(event, 'retryDelay')}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.retry.delay.ms'\n                            defaultMessage='Retry Delay (ms)'\n                        />\n                    )}\n                    type='number'\n                    margin='normal'\n                />\n            </Grid>\n            <Divider />\n            <Grid item container className={classes.configSubContainer}>\n                <Typography className={classes.subTitle}>\n                    <FormattedMessage id='Connection.Timeout' defaultMessage='Connection Timeout' />\n                </Typography>\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor='err-code-select'>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.action'\n                            defaultMessage='Action'\n                        />\n                    </InputLabel>\n                    <Select\n                        autoWidth={false}\n                        value={advanceConfigObj.actionSelect}\n                        onChange={(event) => handleConfigFieldChange(event, 'actionSelect')}\n                        input={<Input id='err-code-select' />}\n                        MenuProps={MenuProps}\n                    >\n                        {actionItems.map((item) => (\n                            <MenuItem key={item.key} value={item.key}>\n                                {item.value}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n                <TextField\n                    className={classes.textField}\n                    id='duration-input'\n                    value={advanceConfigObj.actionDuration}\n                    onChange={(event) => handleConfigFieldChange(event, 'actionDuration')}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.duration.ms'\n                            defaultMessage='Duration (ms)'\n                        />\n                    )}\n                    type='number'\n                    margin='normal'\n                />\n            </Grid>\n            <Grid className={classes.advanceDialogActions}>\n                <Button\n                    onClick={() => onSaveAdvanceConfig(advanceConfigObj)}\n                    color='primary'\n                    autoFocus\n                    disabled={isRestricted(['apim:api_create'], api)}\n                    variant='contained'\n                    style={{ marginRight: '10px' }}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.config.save.button'\n                        defaultMessage='Save'\n                    />\n                </Button>\n                <Button onClick={onCancel}>\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.cancel.button'\n                        defaultMessage='Close'\n                    />\n                </Button>\n            </Grid>\n        </Grid>\n    );\n}\n\nAdvanceEndpointConfig.propTypes = {\n    classes: PropTypes.shape({\n        configContainer: PropTypes.shape({}),\n        configSubContainer: PropTypes.shape({}),\n        subTitle: PropTypes.shape({}),\n        formControl: PropTypes.shape({}),\n\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n    advanceConfig: PropTypes.shape({}).isRequired,\n    isSOAPEndpoint: PropTypes.bool.isRequired,\n    onSaveAdvanceConfig: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(AdvanceEndpointConfig));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Grid, TextField, MenuItem, InputAdornment,\n    Icon,\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n} from '@material-ui/core';\nimport { RemoveRedEye } from '@material-ui/icons';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport Button from '@material-ui/core/Button';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport isEmpty from 'lodash.isempty';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport APIValidation from 'AppData/APIValidation';\nimport Alert from 'AppComponents/Shared/Alert';\nimport CONSTS from 'AppData/Constants';\n\nimport EditableParameterRow from './EditableParameterRow';\n\nconst styles = () => ({\n    FormControl: {\n        padding: 0,\n        width: '100%',\n    },\n    radioWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    addParameter: {\n        marginRight: '16px',\n    },\n    marginRight: {\n        marginRight: '8px',\n    },\n    buttonIcon: {\n        marginRight: '16px',\n    },\n    button: {\n        marginTop: '5px',\n    },\n    listItem: {\n        marginTop: '25px',\n    },\n    eye: {\n        cursor: 'pointer',\n    },\n});\n\n/**\n * The base component for advanced endpoint configurations.\n * @param {any} props The props that are being passed\n * @returns {any} The html representation of the component.\n */\nfunction EndpointSecurity(props) {\n    const { api } = useContext(APIContext);\n    const {\n        intl, securityInfo, onChangeEndpointAuth, classes, isProduction,\n        saveEndpointSecurityConfig,\n        closeEndpointSecurityConfig,\n    } = props;\n    const [endpointSecurityInfo, setEndpointSecurityInfo] = useState(CONSTS.DEFAULT_ENDPOINT_SECURITY);\n    const [securityValidity, setSecurityValidity] = useState();\n\n    const [showAddParameter, setShowAddParameter] = useState(false);\n    const [clientSecretIsMasked, setClientSecretIsMasked] = useState(true);\n    // Implementation of useState variables for parameter name and value\n    const [parameterName, setParameterName] = useState(null);\n    const [parameterValue, setParameterValue] = useState(null);\n    const endpointType = isProduction ? 'production' : 'sandbox';\n\n    const authTypes = [\n        {\n            key: 'NONE',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.none',\n                defaultMessage: 'None',\n            }),\n        },\n        {\n            key: 'BASIC',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.basic',\n                defaultMessage: 'Basic Auth',\n            }),\n        },\n        {\n            key: 'DIGEST',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.digest.auth',\n                defaultMessage: 'Digest Auth',\n            }),\n        },\n        {\n            key: 'OAUTH',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.oauth',\n                defaultMessage: 'OAuth 2.0',\n            }),\n        },\n    ];\n    const grantTypes = [\n        {\n            key: 'CLIENT_CREDENTIALS',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.oauth.grant.type.client',\n                defaultMessage: 'Client Credentials',\n            }),\n        },\n        {\n            key: 'PASSWORD',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.oauth.grant.type.password',\n                defaultMessage: 'Resource Owner Password',\n            }),\n        },\n    ];\n    useEffect(() => {\n        let tmpSecurity = {};\n        if (securityInfo) {\n            tmpSecurity = { ...securityInfo };\n            const {\n                type, username, password, grantType, tokenUrl, clientId, clientSecret, customParameters,\n            } = securityInfo;\n            tmpSecurity.type = type === null ? 'NONE' : type;\n            tmpSecurity.username = username;\n            tmpSecurity.password = password === '' ? '**********' : password;\n            tmpSecurity.grantType = grantType;\n            tmpSecurity.tokenUrl = tokenUrl;\n            tmpSecurity.clientId = clientId === '' ? '********' : clientId;\n            tmpSecurity.clientSecret = clientSecret === '' ? '********' : clientSecret;\n            tmpSecurity.customParameters = customParameters;\n        }\n        setEndpointSecurityInfo(tmpSecurity);\n    }, [securityInfo]);\n\n    /**\n     * Validating whether token url is in a proper format\n     * @param {*} value value of the field\n     * @returns {*} boolean value\n     */\n    const validateTokenUrl = (value) => {\n        const state = APIValidation.url.required().validate(value).error;\n        if (state === null) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    /**\n     * Validate Security Info properties\n     * @param {*} field value of the field\n     */\n    const validateAndUpdateSecurityInfo = (field) => {\n        if (!endpointSecurityInfo[field]) {\n            setSecurityValidity({ ...securityValidity, [field]: false });\n        } else {\n            let validity = true;\n            if (field === 'tokenUrl') {\n                validity = validateTokenUrl(endpointSecurityInfo[field]);\n            }\n            setSecurityValidity({ ...securityValidity, [field]: validity });\n        }\n    };\n\n    /**\n     * Show or hide the Add Parameter component\n     */\n    const toggleAddParameter = () => {\n        setShowAddParameter(!showAddParameter);\n    };\n\n    /**\n     * Show or hide the Client Secret\n     */\n    const toggleClientSecretMask = () => {\n        setClientSecretIsMasked(!clientSecretIsMasked);\n    };\n\n    /**\n     * Set the custom parameter name or value property\n     * @param {*} name name of the field edited\n     * @returns {*} fills the parameter name or parameter value states\n     */\n    const handleParameterChange = (name) => (event) => {\n        const { value } = event.target;\n        if (name === 'parameterName') {\n            setParameterName(value);\n        } else if (name === 'parameterValue') {\n            setParameterValue(value);\n        }\n    };\n\n    /**\n     * Check if the field is empty or not\n     * @param {*} itemValue value of the field\n     * @returns {*} boolean value\n     */\n    const validateEmpty = (itemValue) => {\n        if (itemValue === null) {\n            return false;\n        } else if (itemValue === '') {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    /**\n     * Add new custom parameter\n     */\n    const handleAddToList = () => {\n        const customParametersCopy = endpointSecurityInfo.customParameters;\n\n        if (customParametersCopy !== null\n            && Object.prototype.hasOwnProperty.call(customParametersCopy, parameterName)) {\n            Alert.warning('Parameter name: ' + parameterName + ' already exists');\n        } else {\n            customParametersCopy[parameterName] = parameterValue;\n            setParameterName(null);\n            setParameterValue(null);\n        }\n        setEndpointSecurityInfo({ ...endpointSecurityInfo, customParameters: customParametersCopy });\n        onChangeEndpointAuth(endpointSecurityInfo, endpointType);\n    };\n\n    /**\n     * Update existing custom parameter name-value pair\n     * @param {*} oldRow previous name-value pair\n     * @param {*} newRow new name-value pair\n     */\n    const handleUpdateList = (oldRow, newRow) => {\n        const customParametersCopy = endpointSecurityInfo.customParameters;\n        const { oldName, oldValue } = oldRow;\n        const { newName, newValue } = newRow;\n        if (customParametersCopy !== null\n            && Object.prototype.hasOwnProperty.call(customParametersCopy, newName) && oldName === newName) {\n            // Only the value is updated\n            if (newValue && oldValue !== newValue) {\n                customParametersCopy[oldName] = newValue;\n            }\n        } else {\n            delete customParametersCopy[oldName];\n            customParametersCopy[newName] = newValue;\n        }\n        setEndpointSecurityInfo({ ...endpointSecurityInfo, customParameters: customParametersCopy });\n        onChangeEndpointAuth(endpointSecurityInfo, endpointType);\n    };\n\n    /**\n     * Delete existing custom parameter name-value pair\n     * @param {*} oldName name property of the name-value pair to be removed\n     */\n    const handleDelete = (oldName) => {\n        const customParametersCopy = endpointSecurityInfo.customParameters;\n        if (customParametersCopy !== null && Object.prototype.hasOwnProperty.call(customParametersCopy, oldName)) {\n            delete customParametersCopy[oldName];\n        }\n        setEndpointSecurityInfo({ ...endpointSecurityInfo, customParameters: customParametersCopy });\n        onChangeEndpointAuth(endpointSecurityInfo, endpointType);\n    };\n\n    /**\n     * Keyboard shortcut to execute adding custom parameters when pressing the Enter key\n     * @param {*} event event containing the key that was pressed\n     */\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            handleAddToList();\n        }\n    };\n\n    /**\n     * Render the custom parameters component\n     * @returns {*} list of items added\n     */\n    const renderCustomParameters = () => {\n        const items = [];\n        for (const name in endpointSecurityInfo.customParameters) {\n            if (Object.prototype.hasOwnProperty.call(endpointSecurityInfo.customParameters, name)) {\n                items.push(<EditableParameterRow\n                    oldName={name}\n                    oldValue={endpointSecurityInfo.customParameters[name]}\n                    handleUpdateList={handleUpdateList}\n                    handleDelete={handleDelete}\n                    customParameters={endpointSecurityInfo.customParameters}\n                    {...props}\n                    isRestricted={isRestricted}\n                    api={api}\n                />);\n            }\n        }\n        return items;\n    };\n\n    return (\n        <Grid container direction='row' spacing={2}>\n            <Grid item xs={6}>\n                <TextField\n                    disabled={isRestricted(['apim:api_create'], api)}\n                    fullWidth\n                    select\n                    value={endpointSecurityInfo && endpointSecurityInfo.type}\n                    variant='outlined'\n                    onChange={(event) => {\n                        setEndpointSecurityInfo({\n                            ...endpointSecurityInfo,\n                            type: event.target.value,\n                        });\n                    }}\n                    inputProps={{\n                        name: 'key',\n                        id: 'auth-type-select',\n                    }}\n                    onBlur={() => validateAndUpdateSecurityInfo(isProduction)}\n                >\n                    {authTypes.map((type) => (\n                        <MenuItem value={type.key} id={'auth-type-' + type.key}>{type.value}</MenuItem>\n                    ))}\n                </TextField>\n            </Grid>\n            <Grid item xs={6} />\n\n            {(endpointSecurityInfo.type === 'OAUTH')\n                && (\n                    <>\n                        <Grid item xs={6}>\n                            <TextField\n                                disabled={isRestricted(['apim:api_create'], api)}\n                                required\n                                fullWidth\n                                select\n                                label={(\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration'\n                                        + '.EndpointSecurity.grant.type.input'}\n                                        defaultMessage='Grant Type'\n                                    />\n                                )}\n                                variant='outlined'\n                                onChange={(event) => setEndpointSecurityInfo(\n                                    { ...endpointSecurityInfo, grantType: event.target.value },\n                                )}\n                                value={endpointSecurityInfo.grantType}\n                                inputProps={{\n                                    name: 'key',\n                                    id: 'grant-type-select',\n                                }}\n                                onBlur={() => validateAndUpdateSecurityInfo('grantType')}\n                            >\n                                {grantTypes.map((type) => (\n                                    <MenuItem value={type.key}>{type.value}</MenuItem>\n                                ))}\n                            </TextField>\n                        </Grid>\n\n                        {(endpointSecurityInfo.grantType === 'CLIENT_CREDENTIALS'\n                        || endpointSecurityInfo.grantType === 'PASSWORD') && (\n                            <>\n                                <Grid item xs={6}>\n                                    <TextField\n                                        disabled={isRestricted(['apim:api_create'], api)}\n                                        required\n                                        fullWidth\n                                        error={securityValidity && securityValidity.tokenUrl === false}\n                                        helperText={\n                                            securityValidity && securityValidity.tokenUrl === false ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration'\n                                            + '.EndpointSecurity.no.tokenUrl.error'}\n                                                    defaultMessage={'Token URL should not be empty'\n                                                    + ' or formatted incorrectly'}\n                                                />\n                                            ) : (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                            + 'EndpointSecurity.tokenUrl.message'}\n                                                    defaultMessage='Enter Token URL'\n                                                />\n                                            )\n                                        }\n                                        variant='outlined'\n                                        id='auth-tokenUrl'\n                                        label={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                                + 'EndpointSecurity.token.url.input'}\n                                                defaultMessage='Token URL'\n                                            />\n                                        )}\n                                        onChange={(event) => setEndpointSecurityInfo(\n                                            { ...endpointSecurityInfo, tokenUrl: event.target.value },\n                                        )}\n                                        value={endpointSecurityInfo.tokenUrl}\n                                        onBlur={() => validateAndUpdateSecurityInfo('tokenUrl')}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={6}>\n                                    <TextField\n                                        disabled={isRestricted(['apim:api_create'], api)}\n                                        required\n                                        fullWidth\n                                        error={securityValidity && securityValidity.clientId === false}\n                                        helperText={\n                                            securityValidity && securityValidity.clientId === false ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                            + 'EndpointSecurity.no.clientId.error'}\n                                                    defaultMessage='Client ID should not be empty'\n                                                />\n                                            ) : (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                                    + 'EndpointSecurity.clientId.message'}\n                                                    defaultMessage='Enter Client ID'\n                                                />\n                                            )\n                                        }\n                                        variant='outlined'\n                                        id='auth-clientId'\n                                        label={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                                + 'EndpointSecurity.clientId.input'}\n                                                defaultMessage='Client ID'\n                                            />\n                                        )}\n                                        onChange={(event) => setEndpointSecurityInfo(\n                                            { ...endpointSecurityInfo, clientId: event.target.value },\n                                        )}\n                                        value={endpointSecurityInfo.clientId}\n                                        onBlur={() => validateAndUpdateSecurityInfo('clientId')}\n                                        InputProps={{\n                                            autoComplete: 'new-password',\n                                        }}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={6}>\n                                    <TextField\n                                        disabled={isRestricted(['apim:api_create'], api)}\n                                        required\n                                        fullWidth\n                                        error={securityValidity && securityValidity.clientSecret === false}\n                                        helperText={\n                                            securityValidity && securityValidity.clientSecret === false ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                            + 'EndpointSecurity.no.clientSecret.error'}\n                                                    defaultMessage='Client Secret should not be empty'\n                                                />\n                                            ) : (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                            + 'EndpointSecurity.clientSecret.message'}\n                                                    defaultMessage='Enter Client Secret'\n                                                />\n                                            )\n                                        }\n                                        variant='outlined'\n                                        id='auth-clientSecret'\n                                        type={clientSecretIsMasked ? 'password' : 'text'}\n                                        label={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                                + 'EndpointSecurity.clientSecret.input'}\n                                                defaultMessage='Client Secret'\n                                            />\n                                        )}\n                                        onChange={(event) => setEndpointSecurityInfo(\n                                            { ...endpointSecurityInfo, clientSecret: event.target.value },\n                                        )}\n                                        value={endpointSecurityInfo.clientSecret}\n                                        onBlur={() => validateAndUpdateSecurityInfo('clientSecret')}\n                                        InputProps={{\n                                            autoComplete: 'new-password',\n                                            endAdornment: (\n                                                <InputAdornment position='end'>\n                                                    <RemoveRedEye\n                                                        className={classes.eye}\n                                                        onClick={toggleClientSecretMask}\n                                                    />\n                                                </InputAdornment>\n                                            ),\n                                        }}\n                                    />\n                                </Grid>\n                            </>\n                        )}\n                    </>\n                )}\n\n            {(endpointSecurityInfo.type === 'BASIC'\n                || endpointSecurityInfo.type === 'DIGEST'\n                || endpointSecurityInfo.grantType === 'PASSWORD') && (\n                <>\n                    <Grid item xs={6}>\n                        <TextField\n                            disabled={isRestricted(['apim:api_create'], api)}\n                            required\n                            fullWidth\n                            error={securityValidity && securityValidity.username === false}\n                            helperText={\n                                securityValidity && securityValidity.username === false ? (\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                        + 'EndpointSecurity.no.username.error'}\n                                        defaultMessage='Username should not be empty'\n                                    />\n                                ) : (\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                        + 'EndpointSecurity.username.message'}\n                                        defaultMessage='Enter Username'\n                                    />\n                                )\n                            }\n                            variant='outlined'\n                            id='auth-userName'\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.user.name.input'\n                                    defaultMessage='Username'\n                                />\n                            )}\n                            onChange={(event) => setEndpointSecurityInfo(\n                                { ...endpointSecurityInfo, username: event.target.value },\n                            )}\n                            value={endpointSecurityInfo.username}\n                            onBlur={() => validateAndUpdateSecurityInfo('username')}\n                        />\n                    </Grid>\n\n                    <Grid item xs={6}>\n                        <TextField\n                            disabled={isRestricted(['apim:api_create'], api)}\n                            required\n                            fullWidth\n                            error={securityValidity && securityValidity.password === false}\n                            helperText={\n                                securityValidity && securityValidity.password === false ? (\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                        + 'EndpointSecurity.no.password.error'}\n                                        defaultMessage='Password should not be empty'\n                                    />\n                                ) : (\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                        + 'EndpointSecurity.password.message'}\n                                        defaultMessage='Enter Password'\n                                    />\n                                )\n                            }\n                            variant='outlined'\n                            type='password'\n                            id='auth-password'\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.password.input'\n                                    defaultMessage='Password'\n                                />\n                            )}\n                            value={endpointSecurityInfo.password}\n                            onChange={(event) => setEndpointSecurityInfo(\n                                { ...endpointSecurityInfo, password: event.target.value },\n                            )}\n                            onBlur={() => validateAndUpdateSecurityInfo('password')}\n                            InputProps={{\n                                autoComplete: 'new-password',\n                            }}\n                        />\n                    </Grid>\n                </>\n            )}\n\n            {endpointSecurityInfo.type === 'OAUTH' && (endpointSecurityInfo.grantType === 'CLIENT_CREDENTIALS'\n            || endpointSecurityInfo.grantType === 'PASSWORD')\n            && (\n                <Grid item xs={12}>\n                    <ListItem\n                        className={classes.listItem}\n                    >\n                        <ListItemAvatar>\n                            <Icon color='primary'>info</Icon>\n                        </ListItemAvatar>\n                        <ListItemText>\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.add.new.parameter.info'\n                                defaultMessage={'You can add any additional payload parameters'\n                                + ' required for the endpoint below'}\n                            />\n                        </ListItemText>\n                    </ListItem>\n                    <Button\n                        size='medium'\n                        className={classes.button}\n                        onClick={toggleAddParameter}\n                        disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                    >\n                        <AddCircle className={classes.buttonIcon} />\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.add.new.parameter'\n                            defaultMessage='Add New Parameter'\n                        />\n                    </Button>\n                </Grid>\n            )}\n\n            <Grid item xs={12} />\n\n            {(endpointSecurityInfo.type === 'OAUTH')\n            && (!isEmpty(endpointSecurityInfo.customParameters) || showAddParameter) && (\n                <Grid item xs={12}>\n                    <Table className={classes.table}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration'\n                                            + '.EndpointSecurity.label.parameter.name'}\n                                        defaultMessage='Parameter Name'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration'\n                                            + '.EndpointSecurity.label.parameter.value'}\n                                        defaultMessage='Parameter Value'\n                                    />\n                                </TableCell>\n                                <TableCell />\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {showAddParameter\n                            && (\n                                <>\n                                    <TableRow>\n                                        <TableCell>\n                                            <TextField\n                                                fullWidth\n                                                required\n                                                id='outlined-required'\n                                                label={intl.formatMessage({\n                                                    id: 'Apis.Details.Endpoints.GeneralConfiguration'\n                                                    + '.EndpointSecurity.input.parameter.name',\n                                                    defaultMessage: 'Parameter Name',\n                                                })}\n                                                margin='normal'\n                                                variant='outlined'\n                                                className={classes.addParameter}\n                                                value={parameterName === null ? '' : parameterName}\n                                                onChange={handleParameterChange('parameterName')}\n                                                onKeyDown={handleKeyDown('parameterName')}\n                                                helperText={validateEmpty(parameterName)\n                                                    ? 'Invalid parameter name' : ''}\n                                                error={validateEmpty(parameterName)}\n                                                disabled={isRestricted(\n                                                    ['apim:api_create', 'apim:api_publish'],\n                                                    api,\n                                                )}\n                                            />\n                                        </TableCell>\n                                        <TableCell>\n                                            <TextField\n                                                fullWidth\n                                                required\n                                                id='outlined-required'\n                                                label={intl.formatMessage({\n                                                    id: 'Apis.Details.Endpoints.GeneralConfiguration'\n                                                        + '.EndpointSecurity.input.parameter.value',\n                                                    defaultMessage: 'Parameter Value',\n                                                })}\n                                                margin='normal'\n                                                variant='outlined'\n                                                className={classes.addParameter}\n                                                value={parameterValue === null ? '' : parameterValue}\n                                                onChange={handleParameterChange('parameterValue')}\n                                                onKeyDown={handleKeyDown('parameterValue')}\n                                                error={validateEmpty(parameterValue)}\n                                                disabled={isRestricted(\n                                                    ['apim:api_create', 'apim:api_publish'],\n                                                    api,\n                                                )}\n                                            />\n                                        </TableCell>\n                                        <TableCell align='right'>\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                disabled={\n                                                    !parameterValue\n                                                            || !parameterName\n                                                            || isRestricted(\n                                                                ['apim:api_create', 'apim:api_publish'], api,\n                                                            )\n                                                }\n                                                onClick={handleAddToList}\n                                                className={classes.marginRight}\n                                            >\n                                                <FormattedMessage\n                                                    id='Apis.Details.Properties.Properties.add'\n                                                    defaultMessage='Add'\n                                                />\n                                            </Button>\n\n                                            <Button onClick={toggleAddParameter}>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Properties.Properties.cancel'\n                                                    defaultMessage='Cancel'\n                                                />\n                                            </Button>\n                                        </TableCell>\n                                    </TableRow>\n                                </>\n                            )}\n                            {((endpointType === 'production') || (endpointType === 'sandbox')) && (\n                                renderCustomParameters()\n                            )}\n                        </TableBody>\n                    </Table>\n                </Grid>\n            )}\n            <Grid className={classes.advanceDialogActions}>\n                <Button\n                    onClick={() => saveEndpointSecurityConfig(endpointSecurityInfo, endpointType)}\n                    color='primary'\n                    autoFocus\n                    variant='contained'\n                    style={{ marginTop: '10px', marginRight: '10px', marginBottom: '10px' }}\n                    id='endpoint-security-submit-btn'\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurityConfig.config.save.button'\n                        defaultMessage='Submit'\n                    />\n                </Button>\n                <Button\n                    onClick={closeEndpointSecurityConfig}\n                    style={{ marginTop: '10px', marginBottom: '10px' }}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurityConfig.cancel.button'\n                        defaultMessage='Close'\n                    />\n                </Button>\n            </Grid>\n        </Grid>\n    );\n}\n\nEndpointSecurity.propTypes = {\n    intl: PropTypes.shape({}).isRequired,\n    securityInfo: PropTypes.shape({}).isRequired,\n    onChangeEndpointAuth: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(injectIntl(EndpointSecurity));\n","/* eslint-disable react/jsx-no-bind */\n/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React, { useState } from 'react';\nimport { injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SaveIcon from '@material-ui/icons/Save';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst useStyles = makeStyles(() => ({\n    link: {\n        cursor: 'pointer',\n    },\n}));\n\n/**\n * EditableParameterRow for OAuth Endpoint Security\n * @param {*} props properties\n * @returns {*} EditableParameterRow component\n */\nfunction EditableParameterRow(props) {\n    const {\n        oldName, oldValue,\n        handleUpdateList, handleDelete,\n        intl, isRestricted, api,\n    } = props;\n    const [newName, setName] = useState(oldName);\n    const [newValue, setValue] = useState(oldValue);\n    const [editMode, setEditMode] = useState(false);\n\n    /**\n     * Set edit mode\n     */\n    const updateEditMode = () => {\n        setEditMode(!editMode);\n    };\n\n    /**\n     * Update name field\n     * @param {*} event value entered for name field\n     */\n    const handleKeyChange = (event) => {\n        const { value } = event.target;\n        setName(value);\n    };\n\n    /**\n     * Update value field\n     * @param {*} event value entered for the value field\n     */\n    const handleValueChange = (event) => {\n        const { value } = event.target;\n        setValue(value);\n    };\n\n    /**\n     * Validate if the field is empty\n     * @param {*} itemValue value of the field\n     * @returns {*} boolean value\n     */\n    const validateEmpty = (itemValue) => {\n        if (itemValue === null) {\n            return false;\n        } else if (itemValue === '') {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    /**\n     * Save the updated values in the custom parameters object\n     */\n    const saveRow = () => {\n        const oldRow = { oldName, oldValue };\n        const newRow = { newName: newName || oldName, newValue: newValue || oldValue };\n        handleUpdateList(oldRow, newRow);\n        setEditMode(false);\n    };\n\n    /**\n     * Delete name-value pair in the custom parameters object\n     */\n    const deleteRow = () => {\n        handleDelete(oldName);\n    };\n\n    /**\n     * Keyboard event listener to save the name-value pair on Enter\n     * @param {*} e event containing the key that was pressed\n     */\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            saveRow();\n        }\n    };\n\n    // Styles definition\n    const classes = useStyles();\n\n    return (\n        <TableRow>\n            {editMode ? (\n                <TableCell>\n                    <TextField\n                        fullWidth\n                        required\n                        id='outlined-required'\n                        label={intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.GeneralConfiguration.EditableParameterRow.Parameter.Name',\n                            defaultMessage: 'Parameter Name',\n                        })}\n                        margin='normal'\n                        variant='outlined'\n                        className={classes.addProperty}\n                        value={newName}\n                        onChange={handleKeyChange}\n                        onKeyDown={handleKeyDown}\n                        error={validateEmpty(newName)}\n                    />\n                </TableCell>\n            ) : (\n                <TableCell>{oldName}</TableCell>\n            )}\n            {editMode ? (\n                <TableCell>\n                    <TextField\n                        fullWidth\n                        required\n                        id='outlined-required'\n                        label={intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.GeneralConfiguration.EditableParameterRow.Parameter.Value',\n                            defaultMessage: 'Parameter Value',\n                        })}\n                        margin='normal'\n                        variant='outlined'\n                        className={classes.addProperty}\n                        value={newValue}\n                        onChange={handleValueChange}\n                        onKeyDown={handleKeyDown}\n                        error={validateEmpty(newValue)}\n                    />\n                </TableCell>\n            ) : (\n                <TableCell>{oldValue}</TableCell>\n            )}\n            <TableCell align='right'>\n                {editMode ? (\n                    <>\n                        <IconButton\n                            className={classes.link}\n                            aria-label='save'\n                            onClick={saveRow}\n                            onKeyDown={() => {}}\n                            disabled={validateEmpty(newName) || validateEmpty(newValue)}\n                            color='inherit'\n                        >\n                            <SaveIcon className={classes.buttonIcon} />\n                        </IconButton>\n                    </>\n                ) : (\n                    <IconButton\n                        className={classes.link}\n                        aria-label='edit'\n                        onClick={updateEditMode}\n                        onKeyDown={() => {}}\n                        color='inherit'\n                        disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                    >\n                        <EditIcon className={classes.buttonIcon} />\n                    </IconButton>\n                )}\n                <IconButton\n                    className={classes.link}\n                    aria-label='remove'\n                    onClick={deleteRow}\n                    onKeyDown={() => {}}\n                    color='inherit'\n                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                >\n                    <DeleteForeverIcon className={classes.buttonIcon} />\n                </IconButton>\n            </TableCell>\n        </TableRow>\n    );\n}\n\nEditableParameterRow.propTypes = {\n    oldName: PropTypes.string.isRequired,\n    oldValue: PropTypes.string.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    handleUpdateList: PropTypes.func.isRequired,\n    handleDelete: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(EditableParameterRow);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Grid,\n    TextField,\n    makeStyles,\n    Typography,\n    Tooltip,\n    RadioGroup,\n    FormControl,\n    FormControlLabel,\n    MenuItem,\n    InputLabel,\n    Select,\n    Radio,\n} from '@material-ui/core';\nimport Icon from '@material-ui/core/Icon';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport API from 'AppData/api';\nimport Configurations from 'Config';\nimport Banner from 'AppComponents/Shared/Banner';\n\nconst useStyles = makeStyles((theme) => ({\n    typography: {\n        display: 'inline-block',\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 300,\n    },\n    selectField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 300,\n    },\n    helpIcon: {\n        fontSize: 20,\n    },\n    banner: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\n/**\n * The credentials component. This component holds the access and secret key pair.\n * @param {any} props The parameters to credentials component.\n * @returns {any} HTML view of the credentials component.\n */\nexport default function Credentials(props) {\n    const {\n        apiId,\n        endpointConfig,\n        endpointsDispatcher,\n    } = props;\n    const classes = useStyles();\n    const [pageError, setPageError] = useState(null);\n    const inputLabel = useRef(null);\n    const handleChange = (event) => {\n        const newEndpointConfig = { ...endpointConfig };\n        newEndpointConfig.access_method = event.target.value;\n        newEndpointConfig.amznAccessKey = '';\n        newEndpointConfig.amznSecretKey = '';\n        newEndpointConfig.amznRegion = '';\n        endpointsDispatcher({ action: 'set_awsCredentials', value: newEndpointConfig });\n        setPageError(null);\n    };\n    const { regions } = Configurations.apis.endpoint.aws;\n    useEffect(() => {\n        API.getAmznResourceNames(apiId)\n            .catch((error) => {\n                setPageError(error.response.body.error);\n            });\n    }, []);\n    return (\n        <>\n            <Typography className={classes.typography}>\n                <FormattedMessage\n                    id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                    + '.endpoint.accessMethod'}\n                    defaultMessage='Access Method'\n                />\n            </Typography>\n            <RadioGroup\n                aria-label='accessMethod'\n                name='accessMethod'\n                value={endpointConfig.access_method}\n                onChange={handleChange}\n            >\n                <div>\n                    <FormControlLabel\n                        value='role-supplied'\n                        control={<Radio color='primary' />}\n                        label={\n                            (\n                                <FormattedMessage\n                                    id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                                    + '.endpoint.accessMethod.roleSupplied'}\n                                    defaultMessage='Using IAM role-supplied temporary AWS credentials'\n                                />\n                            )\n                        }\n                    />\n                    <Tooltip\n                        title={\n                            (\n                                <FormattedMessage\n                                    id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                                    + '.endpoint.tooltip'}\n                                    defaultMessage={'You can and should use an IAM role to manage temporary '\n                                    + 'credentials for applications that run on an EC2 instance'}\n                                />\n                            )\n                        }\n                    >\n                        <Icon className={classes.helpIcon}>help_outline</Icon>\n                    </Tooltip>\n                </div>\n                <div>\n                    <FormControlLabel\n                        value='stored'\n                        control={<Radio color='primary' />}\n                        label={\n                            (\n                                <FormattedMessage\n                                    id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                                    + '.endpoint.accessMethod.stored'}\n                                    defaultMessage='Using stored AWS credentials'\n                                />\n                            )\n                        }\n                    />\n                </div>\n            </RadioGroup>\n            <Grid item>\n                <TextField\n                    required\n                    disabled={endpointConfig.access_method === 'role-supplied'}\n                    id='outlined-required'\n                    label={\n                        (\n                            <FormattedMessage\n                                id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                                + '.endpoint.accessKey'}\n                                defaultMessage='Access Key'\n                            />\n                        )\n                    }\n                    margin='normal'\n                    variant='outlined'\n                    className={classes.textField}\n                    value={endpointConfig.amznAccessKey}\n                    onChange={(event) => {\n                        const newEndpointConfig = { ...endpointConfig };\n                        newEndpointConfig.amznAccessKey = event.target.value;\n                        endpointsDispatcher({ action: 'set_awsCredentials', value: newEndpointConfig });\n                    }}\n                />\n                <TextField\n                    required\n                    disabled={endpointConfig.access_method === 'role-supplied'}\n                    id='outlined-password-input-required'\n                    label={\n                        (\n                            <FormattedMessage\n                                id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                                + '.endpoint.secretKey'}\n                                defaultMessage='Secret Key'\n                            />\n                        )\n                    }\n                    type='password'\n                    margin='normal'\n                    variant='outlined'\n                    className={classes.textField}\n                    value={endpointConfig.amznSecretKey}\n                    onChange={(event) => {\n                        const newEndpointConfig = { ...endpointConfig };\n                        newEndpointConfig.amznSecretKey = event.target.value;\n                        endpointsDispatcher({ action: 'set_awsCredentials', value: newEndpointConfig });\n                    }}\n                />\n                <FormControl\n                    required\n                    margin='normal'\n                    variant='outlined'\n                    disabled={endpointConfig.access_method === 'role-supplied'}\n                >\n                    <InputLabel ref={inputLabel}>\n                        <FormattedMessage\n                            id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                            + '.endpoint.region'}\n                            defaultMessage='Region'\n                        />\n                    </InputLabel>\n                    <Select\n                        labelId='region-label'\n                        autoWidth={false}\n                        className={classes.selectField}\n                        onChange={(event) => {\n                            const newEndpointConfig = { ...endpointConfig };\n                            newEndpointConfig.amznRegion = event.target.value;\n                            endpointsDispatcher({ action: 'set_awsCredentials', value: newEndpointConfig });\n                        }}\n                        value={endpointConfig.amznRegion}\n                        MenuProps={{\n                            anchorOrigin: {\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            },\n                            getContentAnchorEl: null,\n                            keepMounted: true,\n                            PaperProps: {\n                                style: {\n                                    maxHeight: 300,\n                                },\n                            },\n                        }}\n                    >\n                        {Object.entries(regions).map(([key, value]) => ((\n                            <MenuItem key={key} value={key}>\n                                {value}\n                            </MenuItem>\n                        )))}\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item>\n                <Link to={`/apis/${apiId}/resources`}>\n                    <Typography style={{ marginLeft: '10px' }} color='primary' display='inline' variant='caption'>\n                        <FormattedMessage\n                            id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                            + '.endpoint.linkToResources'}\n                            defaultMessage='Go to Resources to map ARNs'\n                        />\n                        <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                    </Typography>\n                </Link>\n            </Grid>\n            {pageError\n                && (\n                    <Grid item className={classes.banner}>\n                        <Banner\n                            disableActions\n                            dense\n                            paperProps={{ elevation: 1 }}\n                            type='warning'\n                            message={pageError}\n                        />\n                    </Grid>\n                )}\n        </>\n    );\n}\n\nCredentials.propTypes = {\n    apiId: PropTypes.shape('').isRequired,\n    endpointConfig: PropTypes.shape({}).isRequired,\n    endpointsDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport {\n    Grid,\n    Tooltip,\n    InputAdornment,\n    withStyles,\n    IconButton, Icon,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from 'AppComponents/Shared/Autocomplete';\nimport { isRestricted } from 'AppData/AuthManager';\n\n\nconst styles = (theme) => ({\n    endpointInputWrapper: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    textField: {\n        width: '100%',\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: theme.spacing(1),\n    },\n\n});\n\n/**\n * This is Service endpoint component.\n * \n * @param {any} props The input props\n * @returns {any} The HTML representation of the component.\n */\nfunction ServiceEndpoint(props) {\n    const {\n        category,\n        classes,\n        api,\n        services,\n        type,\n        setAdvancedConfigOpen,\n        esCategory,\n        setESConfigOpen,\n        index,\n        name,\n        editEndpoint,\n        endpointURL,\n        editService\n    } = props;\n    \n    const [selectedServiceUrl, setSelectedServiceUrl] = useState();\n    const defaultService = api.serviceInfo ? {serviceKey: api.serviceInfo.key, serviceUrl: endpointURL}\n        : {serviceKey: '',serviceUrl: '' }\n\n    const setEndpointValue = (value) => {\n        editEndpoint(index, category, value.serviceUrl);\n        setSelectedServiceUrl(value.serviceUrl);\n        if (esCategory ==='production') {\n            editService(value);\n        }\n        \n    };\n\n    return (\n        <>\n            <div>\n                <Grid container spacing={2}>\n                    <Grid item xs={4} className={classes.endpointInputWrapper}>\n                        <div className={classes.endpointInputWrapper}>\n                            <Autocomplete\n                                onChange={(event, value) => setEndpointValue(value)}\n                                id='combo-box-demo'\n                                defaultValue={category === 'production_endpoints' && defaultService}\n                                options={services}\n                                getOptionLabel={(option) => option.serviceKey}\n                                style={{ width:  '100%' }}\n                                renderInput={(params) => <TextField {...params} label={name} variant='outlined'\n                                    margin='normal' defaultValue={category === 'production_endpoints' \n                                     && defaultService.serviceUrl} />}\n                            />\n                        </div>\n                    </Grid>\n                    <Grid item xs={8}>\n                        <div className={classes.endpointInputWrapper}>\n                            <TextField\n                                disabled\n                                className={classes.textField}\n                                value={!endpointURL ? selectedServiceUrl: endpointURL}\n                                placeholder='Select a service from the service list'\n                                variant='outlined'\n                                margin='normal'\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position='end'>\n\n                                            <>\n                                                <IconButton\n                                                    className={classes.iconButton}\n                                                    aria-label='Settings'\n                                                    onClick={() => setAdvancedConfigOpen(index, type, category)}\n                                                    disabled={(isRestricted(['apim:api_create'], api))}\n                                                >\n                                                    <Tooltip\n                                                        placement='top-start'\n                                                        interactive\n                                                        title={(\n                                                            <FormattedMessage\n                                                                id='Apis.Details.Endpoints.\n                                                                GenericEndpoint.config.endpoint'\n                                                                defaultMessage='Endpoint configurations'\n                                                            />\n                                                        )}\n                                                    >\n                                                        <Icon>\n                                                            settings\n                                                        </Icon>\n                                                    </Tooltip>\n                                                </IconButton>\n                                                <IconButton\n                                                    className={classes.iconButton}\n                                                    aria-label='Security'\n                                                    onClick={() => setESConfigOpen(type, esCategory)}\n                                                    disabled={(isRestricted(['apim:api_create'], api))}\n                                                >\n                                                    <Tooltip\n                                                        placement='top-start'\n                                                        interactive\n                                                        title={(\n                                                            <FormattedMessage\n                                                                id='Apis.Details.Endpoints.\n                                                                GenericEndpoint.security.endpoint'\n                                                                defaultMessage='Endpoint security'\n                                                            />\n                                                        )}\n                                                    >\n                                                        <Icon>\n                                                            security\n                                                        </Icon>\n                                                    </Tooltip>\n                                                </IconButton>\n                                            </>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    </Grid>\n\n                </Grid>\n            </div>\n        </>\n    )\n}\n\n\nServiceEndpoint.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    services: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    index: PropTypes.number.isRequired,\n    type: PropTypes.string.isRequired,\n    setAdvancedConfigOpen: PropTypes.func.isRequired,\n    setESConfigOpen: PropTypes.func.isRequired,\n    category: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    editEndpoint: PropTypes.func.isRequired,\n    editService: PropTypes.func.isRequired,\n    endpointURL: PropTypes.string.isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nexport default withStyles(styles)(ServiceEndpoint);\n","/* eslint-disable react/require-default-props */\n/* eslint-disable react/forbid-prop-types */\n/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Popper from '@material-ui/core/Popper';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Chip from '@material-ui/core/Chip';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport CloseIcon from '@material-ui/icons/Close';\nimport useAutocomplete, { createFilterOptions } from './useAutocomplete';\n\nexport { createFilterOptions };\n\nexport const styles = (theme) => ({\n    /* Styles applied to the root element. */\n    root: {\n        '&$focused $clearIndicatorDirty': {\n            visibility: 'visible',\n        },\n        /* Avoid double tap issue on iOS */\n        '@media (pointer: fine)': {\n            '&:hover $clearIndicatorDirty': {\n                visibility: 'visible',\n            },\n        },\n    },\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {\n        width: '100%',\n    },\n    /* Pseudo-class applied to the root element if focused. */\n    focused: {},\n    /* Styles applied to the tag elements, e.g. the chips. */\n    tag: {\n        margin: 3,\n        maxWidth: 'calc(100% - 6px)',\n    },\n    /* Styles applied to the tag elements, e.g. the chips if `size=\"small\"`. */\n    tagSizeSmall: {\n        margin: 2,\n        maxWidth: 'calc(100% - 4px)',\n    },\n    /* Styles applied when the popup icon is rendered. */\n    hasPopupIcon: {},\n    /* Styles applied when the clear icon is rendered. */\n    hasClearIcon: {},\n    /* Styles applied to the Input element. */\n    inputRoot: {\n        flexWrap: 'wrap',\n        '$hasPopupIcon &, $hasClearIcon &': {\n            paddingRight: 26 + 4,\n        },\n        '$hasPopupIcon$hasClearIcon &': {\n            paddingRight: 52 + 4,\n        },\n        '& $input': {\n            width: 0,\n            minWidth: 30,\n        },\n        '&[class*=\"MuiInput-root\"]': {\n            paddingBottom: 1,\n            '& $input': {\n                padding: 4,\n            },\n            '& $input:first-child': {\n                padding: '6px 0',\n            },\n        },\n        '&[class*=\"MuiInput-root\"][class*=\"MuiInput-marginDense\"]': {\n            '& $input': {\n                padding: '4px 4px 5px',\n            },\n            '& $input:first-child': {\n                padding: '3px 0 6px',\n            },\n        },\n        '&[class*=\"MuiOutlinedInput-root\"]': {\n            padding: 9,\n            '$hasPopupIcon &, $hasClearIcon &': {\n                paddingRight: 26 + 4 + 9,\n            },\n            '$hasPopupIcon$hasClearIcon &': {\n                paddingRight: 52 + 4 + 9,\n            },\n            '& $input': {\n                padding: '9.5px 4px',\n            },\n            '& $input:first-child': {\n                paddingLeft: 6,\n            },\n            '& $endAdornment': {\n                right: 9,\n            },\n        },\n        '&[class*=\"MuiOutlinedInput-root\"][class*=\"MuiOutlinedInput-marginDense\"]': {\n            padding: 6,\n            '& $input': {\n                padding: '4.5px 4px',\n            },\n        },\n        '&[class*=\"MuiFilledInput-root\"]': {\n            paddingTop: 19,\n            paddingLeft: 8,\n            '$hasPopupIcon &, $hasClearIcon &': {\n                paddingRight: 26 + 4 + 9,\n            },\n            '$hasPopupIcon$hasClearIcon &': {\n                paddingRight: 52 + 4 + 9,\n            },\n            '& $input': {\n                padding: '9px 4px',\n            },\n            '& $endAdornment': {\n                right: 9,\n            },\n        },\n        '&[class*=\"MuiFilledInput-root\"][class*=\"MuiFilledInput-marginDense\"]': {\n            paddingBottom: 1,\n            '& $input': {\n                padding: '4.5px 4px',\n            },\n        },\n    },\n    /* Styles applied to the input element. */\n    input: {\n        flexGrow: 1,\n        textOverflow: 'ellipsis',\n        opacity: 0,\n    },\n    /* Styles applied to the input element if tag focused. */\n    inputFocused: {\n        opacity: 1,\n    },\n    /* Styles applied to the endAdornment element. */\n    endAdornment: {\n        // We use a position absolute to support wrapping tags.\n        position: 'absolute',\n        right: 0,\n        top: 'calc(50% - 14px)', // Center vertically\n    },\n    /* Styles applied to the clear indicator. */\n    clearIndicator: {\n        marginRight: -2,\n        padding: 4,\n        visibility: 'hidden',\n    },\n    /* Styles applied to the clear indicator if the input is dirty. */\n    clearIndicatorDirty: {},\n    /* Styles applied to the popup indicator. */\n    popupIndicator: {\n        padding: 2,\n        marginRight: -2,\n    },\n    /* Styles applied to the popup indicator if the popup is open. */\n    popupIndicatorOpen: {\n        transform: 'rotate(180deg)',\n    },\n    /* Styles applied to the popper element. */\n    popper: {\n        zIndex: theme.zIndex.modal,\n    },\n    /* Styles applied to the popper element if `disablePortal={true}`. */\n    popperDisablePortal: {\n        position: 'absolute',\n    },\n    /* Styles applied to the `Paper` component. */\n    paper: {\n        ...theme.typography.body1,\n        overflow: 'hidden',\n        margin: '4px 0',\n    },\n    /* Styles applied to the `listbox` component. */\n    listbox: {\n        listStyle: 'none',\n        margin: 0,\n        padding: '8px 0',\n        maxHeight: '40vh',\n        overflow: 'auto',\n    },\n    /* Styles applied to the loading wrapper. */\n    loading: {\n        color: theme.palette.text.secondary,\n        padding: '14px 16px',\n    },\n    /* Styles applied to the no option wrapper. */\n    noOptions: {\n        color: theme.palette.text.secondary,\n        padding: '14px 16px',\n    },\n    /* Styles applied to the option elements. */\n    option: {\n        minHeight: 48,\n        display: 'flex',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        cursor: 'pointer',\n        paddingTop: 6,\n        boxSizing: 'border-box',\n        outline: '0',\n        WebkitTapHighlightColor: 'transparent',\n        paddingBottom: 6,\n        paddingLeft: 16,\n        paddingRight: 16,\n        [theme.breakpoints.up('sm')]: {\n            minHeight: 'auto',\n        },\n        '&[aria-selected=\"true\"]': {\n            backgroundColor: theme.palette.action.selected,\n        },\n        '&[data-focus=\"true\"]': {\n            backgroundColor: theme.palette.action.hover,\n        },\n        '&:active': {\n            backgroundColor: theme.palette.action.selected,\n        },\n        '&[aria-disabled=\"true\"]': {\n            opacity: theme.palette.action.disabledOpacity,\n            pointerEvents: 'none',\n        },\n    },\n    /* Styles applied to the group's label elements. */\n    groupLabel: {\n        backgroundColor: theme.palette.background.paper,\n        top: -8,\n    },\n    /* Styles applied to the group's ul elements. */\n    groupUl: {\n        padding: 0,\n        '& $option': {\n            paddingLeft: 24,\n        },\n    },\n});\n\nfunction DisablePortal(props) {\n    // eslint-disable-next-line react/prop-types\n    const { anchorEl, open, ...other } = props;\n    return <div {...other} />;\n}\n\nconst Autocomplete = React.forwardRef((props, ref) => {\n    /* eslint-disable no-unused-vars */\n    const {\n        autoComplete = false,\n        autoHighlight = false,\n        autoSelect = false,\n        blurOnSelect = false,\n        ChipProps,\n        classes,\n        className,\n        clearOnBlur = !props.freeSolo,\n        clearOnEscape = false,\n        clearText = 'Clear',\n        closeIcon = <CloseIcon fontSize='small' />,\n        closeText = 'Close',\n        debug = false,\n        defaultValue = props.multiple ? [] : null,\n        disableClearable = false,\n        disableCloseOnSelect = false,\n        disabled = false,\n        disabledItemsFocusable = false,\n        disableListWrap = false,\n        disablePortal = false,\n        filterOptions,\n        filterSelectedOptions = false,\n        forcePopupIcon = 'auto',\n        freeSolo = false,\n        fullWidth = false,\n        getLimitTagsText = (more) => `+${more}`,\n        getOptionDisabled,\n        getOptionLabel = (x) => x,\n        getOptionSelected,\n        groupBy,\n        handleHomeEndKeys = !props.freeSolo,\n        id: idProp,\n        includeInputInList = false,\n        inputValue: inputValueProp,\n        limitTags = -1,\n        ListboxComponent = 'ul',\n        ListboxProps,\n        loading = false,\n        loadingText = 'Loading…',\n        multiple = false,\n        noOptionsText = 'No options',\n        onChange,\n        onClose,\n        onHighlightChange,\n        onInputChange,\n        onOpen,\n        open,\n        openOnFocus = false,\n        openText = 'Open',\n        options,\n        PaperComponent = Paper,\n        PopperComponent: PopperComponentProp = Popper,\n        popupIcon = <ArrowDropDownIcon />,\n        renderGroup: renderGroupProp,\n        renderInput,\n        renderOption: renderOptionProp,\n        renderTags,\n        selectOnFocus = !props.freeSolo,\n        size = 'medium',\n        value: valueProp,\n        ...other\n    } = props;\n    /* eslint-enable no-unused-vars */\n\n    const PopperComponent = disablePortal ? DisablePortal : PopperComponentProp;\n\n    const {\n        getRootProps,\n        getInputProps,\n        getInputLabelProps,\n        getPopupIndicatorProps,\n        getClearProps,\n        getTagProps,\n        getListboxProps,\n        getOptionProps,\n        value,\n        dirty,\n        id,\n        popupOpen,\n        focused,\n        focusedTag,\n        anchorEl,\n        setAnchorEl,\n        inputValue,\n        groupedOptions,\n    } = useAutocomplete({ ...props, componentName: 'Autocomplete' });\n\n    let startAdornment;\n\n    if (multiple && value.length > 0) {\n        const getCustomizedTagProps = (params) => ({\n            className: clsx(classes.tag, {\n                [classes.tagSizeSmall]: size === 'small',\n            }),\n            disabled,\n            ...getTagProps(params),\n        });\n\n        if (renderTags) {\n            startAdornment = renderTags(value, getCustomizedTagProps);\n        } else {\n            startAdornment = value.map((option, index) => (\n                <Chip\n                    label={getOptionLabel(option)}\n                    size={size}\n                    {...getCustomizedTagProps({ index })}\n                    {...ChipProps}\n                />\n            ));\n        }\n    }\n\n    if (limitTags > -1 && Array.isArray(startAdornment)) {\n        const more = startAdornment.length - limitTags;\n        if (!focused && more > 0) {\n            startAdornment = startAdornment.splice(0, limitTags);\n            startAdornment.push(\n                <span className={classes.tag} key={startAdornment.length}>\n                    {getLimitTagsText(more)}\n                </span>,\n            );\n        }\n    }\n\n    const defaultRenderGroup = (params) => (\n        <li key={params.key}>\n            <ListSubheader className={classes.groupLabel} component='div'>\n                {params.group}\n            </ListSubheader>\n            <ul className={classes.groupUl}>{params.children}</ul>\n        </li>\n    );\n\n    const renderGroup = renderGroupProp || defaultRenderGroup;\n    const renderOption = renderOptionProp || getOptionLabel;\n\n    const renderListOption = (option, index) => {\n        const optionProps = getOptionProps({ option, index });\n\n        return (\n            <li {...optionProps} className={classes.option}>\n                {renderOption(option, {\n                    selected: optionProps['aria-selected'],\n                    inputValue,\n                })}\n            </li>\n        );\n    };\n\n    const hasClearIcon = !disableClearable && !disabled;\n    const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n\n    return (\n        <>\n            <div\n                ref={ref}\n                className={clsx(\n                    classes.root,\n                    {\n                        [classes.focused]: focused,\n                        [classes.fullWidth]: fullWidth,\n                        [classes.hasClearIcon]: hasClearIcon,\n                        [classes.hasPopupIcon]: hasPopupIcon,\n                    },\n                    className,\n                )}\n                {...getRootProps(other)}\n            >\n                {renderInput({\n                    id,\n                    disabled,\n                    fullWidth: true,\n                    size: size === 'small' ? 'small' : undefined,\n                    InputLabelProps: getInputLabelProps(),\n                    InputProps: {\n                        ref: setAnchorEl,\n                        className: classes.inputRoot,\n                        startAdornment,\n                        endAdornment: (\n                            <div className={classes.endAdornment}>\n                                {hasClearIcon ? (\n                                    <IconButton\n                                        {...getClearProps()}\n                                        aria-label={clearText}\n                                        title={clearText}\n                                        className={clsx(classes.clearIndicator, {\n                                            [classes.clearIndicatorDirty]: dirty,\n                                        })}\n                                    >\n                                        {closeIcon}\n                                    </IconButton>\n                                ) : null}\n\n                                {hasPopupIcon ? (\n                                    <IconButton\n                                        {...getPopupIndicatorProps()}\n                                        disabled={disabled}\n                                        aria-label={popupOpen ? closeText : openText}\n                                        title={popupOpen ? closeText : openText}\n                                        className={clsx(classes.popupIndicator, {\n                                            [classes.popupIndicatorOpen]: popupOpen,\n                                        })}\n                                    >\n                                        {popupIcon}\n                                    </IconButton>\n                                ) : null}\n                            </div>\n                        ),\n                    },\n                    inputProps: {\n                        className: clsx(classes.input, {\n                            [classes.inputFocused]: focusedTag === -1,\n                        }),\n                        disabled,\n                        ...getInputProps(),\n                    },\n                })}\n            </div>\n            {popupOpen && anchorEl ? (\n                <PopperComponent\n                    className={clsx(classes.popper, {\n                        [classes.popperDisablePortal]: disablePortal,\n                    })}\n                    style={{\n                        width: anchorEl ? anchorEl.clientWidth : null,\n                    }}\n                    role='presentation'\n                    anchorEl={anchorEl}\n                    open\n                >\n                    <PaperComponent className={classes.paper}>\n                        {loading && groupedOptions.length === 0 ? (\n                            <div className={classes.loading}>{loadingText}</div>\n                        ) : null}\n                        {groupedOptions.length === 0 && !freeSolo && !loading ? (\n                            <div className={classes.noOptions}>{noOptionsText}</div>\n                        ) : null}\n                        {groupedOptions.length > 0 ? (\n                            <ListboxComponent\n                                className={classes.listbox}\n                                {...getListboxProps()}\n                                {...ListboxProps}\n                            >\n                                {groupedOptions.map((option, index) => {\n                                    if (groupBy) {\n                                        return renderGroup({\n                                            key: option.key,\n                                            group: option.group,\n                                            children: option.options.map((option2, index2) =>\n                                                renderListOption(option2, option.index + index2),\n                                            ),\n                                        });\n                                    }\n                                    return renderListOption(option, index);\n                                })}\n                            </ListboxComponent>\n                        ) : null}\n                    </PaperComponent>\n                </PopperComponent>\n            ) : null}\n        </>\n    );\n});\n\nAutocomplete.propTypes = {\n    // ----------------------------- Warning --------------------------------\n    // | These PropTypes are generated from the TypeScript type definitions |\n    // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n    // ----------------------------------------------------------------------\n    /**\n     * If `true`, the portion of the selected suggestion that has not been typed by the user,\n     * known as the completion string, appears inline after the input cursor in the textbox.\n     * The inline completion string is visually highlighted and has a selected state.\n     */\n    autoComplete: PropTypes.bool,\n    /**\n     * If `true`, the first option is automatically highlighted.\n     */\n    autoHighlight: PropTypes.bool,\n    /**\n     * If `true`, the selected option becomes the value of the input\n     * when the Autocomplete loses focus unless the user chooses\n     * a different option or changes the character string in the input.\n     */\n    autoSelect: PropTypes.bool,\n    /**\n     * Control if the input should be blurred when an option is selected:\n     *\n     * - `false` the input is not blurred.\n     * - `true` the input is always blurred.\n     * - `touch` the input is blurred after a touch event.\n     * - `mouse` the input is blurred after a mouse event.\n     */\n    blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n    /**\n     * Props applied to the [`Chip`](/api/chip/) element.\n     */\n    ChipProps: PropTypes.object,\n    /**\n     * Override or extend the styles applied to the component.\n     * See [CSS API](#css) below for more details.\n     */\n    classes: PropTypes.object,\n    /**\n     * @ignore\n     */\n    className: PropTypes.string,\n    /**\n     * If `true`, the input's text will be cleared on blur if no value is selected.\n     *\n     * Set to `true` if you want to help the user enter a new value.\n     * Set to `false` if you want to help the user resume his search.\n     */\n    clearOnBlur: PropTypes.bool,\n    /**\n     * If `true`, clear all values when the user presses escape and the popup is closed.\n     */\n    clearOnEscape: PropTypes.bool,\n    /**\n     * Override the default text for the *clear* icon button.\n     *\n     * For localization purposes, you can use the provided [translations](/guides/localization/).\n     */\n    clearText: PropTypes.string,\n    /**\n     * The icon to display in place of the default close icon.\n     */\n    closeIcon: PropTypes.node,\n    /**\n     * Override the default text for the *close popup* icon button.\n     *\n     * For localization purposes, you can use the provided [translations](/guides/localization/).\n     */\n    closeText: PropTypes.string,\n    /**\n     * If `true`, the popup will ignore the blur event if the input is filled.\n     * You can inspect the popup markup with your browser tools.\n     * Consider this option when you need to customize the component.\n     */\n    debug: PropTypes.bool,\n    /**\n     * The default input value. Use when the component is not controlled.\n     */\n    defaultValue: PropTypes.any,\n    /**\n     * If `true`, the input can't be cleared.\n     */\n    disableClearable: PropTypes /* @typescript-to-proptypes-ignore */.bool,\n    /**\n     * If `true`, the popup won't close when a value is selected.\n     */\n    disableCloseOnSelect: PropTypes.bool,\n    /**\n     * If `true`, the input will be disabled.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * If `true`, will allow focus on disabled items.\n     */\n    disabledItemsFocusable: PropTypes.bool,\n    /**\n     * If `true`, the list box in the popup will not wrap focus.\n     */\n    disableListWrap: PropTypes.bool,\n    /**\n     * Disable the portal behavior.\n     * The children stay within it's parent DOM hierarchy.\n     */\n    disablePortal: PropTypes.bool,\n    /**\n     * A filter function that determines the options that are eligible.\n     *\n     * @param {T[]} options The options to render.\n     * @param {object} state The state of the component.\n     * @returns {T[]}\n     */\n    filterOptions: PropTypes.func,\n    /**\n     * If `true`, hide the selected options from the list box.\n     */\n    filterSelectedOptions: PropTypes.bool,\n    /**\n     * Force the visibility display of the popup icon.\n     */\n    forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n    /**\n     * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n     */\n    freeSolo: PropTypes /* @typescript-to-proptypes-ignore */.bool,\n    /**\n     * If `true`, the input will take up the full width of its container.\n     */\n    fullWidth: PropTypes.bool,\n    /**\n     * The label to display when the tags are truncated (`limitTags`).\n     *\n     * @param {number} more The number of truncated tags.\n     * @returns {ReactNode}\n     */\n    getLimitTagsText: PropTypes.func,\n    /**\n     * Used to determine the disabled state for a given option.\n     *\n     * @param {T} option The option to test.\n     * @returns {boolean}\n     */\n    getOptionDisabled: PropTypes.func,\n    /**\n     * Used to determine the string value for a given option.\n     * It's used to fill the input (and the list box options if `renderOption` is not provided).\n     *\n     * @param {T} option\n     * @returns {string}\n     */\n    getOptionLabel: PropTypes.func,\n    /**\n     * Used to determine if an option is selected, considering the current value.\n     * Uses strict equality by default.\n     *\n     * @param {T} option The option to test.\n     * @param {T} value The value to test against.\n     * @returns {boolean}\n     */\n    getOptionSelected: PropTypes.func,\n    /**\n     * If provided, the options will be grouped under the returned string.\n     * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n     *\n     * @param {T} options The options to group.\n     * @returns {string}\n     */\n    groupBy: PropTypes.func,\n    /**\n     * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n     * It should move focus to the first option and last option, respectively.\n     */\n    handleHomeEndKeys: PropTypes.bool,\n    /**\n     * This prop is used to help implement the accessibility logic.\n     * If you don't provide this prop. It falls back to a randomly generated id.\n     */\n    id: PropTypes.string,\n    /**\n     * If `true`, the highlight can move to the input.\n     */\n    includeInputInList: PropTypes.bool,\n    /**\n     * The input value.\n     */\n    inputValue: PropTypes.string,\n    /**\n     * The maximum number of tags that will be visible when not focused.\n     * Set `-1` to disable the limit.\n     */\n    limitTags: PropTypes.number,\n    /**\n     * The component used to render the listbox.\n     */\n    ListboxComponent: PropTypes.elementType,\n    /**\n     * Props applied to the Listbox element.\n     */\n    ListboxProps: PropTypes.object,\n    /**\n     * If `true`, the component is in a loading state.\n     */\n    loading: PropTypes.bool,\n    /**\n     * Text to display when in a loading state.\n     *\n     * For localization purposes, you can use the provided [translations](/guides/localization/).\n     */\n    loadingText: PropTypes.node,\n    /**\n     * If `true`, `value` must be an array and the menu will support multiple selections.\n     */\n    multiple: PropTypes /* @typescript-to-proptypes-ignore */.bool,\n    /**\n     * Text to display when there are no options.\n     *\n     * For localization purposes, you can use the provided [translations](/guides/localization/).\n     */\n    noOptionsText: PropTypes.node,\n    /**\n     * Callback fired when the value changes.\n     *\n     * @param {object} event The event source of the callback.\n     * @param {T|T[]} value The new value of the component.\n     * @param {string} reason One of \"create-option\", \"select-option\", \"remove-option\", \"blur\" or \"clear\".\n     */\n    onChange: PropTypes.func,\n    /**\n     * Callback fired when the popup requests to be closed.\n     * Use in controlled mode (see open).\n     *\n     * @param {object} event The event source of the callback.\n     * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"select-option\"`, `\"blur\"`.\n     */\n    onClose: PropTypes.func,\n    /**\n     * Callback fired when the highlight option changes.\n     *\n     * @param {object} event The event source of the callback.\n     * @param {T} option The highlighted option.\n     * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`.\n     */\n    onHighlightChange: PropTypes.func,\n    /**\n     * Callback fired when the input value changes.\n     *\n     * @param {object} event The event source of the callback.\n     * @param {string} value The new value of the text input.\n     * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n     */\n    onInputChange: PropTypes.func,\n    /**\n     * Callback fired when the popup requests to be opened.\n     * Use in controlled mode (see open).\n     *\n     * @param {object} event The event source of the callback.\n     */\n    onOpen: PropTypes.func,\n    /**\n     * Control the popup` open state.\n     */\n    open: PropTypes.bool,\n    /**\n     * If `true`, the popup will open on input focus.\n     */\n    openOnFocus: PropTypes.bool,\n    /**\n     * Override the default text for the *open popup* icon button.\n     *\n     * For localization purposes, you can use the provided [translations](/guides/localization/).\n     */\n    openText: PropTypes.string,\n    /**\n     * Array of options.\n     */\n    options: PropTypes.array.isRequired,\n    /**\n     * The component used to render the body of the popup.\n     */\n    PaperComponent: PropTypes.elementType,\n    /**\n     * The component used to position the popup.\n     */\n    PopperComponent: PropTypes.elementType,\n    /**\n     * The icon to display in place of the default popup icon.\n     */\n    popupIcon: PropTypes.node,\n    /**\n     * Render the group.\n     *\n     * @param {any} option The group to render.\n     * @returns {ReactNode}\n     */\n    renderGroup: PropTypes.func,\n    /**\n     * Render the input.\n     *\n     * @param {object} params\n     * @returns {ReactNode}\n     */\n    renderInput: PropTypes.func.isRequired,\n    /**\n     * Render the option, use `getOptionLabel` by default.\n     *\n     * @param {T} option The option to render.\n     * @param {object} state The state of the component.\n     * @returns {ReactNode}\n     */\n    renderOption: PropTypes.func,\n    /**\n     * Render the selected value.\n     *\n     * @param {T[]} value The `value` provided to the component.\n     * @param {function} getTagProps A tag props getter.\n     * @returns {ReactNode}\n     */\n    renderTags: PropTypes.func,\n    /**\n     * If `true`, the input's text will be selected on focus.\n     * It helps the user clear the selected value.\n     */\n    selectOnFocus: PropTypes.bool,\n    /**\n     * The size of the autocomplete.\n     */\n    size: PropTypes.oneOf(['medium', 'small']),\n    /**\n     * The value of the autocomplete.\n     *\n     * The value must have reference equality with the option in order to be selected.\n     * You can customize the equality behavior with the `getOptionSelected` prop.\n     */\n    value: PropTypes.any,\n};\n\nexport default withStyles(styles)(Autocomplete);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { usePublisherSettings } from 'AppComponents/Shared/AppContext';\nimport MuiAlert from 'AppComponents/Shared/MuiAlert';\nimport 'react-tagsinput/react-tagsinput.css';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\nimport Typography from '@material-ui/core/Typography';\nimport { isRestricted } from 'AppData/AuthManager';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Popover from '@material-ui/core/Popover';\nimport moment from 'moment';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Progress from 'AppComponents/Shared/Progress';\n\nimport clsx from 'clsx';\nimport TableRow from '@material-ui/core/TableRow';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Chip from '@material-ui/core/Chip';\nimport { makeStyles } from '@material-ui/core/styles';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport Configurations from 'Config';\nimport Card from '@material-ui/core/Card';\nimport AddIcon from '@material-ui/icons/Add';\nimport CardContent from '@material-ui/core/CardContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport APIProduct from 'AppData/APIProduct';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport API from 'AppData/api';\nimport { ConfirmDialog } from 'AppComponents/Shared/index';\nimport { useRevisionContext } from 'AppComponents/Shared/RevisionContext';\nimport Utils from 'AppData/Utils';\nimport { parse } from '@asyncapi/parser';\nimport { upperCaseString } from 'AppData/stringFormatter';\nimport DisplayDevportal from './DisplayDevportal';\nimport DeploymentOnbording from './DeploymentOnbording';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    saveButton: {\n        marginTop: theme.spacing(3),\n    },\n    shapeRec: {\n        backgroundColor: 'black',\n        alignSelf: 'center',\n        width: 120,\n        height: 3,\n    },\n    shapeCircaleBack: {\n        backgroundColor: '#E2E2E2',\n        width: 63,\n        height: 63,\n    },\n    shapeInnerComplete: {\n        backgroundColor: '#095677',\n        width: 50,\n        height: 50,\n        marginTop: 6,\n        marginLeft: 6.5,\n        placeSelf: 'middle',\n    },\n    shapeInnerInactive: {\n        backgroundColor: '#BFBFBF',\n        width: 50,\n        height: 50,\n        marginTop: 6,\n        marginLeft: 6,\n        placeSelf: 'middle',\n    },\n    shapeDottedEnd: {\n        backgroundColor: '#BFBFBF',\n        border: '1px dashed #707070',\n        width: 47,\n        height: 47,\n        marginTop: 7,\n        marginLeft: 7,\n        placeSelf: 'middle',\n    },\n    shapeDottedStart: {\n        backgroundColor: '#1CB1BF',\n        border: '2px solid #ffffff',\n        width: 47,\n        height: 47,\n        marginTop: 6,\n        marginLeft: 6,\n        placeSelf: 'middle',\n    },\n    plusIconStyle: {\n        marginTop: 8,\n        marginLeft: 8,\n        fontSize: 30,\n    },\n    shapeDottedStart1: {\n        backgroundColor: '#1CB1BF',\n        width: 50,\n        height: 50,\n        marginTop: 6,\n        marginLeft: 6.5,\n        placeSelf: 'middle',\n    },\n    textShape: {\n        marginTop: 5.5,\n        marginLeft: 6.5,\n    },\n    textShape2: {\n        marginTop: 8,\n        marginLeft: 115,\n        height: '18px',\n        fontFamily: 'sans-serif',\n    },\n    textPadding: {\n        height: '25px',\n        paddingBottom: '2px',\n    },\n    textDelete: {\n        marginTop: 8,\n        marginLeft: 120,\n        fontFamily: 'sans-serif',\n        fontSize: 'small',\n    },\n    textShape3: {\n        color: '#38536c',\n        marginLeft: 70,\n    },\n    textShape7: {\n        color: '#38536c',\n    },\n    primaryEndpoint: {\n        color: '#006E9C',\n    },\n    secondaryEndpoint: {\n        color: '#415A85',\n    },\n    textShape4: {\n        marginTop: 55,\n    },\n    textShape8: {\n        marginTop: 80,\n    },\n    textShape5: {\n        marginTop: 10,\n        marginLeft: 85,\n        marginBottom: 10,\n    },\n    textShape6: {\n        color: '#1B3A57',\n    },\n    button1: {\n        color: '#1B3A57',\n        marginLeft: 7,\n    },\n    button2: {\n        color: '#1B3A57',\n        marginLeft: 7,\n        marginTop: 10,\n    },\n    shapeRecBack: {\n        backgroundColor: 'black',\n        alignSelf: 'center',\n        width: 40,\n        height: 3,\n    },\n    shapeCircle: {\n        borderRadius: '50%',\n    },\n    shapeCircleBlack: {\n        backgroundColor: '#000000',\n        alignSelf: 'center',\n        paddingLeft: '15px',\n        width: 15,\n        height: 15,\n    },\n    changeCard: {\n        boxShadow: 15,\n        borderRadius: '10px',\n        backgroundColor: theme.palette.secondary.highlight,\n    },\n    noChangeCard: {\n        boxShadow: 15,\n        borderRadius: '10px',\n    },\n    cardHeight: {\n        boxShadow: 1,\n        height: '100%',\n    },\n    cardContentHeight: {\n        boxShadow: 1,\n        height: '50%',\n    },\n    cardActionHeight: {\n        boxShadow: 1,\n        height: '25%',\n    },\n    dialogContent: {\n        overflow: 'auto',\n        height: '90%',\n    },\n    textOverlay: {\n        overflow: 'hidden',\n        maxHeight: '100%',\n        maxWidth: '100%',\n        cursor: 'pointer',\n        '&:hover': { overflow: 'visible' },\n    },\n    gridOverflow: {\n        overflow: 'scroll',\n        width: '100%',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 130,\n    },\n    dialogPaper: {\n        width: '800px',\n        maxHeight: '800px',\n    },\n    createRevisionDialogStyle: {\n        width: '800px',\n    },\n    sectionTitle: {\n        marginBottom: theme.spacing(2),\n    },\n    deployNewRevButtonStyle: {\n        marginRight: theme.spacing(3),\n        marginBottom: theme.spacing(3),\n        marginTop: theme.spacing(3),\n    },\n    popover: {\n        pointerEvents: 'none',\n    },\n    paper: {\n        padding: theme.spacing(1),\n        maxWidth: '300px',\n    },\n    timePaddingStyle: {\n        marginTop: theme.spacing(1),\n    },\n    labelSpace: {\n        paddingLeft: theme.spacing(1),\n    },\n    labelSpacingDown: {\n        marginBottom: theme.spacing(2),\n    },\n    warningText: {\n        color: '#ff0000',\n    },\n    tableCellVhostSelect: {\n        paddingTop: theme.spacing(0),\n        paddingBottom: theme.spacing(0),\n    },\n    vhostSelect: {\n        marginTop: theme.spacing(3),\n    },\n    textCount: {\n        marginTop: theme.spacing(-2.5),\n    },\n    containerInline: {\n        display: 'inline-flex',\n    },\n    containerOverflow: {\n        display: 'grid',\n        gridGap: '16px',\n        paddingLeft: '48px',\n        gridTemplateColumns: 'repeat(auto-fill,minmax(160px,1fr))',\n        gridAutoFlow: 'column',\n        gridAutoColumns: 'minmax(160px,1fr)',\n        overflowX: 'auto',\n    },\n    infoAlert: {\n        clear: 'both',\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(2),\n    },\n}));\n\n/**\n * Renders an Environments list\n * @class Environments\n * @extends {React.Component}\n */\nexport default function Environments() {\n    const classes = useStyles();\n    const maxCommentLength = '255';\n    const intl = useIntl();\n    const { api, updateAPI } = useContext(APIContext);\n    const securityScheme = [...api.securityScheme];\n    const isMutualSslOnly = securityScheme.length === 2 && securityScheme.includes('mutualssl')\n    && securityScheme.includes('mutualssl_mandatory');\n    const isEndpointAvailable = api.endpointConfig !== null;\n    const isTierAvailable = api.policies.length !== 0;\n\n    const isDeployButtonDisabled = (((api.type !== 'WEBSUB' && !isEndpointAvailable))\n    || (!isMutualSslOnly && !isTierAvailable)\n    || api.workflowStatus === 'CREATED');\n    const history = useHistory();\n    const { data: settings, isLoading } = usePublisherSettings();\n    const {\n        allRevisions, getRevision, allEnvRevision, getDeployedEnv,\n    } = useRevisionContext();\n    let revisionCount;\n    if (Configurations.app.revisionCount) {\n        revisionCount = Configurations.app.revisionCount;\n    } else {\n        revisionCount = 5;\n    }\n    const restApi = new API();\n    const restProductApi = new APIProduct();\n    const [selectedRevision, setRevision] = useState([]);\n    const externalGateways = settings && settings.environment.filter((p) => !p.provider.toLowerCase().includes('wso2'));\n    const internalGateways = settings && settings.environment.filter((p) => p.provider.toLowerCase().includes('wso2'));\n    const [selectedVhosts, setVhosts] = useState(null);\n    const [selectedVhostDeploy, setVhostsDeploy] = useState([]);\n    useEffect(() => {\n        if (settings) {\n            const defaultVhosts = internalGateways.map(\n                (e) => (e.vhosts && e.vhosts.length > 0 ? { env: e.name, vhost: e.vhosts[0].host } : undefined),\n            );\n            setVhosts(defaultVhosts);\n            setVhostsDeploy(defaultVhosts);\n        }\n    }, [settings]);\n    const [extraRevisionToDelete, setExtraRevisionToDelete] = useState(null);\n    const [description, setDescription] = useState('');\n    const [SelectedEnvironment, setSelectedEnvironment] = useState([]);\n    const [open, setOpen] = useState(false);\n    const [confirmDeleteOpen, setConfirmDeleteOpen] = useState(false);\n    const [revisionToDelete, setRevisionToDelete] = useState([]);\n    const [confirmRestoreOpen, setConfirmRestoreOpen] = useState(false);\n    const [revisionToRestore, setRevisionToRestore] = useState([]);\n    const [currentLength, setCurrentLength] = useState(0);\n    const [openDeployPopup, setOpenDeployPopup] = useState(history.location.state === 'deploy');\n    const [externalEnvEndpoints, setExternalEnvEndpoints] = useState(null);\n\n    const allExternalGatewaysMap = [];\n    const allExternalGateways = [];\n    if (externalGateways) {\n        externalGateways.forEach((env) => {\n            const revision = allEnvRevision && allEnvRevision.find(\n                (r) => r.deploymentInfo.some((e) => e.name === env.name),\n            );\n            const envDetails = revision && revision.deploymentInfo.find((e) => e.name === env.name);\n            const disPlayDevportal = envDetails && envDetails.displayOnDevportal;\n            allExternalGatewaysMap[env.name] = { revision, disPlayDevportal };\n            allExternalGateways.push(env);\n        });\n    }\n\n\n    const externalEnvWithEndpoints = [];\n    useEffect(() => {\n        const promise = restApi.getAsyncAPIDefinition(api.id);\n        promise.then(async (response) => {\n            const doc = await parse(response.data);\n            const protocolBindings = [];\n            // eslint-disable-next-line array-callback-return\n            doc.channelNames().map((channelName) => {\n                if (doc.channel(channelName).hasPublish()) {\n                    // eslint-disable-next-line array-callback-return\n                    doc.channel(channelName).publish().bindingProtocols().map((protocol) => {\n                        if (!protocolBindings.includes(protocol)) {\n                            protocolBindings.push(protocol);\n                        }\n                    });\n                }\n                if (doc.channel(channelName).hasSubscribe()) {\n                    // eslint-disable-next-line array-callback-return\n                    doc.channel(channelName).subscribe().bindingProtocols().map((protocol) => {\n                        if (!protocolBindings.includes(protocol)) {\n                            protocolBindings.push(protocol);\n                        }\n                    });\n                }\n            });\n            // eslint-disable-next-line array-callback-return\n            allExternalGateways.map((env) => {\n                const endpoints = [];\n                // eslint-disable-next-line array-callback-return\n                env.endpointURIs.map((endpoint) => {\n                    // eslint-disable-next-line array-callback-return\n                    protocolBindings.map((protocol) => {\n                        if (protocol === endpoint.protocol) {\n                            const uri = endpoint.endpointURI;\n                            endpoints.push({ protocol, uri });\n                        }\n                    });\n                });\n                externalEnvWithEndpoints[env.name] = endpoints;\n            });\n            setExternalEnvEndpoints(externalEnvWithEndpoints);\n        });\n    }, [api.id]);\n\n    const toggleOpenConfirmDelete = (revisionName, revisionId) => {\n        setRevisionToDelete([revisionName, revisionId]);\n        setConfirmDeleteOpen(!confirmDeleteOpen);\n    };\n\n    const toggleOpenConfirmRestore = (revisionName, revisionId) => {\n        setRevisionToRestore([revisionName, revisionId]);\n        setConfirmRestoreOpen(!confirmRestoreOpen);\n    };\n\n    const toggleDeployRevisionPopup = () => {\n        setOpenDeployPopup(!openDeployPopup);\n    };\n\n    const handleCloseDeployPopup = () => {\n        history.replace();\n        setOpenDeployPopup(false);\n        setExtraRevisionToDelete(null);\n    };\n\n    const handleClickOpen = () => {\n        if (!isRestricted(['apim:api_create', 'apim:api_publish'], api)) {\n            setOpen(true);\n        }\n    };\n\n    const handleDeleteSelect = (event) => {\n        setExtraRevisionToDelete([event.target.value, event.target.name]);\n    };\n\n    const handleSelect = (event) => {\n        const revisions = selectedRevision.filter((r) => r.env !== event.target.name);\n        const oldRevision = selectedRevision.find((r) => r.env === event.target.name);\n        let displayOnDevPortal = true;\n        if (oldRevision) {\n            displayOnDevPortal = oldRevision.displayOnDevPortal;\n        }\n        revisions.push({ env: event.target.name, revision: event.target.value, displayOnDevPortal });\n        setRevision(revisions);\n    };\n\n    const handleSelectForBrokers = (event) => {\n        const revisions = selectedRevision.filter((r) => r.env !== event.target.name);\n        const oldRevision = selectedRevision.find((r) => r.env === event.target.name);\n        let displayOnDevPortal = true;\n        if (oldRevision) {\n            displayOnDevPortal = oldRevision.displayOnDevPortal;\n        }\n        revisions.push({ env: event.target.name, revision: event.target.value, displayOnDevPortal });\n        setRevision(revisions);\n    };\n\n    /* const isDisplayOnDevPortalCheckedForThirdPartyEnv = (env) => {\n        if (allExternalGatewaysMap[env].revision) {\n            return allExternalGatewaysMap[env].revision.deploymentInfo.find(\n                (r) => r.name === env,\n            ).displayOnDevportal;\n        }\n        const oldRevision = selectedRevision.find((r) => r.env === env);\n        let displayOnDevPortal = true;\n        if (oldRevision) {\n            displayOnDevPortal = oldRevision.displayOnDevPortal;\n        }\n        return displayOnDevPortal;\n    }; */\n\n    const handleVhostSelect = (event) => {\n        const vhosts = selectedVhosts.filter((v) => v.env !== event.target.name);\n        vhosts.push({ env: event.target.name, vhost: event.target.value });\n        setVhosts(vhosts);\n    };\n\n    const handleVhostDeploySelect = (event) => {\n        const vhosts = selectedVhostDeploy.filter((v) => v.env !== event.target.name);\n        vhosts.push({ env: event.target.name, vhost: event.target.value });\n        setVhostsDeploy(vhosts);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n        setExtraRevisionToDelete(null);\n    };\n\n    const handleChange = (event) => {\n        if (event.target.checked) {\n            setSelectedEnvironment([...SelectedEnvironment, event.target.value]);\n        } else {\n            setSelectedEnvironment(\n                SelectedEnvironment.filter((env) => env !== event.target.value),\n            );\n        }\n        if (event.target.name === 'description') {\n            setDescription(event.target.value);\n            setCurrentLength(event.target.value.length);\n        }\n    };\n\n    /**\n     * Handles deleting a revision\n     * @param {Object} revisionId the revision Id\n     * @returns {Object} promised delete\n     */\n    function deleteRevision(revisionId) {\n        let promiseDelete;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            promiseDelete = restProductApi.deleteProductRevision(api.id, revisionId)\n                .then(() => {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Revision Deleted Successfully',\n                        id: 'Apis.Details.Environments.Environments.revision.delete.success',\n                    }));\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error(intl.formatMessage({\n                            defaultMessage: 'Something went wrong while deleting the revision',\n                            id: 'Apis.Details.Environments.Environments.revision.delete.error',\n                        }));\n                    }\n                }).finally(() => {\n                    history.replace();\n                    getRevision();\n                });\n        } else {\n            promiseDelete = restApi.deleteRevision(api.id, revisionId)\n                .then(() => {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Revision Deleted Successfully',\n                        id: 'Apis.Details.Environments.Environments.revision.delete.success',\n                    }));\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error(intl.formatMessage({\n                            defaultMessage: 'Something went wrong while deleting the revision',\n                            id: 'Apis.Details.Environments.Environments.revision.delete.error',\n                        }));\n                    }\n                }).finally(() => {\n                    history.replace();\n                    getRevision();\n                });\n        }\n        return promiseDelete;\n    }\n\n    /**\n     * Handles creating a new revision\n     * @param {Object} body the request body\n     * @returns {Object} promised create\n     */\n    function createRevision(body) {\n        if (api.apiType === API.CONSTS.APIProduct) {\n            restProductApi.createProductRevision(api.id, body)\n                .then(() => {\n                    Alert.info('Revision Created Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while creating the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                });\n        } else {\n            api.createRevision(api.id, body)\n                .then(() => {\n                    Alert.info('Revision Created Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while creating the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                });\n        }\n    }\n\n    /**\n      * Handles adding a new revision\n      * @memberof Revisions\n      */\n    function handleClickAddRevision() {\n        const body = {\n            description,\n        };\n        if (extraRevisionToDelete) {\n            deleteRevision(extraRevisionToDelete[0])\n                .then(() => {\n                    createRevision(body);\n                }).finally(() => setExtraRevisionToDelete(null));\n        } else {\n            createRevision(body);\n        }\n        setOpen(false);\n        setDescription('');\n        setExtraRevisionToDelete(null);\n    }\n\n    const runActionDelete = (confirm, revisionId) => {\n        if (confirm) {\n            deleteRevision(revisionId);\n        }\n        setConfirmDeleteOpen(!confirmDeleteOpen);\n        setRevisionToDelete([]);\n    };\n\n    /**\n      * Handles restore revision\n      * @memberof Revisions\n      */\n    function restoreRevision(revisionId) {\n        if (api.apiType !== API.CONSTS.APIProduct) {\n            restApi.restoreRevision(api.id, revisionId)\n                .then(() => {\n                    Alert.info('Revision Restored Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while restoring the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                    updateAPI();\n                });\n        } else {\n            restProductApi.restoreProductRevision(api.id, revisionId)\n                .then(() => {\n                    Alert.info('Revision Restored Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while restoring the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                });\n        }\n    }\n\n    const runActionRestore = (confirm, revisionId) => {\n        if (confirm) {\n            restoreRevision(revisionId);\n        }\n        setConfirmRestoreOpen(!confirmRestoreOpen);\n        setRevisionToRestore([]);\n    };\n\n    /**\n      * Handles undeploy a revision\n      * @memberof Revisions\n      */\n    function undeployRevision(revisionId, envName) {\n        const body = [{\n            name: envName,\n            displayOnDevportal: false,\n        }];\n        if (api.apiType !== API.CONSTS.APIProduct) {\n            restApi.undeployRevision(api.id, revisionId, body)\n                .then(() => {\n                    Alert.info('Revision Undeployed Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while undeploying the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                });\n        } else {\n            restProductApi.undeployProductRevision(api.id, revisionId, body)\n                .then(() => {\n                    Alert.info('Revision Undeployed Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while undeploying the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                });\n        }\n    }\n\n    /**\n      * Handles deploy a revision\n      * @memberof Revisions\n      */\n    function deployRevision(revisionId, envName, vhost, displayOnDevportal) {\n        const body = [{\n            name: envName,\n            displayOnDevportal,\n            vhost,\n        }];\n        if (api.apiType !== API.CONSTS.APIProduct) {\n            restApi.deployRevision(api.id, revisionId, body)\n                .then(() => {\n                    Alert.info('Deploy revision Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while deploy the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                });\n        } else {\n            restProductApi.deployProductRevision(api.id, revisionId, body)\n                .then(() => {\n                    Alert.info('Deploy revision Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while deploy the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                });\n        }\n    }\n\n    /**\n      * Handles adding a new revision and deploy\n      * @memberof Revisions\n      */\n    function createDeployRevision(envList, vhostList) {\n        const body = {\n            description,\n        };\n        if (api.apiType !== API.CONSTS.APIProduct) {\n            restApi.createRevision(api.id, body)\n                .then((response) => {\n                    Alert.info('Revision Created Successfully');\n                    const body1 = [];\n                    for (const env of envList) {\n                        body1.push({\n                            name: env,\n                            vhost: api.gatewayVendor === 'wso2' ? vhostList.find((v) => v.env === env).vhost : ' ',\n                            displayOnDevportal: true,\n                        });\n                    }\n                    restApi.deployRevision(api.id, response.body.id, body1)\n                        .then(() => {\n                            Alert.info('Revision Deployed Successfully');\n                        })\n                        .catch((error) => {\n                            if (error.response) {\n                                Alert.error(error.response.body.description);\n                            } else {\n                                Alert.error('Something went wrong while deploying the revision');\n                            }\n                            console.error(error);\n                        }).finally(() => {\n                            history.replace();\n                            getRevision();\n                            getDeployedEnv();\n                        });\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while creating the revision');\n                    }\n                    console.error(error);\n                });\n            setOpenDeployPopup(false);\n        } else {\n            restProductApi.createProductRevision(api.id, body)\n                .then((response) => {\n                    Alert.info('Revision Created Successfully');\n                    const body1 = [];\n                    for (let i = 0; i < envList.length; i++) {\n                        body1.push({\n                            name: envList[i],\n                            vhost: api.gatewayVendor === 'wso2' ? vhostList.find((v) => v.env === envList[i]).vhost\n                                : ' ',\n                            displayOnDevportal: true,\n                        });\n                    }\n                    restProductApi.deployProductRevision(api.id, response.body.id, body1)\n                        .then(() => {\n                            Alert.info('Revision Deployed Successfully');\n                        })\n                        .catch((error) => {\n                            if (error.response) {\n                                Alert.error(error.response.body.description);\n                            } else {\n                                Alert.error('Something went wrong while deploying the revision');\n                            }\n                            console.error(error);\n                        }).finally(() => {\n                            history.replace();\n                            getRevision();\n                            getDeployedEnv();\n                        });\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while creating the revision');\n                    }\n                    console.error(error);\n                });\n            setOpenDeployPopup(false);\n        }\n    }\n\n    /**\n     * Handles creating and deploying a new revision\n     * @param {Object} envList the environment list\n     * @param {Array} vhostList the vhost list\n     * @param {Object} length the length of the list\n     */\n    function handleCreateAndDeployRevision(envList, vhostList) {\n        if (extraRevisionToDelete) {\n            deleteRevision(extraRevisionToDelete[0])\n                .then(() => {\n                    createDeployRevision(envList, vhostList);\n                }).finally(() => {\n                    setExtraRevisionToDelete(null);\n                });\n        } else {\n            createDeployRevision(envList, vhostList);\n        }\n    }\n\n    const confirmDeleteDialog = (\n        <ConfirmDialog\n            key='key-dialog'\n            labelCancel={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.delete.cancel'\n                    defaultMessage='Cancel'\n                />\n            )}\n            title={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.delete.confirm.title'\n                    defaultMessage='Confirm Delete'\n                />\n            )}\n            message={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.delete.confirm.message'\n                    defaultMessage='Are you sure you want to delete {revision} ?'\n                    values={{ revision: revisionToDelete[0] }}\n                />\n            )}\n            labelOk={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.delete.confirm.ok'\n                    defaultMessage='Yes'\n                />\n            )}\n            callback={(e) => runActionDelete(e, revisionToDelete[1])}\n            open={confirmDeleteOpen}\n        />\n    );\n\n    /**\n     * Get Organization value of external gateways\n     * @param {Object} additionalProperties the additionalProperties list\n     * @return String organization name\n     */\n    function getOrganizationFromAdditionalProperties(additionalProperties) {\n        let organization;\n        additionalProperties.forEach((property) => {\n            if (property.key === 'Organization') {\n                organization = property.value;\n            }\n        });\n        return organization;\n    }\n\n    const confirmRestoreDialog = (\n        <ConfirmDialog\n            key='key-dialog-restore'\n            labelCancel={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.restore.cancel'\n                    defaultMessage='Cancel'\n                />\n            )}\n            title={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.restore.confirm.title'\n                    defaultMessage='Confirm Restore'\n                />\n            )}\n            message={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.restore.confirm.message'\n                    defaultMessage='Are you sure you want to restore {revision} (To Current API)?'\n                    values={{ revision: revisionToRestore[0] }}\n                />\n            )}\n            labelOk={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.restore.confirm.ok'\n                    defaultMessage='Yes'\n                />\n            )}\n            callback={(e) => runActionRestore(e, revisionToRestore[1])}\n            open={confirmRestoreOpen}\n        />\n    );\n\n    let item1;\n    /**\n     * Returns modified item1\n     * @param {*} revDescription The description of the revision\n     * @returns {Object} Returns the item1\n     */\n    function ReturnItem1({ revDescription, revName, revCreatedTime }) {\n        const [anchorEl, setAnchorEl] = useState(null);\n\n        const handlePopoverOpen = (event) => {\n            setAnchorEl(event.currentTarget);\n        };\n\n        const handlePopoverClose = () => {\n            setAnchorEl(null);\n        };\n\n        const openPopover = Boolean(anchorEl);\n        item1 = (\n            <Grid\n                className={classes.containerInline}\n            >\n                <Grid item className={classes.shapeRec} />\n                <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                    <Grid\n                        className={clsx(classes.shapeInnerComplete, classes.shapeCircle)}\n                        onMouseEnter={handlePopoverOpen}\n                        onMouseLeave={handlePopoverClose}\n                    />\n                    <Popover\n                        id='mouse-over-popover'\n                        className={classes.popover}\n                        classes={{\n                            paper: classes.paper,\n\n                        }}\n                        open={openPopover}\n                        anchorEl={anchorEl}\n                        anchorOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right',\n                        }}\n                        transformOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'left',\n                        }}\n                        onClose={handlePopoverClose}\n                        disableRestoreFocus\n                    >\n                        <div>\n                            <Typography variant='body1'>\n                                <b>{revName}</b>\n                            </Typography>\n                            <Typography variant='body2'>\n                                {revDescription}\n                            </Typography>\n                            <div className={classes.timePaddingStyle}>\n                                <Typography variant='caption'>\n                                    <span>{moment(revCreatedTime).fromNow()}</span>\n                                </Typography>\n                            </div>\n                        </div>\n                    </Popover>\n                </Grid>\n                <Grid item className={classes.shapeRecBack} />\n            </Grid>\n        );\n        return item1;\n    }\n    const item2 = (\n        <Grid\n            className={classes.containerInline}\n        >\n            <Grid item className={classes.shapeRec} />\n            <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                <Grid className={clsx(classes.shapeInnerInactive, classes.shapeCircle)} />\n            </Grid>\n            <Grid item className={classes.shapeRecBack} />\n        </Grid>\n    );\n    const item3 = (\n        <Grid\n            className={classes.containerInline}\n        >\n            <Grid item className={classes.shapeRec} />\n            <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                <Grid className={clsx(classes.shapeDottedEnd, classes.shapeCircle)} />\n            </Grid>\n        </Grid>\n    );\n    const item4 = (\n        <Grid\n            className={classes.containerInline}\n        >\n            <Grid item className={classes.shapeRec} />\n            <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                {api.advertiseInfo && api.advertiseInfo.advertised ? (\n                    <Grid\n                        className={clsx(classes.shapeDottedStart, classes.shapeCircle)}\n                        style={{ cursor: 'pointer' }}\n                    >\n                        <AddIcon color='disabled' className={classes.plusIconStyle} />\n                    </Grid>\n                ) : (\n                    <Grid\n                        onClick={handleClickOpen}\n                        className={clsx(classes.shapeDottedStart, classes.shapeCircle)}\n                        style={{ cursor: 'pointer' }}\n                    >\n                        <AddIcon className={classes.plusIconStyle} />\n                    </Grid>\n                )}\n\n            </Grid>\n            <Grid item className={classes.shapeRecBack} />\n        </Grid>\n    );\n    const item5 = (\n        <Grid\n            className={classes.containerInline}\n        >\n            <Grid item className={classes.shapeRec} />\n            <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                {api.advertiseInfo && api.advertiseInfo.advertised ? (\n                    <Grid\n                        className={clsx(classes.shapeDottedStart, classes.shapeCircle)}\n                        style={{ cursor: 'pointer' }}\n                    >\n                        <AddIcon color='disabled' className={classes.plusIconStyle} />\n                    </Grid>\n                ) : (\n                    <Grid\n                        onClick={handleClickOpen}\n                        className={clsx(classes.shapeDottedStart, classes.shapeCircle)}\n                        style={{ cursor: 'pointer' }}\n                    >\n                        <AddIcon className={classes.plusIconStyle} />\n                    </Grid>\n                )}\n            </Grid>\n        </Grid>\n    );\n    let item6;\n    /**\n     * Returns modified item6\n     * @param {*} revDescription The description of the revision\n     * @returns {Object} Returns the item6\n     */\n    function ReturnItem6({ revDescription, revName, revCreatedTime }) {\n        const [anchorEl1, setAnchorEl1] = useState(null);\n\n        const handlePopoverOpen = (event) => {\n            setAnchorEl1(event.currentTarget);\n        };\n\n        const handlePopoverClose = () => {\n            setAnchorEl1(null);\n        };\n\n        const openPopover = Boolean(anchorEl1);\n        item6 = (\n            <Grid\n                className={classes.containerInline}\n            >\n                <Grid item className={classes.shapeRec} />\n                <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                    <Grid\n                        className={clsx(classes.shapeDottedStart1, classes.shapeCircle)}\n                        onMouseEnter={handlePopoverOpen}\n                        onMouseLeave={handlePopoverClose}\n                    />\n                    <Popover\n                        id='mouse-over-popover'\n                        className={classes.popover}\n                        classes={{\n                            paper: classes.paper,\n                        }}\n                        open={openPopover}\n                        anchorEl={anchorEl1}\n                        anchorOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'right',\n                        }}\n                        transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'left',\n                        }}\n                        onClose={handlePopoverClose}\n                        disableRestoreFocus\n                    >\n                        <div>\n                            <Typography variant='body1'>\n                                <b>{revName}</b>\n                            </Typography>\n                            <Typography variant='body2'>\n                                {revDescription}\n                            </Typography>\n                            <div className={classes.timePaddingStyle}>\n                                <Typography variant='caption'>\n                                    <span>{moment(revCreatedTime).fromNow()}</span>\n                                </Typography>\n                            </div>\n                        </div>\n                    </Popover>\n                </Grid>\n                <Grid item className={classes.shapeRecBack} />\n            </Grid>\n        );\n        return item6;\n    }\n\n    const items = [];\n    if (!api.isRevision) {\n        if (allRevisions && allRevisions.length !== 0) {\n            items.push(\n                <Grid item className={clsx(classes.shapeCircleBlack, classes.shapeCircle)} />,\n            );\n            for (let revision = 0; revision < (allRevisions.length); revision++) {\n                if (revision % 2 === 0) {\n                    items.push(\n                        <Grid item>\n                            <Grid className={classes.textShape4} />\n                            <ReturnItem1\n                                revDescription={allRevisions[revision].description}\n                                revName={allRevisions[revision].displayName}\n                                revCreatedTime={allRevisions[revision].createdTime}\n                            />\n                            {item1}\n                            <Grid className={classes.textShape2}>\n                                {allRevisions[revision].displayName}\n                            </Grid>\n                            <Grid>\n                                <Button\n                                    className={classes.textShape3}\n                                    onClick={() => toggleOpenConfirmRestore(\n                                        allRevisions[revision].displayName, allRevisions[revision].id,\n                                    )}\n                                    size='small'\n                                    type='submit'\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    startIcon={<RestoreIcon />}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.restore'\n                                        defaultMessage='Restore'\n                                    />\n                                </Button>\n                                <Button\n                                    className={classes.textShape7}\n                                    onClick={() => toggleOpenConfirmDelete(\n                                        allRevisions[revision].displayName, allRevisions[revision].id,\n                                    )}\n                                    disabled={(allEnvRevision && allEnvRevision.filter(\n                                        (o1) => o1.id === allRevisions[revision].id,\n                                    ).length !== 0) || isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    size='small'\n                                    color='#38536c'\n                                    startIcon={<DeleteForeverIcon />}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.delete'\n                                        defaultMessage='Delete'\n                                    />\n                                </Button>\n                            </Grid>\n                        </Grid>,\n                    );\n                } else {\n                    items.push(\n                        <Grid item>\n                            <Grid className={classes.textShape5} />\n                            <Grid className={classes.textShape2}>\n                                {allRevisions[revision].displayName}\n                            </Grid>\n                            <Grid className={classes.textPadding}>\n                                <Button\n                                    className={classes.textShape3}\n                                    onClick={() => toggleOpenConfirmRestore(\n                                        allRevisions[revision].displayName, allRevisions[revision].id,\n                                    )}\n                                    size='small'\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    type='submit'\n                                    startIcon={<RestoreIcon />}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.restore'\n                                        defaultMessage='Restore'\n                                    />\n                                </Button>\n                                <Button\n                                    className={classes.textShape7}\n                                    onClick={() => toggleOpenConfirmDelete(\n                                        allRevisions[revision].displayName, allRevisions[revision].id,\n                                    )}\n                                    disabled={(allEnvRevision && allEnvRevision.filter(\n                                        (o1) => o1.id === allRevisions[revision].id,\n                                    ).length !== 0) || isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    size='small'\n                                    color='#38536c'\n                                    startIcon={<DeleteForeverIcon />}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.delete'\n                                        defaultMessage='Delete'\n                                    />\n                                </Button>\n                            </Grid>\n                            <ReturnItem6\n                                revDescription={allRevisions[revision].description}\n                                revName={allRevisions[revision].displayName}\n                                revCreatedTime={allRevisions[revision].createdTime}\n                            />\n                            {item6}\n                        </Grid>,\n                    );\n                }\n            }\n            if (allRevisions.length !== revisionCount) {\n                items.push(\n                    <Grid item>\n                        <Grid className={classes.textShape4}>\n                            {item4}\n                        </Grid>\n                    </Grid>,\n                );\n            }\n            if (allRevisions.length === revisionCount) {\n                items.push(\n                    <Grid item>\n                        <Grid className={classes.textShape4}>\n                            {item5}\n                        </Grid>\n                    </Grid>,\n                );\n            }\n            for (let unassignRevision = 0; unassignRevision\n                < (revisionCount - (allRevisions.length + 1)); unassignRevision++) {\n                items.push(\n                    <Grid item>\n                        <Grid className={classes.textShape4} />\n                        {item2}\n                    </Grid>,\n                );\n            }\n            if (revisionCount !== allRevisions.length) {\n                items.push(\n                    <Grid item>\n                        <Grid className={classes.textShape4} />\n                        {item3}\n                    </Grid>,\n                );\n            }\n        }\n\n        if (allRevisions && allRevisions.length === 0) {\n            items.push(\n                <div>\n                    <Grid className={classes.textShape8} />\n                    <Grid item className={clsx(classes.shapeCircleBlack, classes.shapeCircle)} />\n                </div>,\n            );\n            items.push(\n                <Grid item>\n                    <Grid className={classes.textShape4}>\n                        {item4}\n                    </Grid>\n                </Grid>,\n            );\n            for (let revision = 0; revision < (revisionCount - (allRevisions.length + 1)); revision++) {\n                items.push(\n                    <Grid item>\n                        <Grid className={classes.textShape4} />\n                        {item2}\n                    </Grid>,\n                );\n            }\n            items.push(\n                <Grid item>\n                    <Grid className={classes.textShape4} />\n                    {item3}\n                </Grid>,\n            );\n        }\n    }\n\n    /**\n     * Get gateway access URL from vhost\n     * @param vhost VHost object\n     * @param type URL type WS or HTTP\n     * @returns {{secondary: string, primary: string}}\n     */\n    function getGatewayAccessUrl(vhost, type) {\n        const endpoints = { primary: '', secondary: '', combined: '' };\n        if (!vhost) {\n            return endpoints;\n        }\n\n        if (type === 'WS') {\n            endpoints.primary = 'ws://' + vhost.host + ':' + vhost.wsPort;\n            endpoints.secondary = 'wss://' + vhost.host + ':' + vhost.wssPort;\n            endpoints.combined = endpoints.secondary + ' ' + endpoints.primary;\n            return endpoints;\n        }\n\n        const httpContext = vhost.httpContext ? '/' + vhost.httpContext.replace(/^\\//g, '') : '';\n        endpoints.primary = 'http://' + vhost.host\n            + (vhost.httpPort === 80 ? '' : ':' + vhost.httpPort) + httpContext;\n        endpoints.secondary = 'https://' + vhost.host\n            + (vhost.httpsPort === 443 ? '' : ':' + vhost.httpsPort) + httpContext;\n        endpoints.combined = endpoints.secondary + ' ' + endpoints.primary;\n        return endpoints;\n    }\n\n    /**\n     * Get helper text for selected vhost.\n     * @param {*} env   Environment\n     * @param {*} selectionList Selected vhosts\n     * @param {*} shorten  Shorten the text\n     * @param {*} maxTextLen Maximum text length\n     * @returns {string} Helper text\n     */\n    function getVhostHelperText(env, selectionList, shorten, maxTextLen) {\n        const selected = selectionList && selectionList.find((v) => v.env === env);\n        if (selected) {\n            const vhost = internalGateways.find((e) => e.name === env).vhosts.find(\n                (v) => v.host === selected.vhost,\n            );\n\n            const maxtLen = maxTextLen || 30;\n            if (api.isGraphql() && !shorten) {\n                const gatewayHttpUrl = getGatewayAccessUrl(vhost, 'HTTP');\n                const gatewayWsUrl = getGatewayAccessUrl(vhost, 'WS');\n                return gatewayHttpUrl.combined + ' ' + gatewayWsUrl.combined;\n            }\n            const gatewayUrls = getGatewayAccessUrl(vhost, api.isWebSocket() ? 'WS' : 'HTTP');\n            if (shorten) {\n                const helperText = getGatewayAccessUrl(vhost, api.isWebSocket() ? 'WS' : 'HTTP').secondary;\n                return helperText.length > maxtLen ? helperText.substring(0, maxtLen) + '...' : helperText;\n            }\n            return gatewayUrls.combined;\n        }\n        return '';\n    }\n\n    if (isLoading || selectedVhosts === null) {\n        return <Progress per={80} message='Loading app settings ...' />;\n    }\n    // allEnvDeployments represents all deployments of the API with mapping\n    // environment -> {revision deployed to env, vhost deployed to env with revision}\n    const allEnvDeployments = Utils.getAllEnvironmentDeployments(settings.environment, allEnvRevision);\n\n    return (\n        <>\n            {api.advertiseInfo && api.advertiseInfo.advertised && (\n                <MuiAlert severity='info' className={classes.infoAlert}>\n                    <Typography variant='body' align='left'>\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.advertise.only.warning'\n                            defaultMessage={'This API is marked as a third party API. The requests are not proxied'\n                            + ' through the gateway. Hence, deployments are not required.'}\n                        />\n                    </Typography>\n                </MuiAlert>\n            )}\n            {allRevisions && allRevisions.length === 0 && (\n                <DeploymentOnbording\n                    classes={classes}\n                    getVhostHelperText={getVhostHelperText}\n                    createDeployRevision={createDeployRevision}\n                    description\n                    setDescription={setDescription}\n                    gatewayVendor={api.gatewayVendor}\n                    advertiseInfo={api.advertiseInfo}\n                />\n            )}\n            {allRevisions && allRevisions.length !== 0 && (\n                <Grid md={12}>\n                    <Typography id='itest-api-details-deployments-head' variant='h5' gutterBottom>\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.deployments.heading'\n                            defaultMessage='Deployments'\n                        />\n                    </Typography>\n                    <Typography variant='caption'>\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.deployments.sub.heading'\n                            defaultMessage='Create revisions and deploy in Gateway Environments'\n                        />\n                    </Typography>\n                </Grid>\n            )}\n            {!api.isRevision && allRevisions && allRevisions.length !== 0\n            && (\n                <Grid container>\n                    <Button\n                        onClick={toggleDeployRevisionPopup}\n                        disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)\n                                    || (api.advertiseInfo && api.advertiseInfo.advertised) || isDeployButtonDisabled}\n                        variant='contained'\n                        color='primary'\n                        size='large'\n                        className={classes.deployNewRevButtonStyle}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.deploy.new.revision'\n                            defaultMessage='Deploy New Revision'\n                        />\n                    </Button>\n                </Grid>\n            )}\n            <Grid container>\n                <Dialog\n                    open={openDeployPopup}\n                    onClose={handleCloseDeployPopup}\n                    aria-labelledby='form-dialog-title'\n                    classes={{ paper: classes.dialogPaper }}\n                >\n                    <DialogTitle id='form-dialog-title' variant='h2'>\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.deploy.new.revision.heading'\n                            defaultMessage='Deploy New Revision'\n                        />\n                    </DialogTitle>\n                    <DialogContent className={classes.dialogContent}>\n                        { allRevisions && allRevisions.length === revisionCount && (\n                            <Typography variant='body' align='left' className={classes.warningText}>\n                                <FormattedMessage\n                                    id='Apis.Details.Environments.Environments.select.rev.warning'\n                                    defaultMessage={'Please delete a revision as '\n                                    + 'the number of revisions have reached a maximum of {count}'}\n                                    values={{ count: revisionCount }}\n                                />\n                            </Typography>\n                        )}\n                        { allRevisions && allRevisions.length === revisionCount && (\n                            <Box mb={3}>\n                                <TextField\n                                    fullWidth\n                                    id='revision-to-delete-selector'\n                                    required\n                                    select\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.select.rev.delete'\n                                            defaultMessage='Revision to delete'\n                                        />\n                                    )}\n                                    SelectProps={{\n                                        MenuProps: {\n                                            anchorOrigin: {\n                                                vertical: 'bottom',\n                                                horizontal: 'left',\n                                            },\n                                            getContentAnchorEl: null,\n                                        },\n                                    }}\n                                    name='extraRevisionToDelete'\n                                    onChange={handleDeleteSelect}\n                                    helperText={allRevisions && allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).length === 0\n                                        ? (\n                                            <FormattedMessage\n                                                id='Apis.Details.Environments.Environments.select.rev.helper1'\n                                                defaultMessage={'Please undeploy and delete a revision as '\n                                                + 'the number of revisions have reached a maximum of {count}'}\n                                                values={{ count: revisionCount }}\n                                            />\n                                        ) : (\n                                            <FormattedMessage\n                                                id='Apis.Details.Environments.Environments.select.rev.helper'\n                                                defaultMessage={'Please select a revision to delete as '\n                                                + 'the number of revisions have reached a maximum of {count}'}\n                                                values={{ count: revisionCount }}\n                                            />\n                                        )}\n                                    margin='normal'\n                                    variant='outlined'\n                                    disabled={api.isRevision || allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).length === 0}\n                                >\n                                    {allRevisions && allRevisions.length !== 0 && allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).map(\n                                        (revision) => (\n                                            <MenuItem value={revision.id} name={revision.displayName}>\n                                                {revision.displayName}\n                                            </MenuItem>\n                                        ),\n                                    )}\n                                </TextField>\n                            </Box>\n                        )}\n                        <Box mb={3}>\n                            <TextField\n                                autoFocus\n                                name='description'\n                                margin='dense'\n                                variant='outlined'\n                                label='Description'\n                                inputProps={{ maxLength: maxCommentLength }}\n                                helperText={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.description.deploy'\n                                        defaultMessage='Brief description of the new revision'\n                                    />\n                                )}\n                                fullWidth\n                                multiline\n                                rows={3}\n                                rowsMax={4}\n                                defaultValue={description}\n                                onBlur={handleChange}\n                            />\n                            <Typography className={classes.textCount} align='right'>\n                                {currentLength + '/' + maxCommentLength}\n                            </Typography>\n                        </Box>\n                        {api.gatewayVendor === 'wso2' && (\n                            <Box mt={2}>\n                                <Typography variant='h6' align='left' className={classes.sectionTitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.api.gateways.heading'\n                                        defaultMessage='API Gateways'\n                                    />\n                                </Typography>\n                                <Grid\n                                    container\n                                    spacing={3}\n                                >\n                                    {internalGateways && internalGateways.map((row) => (\n                                        <Grid item xs={4}>\n                                            <Card\n                                                className={clsx(SelectedEnvironment\n                                                && SelectedEnvironment.includes(row.name)\n                                                    ? (classes.changeCard)\n                                                    : (classes.noChangeCard), classes.cardHeight)}\n                                                variant='outlined'\n                                            >\n                                                <Box height='100%'>\n                                                    <CardHeader\n                                                        action={(\n                                                            <Checkbox\n                                                                id={row.name.split(' ').join('')}\n                                                                value={row.name}\n                                                                checked={SelectedEnvironment.includes(row.name)}\n                                                                onChange={handleChange}\n                                                                color='primary'\n                                                                icon={<RadioButtonUncheckedIcon />}\n                                                                checkedIcon={<CheckCircleIcon color='primary' />}\n                                                                inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                                            />\n                                                        )}\n                                                        title={(\n                                                            <Typography variant='subtitle2'>\n                                                                {row.displayName}\n                                                            </Typography>\n                                                        )}\n                                                        subheader={(\n                                                            <Typography\n                                                                variant='body2'\n                                                                color='textSecondary'\n                                                                gutterBottom\n                                                            >\n                                                                {row.type}\n                                                            </Typography>\n                                                        )}\n                                                    />\n                                                    <CardContent className={classes.cardContentHeight}>\n                                                        <Grid\n                                                            container\n                                                            direction='column'\n                                                            spacing={2}\n                                                        >\n                                                            <Grid item xs={12}>\n                                                                <Tooltip\n                                                                    title={(\n                                                                        <>\n                                                                            <Typography color='inherit'>\n                                                                                {getVhostHelperText(row.name,\n                                                                                    selectedVhostDeploy)}\n                                                                            </Typography>\n                                                                        </>\n                                                                    )}\n                                                                    placement='bottom'\n                                                                >\n                                                                    <TextField\n                                                                        id='vhost-selector'\n                                                                        select\n                                                                        label={(\n                                                                            <FormattedMessage\n                                                                                id='Apis.Details.\n                                                                                Environments.deploy.vhost'\n                                                                                defaultMessage='VHost'\n                                                                            />\n                                                                        )}\n                                                                        SelectProps={{\n                                                                            MenuProps: {\n                                                                                anchorOrigin: {\n                                                                                    vertical: 'bottom',\n                                                                                    horizontal: 'left',\n                                                                                },\n                                                                                getContentAnchorEl: null,\n                                                                            },\n                                                                        }}\n                                                                        name={row.name}\n                                                                        value={selectedVhostDeploy.find(\n                                                                            (v) => v.env === row.name,\n                                                                        ).vhost}\n                                                                        onChange={handleVhostDeploySelect}\n                                                                        margin='dense'\n                                                                        variant='outlined'\n                                                                        fullWidth\n                                                                        helperText={getVhostHelperText(row.name,\n                                                                            selectedVhostDeploy, true)}\n                                                                    >\n                                                                        {row.vhosts.map(\n                                                                            (vhost) => (\n                                                                                <MenuItem value={vhost.host}>\n                                                                                    {vhost.host}\n                                                                                </MenuItem>\n                                                                            ),\n                                                                        )}\n                                                                    </TextField>\n                                                                </Tooltip>\n                                                            </Grid>\n                                                            <Grid item>\n                                                                {allEnvRevision\n                                                                && allEnvRevision.filter(\n                                                                    (o1) => {\n                                                                        if (o1.deploymentInfo.filter(\n                                                                            (o2) => o2.name === row.name,\n                                                                        ).length > 0) {\n                                                                            return o1;\n                                                                        }\n                                                                        return null;\n                                                                    },\n                                                                ).length !== 0 ? (\n                                                                        allEnvRevision && allEnvRevision.filter(\n                                                                            (o1) => {\n                                                                                if (o1.deploymentInfo.filter(\n                                                                                    (o2) => o2.name === row.name,\n                                                                                ).length > 0) {\n                                                                                    return o1;\n                                                                                }\n                                                                                return null;\n                                                                            },\n                                                                        ).map((o3) => (\n                                                                            <div>\n                                                                                <Chip\n                                                                                    label={o3.displayName}\n                                                                                    style={{\n                                                                                        backgroundColor: '#15B8CF',\n                                                                                    }}\n                                                                                />\n                                                                            </div>\n                                                                        ))) : (\n                                                                        // eslint-disable-next-line react/jsx-indent\n                                                                        <div />\n                                                                    )}\n                                                            </Grid>\n                                                            <Grid item />\n                                                        </Grid>\n                                                    </CardContent>\n                                                </Box>\n                                            </Card>\n                                        </Grid>\n                                    ))}\n                                </Grid>\n                            </Box>\n                        )}\n                        {(api.gatewayVendor === 'solace') && (allExternalGateways.length > 0) && (\n                            <Box mt={2}>\n                                <Typography variant='h6' align='left' className={classes.sectionTitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.solace.platform.environments.heading'\n                                        defaultMessage='Solace Platform Environments'\n                                    />\n                                </Typography>\n                                <Grid\n                                    container\n                                    spacing={3}\n                                >\n                                    {externalGateways.map((row) => (\n                                        <Grid item xs={4}>\n                                            <Card\n                                                className={clsx(SelectedEnvironment\n                                                && SelectedEnvironment.includes(row.name)\n                                                    ? (classes.changeCard)\n                                                    : (classes.noChangeCard), classes.cardHeight)}\n                                                variant='outlined'\n                                            >\n                                                <Box height='100%'>\n                                                    <CardHeader\n                                                        title={(\n                                                            <Typography variant='subtitle2'>\n                                                                {row.displayName}\n                                                            </Typography>\n                                                        )}\n                                                        subheader={(\n                                                            <Typography\n                                                                variant='body2'\n                                                                color='textSecondary'\n                                                                gutterBottom\n                                                            >\n                                                                {row.provider}\n                                                            </Typography>\n                                                        )}\n                                                        action={(\n                                                            <Checkbox\n                                                                id={row.name.split(' ').join('')}\n                                                                value={row.name}\n                                                                checked={SelectedEnvironment.includes(row.name)}\n                                                                onChange={handleChange}\n                                                                color='primary'\n                                                                icon={<RadioButtonUncheckedIcon />}\n                                                                checkedIcon={<CheckCircleIcon color='primary' />}\n                                                                inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                                            />\n                                                        )}\n                                                    />\n                                                    <CardContent>\n                                                        <Grid\n                                                            container\n                                                            direction='column'\n                                                            spacing={2}\n                                                        >\n                                                            <Grid item xs={12}>\n                                                                <TextField\n                                                                    id='Api.Details.Third.party.environment.name'\n                                                                    label='Environment'\n                                                                    variant='outlined'\n                                                                    disabled\n                                                                    fullWidth\n                                                                    margin='dense'\n                                                                    value={row.name}\n                                                                />\n                                                                <TextField\n                                                                    id='Api.Details.\n                                                                        Third.party.environment.organization'\n                                                                    label='Organization'\n                                                                    variant='outlined'\n                                                                    disabled\n                                                                    fullWidth\n                                                                    margin='dense'\n                                                                    value={getOrganizationFromAdditionalProperties(\n                                                                        row.additionalProperties,\n                                                                    )}\n                                                                />\n                                                            </Grid>\n                                                        </Grid>\n                                                    </CardContent>\n                                                </Box>\n                                            </Card>\n                                        </Grid>\n                                    ))}\n                                </Grid>\n                            </Box>\n                        )}\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleCloseDeployPopup}>\n                            <FormattedMessage\n                                id='Apis.Details.Environments.Environments.deploy.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                        <Button\n                            type='submit'\n                            variant='contained'\n                            onClick={\n                                () => handleCreateAndDeployRevision(SelectedEnvironment, selectedVhostDeploy)\n                            }\n                            color='primary'\n                            disabled={SelectedEnvironment.length === 0\n                                || (allRevisions && allRevisions.length === revisionCount && !extraRevisionToDelete)\n                                || isRestricted(['apim:api_create', 'apim:api_publish'], api)\n                                || (api.advertiseInfo && api.advertiseInfo.advertised)\n                                || isDeployButtonDisabled}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Environments.Environments.deploy.deploy'\n                                defaultMessage='Deploy'\n                            />\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Grid>\n            {allRevisions && allRevisions.length !== 0 && (\n                <>\n                    <Grid\n                        container\n                        direction='row'\n                        alignItems='flex-start'\n                        spacing={1}\n                    >\n                        <Grid item>\n                            <Typography variant='h6' gutterBottom>\n                                <FormattedMessage\n                                    id='Apis.Details.Environments.Environments.Deployments'\n                                    defaultMessage='Revisions'\n                                />\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <Tooltip\n                                title={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.Create.Revision.Deploy'\n                                        defaultMessage='Create new revision and deploy'\n                                    />\n                                )}\n                                placement='top-end'\n                                aria-label='New Deployment'\n                            >\n                                <IconButton size='small' aria-label='delete'>\n                                    <HelpOutlineIcon fontSize='small' />\n                                </IconButton>\n                            </Tooltip>\n                        </Grid>\n\n                    </Grid>\n                    <Box className={classes.containerOverflow}>\n                        <Grid\n                            xs={12}\n                            className={classes.containerInline}\n                        >\n                            {items}\n                            {confirmDeleteDialog}\n                            {confirmRestoreDialog}\n                        </Grid>\n                    </Box>\n                </>\n            )}\n            <Grid container>\n                <Dialog\n                    open={open}\n                    onClose={handleClose}\n                    aria-labelledby='form-dialog-title'\n                    classes={{ paper: classes.createRevisionDialogStyle }}\n                >\n                    <DialogTitle id='form-dialog-title' variant='h2'>\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.revision.create.heading'\n                            defaultMessage='Create New Revision (From Current API)'\n                        />\n                    </DialogTitle>\n                    <DialogContent className={classes.dialogContent}>\n                        { allRevisions && allRevisions.length === revisionCount && (\n                            <Typography variant='body' align='left' className={classes.warningText}>\n                                <FormattedMessage\n                                    id='Apis.Details.Environments.Environments.select.rev.warning'\n                                    defaultMessage={'Please delete a revision as '\n                                    + 'the number of revisions have reached a maximum of {count}'}\n                                    values={{ count: revisionCount }}\n                                />\n                            </Typography>\n                        )}\n                        { allRevisions && allRevisions.length === revisionCount && (\n                            <Box mb={3}>\n                                <TextField\n                                    fullWidth\n                                    id='revision-to-delete-selector'\n                                    required\n                                    select\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.select.rev.delete'\n                                            defaultMessage='Revision to delete'\n                                        />\n                                    )}\n                                    SelectProps={{\n                                        MenuProps: {\n                                            anchorOrigin: {\n                                                vertical: 'bottom',\n                                                horizontal: 'left',\n                                            },\n                                            getContentAnchorEl: null,\n                                        },\n                                    }}\n                                    name='extraRevisionToDelete'\n                                    onChange={handleDeleteSelect}\n                                    helperText={allRevisions && allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).length === 0\n                                        ? (\n                                            <FormattedMessage\n                                                id='Apis.Details.Environments.Environments.select.rev.helper1'\n                                                defaultMessage={'Please undeploy and delete a revision as '\n                                                + 'the number of revisions have reached a maximum of {count}'}\n                                                values={{ count: revisionCount }}\n                                            />\n                                        ) : (\n                                            <FormattedMessage\n                                                id='Apis.Details.Environments.Environments.select.rev.helper'\n                                                defaultMessage={'Please select a revision to delete as '\n                                                + 'the number of revisions have reached a maximum of {count}'}\n                                                values={{ count: revisionCount }}\n                                            />\n                                        )}\n                                    margin='normal'\n                                    variant='outlined'\n                                    disabled={api.isRevision || allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).length === 0}\n                                >\n                                    {allRevisions && allRevisions.length !== 0 && allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).map(\n                                        (revision) => (\n                                            <MenuItem value={revision.id} name={revision.displayName}>\n                                                {revision.displayName}\n                                            </MenuItem>\n                                        ),\n                                    )}\n                                </TextField>\n                            </Box>\n                        )}\n                        <Box mb={3}>\n                            <TextField\n                                autoFocus\n                                name='description'\n                                margin='dense'\n                                variant='outlined'\n                                label='Description'\n                                inputProps={{ maxLength: maxCommentLength }}\n                                helperText={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.description.create'\n                                        defaultMessage='Brief description of the new revision'\n                                    />\n                                )}\n                                fullWidth\n                                multiline\n                                rows={3}\n                                rowsMax={4}\n                                defaultValue={description}\n                                onBlur={handleChange}\n                            />\n                            <Typography className={classes.textCount} align='right'>\n                                {currentLength + '/' + maxCommentLength}\n                            </Typography>\n                        </Box>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleClose}>\n                            <FormattedMessage\n                                id='Apis.Details.Environments.Environments.create.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                        <Button\n                            onClick={handleClickAddRevision}\n                            type='submit'\n                            variant='contained'\n                            color='primary'\n                            disabled={api.isRevision\n                                || (allRevisions && allRevisions.length === revisionCount && !extraRevisionToDelete)}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Environments.Environments.create.create'\n                                defaultMessage='Create'\n                            />\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Grid>\n            {allRevisions && allRevisions.length !== 0 && api.gatewayVendor === 'wso2' && (\n                <Box mx='auto' mt={5}>\n                    <Typography variant='h6' component='h2' className={classes.sectionTitle}>\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.APIGateways'\n                            defaultMessage='API Gateways'\n                        />\n                    </Typography>\n                    <TableContainer component={Paper}>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align='left'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.api.gateways.name'\n                                            defaultMessage='Name'\n                                        />\n                                    </TableCell>\n                                    <TableCell align='left'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.gateway.accessUrl'\n                                            defaultMessage='Gateway Access URL'\n                                        />\n                                    </TableCell>\n                                    {api && api.isDefaultVersion !== true\n                                        ? (\n                                            <TableCell align='left'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Environments.Environments.gateway\n                                                    .deployed.revision'\n                                                    defaultMessage='Deployed Revision'\n                                                />\n                                            </TableCell>\n                                        )\n                                        : (\n                                            <TableCell align='left'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Environments.Environments.gateway.action'\n                                                    defaultMessage='Action'\n                                                />\n                                            </TableCell>\n                                        )}\n                                    <TableCell align='left'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.visibility.in.devportal'\n                                            defaultMessage='Gateway URL Visibility'\n                                        />\n                                        <Tooltip\n                                            title={(\n                                                <FormattedMessage\n                                                    id='Apis.Details.Environments.Environments.display.devportal'\n                                                    defaultMessage='Display Gateway Access URLs in developer portal.'\n                                                />\n                                            )}\n                                            placement='top-end'\n                                            aria-label='New Deployment'\n                                        >\n                                            <IconButton size='small' aria-label='delete'>\n                                                <HelpOutlineIcon fontSize='small' />\n                                            </IconButton>\n                                        </Tooltip>\n                                    </TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {internalGateways && internalGateways.map((row) => (\n                                    <TableRow key={row.name}>\n                                        <TableCell component='th' scope='row'>\n                                            {row.displayName}\n                                        </TableCell>\n                                        {allEnvDeployments[row.name].revision != null ? (\n                                            <>\n                                                <TableCell align='left'>\n                                                    <div className={classes.primaryEndpoint}>\n                                                        {api.isWebSocket()\n                                                            ? getGatewayAccessUrl(allEnvDeployments[row.name]\n                                                                .vhost, 'WS')\n                                                                .primary : getGatewayAccessUrl(\n                                                                allEnvDeployments[row.name].vhost, 'HTTP',\n                                                            ).primary}\n                                                    </div>\n                                                    <div className={classes.secondaryEndpoint}>\n                                                        {api.isWebSocket()\n                                                            ? getGatewayAccessUrl(allEnvDeployments[row.name]\n                                                                .vhost, 'WS')\n                                                                .secondary : getGatewayAccessUrl(\n                                                                allEnvDeployments[row.name].vhost, 'HTTP',\n                                                            ).secondary}\n                                                    </div>\n                                                    {api.isGraphql()\n                                                    && (\n                                                        <>\n                                                            <div className={classes.primaryEndpoint}>\n                                                                {getGatewayAccessUrl(allEnvDeployments[row.name]\n                                                                    .vhost, 'WS')\n                                                                    .primary}\n                                                            </div>\n                                                            <div className={classes.secondaryEndpoint}>\n                                                                {getGatewayAccessUrl(allEnvDeployments[row.name]\n                                                                    .vhost, 'WS')\n                                                                    .secondary}\n                                                            </div>\n                                                        </>\n\n                                                    )}\n                                                </TableCell>\n                                            </>\n                                        ) : (\n                                            <>\n                                                <TableCell align='left' className={classes.tableCellVhostSelect}>\n                                                    <Tooltip\n                                                        title={(\n                                                            <>\n                                                                <Typography color='inherit'>\n                                                                    {getVhostHelperText(row.name,\n                                                                        selectedVhosts)}\n                                                                </Typography>\n                                                            </>\n                                                        )}\n                                                        placement='bottom'\n                                                    >\n                                                        <TextField\n                                                            id='vhost-selector'\n                                                            select\n                                                            label={(\n                                                                <FormattedMessage\n                                                                    id='Apis.Details.Environments.Environments\n                                                                    .select.vhost'\n                                                                    defaultMessage='Select Access URL'\n                                                                />\n                                                            )}\n                                                            SelectProps={{\n                                                                MenuProps: {\n                                                                    anchorOrigin: {\n                                                                        vertical: 'bottom',\n                                                                        horizontal: 'left',\n                                                                    },\n                                                                    getContentAnchorEl: null,\n                                                                },\n                                                            }}\n                                                            name={row.name}\n                                                            value={selectedVhosts.find((v) => v.env === row.name).vhost}\n                                                            onChange={handleVhostSelect}\n                                                            margin='dense'\n                                                            variant='outlined'\n                                                            className={classes.vhostSelect}\n                                                            fullWidth\n                                                            disabled={api.isRevision\n                                                            || !allRevisions || allRevisions.length === 0}\n                                                            helperText={getVhostHelperText(row.name, selectedVhosts,\n                                                                true, 100)}\n                                                        >\n                                                            {row.vhosts.map(\n                                                                (vhost) => (\n                                                                    <MenuItem value={vhost.host}>\n                                                                        {vhost.host}\n                                                                    </MenuItem>\n                                                                ),\n                                                            )}\n                                                        </TextField>\n                                                    </Tooltip>\n                                                </TableCell>\n                                            </>\n                                        )}\n                                        <TableCell align='left' style={{ width: '300px' }}>\n                                            {allEnvDeployments[row.name].revision != null\n                                                ? (\n                                                    <div>\n                                                        <Chip\n                                                            label={allEnvDeployments[row.name].revision.displayName}\n                                                            style={{ backgroundColor: '#15B8CF' }}\n                                                        />\n                                                        <Button\n                                                            className={classes.button1}\n                                                            variant='outlined'\n                                                            disabled={api.isRevision\n                                                                || isRestricted(['apim:api_create',\n                                                                    'apim:api_publish'], api)}\n                                                            onClick={() => undeployRevision(\n                                                                allEnvDeployments[row.name].revision.id, row.name,\n                                                            )}\n                                                            size='small'\n                                                            id='undeploy-btn'\n                                                        >\n                                                            <FormattedMessage\n                                                                id='Apis.Details.Environments.Environments.undeploy.btn'\n                                                                defaultMessage='Undeploy'\n                                                            />\n                                                        </Button>\n                                                    </div>\n                                                ) : (\n                                                    <div>\n                                                        <TextField\n                                                            id='revision-selector'\n                                                            select\n                                                            label={(\n                                                                <FormattedMessage\n                                                                    id='Apis.Details.Environments.Environments\n                                                                    .select.table'\n                                                                    defaultMessage='Select Revision'\n                                                                />\n                                                            )}\n                                                            SelectProps={{\n                                                                MenuProps: {\n                                                                    anchorOrigin: {\n                                                                        vertical: 'bottom',\n                                                                        horizontal: 'left',\n                                                                    },\n                                                                    getContentAnchorEl: null,\n                                                                },\n                                                            }}\n                                                            name={row.name}\n                                                            onChange={handleSelect}\n                                                            margin='dense'\n                                                            variant='outlined'\n                                                            style={{ width: '50%' }}\n                                                            disabled={api.isRevision\n                                                                || !allRevisions || allRevisions.length === 0}\n                                                        >\n                                                            {allRevisions && allRevisions.length !== 0\n                                                            && allRevisions.map(\n                                                                (number) => (\n                                                                    <MenuItem value={number.id}>\n                                                                        {number.displayName}\n                                                                    </MenuItem>\n                                                                ),\n                                                            )}\n                                                        </TextField>\n                                                        <Button\n                                                            className={classes.button2}\n                                                            disabled={api.isRevision || !selectedRevision.some(\n                                                                (r) => r.env === row.name && r.revision,\n                                                            ) || !selectedVhosts.some(\n                                                                (v) => v.env === row.name && v.vhost,\n                                                            ) || (api.advertiseInfo && api.advertiseInfo.advertised)\n                                                            || isDeployButtonDisabled}\n                                                            variant='outlined'\n                                                            onClick={() => deployRevision(selectedRevision.find(\n                                                                (r) => r.env === row.name,\n                                                            ).revision, row.name, selectedVhosts.find(\n                                                                (v) => v.env === row.name,\n                                                            ).vhost, selectedRevision.find(\n                                                                (r) => r.env === row.name,\n                                                            ).displayOnDevPortal)}\n                                                        >\n                                                            <FormattedMessage\n                                                                id='Apis.Details.Environments.Environments.\n                                                                deploy.button'\n                                                                defaultMessage='Deploy'\n                                                            />\n                                                        </Button>\n                                                    </div>\n                                                )}\n                                        </TableCell>\n                                        <TableCell align='left'>\n                                            <DisplayDevportal\n                                                name={row.name}\n                                                api={api}\n                                                EnvDeployments={allEnvDeployments[row.name]}\n                                            />\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Box>\n            )}\n            {allRevisions && allRevisions.length !== 0 && (api.gatewayVendor === 'solace')\n            && (allExternalGateways.length > 0) && (\n                <Box mx='auto' mt={5}>\n                    <Typography variant='h6' className={classes.sectionTitle}>\n                        <FormattedMessage\n                            id='Apis.Details.Solace.Platform.Environments'\n                            defaultMessage='Solace Platform Environments'\n                        />\n                    </Typography>\n                    <TableContainer component={Paper}>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align='left'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Third.Party.Brokers.broker.displayName'\n                                            defaultMessage='Name'\n                                        />\n                                    </TableCell>\n                                    {externalEnvEndpoints && (\n                                        <TableCell align='left'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Third.Party.Brokers.broker.endpoints'\n                                                defaultMessage='Access Endpoints'\n                                            />\n                                        </TableCell>\n                                    )}\n                                    <TableCell align='left'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Third.Party.Brokers.broker.environment'\n                                            defaultMessage='Environment'\n                                        />\n                                    </TableCell>\n                                    <TableCell align='left'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Third.Party.Brokers.broker.type'\n                                            defaultMessage='Organization'\n                                        />\n                                    </TableCell>\n                                    <TableCell align='left'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Third.Party.Brokers.broker.name'\n                                            defaultMessage='Provider'\n                                        />\n                                    </TableCell>\n                                    {api && api.isDefaultVersion !== true\n                                        ? (\n                                            <TableCell align='left'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Environments.\n                                                        Environments.gateway.deployed.revision'\n                                                    defaultMessage='Deployed Revision'\n                                                />\n                                            </TableCell>\n                                        )\n                                        : (\n                                            <TableCell align='left'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Environments.Environments.gateway.action'\n                                                    defaultMessage='Action'\n                                                />\n                                            </TableCell>\n                                        )}\n                                    <TableCell align='left'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.display.in.devportal'\n                                            defaultMessage='Display in Developer Portal'\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {externalGateways.map((row) => (\n                                    <TableRow key={row.name}>\n                                        <TableCell component='th' scope='row'>\n                                            {row.displayName}\n                                        </TableCell>\n                                        {externalEnvEndpoints && (\n                                            <TableCell align='left'>\n                                                {externalEnvEndpoints[row.name] &&\n                                                    externalEnvEndpoints[row.name].map((e) => {\n                                                        return (\n                                                            <Grid container spacing={2}>\n                                                                <Grid item>\n                                                                    <Chip\n                                                                        label={upperCaseString(e.protocol)}\n                                                                        size='small'\n                                                                        color='primary'\n                                                                        variant='outlined'\n                                                                    />\n                                                                </Grid>\n                                                                <Grid\n                                                                    item\n                                                                    style={{\n                                                                        display: 'flex',\n                                                                        alignItems: 'center',\n                                                                        justifyContent: 'center',\n                                                                    }}\n                                                                >\n                                                                    {e.uri}\n                                                                </Grid>\n                                                            </Grid>\n                                                        );\n                                                    })\n                                                }\n                                            </TableCell>\n                                        )}\n                                        <TableCell align='left'>\n                                            {row.name}\n                                        </TableCell>\n                                        <TableCell align='left'>\n                                            {getOrganizationFromAdditionalProperties(row.additionalProperties)}\n                                        </TableCell>\n                                        <TableCell align='left'>\n                                            {row.provider}\n                                        </TableCell>\n                                        <TableCell align='left' style={{ width: '300px' }}>\n                                            {allExternalGatewaysMap[row.name].revision != null\n                                                ? (\n                                                    <div>\n                                                        <Chip\n                                                            label={allExternalGatewaysMap[row.name]\n                                                                .revision.displayName}\n                                                            style={{ backgroundColor: '#15B8CF' }}\n                                                        />\n                                                        <Button\n                                                            className={classes.button1}\n                                                            variant='outlined'\n                                                            disabled={api.isRevision}\n                                                            onClick={() => undeployRevision(\n                                                                allExternalGatewaysMap[row.name]\n                                                                    .revision.id, row.name,\n                                                            )}\n                                                            size='small'\n                                                        >\n                                                            <FormattedMessage\n                                                                id='Apis.Details.Environments.Environments.undeploy.btn'\n                                                                defaultMessage='Undeploy'\n                                                            />\n                                                        </Button>\n                                                    </div>\n                                                ) : (\n                                                    <div>\n                                                        <TextField\n                                                            id='revision-selector'\n                                                            select\n                                                            label={(\n                                                                <FormattedMessage\n                                                                    id='Apis.Details.Environments.\n                                                                            Environments.select.table'\n                                                                    defaultMessage='Select Revision'\n                                                                />\n                                                            )}\n                                                            SelectProps={{\n                                                                MenuProps: {\n                                                                    anchorOrigin: {\n                                                                        vertical: 'bottom',\n                                                                        horizontal: 'left',\n                                                                    },\n                                                                    getContentAnchorEl: null,\n                                                                },\n                                                            }}\n                                                            name={row.name}\n                                                            onChange={handleSelectForBrokers}\n                                                            margin='dense'\n                                                            variant='outlined'\n                                                            style={{ width: '50%' }}\n                                                            disabled={api.isRevision\n                                                            || !allRevisions || allRevisions.length === 0}\n                                                        >\n                                                            {allRevisions && allRevisions.length !== 0\n                                                            && allRevisions.map(\n                                                                (number) => (\n                                                                    <MenuItem value={number.id}>\n                                                                        {number.displayName}\n                                                                    </MenuItem>\n                                                                ),\n                                                            )}\n                                                        </TextField>\n                                                        <Button\n                                                            className={classes.button2}\n                                                            disabled={api.isRevision || !selectedRevision.some(\n                                                                (r) => r.env === row.name && r.revision,\n                                                            ) || (api.advertiseInfo && api.advertiseInfo.advertised)\n                                                            || isDeployButtonDisabled}\n                                                            variant='outlined'\n                                                            onClick={() => deployRevision(selectedRevision.find(\n                                                                (r) => r.env === row.name,\n                                                            ).revision, row.name,\n                                                            ' ', selectedRevision.find(\n                                                                (r) => r.env === row.name,\n                                                            ).displayOnDevPortal)}\n\n                                                        >\n                                                            <FormattedMessage\n                                                                id='Apis.Details.Environments.Environments\n                                                                .deploy.button'\n                                                                defaultMessage='Deploy'\n                                                            />\n                                                        </Button>\n                                                    </div>\n                                                )}\n                                        </TableCell>\n                                        <TableCell align='left'>\n                                            <DisplayDevportal\n                                                name={row.name}\n                                                api={api}\n                                                EnvDeployments={allExternalGatewaysMap[row.name]}\n                                            />\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Box>\n            )}\n        </>\n    );\n}\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Switch from '@material-ui/core/Switch';\nimport React, { useState, useEffect } from 'react';\nimport API from 'AppData/api';\nimport base64url from 'base64url';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIProduct from 'AppData/APIProduct';\n\n/**\n * Renders an Deployrevision list\n * @class Environments\n * @extends {React.Component}\n */\nexport default function DisplayDevportal(props) {\n    const {\n        api,\n        name,\n        EnvDeployments,\n    } = props;\n    const restApi = new API();\n    const restAPIProduct = new APIProduct();\n    const [check, setCheck] = useState(EnvDeployments.disPlayDevportal);\n\n    useEffect(() => {\n        setCheck(typeof EnvDeployments.disPlayDevportal === 'undefined' ? false : EnvDeployments.disPlayDevportal);\n    },\n    [EnvDeployments.disPlayDevportal]);\n\n    const handleDisplayOnDevPortal = (event) => {\n        if (typeof EnvDeployments.revision === 'undefined') {\n            setCheck(event.target.checked);\n        } else {\n            const body = {\n                revisionUuid: EnvDeployments.revision.id,\n                displayOnDevportal: event.target.checked,\n            };\n            setCheck(event.target.checked);\n            if (api.apiType === API.CONSTS.APIProduct) {\n                restAPIProduct.displayInDevportalProduct(api.id, base64url.encode(event.target.name), body);\n            } else {\n                restApi.displayInDevportalAPI(api.id, base64url.encode(event.target.name), body);\n            }\n        }\n    };\n\n    return (\n        <Switch\n            checked={check}\n            onChange={handleDisplayOnDevPortal}\n            disabled={api.isRevision || isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n            name={name}\n        />\n    );\n}\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport clsx from 'clsx';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport AddIcon from '@material-ui/icons/Add';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport PropTypes from 'prop-types';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport { useTheme } from '@material-ui/core';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        minHeight: '480px',\n    },\n    textOptional: {\n        fontSize: 'small',\n        color: '#707070',\n        fontWeight: '100',\n    },\n    textRevision: {\n        fontSize: '16px',\n        color: '#707070',\n    },\n    textDeploy: {\n        fontSize: '26px',\n        color: '#1B3A57',\n    },\n    textDescription: {\n        fontSize: '16px',\n        color: '#707070',\n        fontWeight: '400',\n    },\n    descriptionWidth: {\n        minWidth: '550px',\n    },\n    textAlign: {\n        textAlign: 'center',\n    },\n}));\n/**\n * Renders an Deployment Onboarding\n * @class Environments\n * @extends {React.Component}\n */\nexport default function DeploymentOnboarding(props) {\n    const {\n        classes,\n        getVhostHelperText,\n        createDeployRevision,\n        description,\n        setDescription,\n        gatewayVendor,\n        advertiseInfo,\n    } = props;\n    const classes1 = useStyles();\n    const [api] = useAPI();\n    const theme = useTheme();\n    const { maxCommentLength } = theme.custom;\n    const { settings: { environment: environments } } = useAppContext();\n    const internalGateways = environments.filter((p) => !p.provider.toLowerCase().includes('solace'));\n    const externalGateways = environments.filter((p) => p.provider.toLowerCase().includes('solace'));\n    const hasOnlyOneEnvironment = internalGateways.length === 1;\n    const securityScheme = [...api.securityScheme];\n    const isMutualSslOnly = securityScheme.length === 2 && securityScheme.includes('mutualssl')\n    && securityScheme.includes('mutualssl_mandatory');\n    const isEndpointAvailable = api.endpointConfig !== null;\n    const isTierAvailable = api.policies.length !== 0;\n\n    const isDeployButtonDisabled = (((api.type !== 'WEBSUB' && !isEndpointAvailable))\n    || (!isMutualSslOnly && !isTierAvailable)\n    || api.workflowStatus === 'CREATED');\n\n    const defaultVhosts = internalGateways.map(\n        (e) => (e.vhosts && e.vhosts.length > 0 ? { env: e.name, vhost: e.vhosts[0].host } : undefined),\n    );\n\n    const [descriptionOpen, setDescriptionOpen] = useState(false);\n    const [selectedEnvironment, setSelectedEnvironment] = useState(hasOnlyOneEnvironment\n        ? [internalGateways[0].name] : []);\n\n    /**\n     * Get Solace environments from the environments list\n     * @return String Solace gateway environment name\n     */\n    function getSolaceEnvironment(envs) {\n        const solaceEnv= []\n        envs.forEach((env) => {\n            if (env.provider === 'solace') {\n                solaceEnv.push(env.name);\n            }\n        });\n        return solaceEnv;\n    }\n\n    /**\n     * Get Organization value of external gateways\n     * @param {Object} additionalProperties the additionalProperties list\n     * @return String organization name\n     */\n    function getOrganizationFromAdditionalProperties(additionalProperties) {\n        let organization;\n        additionalProperties.forEach((property) => {\n            if (property.key === 'Organization') {\n                organization = property.value;\n            }\n        });\n        return organization;\n    }\n\n    const [selectedSolaceEnvironment, setSelectedSolaceEnvironment] = useState(\n        getSolaceEnvironment(externalGateways),\n    );\n    const [selectedVhostDeploy, setVhostsDeploy] = useState(defaultVhosts);\n\n    /**\n     * Handle Description\n     */\n    function handleDescriptionOpen() {\n        setDescriptionOpen(!descriptionOpen);\n    }\n\n    const handleVhostDeploySelect = (event) => {\n        const vhosts = selectedVhostDeploy.filter((v) => v.env !== event.target.name);\n        vhosts.push({ env: event.target.name, vhost: event.target.value });\n        setVhostsDeploy(vhosts);\n    };\n\n    const handleChange = (event) => {\n        if (gatewayVendor === 'solace') {\n            if (event.target.checked) {\n                setSelectedSolaceEnvironment([...selectedSolaceEnvironment, event.target.value]);\n            } else {\n                setSelectedSolaceEnvironment(\n                    selectedSolaceEnvironment.filter((env) => env !== event.target.value),\n                );\n            }\n        } else {\n            // eslint-disable-next-line no-lonely-if\n            if (event.target.checked) {\n                setSelectedEnvironment([...selectedEnvironment, event.target.value]);\n            } else {\n                setSelectedEnvironment(\n                    selectedEnvironment.filter((env) => env !== event.target.value),\n                );\n            }\n        }\n        if (event.target.name === 'description') {\n            setDescription(event.target.value);\n        }\n    };\n\n    return (\n        <>\n            <Grid container spacing={2}>\n                <Grid item xs={2} />\n                <Grid item xs={8}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={2} />\n                        <Grid item xs={8} className={classes1.textAlign}>\n                            <Typography variant='h6' className={classes1.textDeploy}>\n                                Deploy the API\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={2} />\n                    </Grid>\n                    <Box pb={2}>\n                        <Grid container>\n                            <Grid item xs={2} />\n                            <Grid item xs={8} className={classes1.textAlign}>\n                                <Typography variant='h6' className={classes1.textDescription}>\n                                    Deploy API to the Gateway Environment\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={2} />\n                        </Grid>\n                    </Box>\n                    {(gatewayVendor === 'wso2') ? (\n                        <Paper fullWidth className={classes1.root}>\n                            <Box p={5}>\n                                <Typography className={classes1.textRevision}>\n                                    API Gateways\n                                </Typography>\n                                <Box mt={4}>\n                                    <Grid\n                                        container\n                                        spacing={3}\n                                    >\n                                        {internalGateways.map((row) => (\n                                            <Grid item xs={3}>\n                                                <Card\n                                                    className={clsx(selectedEnvironment\n                                                    && selectedEnvironment.includes(row.name)\n                                                        ? (classes.changeCard) : (classes.noChangeCard),\n                                                    classes.cardHeight)}\n                                                    variant='outlined'\n                                                >\n                                                    <Box height='100%'>\n                                                        <CardHeader\n                                                            action={(\n                                                                <Checkbox\n                                                                    id={row.name.split(' ').join('')}\n                                                                    value={row.name}\n                                                                    checked={selectedEnvironment.includes(row.name)}\n                                                                    onChange={handleChange}\n                                                                    color='primary'\n                                                                    icon={<RadioButtonUncheckedIcon />}\n                                                                    checkedIcon={<CheckCircleIcon color='primary' />}\n                                                                    inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                                                />\n                                                            )}\n                                                            title={(\n                                                                <Typography variant='subtitle2'>\n                                                                    {row.displayName}\n                                                                </Typography>\n                                                            )}\n                                                            subheader={(\n                                                                <Typography\n                                                                    variant='body2'\n                                                                    color='textSecondary'\n                                                                    gutterBottom\n                                                                >\n                                                                    {row.type}\n                                                                </Typography>\n                                                            )}\n                                                        />\n                                                        <CardContent className={classes.cardContentHeight}>\n                                                            <Grid\n                                                                container\n                                                                direction='column'\n                                                                spacing={2}\n                                                            >\n                                                                <Grid item xs={12}>\n                                                                    <Tooltip\n                                                                        title={(\n                                                                            <>\n                                                                                <Typography color='inherit'>\n                                                                                    {getVhostHelperText(row.name,\n                                                                                        selectedVhostDeploy)}\n                                                                                </Typography>\n                                                                            </>\n                                                                        )}\n                                                                        placement='bottom'\n                                                                    >\n                                                                        <TextField\n                                                                            id='vhost-selector'\n                                                                            select={row.vhosts.length > 1}\n                                                                            disabled={row.vhosts.length === 1}\n                                                                            label={(\n                                                                                <FormattedMessage\n                                                                                    id='Apis.Details.Environments\n                                                                                    .deploy.vhost'\n                                                                                    defaultMessage='VHost'\n                                                                                />\n                                                                            )}\n                                                                            SelectProps={{\n                                                                                MenuProps: {\n                                                                                    anchorOrigin: {\n                                                                                        vertical: 'bottom',\n                                                                                        horizontal: 'left',\n                                                                                    },\n                                                                                    getContentAnchorEl: null,\n                                                                                },\n                                                                            }}\n                                                                            name={row.name}\n                                                                            value={selectedVhostDeploy.find(\n                                                                                (v) => v.env === row.name,\n                                                                            ).vhost}\n                                                                            onChange={handleVhostDeploySelect}\n                                                                            margin='dense'\n                                                                            variant='outlined'\n                                                                            fullWidth\n                                                                            helperText={getVhostHelperText(row.name,\n                                                                                selectedVhostDeploy, true)}\n                                                                        >\n                                                                            {row.vhosts.map(\n                                                                                (vhost) => (\n                                                                                    <MenuItem value={vhost.host}>\n                                                                                        {vhost.host}\n                                                                                    </MenuItem>\n                                                                                ),\n                                                                            )}\n                                                                        </TextField>\n                                                                    </Tooltip>\n                                                                </Grid>\n                                                            </Grid>\n                                                        </CardContent>\n                                                    </Box>\n                                                </Card>\n                                            </Grid>\n                                        ))}\n                                    </Grid>\n                                </Box>\n                                <Box mt={2}>\n                                    <Button\n                                        color='primary'\n                                        className={classes.button}\n                                        display='inline'\n                                        startIcon={<AddIcon />}\n                                        onClick={handleDescriptionOpen}\n                                        id='add-description-btn'\n                                    >\n                                        Add a description\n                                    </Button>\n                                    <Typography display='inline' className={classes1.textOptional}>\n                                        (optional)\n                                    </Typography>\n                                    <br />\n                                    {descriptionOpen && (\n                                        <>\n                                            <TextField\n                                                className={classes1.descriptionWidth}\n                                                name='description'\n                                                margin='dense'\n                                                variant='outlined'\n                                                label='Description'\n                                                inputProps={{ maxLength: maxCommentLength }}\n                                                helperText={(\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Environments.Environments.revision\n                                                        .description.deploy'\n                                                        defaultMessage='Add a description to the revision'\n                                                    />\n                                                )}\n                                                multiline\n                                                rows={3}\n                                                defaultValue={description === true ? '' : description}\n                                                onBlur={handleChange}\n                                                id='add-description'\n                                            />\n                                        </>\n                                    )}\n                                </Box>\n                                <Box mt={3}>\n                                    <Button\n                                        id='deploy-btn'\n                                        type='submit'\n                                        variant='contained'\n                                        onClick={\n                                            () => createDeployRevision(selectedEnvironment, selectedVhostDeploy)\n                                        }\n                                        color='primary'\n                                        disabled={selectedEnvironment.length === 0\n                                            || (advertiseInfo && advertiseInfo.advertised)\n                                            || isDeployButtonDisabled}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.deploy.deploy'\n                                            defaultMessage='Deploy'\n                                        />\n                                    </Button>\n                                </Box>\n                            </Box>\n                        </Paper>\n                    ) : (\n                        <Paper fullWidth className={classes1.root}>\n                            <Box p={5}>\n                                <Typography className={classes1.textRevision}>\n                                    Solace Environments\n                                </Typography>\n                                <Box mt={4}>\n                                    <Grid\n                                        container\n                                        spacing={3}\n                                    >\n                                        { externalGateways.map((row) => (\n                                            <Grid item xs={3}>\n                                                <Card\n                                                    className={clsx(selectedSolaceEnvironment\n                                                    && selectedSolaceEnvironment.includes(row.name)\n                                                        ? (classes.changeCard) : (classes.noChangeCard),\n                                                    classes.cardHeight)}\n                                                    variant='outlined'\n                                                >\n                                                    <CardHeader\n                                                        action={(\n                                                            <Checkbox\n                                                                id={row.name.split(' ').join('')}\n                                                                value={row.name}\n                                                                checked={selectedSolaceEnvironment.includes(row.name)}\n                                                                disabled={isRestricted(['apim:api_publish',\n                                                                    'apim:api_create'])}\n                                                                onChange={handleChange}\n                                                                color='primary'\n                                                                icon={<RadioButtonUncheckedIcon />}\n                                                                checkedIcon={<CheckCircleIcon color='primary' />}\n                                                                inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                                            />\n                                                        )}\n                                                        title={(\n                                                            <Typography variant='subtitle2'>\n                                                                {row.displayName}\n                                                            </Typography>\n                                                        )}\n                                                        subheader={(\n                                                            <Typography\n                                                                variant='body2'\n                                                                color='textSecondary'\n                                                                gutterBottom\n                                                            >\n                                                                {row.provider.toString().toUpperCase()}\n                                                            </Typography>\n                                                        )}\n                                                    />\n                                                    <CardContent className={classes.cardContentHeight}>\n                                                        <Grid\n                                                            container\n                                                            direction='column'\n                                                            spacing={2}\n                                                        >\n                                                            <Grid item xs={12}>\n                                                                <TextField\n                                                                    id='Api.Details.Third.party.environment.name'\n                                                                    label='Environment'\n                                                                    variant='outlined'\n                                                                    disabled\n                                                                    fullWidth\n                                                                    margin='dense'\n                                                                    value={row.name}\n                                                                />\n                                                                <TextField\n                                                                    id='Api.Details.\n                                                                        Third.party.environment.organization'\n                                                                    label='Organization'\n                                                                    variant='outlined'\n                                                                    disabled\n                                                                    fullWidth\n                                                                    margin='dense'\n                                                                    value={getOrganizationFromAdditionalProperties(\n                                                                        row.additionalProperties,\n                                                                    )}\n                                                                />\n                                                            </Grid>\n                                                        </Grid>\n                                                    </CardContent>\n                                                </Card>\n                                            </Grid>\n                                        ))}\n                                    </Grid>\n                                </Box>\n                                <Box mt={2}>\n                                    <Button\n                                        color='primary'\n                                        className={classes.button}\n                                        display='inline'\n                                        startIcon={<AddIcon />}\n                                        onClick={handleDescriptionOpen}\n                                    >\n                                        Add a description\n                                    </Button>\n                                    <Typography display='inline' className={classes1.textOptional}>\n                                        (optional)\n                                    </Typography>\n                                    <br />\n                                    { descriptionOpen && (\n                                        <>\n                                            <TextField\n                                                className={classes1.descriptionWidth}\n                                                name='description'\n                                                margin='dense'\n                                                variant='outlined'\n                                                disabled={isRestricted(['apim:api_publish', 'apim:api_create'])}\n                                                label='Description'\n                                                inputProps={{ maxLength: maxCommentLength }}\n                                                helperText={(\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Environments.Environments.revision\n                                                        .description.deploy'\n                                                        defaultMessage='Add a description to the revision'\n                                                    />\n                                                )}\n                                                multiline\n                                                rows={3}\n                                                defaultValue={description === true ? '' : description}\n                                                onBlur={handleChange}\n                                            />\n                                        </>\n                                    ) }\n                                </Box>\n                                <Box mt={3}>\n                                    <Button\n                                        type='submit'\n                                        variant='contained'\n                                        onClick={\n                                            () => createDeployRevision(selectedSolaceEnvironment, selectedVhostDeploy)\n                                        }\n                                        color='primary'\n                                        disabled={selectedSolaceEnvironment.length === 0\n                                            || isRestricted(['apim:api_publish', 'apim:api_create'])\n                                            || isDeployButtonDisabled}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.deploy.deploy'\n                                            defaultMessage='Deploy'\n                                        />\n                                    </Button>\n                                </Box>\n                            </Box>\n                        </Paper>\n                    )}\n                </Grid>\n                <Grid item xs={2} />\n            </Grid>\n        </>\n    );\n}\nDeploymentOnboarding.propTypes = {\n    getVhostHelperText: PropTypes.shape({}).isRequired,\n    createDeployRevision: PropTypes.shape({}).isRequired,\n    setDescription: PropTypes.shape({}).isRequired,\n    description: PropTypes.string.isRequired,\n    gatewayVendor: PropTypes.string,\n};\n\nDeploymentOnboarding.defaultProps = {\n    gatewayVendor: 'wso2',\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CircularProgress, Grid } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\nimport CONSTS from 'AppData/Constants';\nimport Progress from 'AppComponents/Shared/Progress';\nimport { FormattedMessage } from 'react-intl';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport { isRestricted } from 'AppData/AuthManager';\nimport SubscriptionsTable from './SubscriptionsTable';\nimport SubscriptionPoliciesManage from './SubscriptionPoliciesManage';\nimport SubscriptionAvailability from './SubscriptionAvailability';\n\nconst useStyles = makeStyles((theme) => ({\n    buttonSection: {\n        marginTop: theme.spacing(2),\n    },\n    emptyBox: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\n/**\n * Subscriptions component\n *\n * @class Subscriptions\n * @extends {Component}\n */\nfunction Subscriptions(props) {\n    const classes = useStyles();\n    const [api] = useAPI();\n    const { updateAPI } = props;\n    const restApi = new API();\n    const [tenants, setTenants] = useState(null);\n    const [policies, setPolices] = useState({});\n    const [availability, setAvailability] = useState({ subscriptionAvailability: api.subscriptionAvailability });\n    const [tenantList, setTenantList] = useState(api.subscriptionAvailableTenants);\n    const [subscriptions, setSubscriptions] = useState(null);\n    const [updateInProgress, setUpdateInProgress] = useState(false);\n    const { settings } = useAppContext();\n\n    /**\n     * Save subscription information (policies, subscriptionAvailability, subscriptionAvailableTenants)\n     */\n    function saveAPI() {\n        setUpdateInProgress(true);\n        const { subscriptionAvailability } = availability;\n        const newApi = {\n            policies,\n            subscriptionAvailability,\n            subscriptionAvailableTenants: tenantList,\n        };\n        updateAPI(newApi)\n            .then(() => {\n                Alert.info('Subscription configurations updated successfully');\n            })\n            .catch((error) => {\n                console.error(error);\n                Alert.error('Error occurred while updating subscription configurations');\n            }).finally(() => {\n                setUpdateInProgress(false);\n            });\n    }\n\n    useEffect(() => {\n        restApi.getTenantsByState(CONSTS.TENANT_STATE_ACTIVE)\n            .then((result) => {\n                setTenants(result.body.count);\n            });\n        restApi.subscriptions(api.id)\n            .then((result) => {\n                setSubscriptions(result.body.count);\n            });\n        setPolices([...api.policies]);\n    }, []);\n\n    if (typeof tenants !== 'number' || typeof subscriptions !== 'number') {\n        return (\n            <Grid container direction='row' justify='center' alignItems='center'>\n                <Grid item>\n                    <CircularProgress />\n                </Grid>\n            </Grid>\n        );\n    }\n    return (\n        <>\n            {(api.gatewayVendor === 'wso2')\n            && (<SubscriptionPoliciesManage api={api} policies={policies} setPolices={setPolices} />)}\n            {tenants !== 0 && settings.crossTenantSubscriptionEnabled && (\n                <SubscriptionAvailability\n                    api={api}\n                    availability={availability}\n                    setAvailability={setAvailability}\n                    tenantList={tenantList}\n                    setTenantList={setTenantList}\n                />\n            )}\n            { updateInProgress && <Progress /> }\n            {(api.gatewayVendor === 'wso2') && (\n                <Grid\n                    container\n                    direction='row'\n                    alignItems='flex-start'\n                    spacing={1}\n                    className={classes.buttonSection}\n                >\n                    <Grid item>\n                        <Button\n                            type='submit'\n                            variant='contained'\n                            color='primary'\n                            disabled={api.isRevision || isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                            onClick={() => saveAPI()}\n                            id='subscriptions-save-btn'\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Subscriptions.Subscriptions.save'\n                                defaultMessage='Save'\n                            />\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            component={Link}\n                            to={'/apis/' + api.id + '/overview'}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Subscriptions.Subscriptions.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                    </Grid>\n                </Grid>\n            )}\n            <SubscriptionsTable api={api} />\n        </>\n    );\n}\n\nSubscriptions.propTypes = {\n    updateAPI: PropTypes.func.isRequired,\n};\n\nexport default withStyles(makeStyles)(Subscriptions);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl, defineMessages } from 'react-intl';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport Paper from '@material-ui/core/Paper';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport MUIDataTable from 'mui-datatables';\nimport InfoIcon from '@material-ui/icons/Info';\nimport UserIcon from '@material-ui/icons/Person';\n\n\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api';\nimport { ScopeValidation, resourceMethod, resourcePath } from 'AppData/ScopeValidation';\nimport AuthManager from 'AppData/AuthManager';\nimport Invoice from './Invoice';\n\nconst styles = (theme) => ({\n    heading: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(2),\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    headline: { paddingTop: theme.spacing(1.25), paddingLeft: theme.spacing(2.5) },\n    popupHeadline: {\n        alignItems: 'center',\n        borderBottom: '2px solid #40E0D0',\n        textAlign: 'center',\n    },\n    table: {\n        '& td': {\n            fontSize: theme.typography.fontSize,\n        },\n        '& th': {\n            fontSize: theme.typography.fontSize * 1.2,\n        },\n    },\n    searchDiv: {\n        float: 'right',\n        paddingTop: theme.spacing(1.25),\n        paddingRight: theme.spacing(1.25),\n    },\n    searchRoot: {\n        paddingTop: theme.spacing(0.25),\n        paddingBottom: theme.spacing(0.25),\n        paddingRight: theme.spacing(0.5),\n        paddingLeft: theme.spacing(0.5),\n        display: 'flex',\n        alignItems: 'right',\n        width: theme.spacing(50),\n        borderBottom: '1px solid #E8E8E8',\n    },\n    searchInput: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    searchIconButton: {\n        padding: theme.spacing(1.25),\n    },\n    noDataMessage: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        color: '#888888',\n        width: '100%',\n    },\n    tableColumnSize: {\n        width: '14%',\n    },\n    tableColumnSize2: {\n        width: '30%',\n    },\n    dialogColumnSize: {\n        width: '50%',\n    },\n    dialog: {\n        float: 'center',\n        alignItems: 'center',\n    },\n    invoiceTable: {\n        '& td': {\n            fontSize: theme.typography.fontSize * 1.5,\n        },\n    },\n    uniqueCell: {\n        borderTop: '1px solid #000000',\n        fontWeight: 'bold',\n    },\n    mainTitle: {\n        paddingLeft: 0,\n        marginTop: theme.spacing(3),\n    },\n    titleWrapper: {\n        marginBottom: theme.spacing(3),\n    },\n    typography: {\n        padding: theme.spacing(2),\n    },\n    root: {\n        flexGrow: 1,\n    },\n    InfoToolTip: {\n        backgroundColor: theme.custom.disableColor,\n        color: theme.palette.getContrastText(theme.custom.disableColor),\n        fontSize: theme.typography.fontSize,\n        fontWeight: theme.typography.h6.fontWeight,\n        border: 'solid 1px ' + theme.palette.grey,\n        borderRadius: theme.shape.borderRadius,\n        padding: theme.spacing(2),\n    },\n    subscriberHeader: {\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n});\n\nconst subscriptionStatus = {\n    BLOCKED: 'BLOCKED',\n    PROD_BLOCKED: 'PROD_ONLY_BLOCKED',\n};\n\n/**\n * Table pagination for subscriptions table\n *\n * @param props props used for SubscriptionTablePagination\n * @returns {*}\n */\nfunction SubscriptionTablePagination(props) {\n    const {\n        count, page, rowsPerPage, onChangePage,\n    } = props;\n\n    /**\n     * handleFirstPageButtonClick loads data of the first page\n     * */\n    function handleFirstPageButtonClick() {\n        if (onChangePage) {\n            onChangePage(0);\n        }\n    }\n\n    /**\n     * handleBackButtonClick load data of the prev page\n     * */\n    function handleBackButtonClick() {\n        if (onChangePage) {\n            onChangePage(page - 1);\n        }\n    }\n\n    /**\n     * handleNextButtonClick load data of the next page\n     * */\n    function handleNextButtonClick() {\n        if (onChangePage) {\n            onChangePage(page + 1);\n        }\n    }\n\n    /**\n     * handleLastPageButtonClick load data of the last page\n     * */\n    function handleLastPageButtonClick() {\n        if (onChangePage) {\n            onChangePage(Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n        }\n    }\n\n    return (\n        <div\n            style={{ display: 'flex' }}\n        >\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n            >\n                <FirstPageIcon />\n            </IconButton>\n            <IconButton\n                onClick={handleBackButtonClick}\n                disabled={page === 0}\n            >\n                <KeyboardArrowLeft />\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n            >\n                <KeyboardArrowRight />\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n            >\n                <LastPageIcon />\n            </IconButton>\n        </div>\n    );\n}\n\nSubscriptionTablePagination.propTypes = {\n    count: PropTypes.number.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n    onChangePage: PropTypes.func.isRequired,\n};\n\n/**\n * Lists all subscriptions.\n *\n * @class SubscriptionsTable\n * @extends {React.Component}\n */\nclass SubscriptionsTable extends Component {\n    constructor(props) {\n        super(props);\n        this.api = props.api;\n        this.state = {\n            subscriptions: null,\n            totalSubscription: 0,\n            page: 0,\n            rowsPerPage: 5,\n            searchQuery: null,\n            rowsPerPageOptions: [5, 10, 25, 50, 100],\n            emptyColumnHeight: 60,\n            policies: [],\n            subscriberClaims: null,\n        };\n        this.formatSubscriptionStateString = this.formatSubscriptionStateString.bind(this);\n        this.blockSubscription = this.blockSubscription.bind(this);\n        this.blockProductionOnly = this.blockProductionOnly.bind(this);\n        this.unblockSubscription = this.unblockSubscription.bind(this);\n        this.handleChangePage = this.handleChangePage.bind(this);\n        this.handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\n        this.filterSubscriptions = this.filterSubscriptions.bind(this);\n        this.isMonetizedPolicy = this.isMonetizedPolicy.bind(this);\n        this.renderClaims = this.renderClaims.bind(this);\n        this.isNotCreator = AuthManager.isNotCreator();\n        this.isNotPublisher = AuthManager.isNotPublisher();\n    }\n\n    componentDidMount() {\n        this.fetchSubscriptionData();\n    }\n\n    // TODO: This is a React anti-pattern, have to move this to a component ~tmkb\n    /**\n     * Returns the set of action buttons based on the current subscription state\n     *\n     * @param {*} state State of the subscription (PROD_ONLY_BLOCKED/BLOCKED/ACTIVE)\n     * @param {*} subscriptionId Subscription ID\n     * @returns {JSX} Action buttons in JSX\n     * @memberof SubscriptionsTable\n     */\n    getSubscriptionBlockingButtons(state, subscriptionId) {\n        const { classes } = this.props;\n        if (state === subscriptionStatus.PROD_BLOCKED) {\n            return (\n                <dev>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockProductionOnly(subscriptionId)}\n                        className={classes.button}\n                        disabled='true'\n                    >\n                        <FormattedMessage\n                            id='block.production.only'\n                            defaultMessage='Block Production Only'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='block.all'\n                            defaultMessage='Block All'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.unblockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='unblock'\n                            defaultMessage='Unblock'\n                        />\n                    </Button>\n                </dev>\n            );\n        } else if (state === subscriptionStatus.BLOCKED) {\n            return (\n                <dev>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockProductionOnly(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='block.production.only'\n                            defaultMessage='Block Production Only'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled='true'\n                    >\n                        <FormattedMessage\n                            id='block.all'\n                            defaultMessage='Block All'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.unblockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='unblock'\n                            defaultMessage='Unblock'\n                        />\n                    </Button>\n                </dev>\n            );\n        } else {\n            return (\n                <dev>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockProductionOnly(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='block.production.only'\n                            defaultMessage='Block Production Only'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='block.all'\n                            defaultMessage='Block All'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.unblockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled='true'\n                    >\n                        <FormattedMessage\n                            id='unblock'\n                            defaultMessage='Unblock'\n                        />\n                    </Button>\n                </dev>\n            );\n        }\n    }\n\n    /**\n     * handleChangePage handle change in selected page\n     *\n     * @param page selected page\n     * */\n    handleChangePage(page) {\n        this.setState({ page }, this.fetchSubscriptionData);\n    }\n\n    /**\n     * handleChangeRowsPerPage handle change in rows per page\n     *\n     * @param event rows per page change event\n     * */\n    handleChangeRowsPerPage(event) {\n        this.setState({ rowsPerPage: event.target.value, page: 0 }, this.fetchSubscriptionData);\n    }\n\n    /**\n     * Returns subscription state string based on te current subscription state\n     *\n     * @param {*} state The current state of subscription\n     * @returns {JSX} Subscription state string\n     * @memberof SubscriptionsTable\n     */\n    formatSubscriptionStateString(state) {\n        if (state === subscriptionStatus.PROD_BLOCKED) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Subscriptions.SubscriptionsTable.blocked.production.only.subs.state'\n                    defaultMessage='Blocked Production Only'\n                />\n            );\n        } else if (state === subscriptionStatus.BLOCKED) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Subscriptions.SubscriptionsTable.blocked.subs.state'\n                    defaultMessage='Blocked'\n                />\n            );\n        } else {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Subscriptions.SubscriptionsTable.active.subs.state'\n                    defaultMessage='Active'\n                />\n            );\n        }\n    }\n\n    /**\n     * Blocks the given subscription\n     *\n     * @param {*} subscriptionId Subscription ID\n     * @memberof SubscriptionsTable\n     */\n    blockSubscription(subscriptionId) {\n        const { intl } = this.props;\n        const api = new API();\n        const promisedSubscriptionUpdate = api.blockSubscriptions(subscriptionId, subscriptionStatus.BLOCKED);\n        promisedSubscriptionUpdate\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.Subscriptions.SubscriptionsTable.subscription.blocked',\n                    defaultMessage: 'Subscription was blocked.',\n                }));\n                this.fetchSubscriptionData();\n            })\n            .catch((errorResponse) => {\n                console.error(errorResponse);\n                const { message } = errorResponse.response.body;\n                const messages = defineMessages({\n                    errorMessage: {\n                        id: 'Apis.Details.Subscriptions.SubscriptionsTable.error.subscription.block',\n                        defaultMessage: 'Error: Unable to block subscription. (Reason: {message})',\n                    },\n                });\n                Alert.error(intl.formatMessage(messages.errorMessage, { message }));\n            });\n    }\n\n    /**\n     * Blocks production only for the given subscription\n     *\n     * @param {*} subscriptionId Subscription ID\n     * @memberof SubscriptionsTable\n     */\n    blockProductionOnly(subscriptionId) {\n        const { intl } = this.props;\n        const api = new API();\n        const promisedSubscriptionUpdate = api.blockSubscriptions(subscriptionId, subscriptionStatus.PROD_BLOCKED);\n        promisedSubscriptionUpdate\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.Subscriptions.SubscriptionsTable.subscription.blocked.prod.only',\n                    defaultMessage: 'Subscription was blocked for production only.',\n                }));\n                this.fetchSubscriptionData();\n            })\n            .catch((errorResponse) => {\n                console.error(errorResponse);\n                const { message } = errorResponse.response.body;\n                const messages = defineMessages({\n                    errorMessage: {\n                        id: 'Apis.Details.Subscriptions.SubscriptionsTable.error.subscription.block.prod.only',\n                        defaultMessage: 'Error: Unable to block subscription. (Reason: {message})',\n                    },\n                });\n                Alert.error(intl.formatMessage(messages.errorMessage, { message }));\n            });\n    }\n\n    /**\n     * Unblocks the given subscription\n     *\n     * @param {*} subscriptionId Subscription ID\n     * @memberof SubscriptionsTable\n     */\n    unblockSubscription(subscriptionId) {\n        const { intl } = this.props;\n        const api = new API();\n        const promisedSubscriptionUpdate = api.unblockSubscriptions(subscriptionId);\n        promisedSubscriptionUpdate\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.Subscriptions.SubscriptionsTable.subscription.unblocked',\n                    defaultMessage: 'Subscription was unblocked.',\n                }));\n                this.fetchSubscriptionData();\n            })\n            .catch((errorResponse) => {\n                console.error(errorResponse);\n                const { message } = errorResponse.response.body;\n                const messages = defineMessages({\n                    errorMessage: {\n                        id: 'Apis.Details.Subscriptions.SubscriptionsTable.error.subscription.unblock',\n                        defaultMessage: 'Error: Unable to unblock subscription. (Reason: {message})',\n                    },\n                });\n                Alert.error(intl.formatMessage(messages.errorMessage, { message }));\n            });\n    }\n\n    /**\n     * Fetches subscription data\n     *\n     * @memberof SubscriptionsTable\n     */\n    fetchSubscriptionData() {\n        const api = new API();\n        const { page, rowsPerPage, searchQuery } = this.state;\n        const { intl } = this.props;\n        const promisedSubscriptions = api.subscriptions(this.api.id, page * rowsPerPage, rowsPerPage, searchQuery);\n        promisedSubscriptions\n            .then((response) => {\n                for (let i = 0; i < response.body.list.length; i++) {\n                    const { subscriptionId } = response.body.list[i];\n                    response.body.list[i].name = response.body.list[i].applicationInfo.name;\n                    const promisedInfo = api.getSubscriberInfo(subscriptionId);\n                    promisedInfo\n                        .then((resp) => {\n                            this.setState((prevState) => ({\n                                subscriberClaims: {\n                                    ...prevState.subscriberClaims,\n                                    [subscriptionId]: resp.body,\n                                },\n                            }));\n                        })\n                        .catch((errorMessage) => {\n                            console.error(errorMessage);\n                            Alert.error(intl.formatMessage({\n                                id: 'Apis.Details.Subscriptions.SubscriptionsTable.subscriber.info.error',\n                                defaultMessage: 'Error while retrieving the subscriber information',\n                            }));\n                        });\n                }\n                this.setState({\n                    subscriptions: response.body.list,\n                    totalSubscription: response.body.pagination.total,\n                });\n            })\n            .catch((errorMessage) => {\n                console.error(errorMessage);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Subscriptions.SubscriptionsTable.subscriptions.error',\n                    defaultMessage: 'Error while retrieving the subscriptions',\n                }));\n            });\n        api.getMonetization(this.props.api.id).then((status) => {\n            this.setState({ monetizationStatus: status.enabled });\n        });\n        api.getSubscriptionPolicies(this.api.id).then((policies) => {\n            const filteredPolicies = policies.filter((policy) => policy.tierPlan === 'COMMERCIAL');\n            this.setState({ policies: filteredPolicies });\n        });\n    }\n\n    /**\n     * Checks whether the policy is a usage based monetization plan\n     *\n     * */\n    isMonetizedPolicy(policyName) {\n        const { policies, monetizationStatus } = this.state;\n        if (policies.length > 0) {\n            const filteredPolicies = policies.filter(\n                (policy) => policy.name === policyName && policy.monetizationAttributes.pricePerRequest != null,\n            );\n            return (filteredPolicies.length > 0 && monetizationStatus);\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Filter subscriptions based on user search value\n     *\n     * @param event onChange event of user search\n     */\n    filterSubscriptions(event) {\n        this.setState({ searchQuery: event.target.value }, this.fetchSubscriptionData);\n    }\n\n    /**\n     * Render claims based on the claim object\n     */\n    renderClaims(claimsObject) {\n        const { classes } = this.props;\n        if (claimsObject) {\n            return (\n                <div className={classes.root}>\n                    {claimsObject.name}\n                    <Grid container spacing={1}>\n                        <Grid item>\n                            <UserIcon color='primary' />\n                        </Grid>\n                        <Grid item>\n                            {claimsObject.name}\n                        </Grid>\n                    </Grid>\n                    {claimsObject.claims && (\n                        <div>\n                            <Table className={classes.table}>\n                                <TableBody>\n                                    {claimsObject.claims.map((claim) => (\n                                        <TableRow hover>\n                                            <TableCell>{claim.name}</TableCell>\n                                            {claim.value ? (\n                                                <TableCell>{claim.value}</TableCell>\n                                            ) : (\n                                                <TableCell>Not Available</TableCell>\n                                            )}\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </div>\n                    )}\n                </div>\n            );\n        }\n        return (\n            <div>\n                <Typography className={classes.typography}>\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Subscriber.no.claims'\n                        defaultMessage='No subscriber claims data available'\n                    />\n                </Typography>\n            </div>\n        );\n    }\n\n    /**\n     *\n     */\n    render() {\n        const {\n            subscriptions, page, rowsPerPage, totalSubscription, rowsPerPageOptions, emptyColumnHeight,\n            subscriberClaims,\n        } = this.state;\n        const { classes, api } = this.props;\n        if (!subscriptions) {\n            return (\n                <Grid container direction='row' justify='center' alignItems='center'>\n                    <Grid item>\n                        <CircularProgress />\n                    </Grid>\n                </Grid>\n            );\n        }\n        const columns = [\n            {\n                name: 'subscriptionId',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                },\n            },\n            {\n                name: 'applicationInfo.applicationId',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                },\n            },\n            {\n                name: 'applicationInfo.subscriber',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.subscriber'\n                        defaultMessage='Subscriber'\n                    />\n                ),\n                options: {\n                    sort: false,\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            let claimsObject;\n                            if (subscriberClaims) {\n                                claimsObject = subscriberClaims[tableMeta.rowData[0]];\n                            }\n                            return (\n                                <Box display='flex'>\n                                    <Box pr={1}>\n                                        {subscriberClaims && claimsObject && claimsObject.name}\n                                    </Box>\n                                    <Tooltip\n                                        interactive\n                                        placement='top'\n                                        classes={{\n                                            tooltip: classes.InfoToolTip,\n                                        }}\n                                        title={(\n                                            <>\n                                                {subscriberClaims && (\n                                                    <div>\n                                                        {this.renderClaims(claimsObject)}\n                                                    </div>\n                                                )}\n                                            </>\n                                        )}\n                                    >\n                                        <Grid container direction='row' alignItems='center' spacing={1}>\n                                            <Grid item>\n                                                <Typography>\n                                                    <InfoIcon color='action' />\n                                                </Typography>\n                                            </Grid>\n                                            <Grid item>\n                                                {value}\n                                            </Grid>\n                                        </Grid>\n                                    </Tooltip>\n                                </Box>\n                            );\n                        }\n                        return null;\n                    },\n                },\n            },\n            {\n                name: 'name',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.application'\n                        defaultMessage='Application'\n                    />\n                ),\n                options: {\n                    sort: false,\n                },\n            },\n            {\n                name: 'applicationInfo.description',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                },\n            },\n            {\n                name: 'applicationInfo.subscriptionCount',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                },\n            },\n            {\n                name: 'throttlingPolicy',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.throttling.tier'\n                        defaultMessage='Tier'\n                    />\n                ),\n                options: {\n                    sort: false,\n                },\n            },\n            {\n                name: 'subscriptionStatus',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.subscription.status'\n                        defaultMessage='Status'\n                    />\n                ),\n                options: {\n                    sort: false,\n                },\n            },\n            {\n                name: 'actions',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.subscription.actions'\n                        defaultMessage='Actions'\n                    />\n                ),\n                options: {\n                    sort: false,\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const status = tableMeta.rowData[7];\n                            const subscriptionId = tableMeta.rowData[0];\n                            return (\n                                <ScopeValidation\n                                    resourceMethod={resourceMethod.POST}\n                                    resourcePath={resourcePath.BLOCK_SUBSCRIPTION}\n                                >\n                                    {\n                                        this.getSubscriptionBlockingButtons(\n                                            status,\n                                            subscriptionId,\n                                        )\n                                    }\n                                </ScopeValidation>\n                            );\n                        }\n                        return null;\n                    },\n                },\n            },\n            {\n                name: 'invoice',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.subscription.invoice'\n                        defaultMessage='Invoice'\n                    />\n                ),\n                options: {\n                    sort: false,\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const throttlingPolicy = tableMeta.rowData[6];\n                            const subscriptionId = tableMeta.rowData[0];\n                            return (\n                                <Invoice\n                                    subscriptionId={subscriptionId}\n                                    isNotAuthorized={this.isNotCreator && this.isNotPublisher}\n                                    isMonetizedUsagePolicy={\n                                        this.isMonetizedPolicy(throttlingPolicy)\n                                    }\n                                    api={api}\n                                />\n                            );\n                        }\n                        return null;\n                    },\n                },\n            },\n        ];\n\n        const options = {\n            title: false,\n            print: false,\n            download: false,\n            viewColumns: false,\n            elevation: 1,\n            customToolbar: false,\n            search: false,\n            selectableRows: 'none',\n            rowsPerPageOptions: [5, 10, 25, 50, 100],\n            customFooter: () => {\n                return (\n                    <TablePagination\n                        rowsPerPageOptions={rowsPerPageOptions}\n                        colSpan={6}\n                        count={totalSubscription}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onChangePage={this.handleChangePage}\n                        onChangeRowsPerPage={this.handleChangeRowsPerPage}\n                        ActionsComponent={SubscriptionTablePagination}\n                    />\n                );\n            },\n        };\n        const subMails = {};\n        const emails = subscriberClaims && Object.entries(subscriberClaims).map(([, v]) => {\n            let email = null;\n            if (!subMails[v.name] && v.claims.length > 0) {\n                email = v.claims.find((claim) => claim.uri === 'http://wso2.org/claims/emailaddress').value;\n                subMails[v.name] = email;\n            }\n            return email;\n        }).reduce((a, b) => {\n            return b !== null ? `${a || ''},${b}` : a;\n        });\n        let names = null;\n        if (subMails) {\n            Object.entries(subMails).map(([k, v]) => {\n                if (v) {\n                    if (names === null) {\n                        names = k;\n                    } else {\n                        names = `${names}, ${k}`;\n                    }\n                }\n                return null;\n            });\n        }\n        const Tip = names ? React.Fragment : Tooltip;\n        return (\n            <>\n                <div className={classes.heading}>\n                    <Typography variant='h4'>\n                        <FormattedMessage\n                            id='Apis.Details.Subscriptions.SubscriptionsTable.manage.subscriptions'\n                            defaultMessage='Manage Subscriptions'\n                        />\n                        {'   '}\n                        {subscriptions.length > 0 && (\n                            <Tip title='No contact details' placement='top'>\n                                <span>\n                                    <Button\n                                        target='_blank'\n                                        rel='noopener'\n                                        href={`mailto:?subject=Message from the API Publisher&cc=${emails}`\n                                            + `&body=Hi ${names},`}\n                                        size='small'\n                                        disabled={!names}\n                                        variant='outlined'\n                                    >\n                                        Contact Subscribers\n                                    </Button>\n                                </span>\n                            </Tip>\n                        )}\n                    </Typography>\n                    <Typography variant='caption' gutterBottom>\n                        <FormattedMessage\n                            id='Apis.Details.Subscriptions.SubscriptionsTable.sub.heading'\n                            defaultMessage='Manage subscriptions of the API'\n                        />\n                    </Typography>\n                </div>\n                <Paper elevation={0}>\n                    {subscriptions.length > 0 ? (\n                        <div>\n                            <MUIDataTable title='' data={subscriptions} columns={columns} options={options} />\n                        </div>\n                    )\n                        : (\n                            <div className={classes.noDataMessage} style={{ height: rowsPerPage * emptyColumnHeight }}>\n                                <FormattedMessage\n                                    id='Apis.Details.Subscriptions.SubscriptionsTable.no.subscriptions'\n                                    defaultMessage='No subscriptions data available'\n                                />\n                            </div>\n                        )}\n                </Paper>\n            </>\n        );\n    }\n}\n\nSubscriptionsTable.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(SubscriptionsTable));\n","/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport MUIDataTable from 'mui-datatables';\nimport API from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport { FormattedMessage } from 'react-intl';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nconst columns = ['Name', 'Value'];\n\nconst options = {\n    filterType: 'checkbox',\n    sort: false,\n    search: false,\n    viewColumns: false,\n    filter: false,\n    selectableRowsHeader: false,\n    selectableRows: 'none',\n    pagination: false,\n    download: false,\n};\n\n// eslint-disable-next-line require-jsdoc\nfunction Invoice(props) {\n    const {\n        subscriptionId,\n        isMonetizedUsagePolicy,\n        isNotAuthorized,\n        api,\n    } = props;\n    const [showPopup, setShowPopup] = useState(false);\n    const [showErrorPopup, setShowErrorPopup] = useState(false);\n    const [invoice, setInvoice] = useState(null);\n\n    /**\n   * Handle the popup for invoice\n   */\n    const handlePopup = () => {\n        setShowPopup(true);\n        setInvoice(null);\n        if (api.apiType === API.CONSTS.APIProduct) {\n            const apiProduct = new APIProduct(api.name, api.context, api.policies);\n            const promiseInvoice = apiProduct.getMonetizationInvoice(subscriptionId);\n            promiseInvoice.then((response) => {\n                const invoiceData = [];\n                Object.keys(response.properties).map((invoiceItem) => {\n                    const insideArray = [];\n                    insideArray.push(invoiceItem);\n                    insideArray.push(response.properties[invoiceItem]);\n                    invoiceData.push(insideArray);\n                    return true;\n                });\n                setInvoice(invoiceData);\n            }).catch((error) => {\n                console.error(error);\n                setShowErrorPopup(true);\n            });\n        } else {\n            const promiseInvoice = api.getMonetizationInvoice(subscriptionId);\n            promiseInvoice.then((response) => {\n                const invoiceData = [];\n                Object.keys(response.properties).map((invoiceItem) => {\n                    const insideArray = [];\n                    insideArray.push(invoiceItem);\n                    insideArray.push(response.properties[invoiceItem]);\n                    invoiceData.push(insideArray);\n                    return true;\n                });\n                setInvoice(invoiceData);\n            }).catch((error) => {\n                console.error(error);\n                setShowErrorPopup(true);\n            });\n        }\n    };\n\n    /**\n   * Handle closing the popup for invoice\n   */\n    const handleClose = () => {\n        setShowPopup(false);\n    };\n\n    const handleAlertClose = () => {\n        setShowErrorPopup(false);\n    };\n\n    return (\n        <>\n            <Button\n                variant='outlined'\n                size='small'\n                color='primary'\n                disabled={!isMonetizedUsagePolicy || isNotAuthorized}\n                onClick={handlePopup}\n            >\n                <FormattedMessage\n                    id='Applications.Details.Invoice.view.btn'\n                    defaultMessage='View Invoice'\n                />\n            </Button>\n            <Dialog open={showPopup} onClose={handleClose} fullWidth='true'>\n                {invoice && (\n                    <MUIDataTable\n                        title='Upcoming Invoice'\n                        data={invoice}\n                        columns={columns}\n                        options={options}\n                    />\n                )}\n            </Dialog>\n            <Dialog open={showErrorPopup} onClose={handleAlertClose} fullWidth='true'>\n                <DialogTitle>No Data Available</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id='invoice-dialog-description'>\n                        Pending invoice data not found for this subscription.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleAlertClose} color='primary'>\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n\nInvoice.propTypes = {\n    subscriptionId: PropTypes.string.isRequired,\n    isMonetizedUsagePolicy: PropTypes.string.isRequired,\n    isNotAuthorized: PropTypes.string.isRequired,\n    api: PropTypes.instanceOf(API).isRequired,\n};\n\nexport default Invoice;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Paper from '@material-ui/core/Paper';\nimport API from 'AppData/api';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst styles = (theme) => ({\n    subscriptionPoliciesPaper: {\n        marginTop: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n    grid: {\n        margin: theme.spacing(1.25),\n    },\n    gridLabel: {\n        marginTop: theme.spacing(1.5),\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n});\n\n/**\n * Manage subscription policies of the API\n * */\nclass SubscriptionPoliciesManage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            subscriptionPolicies: {},\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        const { api } = this.props;\n        const isAsyncAPI = (api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE' || api.type === 'ASYNC');\n        const policyPromise = isAsyncAPI ? API.asyncAPIPolicies() : API.policies('subscription');\n        policyPromise\n            .then((res) => {\n                this.setState({ subscriptionPolicies: res.body.list });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n            });\n    }\n\n    /**\n     * Handle onChange of selected subsription policies\n     *\n     * @param event onChange event\n     */\n    handleChange(event) {\n        const { name, checked } = event.target;\n        const { setPolices, policies } = this.props;\n        let newSelectedPolicies = [...policies];\n        if (checked) {\n            newSelectedPolicies.push(name);\n        } else {\n            newSelectedPolicies = policies.filter((policy) => policy !== name);\n        }\n        setPolices(newSelectedPolicies);\n    }\n\n    render() {\n        const { classes, api, policies } = this.props;\n        const { subscriptionPolicies } = this.state;\n\n        return (\n            <>\n                <Typography id='itest-api-details-bushiness-plans-head' variant='h4' component='h2'>\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.SubscriptionPoliciesManage.business.plans'\n                        defaultMessage='Business Plans'\n                    />\n                </Typography>\n                {api.apiType === API.CONSTS.APIProduct\n                    ? (\n                        <Typography variant='caption' gutterBottom>\n                            <FormattedMessage\n                                id='Apis.Details.Subscriptions.SubscriptionPoliciesManage.APIProduct.sub.heading'\n                                defaultMessage='Attach business plans to API'\n                            />\n                        </Typography>\n                    )\n                    : (\n                        <Typography variant='caption' gutterBottom>\n                            <FormattedMessage\n                                id='Apis.Details.Subscriptions.SubscriptionPoliciesManage.sub.heading'\n                                defaultMessage='Attach business plans to API'\n                            />\n                        </Typography>\n                    )}\n                <Paper className={classes.subscriptionPoliciesPaper}>\n                    <FormControl className={classes.formControl}>\n                        <FormGroup>\n                            { subscriptionPolicies && Object.entries(subscriptionPolicies).map((value) => (\n                                <FormControlLabel\n                                    data-testid={'policy-checkbox-' + value[1].displayName.toLowerCase()}\n                                    key={value[1].displayName}\n                                    control={(\n                                        <Checkbox\n                                            disabled={isRestricted(['apim:api_publish', 'apim:api_create'], api)}\n                                            color='primary'\n                                            checked={policies.includes(value[1].displayName)}\n                                            onChange={(e) => this.handleChange(e)}\n                                            name={value[1].displayName}\n                                        />\n                                    )}\n                                    label={value[1].displayName + ' : ' + value[1].description}\n                                />\n                            ))}\n                        </FormGroup>\n                    </FormControl>\n                </Paper>\n            </>\n        );\n    }\n}\n\nSubscriptionPoliciesManage.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    api: PropTypes.shape({ policies: PropTypes.arrayOf(PropTypes.shape({})) }).isRequired,\n    setPolices: PropTypes.func.isRequired,\n    policies: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(SubscriptionPoliciesManage));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport Select from '@material-ui/core/Select';\nimport TenantAutocomplete from 'AppComponents/Apis/Details/Subscriptions/TenantAutocomplete';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 400,\n    },\n    textControl: {\n        margin: theme.spacing(1),\n        minWidth: 300,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    subscriptionAvailabilityPaper: {\n        marginTop: theme.spacing(2),\n        paddingLeft: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    grid: {\n        display: 'flex',\n        margin: theme.spacing(1.25),\n    },\n    gridLabel: {\n        marginTop: theme.spacing(3.5),\n    },\n    saveButton: {\n        marginTop: theme.spacing(2),\n    },\n    heading: {\n        marginTop: theme.spacing(3),\n    },\n    tenantsList: {\n        height: theme.spacing(12),\n    },\n}));\n\n/**\n * Allows user to select API availability for tenants\n * @export\n * @returns {React.Component} @inheritdoc\n */\nexport default function SimpleSelect(props) {\n    const classes = useStyles();\n    const {\n        api, setAvailability, tenantList, setTenantList,\n    } = props;\n    let currentAvailability;\n    if (api.subscriptionAvailability === null || api.subscriptionAvailability === 'CURRENT_TENANT') {\n        currentAvailability = 'currentTenant';\n    } else if (api.subscriptionAvailability === 'ALL_TENANTS') {\n        currentAvailability = 'allTenants';\n    } else if (api.subscriptionAvailability === 'SPECIFIC_TENANTS') {\n        currentAvailability = 'specificTenants';\n    }\n    const [values, setValues] = React.useState({\n        availability: currentAvailability,\n    });\n    const inputLabel = React.useRef(null);\n    const [labelWidth, setLabelWidth] = React.useState(0);\n    const isSpecificTenants = values.availability === 'specificTenants';\n    const isUIElementDisabled = isRestricted(['apim:api_publish', 'apim:api_create'], api);\n\n    React.useEffect(() => {\n        setLabelWidth(inputLabel.current.offsetWidth);\n    }, []);\n\n    /**\n     * Handle onchange for the subscription availability dropdown\n     * @param {string} value the new value selected for subscription availability\n     */\n    function subscriptionAvailableTenants(value) {\n        let availabilityValue;\n\n        setValues({\n            ...values,\n            availability: value,\n        });\n\n        if (value === 'currentTenant') {\n            availabilityValue = 'CURRENT_TENANT';\n            setTenantList([]);\n        } else if (value === 'allTenants') {\n            availabilityValue = 'ALL_TENANTS';\n            setTenantList([]);\n        } else if (value === 'specificTenants') {\n            availabilityValue = 'SPECIFIC_TENANTS';\n        }\n        setAvailability({\n            subscriptionAvailability: availabilityValue,\n        });\n    }\n\n    return (\n        <Grid item xs={12} md={12} lg={12}>\n            <Typography variant='h4' component='h2' className={classes.heading}>\n                <FormattedMessage\n                    id='Apis.Details.Subscriptions.SubscriptionAvailability.subscription.availability'\n                    defaultMessage='Subscription Availability'\n                />\n            </Typography>\n            <Typography variant='caption' gutterBottom>\n                <FormattedMessage\n                    id='Apis.Details.Subscriptions.SubscriptionAvailability.sub.heading'\n                    defaultMessage='Make subscriptions available to tenants'\n                />\n            </Typography>\n            <Paper className={classes.subscriptionAvailabilityPaper}>\n                <form className={classes.root} autoComplete='off' onSubmit={(e) => { e.preventDefault(); }}>\n                    <Grid container xs={12} spacing={1} className={classes.grid}>\n                        <Grid item xs={10}>\n                            <FormControl\n                                variant='outlined'\n                                className={classes.formControl}\n                                disabled={isUIElementDisabled}\n                            >\n                                <InputLabel ref={inputLabel} htmlFor='outlined-age-simple' />\n                                <Select\n                                    value={values.availability}\n                                    onChange={({ target: { value } }) => {\n                                        subscriptionAvailableTenants(value);\n                                    }}\n                                    labelWidth={labelWidth}\n                                    displayEmpty\n                                    name='availability'\n                                    inputProps={{\n                                        name: 'availability',\n                                        id: 'outlined-availabi;ity-simple',\n                                    }}\n                                >\n                                    <MenuItem value='currentTenant'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Subscriptions.SubscriptionAvailability.current.tenant.only'\n                                            defaultMessage='Available to current tenant only'\n                                        />\n                                    </MenuItem>\n                                    <MenuItem value='allTenants'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Subscriptions.SubscriptionAvailability.all.tenants'\n                                            defaultMessage='Available to all the tenants'\n                                        />\n                                    </MenuItem>\n                                    <MenuItem value='specificTenants'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Subscriptions.SubscriptionAvailability.specific.tenants'\n                                            defaultMessage='Available to specific tenants'\n                                        />\n                                    </MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        {isSpecificTenants ? (\n                            <Grid item xs={8} className={classes.tenantsList}>\n                                <TenantAutocomplete setTenantList={setTenantList} tenantList={tenantList} api={api} />\n                            </Grid>\n                        ) : <Grid item xs={8} />}\n                    </Grid>\n                </form>\n            </Paper>\n        </Grid>\n    );\n}\nSimpleSelect.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    api: PropTypes.shape({ policies: PropTypes.arrayOf(PropTypes.shape({})) }).isRequired,\n    setAvailability: PropTypes.func.isRequired,\n    setTenantList: PropTypes.func.isRequired,\n    tenantList: PropTypes.shape([]).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport deburr from 'lodash/deburr';\nimport Downshift from 'downshift';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Chip from '@material-ui/core/Chip';\nimport API from 'AppData/api';\nimport CONSTS from 'AppData/Constants';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        height: 250,\n    },\n    container: {\n        flexGrow: 1,\n        position: 'relative',\n    },\n    paper: {\n        position: 'absolute',\n        zIndex: 1,\n        marginTop: theme.spacing(1),\n        left: 0,\n        right: 0,\n    },\n    chip: {\n        margin: theme.spacing(0.5, 0.25),\n    },\n    inputRoot: {\n        flexWrap: 'wrap',\n    },\n    inputInput: {\n        width: 'auto',\n        flexGrow: 1,\n    },\n    divider: {\n        height: theme.spacing(2),\n    },\n}));\n\n/**\n * Renders the input component\n */\nfunction renderInput(inputProps) {\n    const {\n        InputProps, classes, ref, ...other\n    } = inputProps;\n\n    return (\n        <TextField\n            InputProps={{\n                inputRef: ref,\n                classes: {\n                    root: classes.inputRoot,\n                    input: classes.inputInput,\n                },\n                ...InputProps,\n            }}\n            {...other}\n        />\n    );\n}\n\nrenderInput.propTypes = {\n    classes: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    InputProps: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n};\n\n/**\n * Renders the suggestion component\n */\nfunction renderSuggestion(suggestionProps) {\n    const {\n        suggestion, index, itemProps, highlightedIndex, tenantList,\n    } = suggestionProps;\n    const isHighlighted = highlightedIndex === index;\n    const isSelected = (tenantList || '').indexOf(suggestion) > -1;\n\n    return (\n        <MenuItem\n            {...itemProps}\n            key={suggestion}\n            selected={isHighlighted}\n            component='div'\n            style={{\n                fontWeight: isSelected ? 500 : 400,\n            }}\n        >\n            {suggestion}\n        </MenuItem>\n    );\n}\n\nrenderSuggestion.propTypes = {\n    highlightedIndex: PropTypes.oneOfType([PropTypes.oneOf([null]), PropTypes.number]).isRequired,\n    index: PropTypes.number.isRequired,\n    itemProps: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    tenantList: PropTypes.shape([]).isRequired,\n    suggestion: PropTypes.string.isRequired,\n};\n\n/**\n * Gets suggestion list\n */\nfunction getSuggestions(value, suggestions, { showEmpty = false } = {}) {\n    const inputValue = deburr(value.trim()).toLowerCase();\n    const inputLength = inputValue.length;\n    let count = 0;\n\n    return inputLength === 0 && !showEmpty\n        ? []\n        : suggestions.filter((suggestion) => {\n            const keep = count < 15 && suggestion.slice(0, inputLength).toLowerCase() === inputValue;\n            if (keep) {\n                count += 1;\n            }\n            return keep;\n        });\n}\n\n/**\n * Downshift selection component\n */\nfunction DownshiftMultiple(props) {\n    const { tenantList, setTenantList } = props;\n    const { classes, suggestions } = props;\n    const [inputValue, setInputValue] = React.useState('');\n\n    function handleKeyDown(event) {\n        if (tenantList.length && !inputValue.length && event.key === 'Backspace') {\n            setTenantList(tenantList.slice(0, tenantList.length - 1));\n        }\n    }\n\n    function handleInputChange(event) {\n        setInputValue(event.target.value);\n    }\n\n    function handleChange(item) {\n        let newSelectedItem = [...tenantList];\n        if (newSelectedItem.indexOf(item) === -1) {\n            newSelectedItem = [...newSelectedItem, item];\n        }\n        setInputValue('');\n        setTenantList(newSelectedItem);\n    }\n\n    const handleDelete = (item) => () => {\n        const newSelectedItem = [...tenantList];\n        newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\n        setTenantList(newSelectedItem);\n    };\n\n    return (\n        <Downshift\n            id='downshift-multiple'\n            inputValue={inputValue}\n            onChange={handleChange}\n            tenantList={tenantList}\n        >\n            {({\n                getInputProps,\n                getItemProps,\n                getLabelProps,\n                isOpen,\n                inputValue: inputValue2,\n                tenantList: tenantList2,\n                highlightedIndex,\n            }) => {\n                const {\n                    onBlur, onChange, onFocus, ...inputProps\n                } = getInputProps({\n                    onKeyDown: handleKeyDown,\n                    placeholder: 'Type and select tenants from the suggested list',\n                });\n\n                return (\n                    <div className={classes.container}>\n                        {renderInput({\n                            fullWidth: true,\n                            classes,\n                            label: 'Tenants',\n                            InputLabelProps: getLabelProps(),\n                            InputProps: {\n                                startAdornment: tenantList.map((item) => (\n                                    <Chip\n                                        key={item}\n                                        tabIndex={-1}\n                                        label={item}\n                                        className={classes.chip}\n                                        onDelete={handleDelete(item)}\n                                    />\n                                )),\n                                onBlur,\n                                onChange: (event) => {\n                                    handleInputChange(event);\n                                    onChange(event);\n                                },\n                                onFocus,\n                            },\n                            inputProps,\n                        })}\n\n                        {isOpen ? (\n                            <Paper className={classes.paper} square>\n                                {getSuggestions(inputValue2, suggestions).map((suggestion, index) => renderSuggestion({\n                                    suggestion,\n                                    index,\n                                    itemProps: getItemProps({ item: suggestion }),\n                                    highlightedIndex,\n                                    tenantList: tenantList2,\n                                }))}\n                            </Paper>\n                        ) : null}\n                    </div>\n                );\n            }}\n        </Downshift>\n    );\n}\n\nDownshiftMultiple.propTypes = {\n    classes: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    setTenantList: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    suggestions: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    tenantList: PropTypes.shape([]).isRequired,\n};\n\n/**\n * Gets tenant list in order to populate suggestions list\n */\nexport default function IntegrationDownshift(props) {\n    const classes = useStyles();\n    const [suggestions, setsuggestions] = useState({});\n    const { setTenantList, tenantList } = props;\n\n    const restApi = new API();\n\n    useEffect(() => {\n        restApi.getTenantsByState(CONSTS.TENANT_STATE_ACTIVE)\n            .then((result) => {\n                const tenants = result.body.list;\n                const newSuggestions = tenants.map((tenant) => { return tenant.domain; });\n                setsuggestions(newSuggestions);\n            });\n    }, []);\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.divider} />\n            <DownshiftMultiple\n                classes={classes}\n                suggestions={suggestions}\n                tenantList={tenantList}\n                setTenantList={setTenantList}\n            />\n            <div className={classes.divider} />\n        </div>\n    );\n}\n\nIntegrationDownshift.propTypes = {\n    setTenantList: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    tenantList: PropTypes.shape([]).isRequired,\n};\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid/Grid';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Alert from 'AppComponents/Shared/Alert';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport CommentsAPI from 'AppData/Comments';\nimport Comment from './Comment';\nimport CommentAdd from './CommentAdd';\n\nconst styles = (theme) => ({\n    root: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    paper: {\n        marginRight: theme.spacing(3),\n        paddingBottom: theme.spacing(3),\n        paddingRight: theme.spacing(2),\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    contentWrapper: {\n        paddingLeft: theme.spacing(3),\n        marginTop: theme.spacing(1),\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    contentWrapperOverview: {\n        padding: 0,\n        width: '100%',\n        boxShadow: 'none',\n    },\n    titleSub: {\n        cursor: 'pointer',\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    link: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        cursor: 'pointer',\n    },\n    verticalSpace: {\n        marginTop: theme.spacing(0.2),\n    },\n    loadMoreLink: {\n        textDecoration: 'none',\n    },\n    genericMessageWrapper: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        marginRight: theme.spacing(3),\n    },\n    paperProgress: {\n        padding: theme.spacing(3),\n        marginTop: theme.spacing(2),\n        textAlign: 'center',\n    },\n    dialogContainer: {\n        width: 1000,\n        padding: theme.spacing(2),\n    },\n});\n\n/**\n * Display a comment list\n * @class Comments\n * @extends {React.Component}\n */\nclass Comments extends Component {\n    /**\n     * Creates an instance of Comments\n     * @param {*} props properies passed by the parent element\n     * @memberof Comments\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: true,\n            allComments: [],\n            comments: [],\n            totalComments: 0,\n            apiId: null,\n            loading: true,\n        };\n        this.handleExpandClick = this.handleExpandClick.bind(this);\n        this.handleLoadMoreComments = this.handleLoadMoreComments.bind(this);\n        this.addComment = this.addComment.bind(this);\n        this.updateComment = this.updateComment.bind(this);\n        this.onDeleteComment = this.onDeleteComment.bind(this);\n    }\n\n    /**\n     * Gets all the comments for a particular API, when component mounts\n     * @memberof Comments\n     */\n    componentDidMount() {\n        const { api, theme } = this.props;\n        this.setState({ apiId: api.id });\n        const limit = theme.custom.commentsLimit;\n        const offset = 0;\n\n        CommentsAPI.all(api.id, limit, offset)\n            .then((result) => {\n                const commentList = result.body.list;\n                this.setState({\n                    allComments: commentList,\n                    comments: commentList,\n                    totalComments: result.body.pagination.total,\n                    loading: false,\n                });\n            })\n            .catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    Alert.error(error.response.body.message);\n                } else {\n                    Alert.error('Something went wrong while retrieving comments');\n                }\n            });\n    }\n\n    /**\n     * Delete a comment\n     * @param {string} commentIdOfCommentToDelete id of deleted commetn\n     * @memberof Comments\n     */\n    onDeleteComment(commentIdOfCommentToDelete) {\n        const {\n            apiId, comments, totalComments,\n        } = this.state;\n\n        const remainingComments = comments.filter((item) => item.id !== commentIdOfCommentToDelete);\n        const newTotal = totalComments - 1;\n\n        if (newTotal > remainingComments.length) {\n            CommentsAPI\n                .all(apiId, 1, remainingComments.length)\n                .then((result) => {\n                    if (result.body) {\n                        this.setState({\n                            totalComments: newTotal,\n                            comments: [...remainingComments, ...result.body.list],\n                            allComments: [...remainingComments, ...result.body.list],\n                        });\n                    }\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                });\n        } else {\n            this.setState({\n                totalComments: newTotal,\n                comments: remainingComments,\n                allComments: remainingComments,\n            });\n        }\n    }\n\n    /**\n     * Add comment to the comment list\n     * @param {any} comment added comment\n     * @memberof Comments\n     */\n    addComment(comment) {\n        const { totalComments, allComments } = this.state;\n        const newTotal = totalComments + 1;\n\n        this.setState({\n            allComments: [comment, ...allComments],\n            totalComments: newTotal,\n            comments: [comment, ...allComments],\n        });\n    }\n\n    /**\n     * Update a specific comment in the comment list\n     * @param {any} comment updated comment\n     * @memberof Comments\n     */\n    updateComment(comment) {\n        const { comments } = this.state;\n\n        const newComments = comments.reduce((acc, cur) => {\n            let temp = cur;\n            if (cur.id === comment.id) {\n                temp = comment;\n            }\n            return [...acc, temp];\n        }, []);\n        this.setState({\n            allComments: newComments,\n            comments: newComments,\n        });\n    }\n\n    /**\n     * Handles loading the previous comments\n     * @memberof Comments\n     */\n    handleLoadMoreComments() {\n        const { allComments, comments } = this.state;\n        const { theme, api: { id: apiId } } = this.props;\n        const limit = theme.custom.commentsLimit;\n        const offset = comments.length;\n\n        CommentsAPI.all(apiId, limit, offset)\n            .then((result) => {\n                const newAllCommentList = allComments.concat(result.body.list);\n                this.setState({ allComments: newAllCommentList, comments: newAllCommentList });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n            });\n    }\n\n    /**\n     * Handles expanding the comment section\n     * @memberof Comments\n     */\n    handleExpandClick() {\n        const { expanded } = this.state;\n        this.setState({ expanded: !expanded });\n    }\n\n    /**\n     * Render method of the component\n     * @returns {React.Component} Comment html component\n     * @memberof Comments\n     */\n    render() {\n        const { classes, api } = this.props;\n        const {\n            comments, allComments, totalComments, loading,\n        } = this.state;\n        return (\n            <div className={classes.contentWrapper}>\n                <div className={classes.root}>\n                    <Typography id='itest-api-details-comments-head' variant='h4' className={classes.titleSub}>\n                        {totalComments > 0 ? totalComments + (' ') : ''}\n                        <FormattedMessage id='Apis.Details.Comments.title' defaultMessage='Comments' />\n                    </Typography>\n                </div>\n\n                <div className={classes.paper}>\n                    <CommentAdd\n                        api={api}\n                        commentsUpdate={this.addComment}\n                        addComment={this.addComment}\n                        allComments={allComments}\n                        replyTo={null}\n                        cancelButton\n                    />\n                </div>\n\n                {loading && (\n                    <div className={classes.paperProgress}>\n                        <CircularProgress size={24} />\n                    </div>\n                )}\n                {!loading && totalComments === 0\n                    && (\n                        <div className={classes.genericMessageWrapper}>\n                            <InlineMessage type='info' className={classes.dialogContainer}>\n                                <Typography variant='h5' component='h3'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Comments.no.comments'\n                                        defaultMessage='No Comments Yet'\n                                    />\n                                </Typography>\n                                <Typography component='p'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Comments.no.comments.content'\n                                        defaultMessage='No comments available for this API yet'\n                                    />\n                                </Typography>\n                            </InlineMessage>\n                        </div>\n                    )}\n                <Comment\n                    comments={comments}\n                    api={api}\n                    allComments={allComments}\n                    onDeleteComment={this.onDeleteComment}\n                    updateComment={this.updateComment}\n                />\n                {totalComments > comments.length && (\n                    <div className={classes.contentWrapper}>\n                        <Grid container spacing={4} className={classes.root}>\n                            <Grid item>\n                                <Typography className={classes.verticalSpace} variant='body1'>\n                                    <a\n                                        className={classes.link + ' ' + classes.loadMoreLink}\n                                        onClick={this.handleLoadMoreComments}\n                                        onKeyDown={this.handleLoadMoreComments}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Comments.load.previous.comments'\n                                            defaultMessage='Show More'\n                                        />\n                                    </a>\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Typography className={classes.verticalSpace} variant='body1'>\n                                    {'(' + comments.length + ' of ' + totalComments + ')'}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nComments.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    api: PropTypes.instanceOf(Object).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Comments));\n","/* eslint-disable react/prop-types */\n/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography, Tooltip } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Box from '@material-ui/core/Box';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ConfirmDialog from 'AppComponents/Shared/ConfirmDialog';\nimport CommentsAPI from 'AppData/Comments';\nimport API from 'AppData/api';\nimport CommentEdit from './CommentEdit';\nimport CommentOptions from './CommentOptions';\nimport CommentAdd from './CommentAdd';\n\ndayjs.extend(relativeTime);\n\nconst styles = (theme) => ({\n    link: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        cursor: 'pointer',\n    },\n    commentIcon: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    commentText: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        marginTop: 0,\n        width: '99%',\n        whiteSpace: 'pre-wrap',\n        overflowWrap: 'break-word',\n        wordBreak: 'break-all',\n    },\n    root: {\n        marginTop: theme.spacing(1),\n    },\n    contentWrapper: {\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n    },\n    contentWrapperOverview: {\n        background: 'transparent',\n        width: '100%',\n    },\n    divider: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(2),\n        width: '60%',\n    },\n    paper: {\n        margin: 0,\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(3),\n        paddingBottom: theme.spacing(3),\n    },\n    cleanBack: {\n        background: 'transparent',\n        width: '100%',\n        boxShadow: 'none',\n    },\n});\n\n/**\n * Display a particular comment and details\n * @class Comment\n * @extends {React.Component}\n */\nclass Comment extends React.Component {\n    /**\n     * Creates an instance of Comment\n     * @param {*} props properies passed by the parent element\n     * @memberof Comment\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            openDialog: false,\n            replyId: -1,\n            editIndex: -1,\n            deleteComment: null,\n        };\n        this.handleClickDeleteComment = this.handleClickDeleteComment.bind(this);\n        this.handleShowEdit = this.handleShowEdit.bind(this);\n        this.handleShowReply = this.handleShowReply.bind(this);\n        this.handleClickOpen = this.handleClickOpen.bind(this);\n        this.showAddComment = this.showAddComment.bind(this);\n        this.showEditComment = this.showEditComment.bind(this);\n        this.handleConfirmDialog = this.handleConfirmDialog.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.filterRemainingComments = this.filterRemainingComments.bind(this);\n        this.filterCommentToDelete = this.filterCommentToDelete.bind(this);\n        this.handleLoadMoreReplies = this.handleLoadMoreReplies.bind(this);\n        this.handleAddReply = this.handleAddReply.bind(this);\n        this.handleDeleteReply = this.handleDeleteReply.bind(this);\n    }\n\n    /**\n     * Genereates unique keys for comments\n     * @memberof Comment\n     */\n    getKey() {\n        return this.keyCount++;\n    }\n\n    /**\n     * Add two numbers.\n     * @param {string} commentToFilter comment to filter.\n     * @returns {boolean} filtering needed or not.\n     */\n    filterRemainingComments(commentToFilter) {\n        const { deleteComment } = this.state;\n        return commentToFilter.id !== deleteComment.id;\n    }\n\n    /**\n     * Add two numbers.\n     * @param {JSON} commentToFilter comment to filter.\n     * @returns {string} id of the comment.\n     */\n    filterCommentToDelete(commentToFilter) {\n        const { deleteComment } = this.state;\n        return commentToFilter.id === deleteComment.parentCommentId;\n    }\n\n    /**\n     * Shows the component to add a new comment\n     * @param {any} id of comment\n     * @memberof Comment\n     */\n    showAddComment(id) {\n        this.setState({ replyId: id });\n    }\n\n    /**\n     * Shows the component to edit a comment\n     * @param {any} index Index of comment in the array\n     * @memberof Comment\n     */\n    showEditComment(index) {\n        const { editIndex } = this.state;\n        if (editIndex === -1) {\n            this.setState({ editIndex: index });\n        }\n    }\n\n    /**\n     * Hides the component to edit a comment\n     * @param {any} index Index of comment in the array\n     * @memberof Comment\n     */\n    handleShowEdit() {\n        this.setState({ editIndex: -1 });\n    }\n\n    /**\n     * Hides the component to add a new comment\n     * @param {any} index Index of comment in the array\n     * @memberof Comment\n     */\n    handleShowReply() {\n        this.setState({ replyId: -1 });\n    }\n\n    /**\n     * Shows the confimation dialog to delete a comment\n     * @param {Object} comment Comment that has to be deleted\n     * @memberof Comment\n     */\n    handleClickOpen(comment) {\n        const { editIndex } = this.state;\n        if (editIndex === -1) {\n            this.setState({ deleteComment: comment, openDialog: true });\n        }\n    }\n\n    /**\n     * Hides the confimation dialog to delete a comment\n     * @memberof Comment\n     */\n    handleClose() {\n        this.setState({ openDialog: false });\n    }\n\n    /**\n     * Handles the Confirm Dialog\n     * @param {*} message properies passed by the Confirm Dialog\n     * @memberof Comment\n     */\n    handleConfirmDialog(message) {\n        if (message) {\n            this.handleClickDeleteComment();\n        } else {\n            this.handleClose();\n        }\n    }\n\n    /**\n     * Handles loading more comment replies\n     * @param {Object} comment comment for which replies should be loaded\n     * @memberof Comments\n     */\n    handleLoadMoreReplies(comment) {\n        const { api: { id: apiId }, comments, updateComment } = this.props;\n        const { id, replies: { count, list } } = comment;\n        const restApi = new API();\n\n        restApi\n            .getAllCommentReplies(apiId, id, 3, count)\n            .then((result) => {\n                if (result.body) {\n                    const { list: replyList, count: replyCount } = result.body;\n                    const existingComment = comments.find((entry) => entry.id === id);\n\n                    const newRepliesList = list.concat(replyList);\n                    const newCount = count + replyCount;\n                    const newLimit = newCount <= 3 ? 3 : newCount;\n\n                    const updatedComment = {\n                        ...existingComment,\n                        replies: {\n                            count: newCount,\n                            list: newRepliesList,\n                            pagination: { ...existingComment.replies.pagination, limit: newLimit },\n                        },\n                    };\n                    if (updateComment) {\n                        updateComment(updatedComment);\n                    }\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n            });\n    }\n\n    /**\n     * Handles deleting a comment\n     * @memberof Comment\n     */\n    handleClickDeleteComment() {\n        const apiClient = new CommentsAPI();\n\n        const { deleteComment } = this.state;\n        const {\n            api, onDeleteComment, intl,\n        } = this.props;\n        const apiId = api.id;\n        const commentIdOfCommentToDelete = deleteComment.id;\n        const parentCommentIdOfCommentToDelete = deleteComment.parentCommentId;\n        this.handleClose();\n\n        apiClient\n            .deleteComment(apiId, commentIdOfCommentToDelete)\n            .then(() => {\n                if (parentCommentIdOfCommentToDelete === null) {\n                    if (onDeleteComment) {\n                        onDeleteComment(commentIdOfCommentToDelete);\n                    }\n                    Alert.info('Comment has been successfully deleted');\n                } else {\n                    this.handleDeleteReply(parentCommentIdOfCommentToDelete, commentIdOfCommentToDelete);\n                    Alert.info('Reply comment has been successfully deleted');\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    Alert.error(error.response.body.message);\n                } else {\n                    Alert.error(\n                        intl.formatMessage({\n                            defaultMessage: 'Something went wrong while deleting comment',\n                            id: 'Apis.Details.Comments.Comment.something.went.wrong',\n                        })\n                        + ' - '\n                        + commentIdOfCommentToDelete,\n                    );\n                }\n            });\n    }\n\n    /**\n     * Delete reply\n     * @param {string} parentCommentId parent comment of reply\n     * @param {string} replyCommentId deleted reply comment\n     * @memberof Comments\n     */\n    handleDeleteReply(parentCommentId, replyCommentId) {\n        const { comments, updateComment, api: { id: apiId } } = this.props;\n        const existingComment = comments.find((item) => item.id === parentCommentId);\n        const { replies } = existingComment;\n        // updated values\n        const updatedRepliesList = replies.list.filter((reply) => reply.id !== replyCommentId);\n        const newTotal = replies.pagination.total - 1;\n        const newLimit = replies.pagination.limit > newTotal ? newTotal : replies.pagination.limit;\n        const newCount = replies.count - 1;\n\n        if (newTotal > newCount) {\n            const restApi = new API();\n            restApi\n                .getAllCommentReplies(apiId, parentCommentId, 1, newLimit - 1)\n                .then((result) => {\n                    if (result.body) {\n                        const updatedComment = {\n                            ...existingComment,\n                            replies: {\n                                ...replies,\n                                list: [...updatedRepliesList, ...result.body.list],\n                                pagination: {\n                                    ...replies.pagination,\n                                    total: newTotal,\n                                },\n                            },\n                        };\n                        if (updateComment) {\n                            updateComment(updatedComment);\n                        }\n                    }\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                });\n        } else {\n            const updatedComment = {\n                ...existingComment,\n                replies: {\n                    ...replies,\n                    count: newCount,\n                    list: updatedRepliesList,\n                    pagination: {\n                        ...replies.pagination,\n                        limit: newLimit,\n                        total: newTotal,\n                    },\n                },\n            };\n            if (updateComment) {\n                updateComment(updatedComment);\n            }\n        }\n    }\n\n    /**\n     * Add new reply\n     * @param {Object} comment added reply comment\n     * @memberof Comments\n     */\n    handleAddReply(comment) {\n        const { comments, updateComment } = this.props;\n        const { parentCommentId } = comment;\n        const existingComment = comments.find((item) => item.id === parentCommentId);\n        const { replies } = existingComment;\n        const newCount = (replies.count || 0) + 1;\n        const newLimit = newCount <= 3 ? 3 : newCount;\n        const updatedComment = {\n            ...existingComment,\n            replies: {\n                ...replies,\n                count: newCount,\n                list: [...replies.list, comment],\n                pagination: {\n                    ...replies.pagination,\n                    limit: newLimit,\n                    offset: replies.pagination.offset || 0,\n                    total: replies.pagination.total + 1,\n                },\n            },\n        };\n        if (updateComment) {\n            updateComment(updatedComment);\n        }\n    }\n\n    /**\n     * Render method of the component\n     * @returns {React.Component} Comment html component\n     * @memberof Comment\n     */\n    render() {\n        const {\n            classes, comments, api, allComments, isOverview,\n        } = this.props;\n\n        const { editIndex, openDialog, replyId } = this.state;\n        return (\n            <>\n                <div className={classes.paper}>\n                    {comments\n                        && comments\n                            .slice(0)\n                            .map((comment, index) => (\n                                <div key={comment.id} className={classes.contentWrapper}>\n                                    {index !== 0 && <Divider light className={classes.divider} />}\n                                    <Grid\n                                        md={8}\n                                        container\n                                        spacing={1}\n                                        className={classNames({ [classes.root]: !isOverview })}\n                                    >\n                                        <Grid item>\n                                            <Icon className={classes.commentIcon}>account_circle</Icon>\n                                        </Grid>\n                                        <Grid item xs zeroMinWidth>\n                                            <Typography noWrap className={classes.commentText}>\n                                                {(comment.commenterInfo && comment.commenterInfo.firstName)\n                                                    ? (comment.commenterInfo.firstName + comment.commenterInfo.lastName)\n                                                    : comment.createdBy}\n                                            </Typography>\n                                            <Tooltip title={comment.createdTime} aria-label={comment.createdTime}>\n                                                <Typography noWrap className={classes.commentText} variant='caption'>\n                                                    {dayjs(comment.createdTime).fromNow()}\n                                                </Typography>\n                                            </Tooltip>\n\n                                            <Typography className={classes.commentText}>{comment.content}</Typography>\n\n                                            {!api.isRevision && (\n                                                <CommentOptions\n                                                    comment={comment}\n                                                    editIndex={editIndex}\n                                                    index={index}\n                                                    showAddComment={this.showAddComment}\n                                                    handleClickOpen={this.handleClickOpen}\n                                                    showEditComment={this.showEditComment}\n                                                />\n                                            )}\n\n                                            {comment.id === replyId && (\n                                                <Box ml={6} mb={2}>\n                                                    <CommentAdd\n                                                        api={api}\n                                                        replyTo={comment.id}\n                                                        allComments={allComments}\n                                                        handleShowReply={this.handleShowReply}\n                                                        cancelButton\n                                                        addReply={this.handleAddReply}\n                                                    />\n                                                </Box>\n                                            )}\n\n                                            {comment.replies && comment.replies.list.map((reply, commentIndex) => (\n                                                <>\n                                                    <Box ml={8}>\n                                                        {commentIndex !== 0\n                                                            && <Divider light className={classes.divider} />}\n                                                        <Grid container spacing={1} className={classes.root}>\n                                                            <Grid item>\n                                                                <Icon className={classes.commentIcon}>\n                                                                    account_circle\n                                                                </Icon>\n                                                            </Grid>\n                                                            <Grid item xs zeroMinWidth>\n                                                                <Typography noWrap className={classes.commentText}>\n                                                                    {(reply.commenterInfo\n                                                                        && reply.commenterInfo.fullName)\n                                                                        ? reply.commenterInfo.fullName\n                                                                        : reply.createdBy}\n                                                                </Typography>\n                                                                <Tooltip\n                                                                    title={comment.createdTime}\n                                                                    aria-label={comment.createdTime}\n                                                                >\n                                                                    <Typography\n                                                                        noWrap\n                                                                        className={classes.commentText}\n                                                                        variant='caption'\n                                                                    >\n                                                                        {dayjs(reply.createdTime).fromNow()}\n                                                                    </Typography>\n                                                                </Tooltip>\n\n                                                                {commentIndex !== editIndex && (\n                                                                    <Typography className={classes.commentText}>\n                                                                        {reply.content}\n                                                                    </Typography>\n                                                                )}\n\n                                                                {commentIndex === editIndex && (\n                                                                    <CommentEdit\n                                                                        api={api}\n                                                                        allComments={reply}\n                                                                        comment={reply}\n                                                                        toggleShowEdit={this.handleShowEdit}\n                                                                    />\n                                                                )}\n\n                                                                {!api.isRevision && (\n                                                                    <CommentOptions\n                                                                        comment={reply}\n                                                                        editIndex={editIndex}\n                                                                        index={commentIndex}\n                                                                        showAddComment={this.showAddComment}\n                                                                        handleClickOpen={this.handleClickOpen}\n                                                                        showEditComment={this.showEditComment}\n                                                                    />\n                                                                )}\n                                                            </Grid>\n                                                        </Grid>\n                                                    </Box>\n                                                </>\n                                            ))}\n                                            {comment.replies && comment.replies.count < comment.replies.pagination.total\n                                                && (\n                                                    <div className={classes.contentWrapper}>\n                                                        <Grid container spacing={4} className={classes.root}>\n                                                            <Grid item>\n                                                                <Typography\n                                                                    className={classes.verticalSpace}\n                                                                    variant='body1'\n                                                                >\n                                                                    <a\n                                                                        className={classes.link + ' '\n                                                                            + classes.loadMoreLink}\n                                                                        onClick={\n                                                                            () => this.handleLoadMoreReplies(comment)\n                                                                        }\n                                                                        onKeyDown={\n                                                                            () => this.handleLoadMoreReplies(comment)\n                                                                        }\n                                                                    >\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.Comments.Comment.load.'\n                                                                                + 'more.replies'}\n                                                                            defaultMessage='Show More Replies'\n                                                                        />\n                                                                    </a>\n                                                                </Typography>\n                                                            </Grid>\n                                                            <Grid item>\n                                                                <Typography\n                                                                    className={classes.verticalSpace}\n                                                                    zvariant='body1'\n                                                                >\n                                                                    {'(' + (comment.replies.count) + ' of '\n                                                                        + comment.replies.pagination.total + ')'}\n                                                                </Typography>\n                                                            </Grid>\n                                                        </Grid>\n                                                    </div>\n                                                )}\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            ))}\n                </div>\n                <ConfirmDialog\n                    key='key-dialog'\n                    labelCancel='Cancel'\n                    title='Confirm Delete'\n                    message='Are you sure you want to delete this comment?'\n                    labelOk='Yes'\n                    callback={this.handleConfirmDialog}\n                    open={openDialog}\n                />\n            </>\n        );\n    }\n}\n\nComment.defaultProps = {\n    isOverview: false,\n};\n\nComment.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.instanceOf(Object).isRequired,\n    allComments: PropTypes.instanceOf(Array).isRequired,\n    comments: PropTypes.instanceOf(Array).isRequired,\n    isOverview: PropTypes.bool,\n    updateComment: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(Comment));\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { TextField, Button, Typography } from '@material-ui/core';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Grid from '@material-ui/core/Grid';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api';\n\nconst styles = (theme) => ({\n    textField: {\n        marginTop: 0,\n        width: '87.5%',\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        marginTop: theme.spacing(2),\n    },\n    category: {\n        width: '12%',\n        marginRight: '0.5%',\n    },\n});\n\n/**\n * Display a component to edit a comment\n * @class CommmentEdit\n * @extends {React.Component}\n */\nclass CommentEdit extends React.Component {\n    /**\n     * Creates an instance of CommentEdit\n     * @param {*} props properies passed by the parent element\n     * @memberof CommentEdit\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            commentText: '',\n            category: '',\n            currentLength: 0,\n        };\n        this.inputChange = this.inputChange.bind(this);\n        this.handleCategoryChange = this.handleCategoryChange.bind(this);\n        this.handleClickUpdateComment = this.handleClickUpdateComment.bind(this);\n        this.handleClickCancel = this.handleClickCancel.bind(this);\n        this.filterCommentToUpdate = this.filterCommentToUpdate.bind(this);\n        this.filterCommentToUpdateReply = this.filterCommentToUpdateReply.bind(this);\n    }\n\n    /**\n     * @memberof Comments\n     */\n    componentDidMount() {\n        const { comment } = this.props;\n        this.setState({\n            commentText: comment.commentText,\n            category: comment.category,\n            currentLength: comment.commentText.length,\n        });\n    }\n\n    /**\n     * Hides the component to edit a comment when cancelled\n     * @memberof CommentEdit\n     */\n    handleClickCancel() {\n        const { toggleShowEdit, commentsUpdate, allComments } = this.props;\n        toggleShowEdit();\n        commentsUpdate(allComments);\n    }\n\n    /**\n     * Handles category when the category is changed\n     * @param {any} event Drop down select event\n     * @memberof CommentEdit\n     */\n    handleCategoryChange(event) {\n        this.setState({ category: event.target.value });\n    }\n\n    /**\n     * Handles updating a comment\n     * @memberof CommentEdit\n     */\n    handleClickUpdateComment() {\n        const {\n            api, comment, allComments, toggleShowEdit, commentsUpdate,\n        } = this.props;\n        const { category, commentText } = this.state;\n        const Api = new API();\n        const apiId = api.id;\n        const commentToEdit = comment;\n        commentToEdit.commentText = commentText.trim();\n        commentToEdit.category = category;\n\n        // to check whether a string does not contain only whitehis spaces\n        if (comment.commentText.replace(/\\s/g, '').length) {\n            Api.updateComment(apiId, commentToEdit.commentId, commentToEdit)\n                .then((result) => {\n                    const updatedComment = result.body;\n                    if (commentToEdit.parentCommentId === undefined) {\n                        const index = allComments.findIndex(this.filterCommentToUpdate);\n                        allComments[index].category = updatedComment.category;\n                        allComments[index].commentText = updatedComment.commentText;\n                    } else {\n                        const index = allComments.findIndex(this.filterCommentToUpdateReply);\n                        const replyIndex = allComments[index].replies.findIndex(this.filterCommentToUpdate);\n                        allComments[index].replies[replyIndex] = updatedComment;\n                    }\n                    toggleShowEdit();\n                    commentsUpdate(allComments);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    if (error.response) {\n                        Alert.error(error.response.body.message);\n                    } else {\n                        Alert.error('Something went wrong while adding the comment');\n                    }\n                });\n        } else {\n            Alert.error('You cannot enter a blank comment');\n        }\n    }\n\n    /**\n     * Filters the comment to update\n     * @memberof CommentAdd\n     */\n    filterCommentToUpdate(commentToFilter) {\n        const { comment } = this.props;\n        return commentToFilter.commentId === comment.commentId;\n    }\n\n    /**\n     * Filters the comment to update\n     * @memberof CommentAdd\n     */\n    filterCommentToUpdateReply(commentToFilter) {\n        const { comment } = this.props;\n        return commentToFilter.commentId === comment.parentCommentId;\n    }\n\n    /**\n     * Handles the comment text when input changes\n     * @param {Object} {target} target element\n     * @memberof CommentEdit\n     */\n    inputChange({ target }) {\n        this.setState({ commentText: target.value, currentLength: target.value.length });\n    }\n\n    /**\n     * Render method of the component\n     * @returns {React.Component} Comment html component\n     * @memberof CommentEdit\n     */\n    render() {\n        const { classes, theme } = this.props;\n        const { category, commentText, currentLength } = this.state;\n        return (\n            <div>\n                <FormControl className={classes.category}>\n                    <Select value={category} onChange={this.handleCategoryChange}>\n                        <MenuItem value='General'>General</MenuItem>\n                        <MenuItem value='Feature Request'>Feature Request</MenuItem>\n                        <MenuItem value='Bug Report'>Bug Report</MenuItem>\n                    </Select>\n                </FormControl>\n                <TextField\n                    id='multiline-static'\n                    autoFocus\n                    multiline\n                    className={classes.textField}\n                    margin='normal'\n                    placeholder='Write a comment'\n                    inputProps={{ maxLength: theme.custom.maxCommentLength }}\n                    value={commentText}\n                    onChange={this.inputChange}\n                />\n                <Typography className={classes.commentText} align='right'>\n                    {currentLength + '/' + theme.custom.maxCommentLength}\n                </Typography>\n                <Grid container spacing={2}>\n                    <Grid item>\n                        <Button variant='contained' color='primary' onClick={() => this.handleClickUpdateComment()}>\n                            Save\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        <Button onClick={() => this.handleClickCancel()} className={classes.button}>\n                            Cancel\n                        </Button>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nCommentEdit.defaultProps = {\n    commentsUpdate: null,\n};\n\nCommentEdit.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    api: PropTypes.instanceOf(Object).isRequired,\n    allComments: PropTypes.instanceOf(Array).isRequired,\n    // todo make commentsUpdate required once comment edit feature is supported\n    commentsUpdate: PropTypes.func,\n    toggleShowEdit: PropTypes.func.isRequired,\n    comment: PropTypes.instanceOf(Object).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles, { withTheme: true })(CommentEdit);\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid/Grid';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport AuthManager from 'AppData/AuthManager';\nimport Utils from 'AppData/Utils';\n\nconst styles = (theme) => ({\n    link: {\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n        '& span.MuiButton-label': {\n            color: theme.palette.primary.main,\n            fontWeight: '400',\n        },\n        cursor: 'pointer',\n    },\n    time: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        marginTop: theme.spacing(0.3),\n    },\n    verticalSpace: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    disable: {\n        color: theme.palette.grey[200],\n    },\n    commentIcon: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    commentText: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        marginTop: theme.spacing.unig,\n        width: '100%',\n        whiteSpace: 'pre-wrap',\n        overflowWrap: 'break-word',\n    },\n    root: {\n        marginTop: theme.spacing(2.5),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing.unig,\n    },\n});\n\n/**\n * Component to display options of the comment\n * @class CommentOptions\n * @extends {React.Component}\n */\nclass CommentOptions extends React.Component {\n    /**\n     * Creates an instance of CommentAdd\n     * @param {*} props properies passed by the parent element\n     * @memberof CommentAdd\n     */\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.showAddComment = this.showAddComment.bind(this);\n        this.showEditComment = this.showEditComment.bind(this);\n        this.handleClickOpen = this.handleClickOpen.bind(this);\n    }\n\n    /**\n     * Shows the confimation dialog to delete a comment\n     * @param {Object} comment Comment that has to be deleted\n     * @memberof Comment\n     */\n    handleClickOpen(comment) {\n        const { editIndex, handleClickOpen } = this.props;\n        if (editIndex === -1) {\n            handleClickOpen(comment);\n        }\n    }\n\n    /**\n     * Shows the component to add a new comment\n     * @param {any} index Index of comment in the array\n     * @memberof CommentOptions\n     */\n    showAddComment(replyId) {\n        const { showAddComment } = this.props;\n        showAddComment(replyId);\n    }\n\n    /**\n     * Shows the component to edit a comment\n     * @param {any} index Index of comment in the array\n     * @memberof Comment\n     */\n    showEditComment(index) {\n        const { editIndex, showEditComment } = this.props;\n        if (editIndex === -1) {\n            showEditComment(index);\n        }\n    }\n\n    /**\n     * Returns the date and time in a particular format\n     * @param {any} timestamp Timestamp that has to be formatted\n     * @memberof CommentOptions\n     */\n    displayDate(timestamp) {\n        const localDate = new Date(timestamp);\n        const localDateString = localDate.toLocaleDateString(undefined, {\n            day: 'numeric',\n            month: 'short',\n            year: 'numeric',\n        });\n        const localTimeString = localDate.toLocaleTimeString(undefined, {\n            hour: '2-digit',\n            minute: '2-digit',\n        });\n\n        return localDateString + ' ' + localTimeString;\n    }\n\n    /**\n     * Render method of the component\n     * @returns {React.Component} Comment html component\n     * @memberof CommentOptions\n     */\n    render() {\n        const {\n            classes, comment,\n        } = this.props;\n        const user = AuthManager.getUser();\n        const username = Utils.getUserNameWithoutDomain(user.name);\n        const canDelete = (comment.createdBy === username) || user.isAdmin();\n        // const canModify = comment.createdBy === username;\n        return (\n            <Grid container spacing={1} className={classes.verticalSpace} key={comment.id}>\n\n                {/* only the comment owner or admin can delete a comment */}\n                {canDelete && [\n                    <Grid item key='key-delete'>\n                        <Button\n                            size='small'\n                            onClick={() => this.handleClickOpen(comment)}\n                            color='primary'\n                            aria-label={'Delete comment ' + comment.content}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Comments.CommentOptions.delete'\n                                defaultMessage='Delete'\n                            />\n                        </Button>\n                    </Grid>,\n                ]}\n                {comment.parentCommentId === null && [\n                    <Grid item key='key-reply'>\n                        <Button\n                            size='small'\n                            onClick={() => this.showAddComment(comment.id)}\n                            color='primary'\n                            aria-label={'Reply to comment ' + comment.content}\n                        >\n                            <FormattedMessage id='Apis.Details.Comments.CommentOptions.reply' defaultMessage='Reply' />\n                        </Button>\n                    </Grid>,\n                ]}\n\n                {/* only the comment owner can modify the comment from the exact entry point */}\n                {/* {canModify && [\n                    <Grid item key='key-edit'>\n                        <Button\n                            size='small'\n                            className={classes.link}\n                            onClick={() => this.showAddComment(comment.id)}\n                            color='primary'\n                        >\n                            <FormattedMessage id='Apis.Details.Comments.CommentOptions.reply' defaultMessage='Reply' />\n                        </Button>\n                    </Grid>,\n                ]} */}\n\n            </Grid>\n        );\n    }\n}\n\nCommentOptions.defaultProps = {\n    showAddComment: null,\n};\n\nCommentOptions.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    editIndex: PropTypes.number.isRequired,\n    comment: PropTypes.instanceOf(Object).isRequired,\n    handleClickOpen: PropTypes.func.isRequired,\n    showEditComment: PropTypes.func.isRequired,\n    showAddComment: PropTypes.func,\n    theme: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles, { withTheme: true })(CommentOptions);\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport CreateScope from './CreateScope';\nimport EditScope from './EditScope';\nimport Scopes from './Scopes';\n\nconst Scope = () => {\n    const [api, updateAPI] = useAPI();\n    const urlPrefix = api.isAPIProduct() ? 'api-products' : 'apis';\n    return (\n        <Switch>\n            <Route exact path={'/' + urlPrefix + '/:api_uuid/scopes/'} component={Scopes} />\n            <Route\n                exact\n                path={'/' + urlPrefix + '/:api_uuid/scopes/create'}\n                component={(props) => <CreateScope api={api} {...props} updateAPI={updateAPI} />}\n            />\n            <Route\n                exact\n                path={'/' + urlPrefix + '/:api_uuid/scopes/edit'}\n                component={(props) => <EditScope api={api} {...props} updateAPI={updateAPI} />}\n            />\n            <Route component={ResourceNotFound} />\n        </Switch>\n    );\n};\n\nScope.propTypes = {\n    api: PropTypes.shape({\n        id: PropTypes.string,\n        additionalProperties: PropTypes.shape({\n            key: PropTypes.string,\n            value: PropTypes.string,\n        }).isRequired,\n    }).isRequired,\n};\n\nexport default Scope;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport ChipInput from 'material-ui-chip-input'; // DEPRECATED: Do not COPY and use this component.\nimport APIValidation from 'AppData/APIValidation';\nimport base64url from 'base64url';\nimport Error from '@material-ui/icons/Error';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Chip from '@material-ui/core/Chip';\nimport Icon from '@material-ui/core/Icon';\nimport Paper from '@material-ui/core/Paper';\nimport { red } from '@material-ui/core/colors/';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Api from 'AppData/api';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n        display: 'flex',\n        flexDirection: 'column',\n        padding: 20,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(3),\n    },\n    titleLink: {\n        color: theme.palette.primary.main,\n        marginRight: theme.spacing(1),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    FormControl: {\n        padding: `0 0 0 ${theme.spacing(1)}px`,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormControlOdd: {\n        padding: `0 0 0 ${theme.spacing(1)}px`,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormControlLabel: {\n        marginBottom: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        fontSize: theme.typography.caption.fontSize,\n    },\n    buttonSection: {\n        paddingTop: theme.spacing(3),\n    },\n    saveButton: {\n        marginRight: theme.spacing(1),\n    },\n    helpText: {\n        color: theme.palette.text.hint,\n        marginTop: theme.spacing(1),\n    },\n    extraPadding: {\n        paddingLeft: theme.spacing(2),\n    },\n    addNewOther: {\n        paddingTop: 40,\n    },\n    titleGrid: {\n        ' & .MuiGrid-item': {\n            padding: 0,\n            margin: 0,\n        },\n    },\n    descriptionForm: {\n        marginTop: theme.spacing(1),\n    },\n    progress: {\n        marginLeft: theme.spacing(1),\n    },\n});\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * Create new scopes for an API\n * @class CreateScope\n * @extends {Component}\n */\nclass CreateScope extends React.Component {\n    /**\n     * constructor\n     * @param {JSON} props parent props.\n     */\n    constructor(props) {\n        super(props);\n        this.api = new Api();\n        this.api_uuid = props.match.params.api_uuid;\n        const valid = [];\n        valid.name = {\n            invalid: false,\n            error: '',\n        };\n        valid.description = {\n            invalid: false,\n            error: '',\n        };\n        valid.displayName = {\n            invalid: false,\n            error: '',\n        };\n        this.state = {\n            apiScopes: null,\n            apiScope: {},\n            validRoles: [],\n            valid,\n            roleValidity: true,\n            invalidRoles: [],\n            scopeAddDisabled: false,\n        };\n        this.addScope = this.addScope.bind(this);\n        this.validateScopeName = this.validateScopeName.bind(this);\n        this.handleScopeNameInput = this.handleScopeNameInput.bind(this);\n        this.validateScopeDescription = this.validateScopeDescription.bind(this);\n        this.validateScopeDisplayName = this.validateScopeDisplayName.bind(this);\n        this.handleRoleAddition = this.handleRoleAddition.bind(this);\n        this.handleRoleDeletion = this.handleRoleDeletion.bind(this);\n    }\n\n    handleRoleDeletion = (role) => {\n        const { validRoles, invalidRoles } = this.state;\n        if (invalidRoles.includes(role)) {\n            const invalidRolesArray = invalidRoles.filter((existingRole) => existingRole !== role);\n            this.setState({ invalidRoles: invalidRolesArray });\n            if (invalidRolesArray.length === 0) {\n                this.setState({ roleValidity: true });\n            }\n        } else {\n            this.setState({ validRoles: validRoles.filter((existingRole) => existingRole !== role) });\n        }\n    };\n\n    /**\n     * Handle ScopeName Input.\n     * @param {JSON} event click event.\n     */\n    handleScopeNameInput({ target: { id, value } }) {\n        this.validateScopeName(id, value);\n    }\n\n    /**\n     * Handle Role Addition.\n     * @param {string} role The first number.\n     */\n    handleRoleAddition(role) {\n        const { validRoles, invalidRoles } = this.state;\n        const promise = APIValidation.role.validate(base64url.encode(role));\n        promise\n            .then(() => {\n                this.setState({\n                    roleValidity: true,\n                    validRoles: [...validRoles, role],\n                });\n            })\n            .catch((error) => {\n                if (error.status === 404) {\n                    this.setState({\n                        roleValidity: false,\n                        invalidRoles: [...invalidRoles, role],\n                    });\n                } else {\n                    Alert.error('Error when validating role: ' + role);\n                    console.error('Error when validating role ' + error);\n                }\n            });\n    }\n\n    /**\n     * validate Scope Description.\n     * @param {JSON} event click event object.\n     */\n    validateScopeDescription({ target: { id, value } }) {\n        const { valid, apiScope } = this.state;\n        const { intl } = this.props;\n        apiScope[id] = value;\n        if (value && value.length !== '' && value.length >= 512) {\n            valid[id].invalid = true;\n            valid[id].error = intl.formatMessage({\n                id: 'Scopes.Create.Scope.description.length.exceeded',\n                defaultMessage: 'Exceeds maximum length limit of 512 characters',\n            });\n        } else {\n            valid[id].invalid = false;\n            valid[id].error = '';\n        }\n        this.setState({\n            valid,\n            apiScope,\n        });\n    }\n\n    /**\n     * validate Scope Display Name.\n     * @param {JSON} event click event object.\n     */\n    validateScopeDisplayName({ target: { id, value } }) {\n        const { valid, apiScope } = this.state;\n        const { intl } = this.props;\n        apiScope[id] = value;\n        if (value && value.length !== '' && value.length >= 512) {\n            valid[id].invalid = true;\n            valid[id].error = intl.formatMessage({\n                id: 'Scopes.Create.Scope.display.name.length.exceeded',\n                defaultMessage: 'Exceeds maximum length limit of 512 characters',\n            });\n        } else {\n            valid[id].invalid = false;\n            valid[id].error = '';\n        }\n        this.setState({\n            valid,\n            apiScope,\n        });\n    }\n\n    /**\n     * validate Scope Name.\n     * @param {string} id click event object.\n     * @param {string} value click event object.\n     * @returns {boolean} valid state\n     */\n    validateScopeName(id, value) {\n        const { valid, apiScope } = this.state;\n        const {\n            api: { scopes },\n        } = this.props;\n        const { intl } = this.props;\n        apiScope[id] = value;\n        valid[id].invalid = !(value && value.length > 0);\n        // length validation\n        if (valid[id].invalid) {\n            valid[id].error = 'Scope name cannot be empty';\n        }\n        valid[id].invalid = !(value && value.length <= 60);\n        if (valid[id].invalid) {\n            valid[id].error = intl.formatMessage({\n                id: 'Scopes.Create.Scope.name.length.exceeded',\n                defaultMessage: 'Exceeds maximum length limit of 60 characters',\n            });\n        }\n\n        if (/\\s/.test(value)) {\n            valid[id].invalid = true;\n            valid[id].error = 'Scope name cannot have spaces';\n        }\n\n        const exist = scopes.find((scope) => {\n            return scope.name === value;\n        });\n        if (!valid[id].invalid && exist) {\n            valid[id].invalid = true;\n            valid[id].error = 'Scope name already exist';\n        }\n        if (!valid[id].invalid && /[!@#$%^&*(),?\"{}[\\]|<>\\t\\n]|(^apim:)/i.test(value)) {\n            valid[id].invalid = true;\n            valid[id].error = 'Field contains special characters';\n        }\n        if (!valid[id].invalid) {\n            const promise = APIValidation.scope.validate(base64url.encode(value));\n            promise\n                .then(() => {\n                    valid[id].invalid = true;\n                    valid[id].error = 'Scope name is already used by another API';\n                    this.setState({\n                        valid,\n                    });\n                })\n                .catch((error) => {\n                    if (error.status === 404) {\n                        valid[id].invalid = false;\n                        valid[id].error = '';\n                        this.setState({\n                            valid,\n                        });\n                    } else {\n                        Alert.error('Error when validating scope: ' + value);\n                        console.error('Error when validating scope ' + error);\n                    }\n                });\n        }\n        if (!valid[id].invalid) {\n            valid[id].error = '';\n        }\n        this.setState({\n            valid,\n            apiScope,\n        });\n        return valid[id].invalid;\n    }\n\n    /**\n     * Add new scope\n     * @memberof Scopes\n     */\n    addScope() {\n        const {\n            intl, api, history, updateAPI,\n        } = this.props;\n        const urlPrefix = api.apiType === Api.CONSTS.APIProduct ? 'api-products' : 'apis';\n        if (this.validateScopeName('name', this.state.apiScope.name)) {\n            // return status of the validation\n            return;\n        }\n        const scope = this.state.apiScope;\n        scope.bindings = this.state.validRoles;\n        const scopes = api.scopes.map((aScope) => {\n            return aScope;\n        });\n        scopes.push({\n            scope,\n            shared: false,\n        });\n        const updateProperties = { scopes };\n        const promisedApiUpdate = updateAPI(updateProperties);\n        this.setState({ scopeAddDisabled: true });\n        promisedApiUpdate\n            .then(() => {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Scopes.CreateScope.scope.added.successfully',\n                    defaultMessage: 'Scope added successfully',\n                }));\n                const { apiScopes } = this.state;\n                const redirectURL = '/' + urlPrefix + '/' + api.id + '/scopes/';\n                history.push(redirectURL);\n                this.setState({\n                    apiScopes,\n                    apiScope: {},\n                    validRoles: [],\n                });\n            })\n            .catch((error) => {\n                const { response } = error;\n                if (response.body) {\n                    const { description } = response.body;\n                    Alert.error(description);\n                }\n            })\n            .finally(() => {\n                this.setState({ scopeAddDisabled: false });\n            });\n    }\n\n    /**\n     * Render.\n     * @returns {JSX} rendered component.\n     */\n    render() {\n        const { classes, api } = this.props;\n        const urlPrefix = api.apiType === Api.CONSTS.APIProduct ? 'api-products' : 'apis';\n        const url = `/${urlPrefix}/${api.id}/scopes`;\n        const {\n            roleValidity, validRoles, invalidRoles, scopeAddDisabled,\n        } = this.state;\n\n        return (\n            <Grid container spacing={3}>\n                <Grid item sm={12} md={12} />\n                {/*\n            Following two grids control the placement of whole create page\n            For centering the content better use `container` props, but instead used an empty grid item for flexibility\n             */}\n                <Grid item sm={0} md={0} lg={2} />\n                <Grid item sm={12} md={12} lg={8}>\n                    <Grid container spacing={5} className={classes.titleGrid}>\n                        <Grid item md={12}>\n                            <div className={classes.titleWrapper}>\n                                <Link to={url} className={classes.titleLink}>\n                                    <Typography variant='h4' component='h2'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Scopes.Scopes.heading.scope.heading'\n                                            defaultMessage='Scopes'\n                                        />\n                                    </Typography>\n                                </Link>\n                                <Icon>keyboard_arrow_right</Icon>\n                                <Typography variant='h4' component='h3'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Scopes.CreateScope.create.new.scope'\n                                        defaultMessage='Create New Scope'\n                                    />\n                                </Typography>\n                            </div>\n                        </Grid>\n                        <Grid item md={12}>\n                            <Paper elevation={0} className={classes.root}>\n                                <FormControl margin='normal'>\n                                    <TextField\n                                        id='name'\n                                        label='Name'\n                                        placeholder='Scope Name'\n                                        error={this.state.valid.name.invalid}\n                                        helperText={\n                                            this.state.valid.name.invalid ? (\n                                                this.state.valid.name.error\n                                            ) : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.CreateScope.short.description.name'\n                                                    defaultMessage='Enter Scope Name ( E.g.,: creator )'\n                                                />\n                                            )\n                                        }\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        value={this.state.apiScope.name || ''}\n                                        onChange={this.handleScopeNameInput}\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal'>\n                                    <TextField\n                                        id='displayName'\n                                        label='Display Name'\n                                        placeholder='Scope Display Name'\n                                        error={this.state.valid.displayName.invalid}\n                                        helperText={\n                                            this.state.valid.displayName.invalid ? (\n                                                this.state.valid.displayName.error\n                                            ) : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.CreateScope.short.description.name'\n                                                    defaultMessage='Enter Scope Name ( E.g.,: creator )'\n                                                />\n                                            )\n                                        }\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        value={this.state.apiScope.displayName || ''}\n                                        onChange={this.validateScopeDisplayName}\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal' classes={{ root: classes.descriptionForm }}>\n                                    <TextField\n                                        id='description'\n                                        label='Description'\n                                        variant='outlined'\n                                        placeholder='Short description about the scope'\n                                        error={this.state.valid.description.invalid}\n                                        helperText={\n                                            this.state.valid.description.invalid ? (\n                                                this.state.valid.description.error\n                                            ) : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.CreateScope.description.about.the.scope'\n                                                    defaultMessage='Short description about the scope'\n                                                />\n                                            )\n                                        }\n                                        margin='normal'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        onChange={this.validateScopeDescription}\n                                        value={this.state.apiScope.description || ''}\n                                        multiline\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal'>\n                                    <ChipInput\n                                        label='Roles'\n                                        id='roles-input'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        variant='outlined'\n                                        value={validRoles.concat(invalidRoles)}\n                                        alwaysShowPlaceholder={false}\n                                        placeholder='Enter roles and press Enter'\n                                        blurBehavior='clear'\n                                        InputProps={{\n                                            endAdornment: !roleValidity && (\n                                                <InputAdornment position='end'>\n                                                    <Error color='error' />\n                                                </InputAdornment>\n                                            ),\n                                        }}\n                                        onAdd={this.handleRoleAddition}\n                                        error={!roleValidity}\n                                        helperText={\n                                            !roleValidity ? (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.Roles.Invalid'\n                                                    defaultMessage='Role is invalid'\n                                                />\n                                            ) : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.CreateScope.roles.help'\n                                                    defaultMessage='Enter a valid role and press `Enter`.'\n                                                />\n                                            )\n                                        }\n                                        chipRenderer={({ value }, key) => (\n                                            <Chip\n                                                key={key}\n                                                label={value}\n                                                onDelete={() => {\n                                                    this.handleRoleDeletion(value);\n                                                }}\n                                                style={{\n                                                    backgroundColor: invalidRoles.includes(value) ? red[300] : null,\n                                                    margin: '8px 8px 8px 0',\n                                                    float: 'left',\n                                                }}\n                                            />\n                                        )}\n                                    />\n                                </FormControl>\n                                <div className={classes.addNewOther}>\n                                    <Button\n                                        id='scope-save-btn'\n                                        variant='contained'\n                                        color='primary'\n                                        onClick={this.addScope}\n                                        disabled={\n                                            isRestricted(['apim:api_create'], api)\n                                            || this.state.valid.name.invalid\n                                            || invalidRoles.length !== 0\n                                            || scopeAddDisabled\n                                            || api.isRevision\n                                            || this.state.valid.description.invalid\n                                        }\n                                        className={classes.saveButton}\n                                    >\n                                        {scopeAddDisabled ? (\n                                            <>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.CreateScope.saving'\n                                                    defaultMessage='Saving'\n                                                />\n                                                <CircularProgress size={16} classes={{ root: classes.progress }} />\n                                            </>\n                                        ) : (\n                                            <FormattedMessage\n                                                id='Apis.Details.Scopes.CreateScope.save'\n                                                defaultMessage='Save'\n                                            />\n                                        )}\n                                    </Button>\n                                    <Button\n                                        component={Link}\n                                        to={url}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Scopes.CreateScope.cancel'\n                                            defaultMessage='Cancel'\n                                        />\n                                    </Button>\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nCreateScope.propTypes = {\n    match: PropTypes.shape({\n        params: PropTypes.shape({}),\n    }),\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    history: PropTypes.shape({ push: PropTypes.func }).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    updateAPI: PropTypes.func.isRequired,\n};\n\nCreateScope.defaultProps = {\n    match: { params: {} },\n};\n\nexport default injectIntl(withStyles(styles)(CreateScope));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport FormControl from '@material-ui/core/FormControl';\nimport ChipInput from 'material-ui-chip-input'; // DEPRECATED: Do not COPY and use this component.\nimport APIValidation from 'AppData/APIValidation';\nimport Chip from '@material-ui/core/Chip';\nimport { red } from '@material-ui/core/colors/';\nimport Icon from '@material-ui/core/Icon';\nimport base64url from 'base64url';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Error from '@material-ui/core/SvgIcon/SvgIcon';\nimport Api from 'AppData/api';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n        display: 'flex',\n        flexDirection: 'column',\n        padding: 20,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(3),\n    },\n    titleLink: {\n        color: theme.palette.primary.main,\n        marginRight: theme.spacing(1),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    FormControl: {\n        padding: `0 0 0 ${theme.spacing(1)}px`,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormControlOdd: {\n        padding: `0 0 0 ${theme.spacing(1)}px`,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormControlLabel: {\n        marginBottom: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        fontSize: theme.typography.caption.fontSize,\n    },\n    buttonSection: {\n        paddingTop: theme.spacing(3),\n    },\n    saveButton: {\n        marginRight: theme.spacing(2),\n    },\n    helpText: {\n        color: theme.palette.text.hint,\n        marginTop: theme.spacing(1),\n    },\n    extraPadding: {\n        paddingLeft: theme.spacing(2),\n    },\n    addNewOther: {\n        paddingTop: 40,\n    },\n    titleGrid: {\n        ' & .MuiGrid-item': {\n            padding: 0,\n            margin: 0,\n        },\n    },\n});\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * Create new scopes for an API\n * @class CreateScope\n * @extends {Component}\n */\nclass EditScope extends React.Component {\n    /**\n     * constructor\n     * @param {JSON} props parent props.\n     */\n    constructor(props) {\n        super(props);\n        // this.api = new Api();\n        this.api_uuid = props.match.params.api_uuid;\n        const { api, location } = this.props;\n        const thisScope = api.scopes.find((apiScope) => {\n            return apiScope.scope.name === location.state.scopeName;\n        });\n        this.state = {\n            apiScope: { ...thisScope },\n            validRoles: thisScope.scope.bindings,\n            invalidRoles: [],\n            roleValidity: true,\n        };\n        this.updateScope = this.updateScope.bind(this);\n        this.handleInputs = this.handleInputs.bind(this);\n        this.handleRoleDeletion = this.handleRoleDeletion.bind(this);\n        this.handleRoleAddition = this.handleRoleAddition.bind(this);\n        this.validateScopeDescription = this.validateScopeDescription.bind(this);\n        this.validateScopeDisplayName = this.validateScopeDisplayName.bind(this);\n    }\n\n    handleRoleDeletion = (role) => {\n        const { validRoles, invalidRoles } = this.state;\n        if (invalidRoles.includes(role)) {\n            const invalidRolesArray = invalidRoles.filter((existingRole) => existingRole !== role);\n            this.setState({ invalidRoles: invalidRolesArray });\n            if (invalidRolesArray.length === 0) {\n                this.setState({ roleValidity: true });\n            }\n        } else {\n            this.setState({ validRoles: validRoles.filter((existingRole) => existingRole !== role) });\n        }\n    };\n\n    /**\n     * Handle api scope addition event\n     * @param {any} event Button Click event\n     * @memberof Scopes\n     */\n    handleInputs(event) {\n        if (Array.isArray(event)) {\n            const { apiScope } = this.state;\n            apiScope.scope.bindings = event;\n            this.setState({\n                apiScope,\n            });\n        } else {\n            const input = event.target;\n            const { apiScope } = this.state;\n            apiScope[input.id] = input.value;\n            this.setState({\n                apiScope,\n            });\n        }\n    }\n\n    /**\n     * Handle Role Addition.\n     * @param {string} role The first number.\n     */\n    handleRoleAddition(role) {\n        const { validRoles, invalidRoles } = this.state;\n        const promise = APIValidation.role.validate(base64url.encode(role));\n        promise\n            .then(() => {\n                this.setState({\n                    roleValidity: true,\n                    validRoles: [...validRoles, role],\n                });\n            })\n            .catch((error) => {\n                if (error.status === 404) {\n                    this.setState({\n                        roleValidity: false,\n                        invalidRoles: [...invalidRoles, role],\n                    });\n                } else {\n                    Alert.error('Error when validating role: ' + role);\n                    console.error('Error when validating role ' + error);\n                }\n            });\n    }\n\n    /**\n     * Add new scope\n     * @memberof Scopes\n     */\n    updateScope() {\n        const { apiScope, validRoles } = this.state;\n        const {\n            intl, api, history, updateAPI,\n        } = this.props;\n        const originalScope = apiScope.scope;\n        apiScope.scope = {\n            id: originalScope.id,\n            name: originalScope.name,\n            displayName: originalScope.displayName,\n            description: originalScope.description,\n            bindings: validRoles,\n        };\n        const urlPrefix = api.apiType === Api.CONSTS.APIProduct ? 'api-products' : 'apis';\n        const scopes = api.scopes.map((scopeObj) => {\n            if (scopeObj.scope.name === apiScope.scope.name) {\n                return apiScope;\n            } else {\n                return scopeObj;\n            }\n        });\n        const updateProperties = { scopes };\n        const promisedApiUpdate = updateAPI(updateProperties);\n        promisedApiUpdate.then(() => {\n            Alert.info(intl.formatMessage({\n                id: 'Apis.Details.Scopes.CreateScope.scope.updated.successfully',\n                defaultMessage: 'Scope updated successfully',\n            }));\n            const redirectURL = '/' + urlPrefix + '/' + api.id + '/scopes/';\n            history.push(redirectURL);\n        }).catch((error) => {\n            const { response } = error;\n            if (response.body) {\n                const { description } = response.body;\n                Alert.error(description);\n            }\n        });\n    }\n\n    /**\n     * validate Scope Description.\n     * @param {JSON} event click event object.\n     */\n    validateScopeDescription({ target: { value } }) {\n        const { apiScope } = this.state;\n        const originalScope = apiScope.scope;\n        apiScope.scope = {\n            id: originalScope.id,\n            name: originalScope.name,\n            displayName: originalScope.displayName,\n            description: value,\n            bindings: originalScope.bindings,\n        };\n        this.setState({\n            apiScope,\n        });\n    }\n\n    /**\n     * validate Scope Display Name.\n     * @param {JSON} event click event object.\n     */\n    validateScopeDisplayName({ target: { value } }) {\n        const { apiScope } = this.state;\n        const originalScope = apiScope.scope;\n        apiScope.scope = {\n            id: originalScope.id,\n            name: originalScope.name,\n            displayName: value,\n            description: originalScope.description,\n            bindings: originalScope.bindings,\n        };\n        this.setState({\n            apiScope,\n        });\n    }\n\n    /**\n     * Render.\n     * @returns {JSX} rendered component.\n     */\n    render() {\n        const { classes, api, isAPIProduct } = this.props;\n        const {\n            apiScope, roleValidity, validRoles, invalidRoles,\n        } = this.state;\n        const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n        const url = `/${urlPrefix}/${api.id}/scopes`;\n        return (\n            <Grid container spacing={3}>\n                <Grid item sm={12} md={12} />\n                {/*\n            Following two grids control the placement of whole create page\n            For centering the content better use `container` props, but instead used an empty grid item for flexibility\n             */}\n                <Grid item sm={0} md={0} lg={2} />\n                <Grid item sm={12} md={12} lg={8}>\n                    <Grid container spacing={5} className={classes.titleGrid}>\n                        <Grid item md={12}>\n                            <div className={classes.titleWrapper}>\n                                <Link to={url} className={classes.titleLink}>\n                                    <Typography variant='h4'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Scopes.Scopes.heading.edit.scope.heading'\n                                            defaultMessage='Scopes'\n                                        />\n                                    </Typography>\n                                </Link>\n                                <Icon>keyboard_arrow_right</Icon>\n                                <Typography variant='h4'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Scopes.EditScope.update.scope'\n                                        defaultMessage='Update Scope'\n                                    />\n                                </Typography>\n                            </div>\n                        </Grid>\n                        <Grid item md={12}>\n                            <Paper elevation={0} className={classes.root}>\n                                <FormControl margin='normal'>\n                                    <TextField\n                                        id='name'\n                                        label='Name'\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        value={apiScope.scope.name}\n                                        onChange={this.handleScopeNameInput}\n                                        disabled\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal'>\n                                    <TextField\n                                        id='displayName'\n                                        label='Display Name'\n                                        placeholder='Scope Display Name'\n                                        helperText={(\n                                            <FormattedMessage\n                                                id='Apis.Details.Scopes.CreateScope.short.description.name'\n                                                defaultMessage='Enter Scope Name ( E.g.,: creator )'\n                                            />\n                                        )}\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        value={apiScope.scope.displayName || ''}\n                                        onChange={this.validateScopeDisplayName}\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal'>\n                                    <TextField\n                                        id='description'\n                                        label='Description'\n                                        variant='outlined'\n                                        placeholder='Short description about the scope'\n                                        helperText={(\n                                            <FormattedMessage\n                                                id='Apis.Details.Scopes.EditScope.short.description.about.the.scope'\n                                                defaultMessage='Short description about the scope'\n                                            />\n                                        )}\n                                        margin='normal'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        onChange={this.validateScopeDescription}\n                                        value={apiScope.scope.description || ''}\n                                        multiline\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal'>\n                                    <ChipInput\n                                        label='Roles'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        variant='outlined'\n                                        value={validRoles.concat(invalidRoles)}\n                                        alwaysShowPlaceholder={false}\n                                        placeholder='Enter roles and press Enter'\n                                        blurBehavior='clear'\n                                        InputProps={{\n                                            endAdornment: !roleValidity && (\n                                                <InputAdornment position='end'>\n                                                    <Error color='error' />\n                                                </InputAdornment>\n                                            ),\n                                        }}\n                                        onAdd={this.handleRoleAddition}\n                                        error={!roleValidity}\n                                        helperText={\n                                            !roleValidity ? (\n                                                <FormattedMessage\n                                                    id='Apis.Details.EditScopes.Roles.Invalid'\n                                                    defaultMessage='Role is invalid'\n                                                />\n                                            ) : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.EditScopes.roles.help'\n                                                    defaultMessage='Enter a valid role and press `Enter`.'\n                                                />\n                                            )\n                                        }\n                                        chipRenderer={({ value }, key) => (\n                                            <Chip\n                                                key={key}\n                                                label={value}\n                                                onDelete={() => {\n                                                    this.handleRoleDeletion(value);\n                                                }}\n                                                style={{\n                                                    backgroundColor: invalidRoles.includes(value) ? red[300] : null,\n                                                    margin: '8px 8px 8px 0',\n                                                    float: 'left',\n                                                }}\n                                            />\n                                        )}\n                                    />\n                                </FormControl>\n                                <div className={classes.addNewOther}>\n                                    <Button\n                                        variant='contained'\n                                        color='primary'\n                                        onClick={this.updateScope}\n                                        disabled={invalidRoles.length !== 0 || api.isRevision}\n                                        className={classes.saveButton}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Scopes.EditScope.update'\n                                            defaultMessage='Update'\n                                        />\n                                    </Button>\n                                    <Link to={url}>\n                                        <Button variant='contained'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Scopes.EditScope.cancel'\n                                                defaultMessage='Cancel'\n                                            />\n                                        </Button>\n                                    </Link>\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nEditScope.propTypes = {\n    match: PropTypes.shape({\n        params: PropTypes.shape({}),\n    }),\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    location: PropTypes.shape({\n        state: PropTypes.shape({\n            scopeName: PropTypes.string,\n        }),\n    }).isRequired,\n    history: PropTypes.shape({ push: PropTypes.func }).isRequired,\n    isAPIProduct: PropTypes.bool.isRequired,\n    updateAPI: PropTypes.func.isRequired,\n};\n\nEditScope.defaultProps = {\n    match: { params: {} },\n};\n\nexport default injectIntl(withRouter(withStyles(styles)(EditScope)));\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport 'react-tagsinput/react-tagsinput.css';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Api from 'AppData/api';\nimport { Progress } from 'AppComponents/Shared';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Button from '@material-ui/core/Button';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { Link } from 'react-router-dom';\nimport { List, ListItem, ListItemText } from '@material-ui/core';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport MUIDataTable from 'mui-datatables';\nimport Icon from '@material-ui/core/Icon';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport Grid from '@material-ui/core/Grid';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport Delete from './Delete';\n\nconst styles = (theme) => ({\n    root: {\n        paddingTop: 0,\n        paddingLeft: 0,\n    },\n    buttonProgress: {\n        position: 'relative',\n        margin: theme.spacing(1),\n    },\n    headline: { paddingTop: theme.spacing(1.25), paddingLeft: theme.spacing(2.5) },\n    heading: {\n        flexGrow: 1,\n        marginTop: 10,\n        '& table td:nth-child(2)': {\n            wordBreak: 'break-word',\n        },\n        '& table td button span, & table th': {\n            'white-space': 'nowrap',\n        },\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(2),\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    buttonIcon: {\n        marginRight: theme.spacing(1),\n    },\n    content: {\n        margin: `${theme.spacing(2)}px 0 ${theme.spacing(2)}px 0`,\n    },\n    head: {\n        fontWeight: 200,\n    },\n});\n/**\n * Generate the scopes UI in API details page.\n * @class Scopes\n * @extends {React.Component}\n */\nclass Scopes extends React.Component {\n    /**\n     * Creates an instance of Scopes.\n     * @param {any} props Generic props\n     * @memberof Scopes\n     */\n    constructor(props) {\n        super(props);\n        this.api = new Api();\n        this.api_uuid = props.match.params.api_uuid;\n        this.api_data = props.api;\n    }\n\n    /**\n     * Render Scopes section\n     * @returns {React.Component} React Component\n     * @memberof Scopes\n     */\n    render() {\n        const {\n            intl, classes, api,\n        } = this.props;\n        const urlPrefix = (api.apiType === Api.CONSTS.APIProduct) ? 'api-products' : 'apis';\n        const { scopes } = api;\n        const url = `/${urlPrefix}/${api.id}/scopes/create`;\n        const editUrl = `/${urlPrefix}/${api.id}/scopes/edit`;\n        const columns = [\n            intl.formatMessage({\n                id: 'Apis.Details.Scopes.Scopes.table.header.name',\n                defaultMessage: 'Name',\n            }),\n            intl.formatMessage({\n                id: 'Apis.Details.Scopes.Scopes.table.header.description',\n                defaultMessage: 'Description',\n            }),\n            {\n                options: {\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const roles = value || [];\n                            return roles.join(',');\n                        }\n                        return false;\n                    },\n                    filter: false,\n                    sort: false,\n                    label: (\n                        <FormattedMessage\n                            id='Apis.Details.Scopes.Scopes.table.header.roles'\n                            defaultMessage='Roles'\n                        />\n                    ),\n                },\n            },\n            {\n                options: {\n                    customBodyRender: (value, tableMeta) => {\n                        if (value && tableMeta.rowData) {\n                            const scopeName = tableMeta.rowData[0];\n                            return (\n                                <List component='nav' aria-label={scopeName + ' Used in'} className={classes.root}>\n                                    {value.map((resource) => (\n                                        <ListItem button>\n                                            <ListItemText primary={resource} />\n                                        </ListItem>\n                                    ))}\n                                </List>\n                            );\n                        }\n                        return false;\n                    },\n                    filter: false,\n                    sort: false,\n                    label: (\n                        <FormattedMessage\n                            id='Apis.Details.Scopes.Scopes.table.header.usages'\n                            defaultMessage='Used In'\n                        />\n                    ),\n                },\n            },\n            {\n                options: {\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const scopeName = tableMeta.rowData[0];\n                            return (\n                                <table className={classes.actionTable}>\n                                    <tr>\n                                        <td>\n                                            <Button\n                                                disabled={isRestricted(\n                                                    ['apim:api_create'],\n                                                    api,\n                                                ) || api.isRevision}\n                                                to={\n                                                    !isRestricted(['apim:api_create'], api) && !api.isRevision && {\n                                                        pathname: editUrl,\n                                                        state: {\n                                                            scopeName,\n                                                        },\n                                                    }\n                                                }\n                                                component={Link}\n                                                aria-label={'Edit ' + scopeName}\n                                            >\n                                                <Icon>edit</Icon>\n                                                <FormattedMessage\n                                                    id='Apis.Details.scopes.Edit.text.editor.edit'\n                                                    defaultMessage='Edit'\n                                                />\n                                            </Button>\n                                        </td>\n                                        <td>\n                                            <Delete scopeName={scopeName} api={api} isAPIProduct />\n                                        </td>\n                                    </tr>\n                                </table>\n                            );\n                        }\n                        return false;\n                    },\n                    filter: false,\n                    sort: false,\n                    label: (\n                        <FormattedMessage\n                            id='Apis.Details.Scopes.Scopes.table.header.actions'\n                            defaultMessage='Actions'\n                        />\n                    ),\n                },\n            },\n        ];\n        const options = {\n            filterType: 'multiselect',\n            selectableRows: false,\n            title: false,\n            filter: false,\n            sort: false,\n            print: false,\n            download: false,\n            viewColumns: false,\n            customToolbar: false,\n        };\n\n        const scopesList = api.scopes.filter((apiScope) => {\n            return !apiScope.shared;\n        }).map((apiScope) => {\n            const aScope = [];\n            aScope.push(apiScope.scope.name);\n            aScope.push(apiScope.scope.description);\n            aScope.push(apiScope.scope.bindings);\n            const resources = api.operations && api.operations\n                .filter((op) => {\n                    return op.scopes.includes(apiScope.scope.name);\n                })\n                .map((op) => {\n                    return op.target + ' ' + op.verb;\n                });\n            aScope.push(resources);\n            return aScope;\n        });\n\n        if (!scopes) {\n            return <Progress />;\n        }\n\n        if (scopes.length === 0) {\n            return (\n                <div className={classes.root}>\n                    <div className={classes.titleWrapper}>\n                        <Typography\n                            id='itest-api-details-scopes-onboarding-head'\n                            variant='h4'\n                            component='h2'\n                            align='left'\n                            className={classes.mainTitle}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.local.Scopes.heading.scope.heading'\n                                defaultMessage='Local Scopes'\n                            />\n                        </Typography>\n                        <Tooltip\n                            title={(\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.Scopes.heading.scope.title.tooltip'\n                                    defaultMessage='Manage scopes that are local to this API'\n                                />\n                            )}\n                            placement='top-end'\n                        >\n                            <IconButton size='small' aria-label='Local Scopes help text'>\n                                <HelpOutlineIcon fontSize='small' />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                    <InlineMessage type='info' height={140}>\n                        <div className={classes.contentWrapper}>\n                            <Typography variant='h5' component='h3' className={classes.head}>\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.Scopes.create.scopes.title'\n                                    defaultMessage='Create API Local Scopes'\n                                />\n                            </Typography>\n                            <Typography component='p' className={classes.content}>\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.Scopes.scopes.enable.fine.gained.access.control'\n                                    defaultMessage={\n                                        'Scopes enable fine-grained access control to API resources'\n                                        + ' based on user roles.'\n                                    }\n                                />\n                            </Typography>\n                            <div className={classes.actions}>\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    className={classes.button}\n                                    disabled={isRestricted(['apim:api_create'], api) || api.isRevision}\n                                    component={Link}\n                                    to={!isRestricted(['apim:api_create'], api) && !api.isRevision && url}\n                                    id='create-scope-btn'\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Scopes.Scopes.create.scopes.button'\n                                        defaultMessage='Create Scopes'\n                                    />\n                                </Button>\n                            </div>\n                        </div>\n                    </InlineMessage>\n                </div>\n            );\n        }\n\n        return (\n            <div className={classes.heading}>\n                <div className={classes.titleWrapper}>\n                    <Typography variant='h4' component='h2' align='left' className={classes.mainTitle}>\n                        <FormattedMessage\n                            id='Apis.Details.local.Scopes.heading.edit.heading'\n                            defaultMessage='Local Scopes'\n                        />\n                    </Typography>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Scopes.Scopes.heading.scope.title.tooltip2'\n                                defaultMessage='Manage scopes that are local to this API'\n                            />\n                        )}\n                        placement='top-end'\n                    >\n                        <IconButton size='small' aria-label='Local Scopes help text'>\n                            <HelpOutlineIcon fontSize='small' />\n                        </IconButton>\n                    </Tooltip>\n                    <Button\n                        variant='outlined'\n                        color='primary'\n                        size='small'\n                        disabled={isRestricted(['apim:api_create'], api) || api.isRevision}\n                        component={Link}\n                        to={!isRestricted(['apim:api_create'], api) && !api.isRevision && url}\n                    >\n                        <AddCircle className={classes.buttonIcon} />\n                        <FormattedMessage\n                            id='Apis.Details.Scopes.Scopes.heading.scope.add_new'\n                            defaultMessage='Add New Local Scope'\n                        />\n                    </Button>\n                    {isRestricted(['apim:api_create'], api) && (\n                        <Grid item>\n                            <Typography variant='body2' color='primary'>\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.Scopes.update.not.allowed'\n                                    defaultMessage={\n                                        '*You are not authorized to update scopes of'\n                                        + ' the API due to insufficient permissions'\n                                    }\n                                />\n                            </Typography>\n                        </Grid>\n                    )}\n                </div>\n\n                <MUIDataTable title={false} data={scopesList} columns={columns} options={options}/>\n            </div>\n        );\n    }\n}\n\nScopes.propTypes = {\n    match: PropTypes.shape({\n        params: PropTypes.shape({}),\n    }),\n    api: PropTypes.instanceOf(Object).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nScopes.defaultProps = {\n    match: { params: {} },\n};\n\nexport default injectIntl(withAPI(withStyles(styles)(Scopes)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ConfirmDialog from 'AppComponents/Shared/ConfirmDialog';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst styles = {\n    appBar: {\n        position: 'relative',\n    },\n    flex: {\n        flex: 1,\n    },\n    popupHeader: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    splitWrapper: {\n        padding: 0,\n    },\n    docName: {\n        alignItems: 'center',\n        display: 'flex',\n    },\n    button: {\n        height: 30,\n        marginLeft: 30,\n    },\n};\n\nfunction Delete(props) {\n    const [api, updateAPI] = useAPI();\n    const { intl } = props;\n    const [open, setOpen] = useState(false);\n    const toggleOpen = () => {\n        setOpen(!open);\n    };\n    const deleteScope = () => {\n        const { scopeName } = props;\n        const ops = api.operations && JSON.parse(JSON.stringify(api.operations));\n        const operations = ops && ops.map((op) => {\n            // eslint-disable-next-line no-param-reassign\n            op.scopes = op.scopes.filter((scope) => {\n                return scope !== scopeName;\n            });\n            return op;\n        });\n        const scopes = api.scopes.filter((apiScope) => {\n            return apiScope.scope.name !== scopeName;\n        });\n        const updateProperties = { scopes, operations };\n        const setOpenLocal = setOpen; // Need to copy this to access inside the promise.then\n        const promisedUpdate = updateAPI(updateProperties);\n        promisedUpdate\n            .then(() => {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Resources.Resources.api.scope.deleted.successfully',\n                    defaultMessage: 'API Scope deleted successfully!',\n                }));\n                setOpenLocal(!open);\n            })\n            .catch((errorResponse) => {\n                console.error(errorResponse);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Resources.Resources.something.went.wrong.while.updating.the.api',\n                    defaultMessage: 'Error occurred while updating API',\n                }));\n            });\n    };\n\n    const runAction = (confirm) => {\n        if (confirm) {\n            deleteScope();\n        } else {\n            setOpen(!open);\n        }\n    };\n    const { scopeName } = props;\n\n    return (\n        <div>\n            <Button onClick={toggleOpen} disabled={isRestricted(['apim:api_create'], api) || api.isRevision}>\n                <Icon>delete_forever</Icon>\n                <FormattedMessage\n                    id='Apis.Details.Documents.Delete.document.delete'\n                    defaultMessage='Delete'\n                />\n            </Button>\n            <ConfirmDialog\n                key='key-dialog'\n                labelCancel={(\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.label.cancel'\n                        defaultMessage='Cancel'\n                    />\n                )}\n                title={(\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.delete.confirm'\n                        defaultMessage='Confirm Delete'\n                    />\n                )}\n                message={(\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.label.ok.confirm'\n                        defaultMessage='Are you sure you want to delete scope {scope} ?'\n                        values={{ scope: scopeName }}\n                    />\n                )}\n                labelOk={(\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.label.ok.yes'\n                        defaultMessage='Yes'\n                    />\n                )}\n                callback={runAction}\n                open={open}\n            />\n        </div>\n    );\n}\nDelete.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    scopeName: PropTypes.string.isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(Delete));\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport SecurityOverview from './SecurityOverview';\n\nconst Security = () => {\n    return (\n        <Switch>\n            <Route path='/apis/:api_uuid/security' component={SecurityOverview} />\n        </Switch>\n    );\n};\n\nexport default Security;\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\n\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport PropTypes from 'prop-types';\n\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport Divider from '@material-ui/core/Divider';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport AddPolicy from './AddPolicy';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    button: {\n        marginLeft: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n    buttonIcon: {\n        marginRight: 10,\n    },\n    table: {\n        '& td': {\n            fontSize: theme.typography.fontSize,\n        },\n        '& th': {\n            fontSize: theme.typography.fontSize * 1.2,\n        },\n        tableLayout: 'fixed',\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addJsonContent: {\n        whiteSpace: 'pre',\n    },\n});\n\nclass SecurityOverview extends Component {\n    constructor(props) {\n        super(props);\n        this.api = new Api();\n        this.state = {\n            api: {\n                name: '',\n            },\n            policies: [],\n            showAddPolicy: false,\n        };\n        this.updateData = this.updateData.bind(this);\n        this.toggleShowAddPolicy = this.toggleShowAddPolicy.bind(this);\n        this.updateData = this.updateData.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateData();\n    }\n\n    updateData() {\n        const promisedApi = this.api.get(this.props.match.params.api_uuid);\n        promisedApi.then((response) => {\n            this.setState({ api: response.obj });\n            this.updatePolicyData();\n        });\n    }\n\n    updatePolicyData() {\n        this.setState({ policies: [] });\n        const policyIds = this.state.api.threatProtectionPolicies.list;\n        for (let i = 0; i < policyIds.length; i++) {\n            const id = policyIds[i].policyId;\n            const promisedPolicies = this.api.getThreatProtectionPolicy(id);\n            promisedPolicies.then((response) => {\n                const updatedPolicies = this.state.policies;\n                updatedPolicies.push(response.obj);\n                this.setState({ policies: updatedPolicies });\n            });\n        }\n    }\n\n    deletePolicy(id) {\n        const { intl } = this.props;\n        const associatedApi = this.state.api;\n        const promisedPolicyDelete = this.api.deleteThreatProtectionPolicyFromApi(associatedApi.id, id);\n        promisedPolicyDelete.then((response) => {\n            if (response.status === 200) {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Security.SecurityOverview.policy.remove.success',\n                    defaultMessage: 'Policy removed successfully.',\n                }));\n\n                //   remove policy from local api\n                const index = associatedApi.threatProtectionPolicies.list.indexOf({ policyId: id });\n                associatedApi.threatProtectionPolicies.list.splice(index, 1);\n                this.setState({ api: associatedApi });\n                this.updatePolicyData();\n            } else {\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Security.SecurityOverview.policy.remove.failure',\n                    defaultMessage: 'Failed to remove policy.',\n                }));\n            }\n        });\n    }\n\n    toggleShowAddPolicy = () => {\n        this.setState({ showAddPolicy: !this.state.showAddPolicy });\n    }\n\n    formatPolicy = (policy) => {\n        let formattedPolicy = policy;\n        formattedPolicy = formattedPolicy.replace(':', ' : ');\n        formattedPolicy = formattedPolicy.split(',').join(',\\n');\n        return formattedPolicy;\n    }\n\n    render() {\n        let data = [];\n        if (this.state.policies) {\n            data = this.state.policies;\n        }\n        const { classes } = this.props;\n        const { showAddPolicy } = this.state;\n\n        return (\n            <div className={classes.root}>\n                <div className={classes.contentWrapper}>\n                    <div className={classes.titleWrapper}>\n                        <Typography variant='h4' align='left' className={classes.mainTitle}>\n                            <FormattedMessage\n                                id='Apis.Details.Security.SecurityOverview.threat.protection.policies'\n                                defaultMessage='Threat Protection Policies'\n                            />\n                        </Typography>\n                        <Button size='small' className={classes.button} onClick={this.toggleShowAddPolicy}>\n                            <AddCircle className={classes.buttonIcon} />\n                            <FormattedMessage\n                                id='Apis.Details.Security.SecurityOverview.add.threat.protection.policy'\n                                defaultMessage='Add New Threat Protection Policy'\n                            />\n                        </Button>\n                    </div>\n                </div>\n                <div className={classes.contentWrapper}>\n                    {showAddPolicy &&\n                    <AddPolicy\n                        id={this.state.api.id}\n                        toggleShowAddPolicy={this.toggleShowAddPolicy}\n                        updateData={this.updateData}\n                    />\n                    }\n                </div>\n                <br />\n                <div className={classes.contentWrapper}>\n                    <div className={classes.addNewWrapper}>\n                        <Typography className={classes.addNewHeader}>\n                            <FormattedMessage\n                                id='Apis.Details.Security.SecurityOverview.manage.threat.protection.policies'\n                                defaultMessage='Manage Threat Protection Policies'\n                            />\n                        </Typography>\n                        <Divider className={classes.divider} />\n                        <Table className={classes.table}>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='Apis.Details.Security.SecurityOverview.policy.name'\n                                            defaultMessage='Policy Name'\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='Apis.Details.Security.SecurityOverview.policy.type'\n                                            defaultMessage='Policy Type'\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='Apis.Details.Security.SecurityOverview.policy'\n                                            defaultMessage='Policy'\n                                        />\n                                    </TableCell>\n                                    <TableCell />\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {data.map((n) => {\n                                    return (\n                                        <TableRow key={n.uuid}>\n                                            <TableCell>{n.name + (n.uuid === 'GLOBAL-JSON' ? ' (GLOBAL)' : '')}</TableCell>\n                                            <TableCell>{n.type}</TableCell>\n                                            <TableCell>\n                                                <div className={classes.addJsonContent}>\n                                                    {this.formatPolicy(n.policy)}\n                                                </div>\n                                            </TableCell>\n                                            <TableCell>\n                                                <span>\n                                                    <Button color='accent' onClick={() => this.deletePolicy(n.uuid)} >\n                                                        <FormattedMessage\n                                                            id='Apis.Details.Security.SecurityOverview.delete'\n                                                            defaultMessage='Delete'\n                                                        />\n                                                    </Button>\n                                                </span>\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nSecurityOverview.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            api_uuid: PropTypes.string,\n        }),\n    }).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\n\nexport default injectIntl(withStyles(styles)(SecurityOverview));\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { withStyles } from '@material-ui/core/styles';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport API from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\n\nconst styles = (theme) => ({\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    button: {\n        marginLeft: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addJsonContent: {\n        whiteSpace: 'pre',\n    },\n});\n\nclass AddPolicy extends Component {\n    /**\n     * AddPolicy\n     */\n    constructor() {\n        super();\n        this.state = {\n            selectedPolicy: {\n                uuid: '',\n                name: 'Select',\n                policy: '',\n                type: '',\n            },\n            policies: [],\n        };\n    }\n\n    /**\n     * AddPolicy\n     */\n    componentDidMount() {\n        const api = new API();\n        const promisedPolicies = api.getThreatProtectionPolicies();\n        promisedPolicies.then((response) => {\n            this.setState({ policies: response.obj.list });\n        });\n        const promisedApi = api.get(this.props.id);\n        promisedApi.then((response) => {\n            this.setState({ currentApi: response.obj });\n        });\n    }\n\n    /**\n     * AddPolicy\n     */\n    formatPolicy = (policy) => {\n        let formattedPolicy = policy;\n        formattedPolicy = formattedPolicy.replace(':', ' : ');\n        formattedPolicy = formattedPolicy.split(',').join(',\\n');\n        return formattedPolicy;\n    }\n\n    handleChange = () => (event) => {\n        const policyId = event.target.value;\n        const api = new API();\n        const promisedPolicy = api.getThreatProtectionPolicy(policyId);\n        promisedPolicy.then((response) => {\n            this.setState({ selectedPolicy: response.obj });\n        });\n    }\n\n\n    handlePolicyAdd() {\n        const { intl } = this.props;\n        const policy = this.state.selectedPolicy;\n        if (policy.uuid === '' || policy.name === '') {\n            Alert.error(intl.formatMessage({\n                id: 'Apis.Details.Security.AddPolicy.select.policy',\n                defaultMessage: 'Please select a policy',\n            }));\n            return;\n        }\n\n        if (this.state.currentApi) {\n            const { currentApi } = this.state;\n            const api = new API();\n            const promisedPolicyAdd = api.addThreatProtectionPolicyToApi(currentApi.id, this.state.selectedPolicy.uuid);\n            promisedPolicyAdd.then((response) => {\n                if (response.status === 200) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Security.AddPolicy.threat.protection.policy.add.success',\n                        defaultMessage: 'Threat protection policy added successfully.',\n                    }));\n                    this.props.updateData();\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Security.AddPolicy.threat.protection.policy.add.failure',\n                        defaultMessage: 'Failed to add threat protection policy.',\n                    }));\n                }\n            });\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div className={classes.contentWrapper}>\n                <div className={classes.addNewWrapper}>\n                    <Typography className={classes.addNewHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Security.AddPolicy.add.threat.protection.policy'\n                            defaultMessage='Add New Threat Protection Policy'\n                        />\n                    </Typography>\n                    <Divider className={classes.divider} />\n                    <div className={classes.addNewOther}>\n                        <InputLabel htmlFor='selectedPolicy'>\n                            <FormattedMessage\n                                id='Apis.Details.Security.AddPolicy.policy'\n                                defaultMessage='Policy'\n                            />\n                        </InputLabel>\n                        &nbsp;&nbsp;\n                        <Select\n                            value={this.state.selectedPolicy.uuid}\n                            onChange={this.handleChange('selectedPolicy')}\n                            input={<Input name='selectedPolicy' id='selectedPolicy' />}\n                        >\n                            {this.state.policies.map((n) => {\n                                return (\n                                    <MenuItem key={n.uuid} value={n.uuid}>{n.name}</MenuItem>\n                                );\n                            })}\n                            ;\n                        </Select>\n                        <br />\n                        <br />\n                        <p>\n                            <FormattedMessage\n                                id='Apis.Details.Security.AddPolicy.policy.type.label'\n                                defaultMessage='Policy Type: '\n                            />\n                            {this.state.selectedPolicy.type}\n                        </p>\n                        <div>\n                            <p>\n                                <FormattedMessage\n                                    id='Apis.Details.Security.AddPolicy.policy.label'\n                                    defaultMessage='Policy: '\n                                />\n                            </p>\n                            <div className={classes.addJsonContent}>\n                                {this.formatPolicy(this.state.selectedPolicy.policy)}\n                            </div>\n                        </div>\n                    </div>\n                    <Divider className={classes.divider} />\n                    <div className={classes.addNewOther}>\n                        <Button variant='contained' color='primary' onClick={() => this.handlePolicyAdd()}>\n                            <FormattedMessage\n                                id='Apis.Details.Security.AddPolicy.add.policy.to.api'\n                                defaultMessage='Add Policy to API'\n                            />\n                        </Button>\n                        <Button className={classes.button} onClick={this.props.toggleShowAddPolicy}>\n                            <FormattedMessage\n                                id='Apis.Details.Security.AddPolicy.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAddPolicy.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    toggleShowAddPolicy: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n    updateData: PropTypes.func.isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\n\nexport default injectIntl(withStyles(styles)(AddPolicy));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Suspense, lazy } from 'react';\nimport AppContext from 'AppComponents/Shared/AppContext';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport EditRounded from '@material-ui/icons/EditRounded';\nimport CloudDownloadRounded from '@material-ui/icons/CloudDownloadRounded';\nimport LockRounded from '@material-ui/icons/LockRounded';\nimport SwapHorizontalCircle from '@material-ui/icons/SwapHorizontalCircle';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Progress } from 'AppComponents/Shared';\nimport Typography from '@material-ui/core/Typography';\nimport Slide from '@material-ui/core/Slide';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport YAML from 'js-yaml';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api.js';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport { withRouter } from 'react-router';\nimport { isRestricted } from 'AppData/AuthManager';\nimport ResourceNotFound from '../../../Base/Errors/ResourceNotFound';\nimport APISecurityAudit from './APISecurityAudit';\nimport ImportDefinition from './ImportDefinition';\nimport DefinitionOutdated from './DefinitionOutdated';\n\nconst EditorDialog = lazy(() => import('./SwaggerEditorDrawer' /* webpackChunkName: \"EditorDialog\" */));\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"APIDefMonacoEditor\" */));\nconst AsyncAPIEditor = lazy(() => import('./AsyncApiEditorDrawer'));\n\nconst styles = (theme) => ({\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    swaggerEditorWrapper: {\n        height: '100vh',\n        overflowY: 'auto',\n    },\n    buttonIcon: {\n        marginRight: 10,\n    },\n    buttonWarningColor: {\n        color: theme.palette.warning.light,\n    },\n    topBar: {\n        display: 'flex',\n        flexDirection: 'row',\n        marginBottom: theme.spacing(2),\n    },\n    converterWrapper: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        flex: '1',\n        fontSize: '0.6964285714285714rem',\n    },\n    downloadLink: {\n        color: 'black',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n        '&:hover': {\n            'text-decoration': 'none',\n        },\n    },\n    progressLoader: {\n        marginLeft: theme.spacing(1),\n    },\n    updateApiWarning: {\n        marginLeft: theme.spacing(5),\n        color: theme.custom.serviceCatalog.onboarding.buttonText,\n        borderColor: theme.custom.serviceCatalog.onboarding.buttonText,\n    },\n    warningIconStyle: {\n        color: theme.custom.serviceCatalog.onboarding.buttonText,\n    },\n});\n/**\n * This component holds the functionality of viewing the api definition content of an api. The initial view is a\n * read-only representation of the api definition file.\n * Users can either edit the content by clicking the 'Edit' button or upload a new api definition file by clicking\n * 'Import API Definition'.\n * */\nclass APIDefinition extends React.Component {\n    /**\n     * @inheritDoc\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            openEditor: false,\n            swagger: null,\n            swaggerModified: null,\n            graphQL: null,\n            format: null,\n            convertTo: null,\n            isAuditApiClicked: false,\n            securityAuditProperties: [],\n            isSwaggerValid: true,\n            isUpdating: false,\n            asyncAPI: null,\n            asyncAPIModified: null,\n            isAsyncAPIValid: true,\n        };\n        this.handleNo = this.handleNo.bind(this);\n        this.handleSave = this.handleSave.bind(this);\n        this.handleSaveAndDeploy = this.handleSaveAndDeploy.bind(this);\n        this.openEditor = this.openEditor.bind(this);\n        this.transition = this.transition.bind(this);\n        this.closeEditor = this.closeEditor.bind(this);\n        this.hasJsonStructure = this.hasJsonStructure.bind(this);\n        this.getConvertToFormat = this.getConvertToFormat.bind(this);\n        this.onAuditApiClick = this.onAuditApiClick.bind(this);\n        this.onChangeFormatClick = this.onChangeFormatClick.bind(this);\n        this.openUpdateConfirmation = this.openUpdateConfirmation.bind(this);\n        this.updateSwaggerDefinition = this.updateSwaggerDefinition.bind(this);\n        this.updateAsyncAPIDefinitionAndDeploy = this.updateAsyncAPIDefinitionAndDeploy.bind(this);\n        this.updateSwaggerDefinitionAndDeploy = this.updateSwaggerDefinitionAndDeploy.bind(this);\n        this.onChangeSwaggerContent = this.onChangeSwaggerContent.bind(this);\n        this.updateAsyncAPIDefinition = this.updateAsyncAPIDefinition.bind(this);\n        this.onChangeAsyncAPIContent = this.onChangeAsyncAPIContent.bind(this);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    componentDidMount() {\n        const { api } = this.props;\n        const { settings } = this.context;\n        let promisedApi;\n        if (api.type === 'GRAPHQL') {\n            promisedApi = api.getSchema(api.id);\n        } else if (api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE' || api.type === 'ASYNC') {\n            promisedApi = api.getAsyncAPIDefinition(api.id);\n        } else {\n            promisedApi = api.getSwagger(api.id);\n        }\n\n        this.setState({ securityAuditProperties: settings.securityAuditProperties });\n\n        promisedApi\n            .then((response) => {\n                if (api.type === 'GRAPHQL') {\n                    this.setState({\n                        graphQL: response.obj.schemaDefinition,\n                        format: 'txt',\n                    });\n                } else if (api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE' || api.type === 'ASYNC') {\n                    this.setState({\n                        asyncAPI: YAML.safeDump(YAML.safeLoad(response.data)),\n                        asyncAPIModified: YAML.safeDump(YAML.safeLoad(response.data)),\n                        format: 'yaml',\n                        convertTo: this.getConvertToFormat('yaml'),\n                    });\n                } else {\n                    this.setState({\n                        swagger: YAML.safeDump(YAML.safeLoad(response.data)),\n                        swaggerModified: YAML.safeDump(YAML.safeLoad(response.data)),\n                        format: 'yaml',\n                        convertTo: this.getConvertToFormat('yaml'),\n                    });\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    }\n\n\n    /**\n     * Method to handle asyncAPI content change\n     *\n     * @param {string} modifiedContent : The modified asyncAPI content.\n     * */\n    onChangeAsyncAPIContent(modifiedContent) {\n        const { format } = this.state;\n        /**\n         * Validate for the basic json/ yaml format.\n         * */\n        try {\n            if (format === 'json') {\n                JSON.parse(modifiedContent, null);\n            } else {\n                YAML.load(modifiedContent);\n            }\n            this.setState({ isAsyncAPIValid: true, asyncAPIModified: modifiedContent });\n        } catch (e) {\n            this.setState({ isAsyncAPIValid: false, asyncAPIModified: modifiedContent });\n        }\n    }\n\n    /**\n     * Toggle the format of the api definition.\n     * JSON -> YAML, YAML -> JSON\n     */\n    onChangeFormatClick() {\n        const {\n            format, swagger, convertTo, asyncAPI,\n        } = this.state;\n        let formattedString = '';\n        if (asyncAPI === null) {\n            if (convertTo === 'json') {\n                formattedString = JSON.stringify(YAML.load(swagger), null, 1);\n            } else {\n                formattedString = YAML.safeDump(YAML.safeLoad(swagger));\n            }\n            this.setState({\n                swagger: formattedString,\n                swaggerModified: formattedString,\n                format: convertTo,\n                convertTo: format,\n            });\n        } else {\n            if (convertTo === 'json') {\n                formattedString = JSON.stringify(YAML.load(asyncAPI), null, 1);\n            } else {\n                formattedString = YAML.safeDump(YAML.safeLoad(asyncAPI));\n            }\n            this.setState({\n                asyncAPI: formattedString,\n                asyncAPIModified: formattedString,\n                format: convertTo,\n                convertTo: format,\n            });\n        }\n    }\n\n    /**\n      * Set isAuditApiClicked to true when Audit API is clicked\n      */\n    onAuditApiClick() {\n        this.setState({ isAuditApiClicked: true });\n    }\n\n    /**\n     * Method to handle swagger content change\n     *\n     * @param {string} modifiedContent : The modified swagger content.\n     * */\n    onChangeSwaggerContent(modifiedContent) {\n        const { format } = this.state;\n        /**\n         * Validate for the basic json/ yaml format.\n         * */\n        try {\n            if (format === 'json') {\n                JSON.parse(modifiedContent, null);\n            } else {\n                YAML.load(modifiedContent);\n            }\n            this.setState({ isSwaggerValid: true, swaggerModified: modifiedContent });\n        } catch (e) {\n            this.setState({ isSwaggerValid: false, swaggerModified: modifiedContent });\n        }\n    }\n\n    setSchemaDefinition = (schemaContent, contentType) => {\n        const { api } = this.props;\n        const isGraphql = api.isGraphql();\n        const isWebSocket = api.isWebSocket();\n        const isWebSub = api.isWebSub();\n        if (isGraphql) {\n            this.setState({ graphQL: schemaContent });\n        } else if (isWebSocket || isWebSub) {\n            this.setState({\n                asyncAPI: schemaContent,\n                asyncAPIModified: schemaContent,\n                convertTo: this.getConvertToFormat(contentType),\n                format: contentType,\n            });\n        } else {\n            this.setState({\n                swagger: schemaContent,\n                swaggerModified: schemaContent,\n                convertTo: this.getConvertToFormat(contentType),\n                format: contentType,\n            });\n        }\n    };\n\n    /**\n     * Util function to get the format which the definition can be converted to.\n     * @param {*} format : The current format of definition.\n     * @returns {string} The possible conversion format.\n     */\n    getConvertToFormat(format) {\n        return format === 'json' ? 'yaml' : 'json';\n    }\n\n    /**\n     * Handles the No button action of the save api definition confirmation dialog box.\n     */\n    handleNo() {\n        this.setState({ openDialog: false });\n    }\n\n    /**\n     * Handles the yes button action of the save api definition confirmation dialog box.\n     */\n    handleSave() {\n        const { swaggerModified, asyncAPIModified } = this.state;\n        if (asyncAPIModified !== null) {\n            this.setState({ openDialog: false }, () => this.updateAsyncAPIDefinition(asyncAPIModified, '', ''));\n        } else {\n            this.setState({ openDialog: false }, () => this.updateSwaggerDefinition(swaggerModified, '', ''));\n        }\n    }\n\n    handleSaveAndDeploy() {\n        const { swaggerModified, asyncAPIModified } = this.state;\n        const { api, history } = this.props;\n        if (asyncAPIModified !== null) {\n            this.updateAsyncAPIDefinitionAndDeploy(asyncAPIModified, '', '');\n            history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            });\n        } else {\n            this.updateSwaggerDefinitionAndDeploy(swaggerModified, '', '');\n            history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            });\n        }\n    }\n\n    /**\n     * Checks whether the swagger content is json type.\n     * @param {string} definition The swagger string.\n     * @return {boolean} Whether the content is a json or not.\n     * */\n    hasJsonStructure(definition) {\n        if (typeof definition !== 'string') return false;\n        try {\n            const result = JSON.parse(definition);\n            return result && typeof result === 'object';\n        } catch (err) {\n            return false;\n        }\n    }\n\n    /**\n     * Method to set the state for opening the swagger editor drawer.\n     * Swagger editor loads the definition content from the local storage. Hence we set the swagger content to the\n     * local storage.\n     * */\n    openEditor() {\n        this.setState({ openEditor: true });\n    }\n\n    /**\n     * Sets the state to close the swagger-editor drawer.\n     * */\n    closeEditor() {\n        this.setState({ openEditor: false });\n        const { intl, api, history } = this.props;\n        const { isAuditApiClicked } = this.state;\n        if (isAuditApiClicked === true) {\n            Alert.info(intl.formatMessage({\n                id: 'Apis.Details.APIDefinition.info.updating.auditapi',\n                defaultMessage: 'To reflect the changes made, you need to click Audit API',\n            }));\n            const redirectUrl = '/apis/' + api.id + '/api definition';\n            history.push(redirectUrl);\n        }\n    }\n\n    /**\n     * Handles the transition of the drawer.\n     * @param {object} props list of props\n     * @return {object} The Slide transition component\n     * */\n    transition(props) {\n        return <Slide direction='up' {...props} />;\n    }\n\n    /**\n     * Updates swagger content in the local storage.\n     * */\n    openUpdateConfirmation() {\n        this.setState({ openDialog: true });\n    }\n\n    /**\n     * Updates swagger definition of the api.\n     * @param {string} swaggerContent The swagger file that needs to be updated.\n     * @param {string} specFormat The current format of the definition\n     * @param {string} toFormat The format it can be converted to.\n     * */\n    updateSwaggerDefinition(swaggerContent, specFormat, toFormat) {\n        const { api, intl, updateAPI } = this.props;\n        this.setState({ isUpdating: true });\n        let parsedContent = {};\n        if (this.hasJsonStructure(swaggerContent)) {\n            parsedContent = JSON.parse(swaggerContent);\n        } else {\n            try {\n                parsedContent = YAML.load(swaggerContent);\n            } catch (err) {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.parsing.api.definition',\n                    defaultMessage: 'Error occurred while updating the API Definition',\n                }));\n                return;\n            }\n        }\n        const promise = api.updateSwagger(parsedContent);\n        promise\n            .then((response) => {\n                const { endpointImplementationType } = api;\n                if (endpointImplementationType === 'INLINE') {\n                    api.generateMockScripts(api.id);\n                }\n                if (response) {\n                    Alert.success(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.api.definition.updated.successfully',\n                        defaultMessage: 'API Definition updated successfully',\n                    }));\n                    if (specFormat && toFormat) {\n                        this.setState({ swagger: swaggerContent, format: specFormat, convertTo: toFormat });\n                    } else {\n                        this.setState({ swagger: swaggerContent });\n                    }\n                }\n                /*\n                 *updateAPI() will make a /GET call to get the latest api once the swagger definition is updated.\n                 *Otherwise, we need to refresh the page to get changes.\n                 */\n                updateAPI();\n                this.setState({ isUpdating: false });\n            })\n            .catch((err) => {\n                console.log(err);\n                const { response: { body: { description, message } } } = err;\n                if (description && message) {\n                    Alert.error(`${message} ${description}`);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.api.definition',\n                        defaultMessage: 'Error occurred while updating the API Definition',\n                    }));\n                }\n\n                this.setState({ isUpdating: false });\n            });\n    }\n\n    /**\n     * Updates swagger definition of the api.\n     * @param {string} swaggerContent The swagger file that needs to be updated.\n     * @param {string} specFormat The current format of the definition\n     * @param {string} toFormat The format it can be converted to.\n     * */\n    updateSwaggerDefinitionAndDeploy(swaggerContent, specFormat, toFormat) {\n        const { api, intl } = this.props;\n        this.setState({ isUpdating: true });\n        let parsedContent = {};\n        if (this.hasJsonStructure(swaggerContent)) {\n            parsedContent = JSON.parse(swaggerContent);\n        } else {\n            try {\n                parsedContent = YAML.load(swaggerContent);\n            } catch (err) {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.parsing.api.definition',\n                    defaultMessage: 'Error occurred while updating the API Definition',\n                }));\n                return;\n            }\n        }\n        const promise = api.updateSwagger(parsedContent);\n        promise\n            .then((response) => {\n                const { endpointImplementationType } = api;\n                if (endpointImplementationType === 'INLINE') {\n                    api.generateMockScripts(api.id);\n                }\n                if (response) {\n                    Alert.success(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.api.definition.updated.successfully',\n                        defaultMessage: 'API Definition updated successfully',\n                    }));\n                    if (specFormat && toFormat) {\n                        this.setState({ swagger: swaggerContent, format: specFormat, convertTo: toFormat });\n                    } else {\n                        this.setState({ swagger: swaggerContent });\n                    }\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                const { response: { body: { description, message } } } = err;\n                if (description && message) {\n                    Alert.error(`${message} ${description}`);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.api.definition',\n                        defaultMessage: 'Error occurred while updating the API Definition',\n                    }));\n                }\n            });\n    }\n\n\n    /**\n     * Updates asyncAPI definition of the API\n     * @param {string} asyncAPIContent The AsyncAPi file that needs to be updated.\n     * @param {string} specFormat The current format of the definition\n     * @param {string} toFormat The format it can be converted to.\n     */\n    updateAsyncAPIDefinitionAndDeploy(asyncAPIContent, specFormat, toFormat) {\n        const { api, intl } = this.props;\n        this.setState({ isUpdating: true });\n        let parsedContent = {};\n        if (this.hasJsonStructure(asyncAPIContent)) {\n            parsedContent = JSON.parse(asyncAPIContent);\n        } else {\n            try {\n                parsedContent = YAML.load(asyncAPIContent);\n            } catch (err) {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.async.api.definition',\n                    defaultMessage: 'Error occurred while updating the API Definition',\n                }));\n                return;\n            }\n        }\n        const promise = api.updateAsyncAPIDefinition(parsedContent);\n        promise\n            .then((response) => {\n                /* const { endpointImplementationType } = api; */\n                /* if (endpointImplementationType === 'INLINE') {\n                    api.generateMockScripts(api.id);\n                } */\n                if (response) {\n                    Alert.success(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.async.api.definition.updated.successfully',\n                        defaultMessage: 'API Definition updated successfully',\n                    }));\n                    if (specFormat && toFormat) {\n                        this.setState({ asyncAPI: asyncAPIContent, format: specFormat, convertTo: toFormat });\n                    } else {\n                        this.setState({ asyncAPI: asyncAPIContent });\n                    }\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                const { response: { body: { description, message } } } = err;\n                if (description && message) {\n                    Alert.error(`${message} ${description}`);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.async.api.definition',\n                        defaultMessage: 'Error occurred while updating the API Definition',\n                    }));\n                }\n                this.setState({ isUpdating: false });\n            });\n    }\n\n    /**\n     * Updates asyncAPI definition of the API\n     * @param {string} asyncAPIContent The AsyncAPi file that needs to be updated.\n     * @param {string} specFormat The current format of the definition\n     * @param {string} toFormat The format it can be converted to.\n     */\n    updateAsyncAPIDefinition(asyncAPIContent, specFormat, toFormat) {\n        const { api, intl, updateAPI } = this.props;\n        this.setState({ isUpdating: true });\n        let parsedContent = {};\n        if (this.hasJsonStructure(asyncAPIContent)) {\n            parsedContent = JSON.parse(asyncAPIContent);\n        } else {\n            try {\n                parsedContent = YAML.load(asyncAPIContent);\n            } catch (err) {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.async.api.definition',\n                    defaultMessage: 'Error occurred while updating the API Definition',\n                }));\n                return;\n            }\n        }\n        const promise = api.updateAsyncAPIDefinition(parsedContent);\n        promise\n            .then((response) => {\n                /* const { endpointImplementationType } = api; */\n                /* if (endpointImplementationType === 'INLINE') {\n                    api.generateMockScripts(api.id);\n                } */\n                if (response) {\n                    Alert.success(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.async.api.definition.updated.successfully',\n                        defaultMessage: 'API Definition updated successfully',\n                    }));\n                    if (specFormat && toFormat) {\n                        this.setState({ asyncAPI: asyncAPIContent, format: specFormat, convertTo: toFormat });\n                    } else {\n                        this.setState({ asyncAPI: asyncAPIContent });\n                    }\n                }\n                /*\n                 * updateAPI() will make a /GET call to get the latest api once the asyncAPI definition is updated.\n                 * Otherwise, we need to refresh the page to get changes.\n                 */\n                updateAPI();\n                this.setState({ isUpdating: false });\n            })\n            .catch((err) => {\n                console.log(err);\n                const { response: { body: { description, message } } } = err;\n                if (description && message) {\n                    Alert.error(`${message} ${description}`);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.async.api.definition',\n                        defaultMessage: 'Error occurred while updating the API Definition',\n                    }));\n                }\n                this.setState({ isUpdating: false });\n            });\n    }\n\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            swagger, graphQL, openEditor, openDialog, format, convertTo, notFound, isAuditApiClicked,\n            securityAuditProperties, isSwaggerValid, swaggerModified, isUpdating,\n            asyncAPI, asyncAPIModified, isAsyncAPIValid,\n        } = this.state;\n\n        const {\n            classes, resourceNotFountMessage, api,\n        } = this.props;\n\n        let downloadLink;\n        let fileName;\n        let isGraphQL = 0;\n\n        if (graphQL !== null) {\n            downloadLink = 'data:text/' + format + ';charset=utf-8,' + encodeURIComponent(graphQL);\n            fileName = api.provider + '-' + api.name + '-' + api.version + '.graphql';\n            isGraphQL = 1;\n        } else if (asyncAPI !== null) {\n            downloadLink = 'data:text/' + format + ';charset=utf-8,' + encodeURIComponent(asyncAPI);\n            fileName = 'asyncapi.' + format;\n        } else {\n            downloadLink = 'data:text/' + format + ';charset=utf-8,' + encodeURIComponent(swagger);\n            fileName = 'swagger.' + format;\n        }\n        const editorOptions = {\n            selectOnLineNumbers: true,\n            readOnly: true,\n            smoothScrolling: true,\n            wordWrap: 'on',\n        };\n\n        if (notFound) {\n            return <ResourceNotFound message={resourceNotFountMessage} />;\n        }\n        if (!swagger && !graphQL && !asyncAPI && api === 'undefined') {\n            return <Progress />;\n        }\n\n        return (\n            <>\n                <div className={classes.topBar}>\n                    <div className={classes.titleWrapper}>\n                        <Typography id='itest-api-details-api-definition-head' variant='h4' component='h2'>\n                            {/* eslint-disable-next-line no-nested-ternary */}\n                            {graphQL ? (\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.schema.definition'\n                                    defaultMessage='Schema Definition'\n                                />\n                            ) : asyncAPI ? (\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.asyncAPI.definition'\n                                    defaultMessage='AsyncAPI Definition'\n                                />\n                            ) : (\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.api.definition'\n                                    defaultMessage='API Definition'\n                                />\n                            )}\n                        </Typography>\n                        {asyncAPI ? (\n                            <Button\n                                size='small'\n                                className={classes.button}\n                                onClick={this.openEditor}\n                                disabled={isRestricted(['apim:api_create'], api)}\n                            >\n                                <EditRounded className={classes.buttonIcon} />\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.edit'\n                                    defaultMessage='Edit'\n                                />\n                            </Button>\n                        ) : (\n                            !(graphQL || api.type === API.CONSTS.APIProduct) && (\n                                <Button\n                                    size='small'\n                                    className={classes.button}\n                                    onClick={this.openEditor}\n                                    disabled={isRestricted(['apim:api_create'], api) || api.isRevision}\n                                >\n                                    <EditRounded className={classes.buttonIcon} />\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.APIDefinition.edit'\n                                        defaultMessage='Edit'\n                                    />\n                                </Button>\n                            )\n                        )}\n                        {api.type !== API.CONSTS.APIProduct && (\n                            <ImportDefinition setSchemaDefinition={this.setSchemaDefinition} />\n                        )}\n                        {(api.serviceInfo && api.serviceInfo.outdated && api.type !== 'SOAP') && (\n                            <DefinitionOutdated\n                                api={api}\n                                classes={classes}\n                            />\n                        )}\n                        <Button\n                            size='small'\n                            className={classes.button}\n                            component={Link}\n                            download={fileName}\n                            href={downloadLink}\n                            id='download-definition-btn'\n                        >\n                            <CloudDownloadRounded className={classes.buttonIcon} />\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.APIDefinition.download.definition'\n                                defaultMessage='Download Definition'\n                            />\n                        </Button>\n\n                        {(securityAuditProperties.apiToken && securityAuditProperties.collectionId\n                        && api.type !== 'GRAPHQL' && !asyncAPI)\n                            && (\n                                <Button size='small' className={classes.button} onClick={this.onAuditApiClick}>\n                                    <LockRounded className={classes.buttonIcon} />\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.APIDefinition.audit.api'\n                                        defaultMessage='Audit API'\n                                    />\n                                </Button>\n                            )}\n                    </div>\n                    {isGraphQL === 0 && (\n                        <div className={classes.titleWrapper}>\n                            <Button size='small' className={classes.button} onClick={this.onChangeFormatClick}>\n                                <SwapHorizontalCircle className={classes.buttonIcon} />\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.convert.to'\n                                    defaultMessage='Convert to'\n                                />\n                                {' '}\n                                {convertTo}\n                            </Button>\n                        </div>\n                    )}\n                </div>\n                <div>\n                    <Suspense fallback={<Progress />}>\n                        {isAuditApiClicked ? (\n                            <APISecurityAudit apiId={api.id} />\n                        ) : (\n                            <MonacoEditor\n                                language={format}\n                                width='100%'\n                                height='calc(100vh - 51px)'\n                                theme='vs-dark'\n                                /* eslint-disable-next-line no-nested-ternary */\n                                value={swagger !== null ? swagger : asyncAPI !== null ? asyncAPI : graphQL}\n                                options={editorOptions}\n                            />\n                        )}\n                    </Suspense>\n                </div>\n                <Dialog fullScreen open={openEditor} onClose={this.closeEditor} TransitionComponent={this.transition}>\n                    <Paper square className={classes.popupHeader}>\n                        <IconButton\n                            className={classes.button}\n                            color='inherit'\n                            onClick={this.closeEditor}\n                            aria-label={(\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.btn.close'\n                                    defaultMessage='Close'\n                                />\n                            )}\n                        >\n                            <Icon>close</Icon>\n                        </IconButton>\n\n                        <Button\n                            className={classes.button}\n                            variant='contained'\n                            color='primary'\n                            onClick={this.openUpdateConfirmation}\n                            disabled={(!isSwaggerValid || isUpdating) || (!isAsyncAPIValid || isUpdating)}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.APIDefinition.documents.swagger.editor.update.content'\n                                defaultMessage='Update Content'\n                            />\n                            {isUpdating && <CircularProgress className={classes.progressLoader} size={24} />}\n                        </Button>\n                    </Paper>\n                    <Suspense\n                        fallback={(\n                            <Progress />\n                        )}\n                    >\n                        {swagger ? (\n                            <EditorDialog\n                                swagger={swaggerModified}\n                                language={format}\n                                onEditContent={this.onChangeSwaggerContent}\n                            />\n                        ) : (\n                            <AsyncAPIEditor\n                                asyncAPI={asyncAPIModified}\n                                language={format}\n                                onEditContent={this.onChangeAsyncAPIContent}\n                            />\n                        )}\n                    </Suspense>\n                </Dialog>\n                <Dialog\n                    open={openDialog}\n                    onClose={this.handleNo}\n                    aria-labelledby='alert-dialog-title'\n                    aria-describedby='alert-dialog-description'\n                >\n                    <DialogTitle id='alert-dialog-title'>\n                        <Typography align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.APIDefinition.save.api.definition'\n                                defaultMessage='Save API Definition'\n                            />\n                        </Typography>\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id='alert-dialog-description'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.APIDefinition.api.definition.save.confirmation'\n                                defaultMessage={\n                                    'Are you sure you want to save the API Definition? This might affect the'\n                                    + ' existing resources.'\n                                }\n                            />\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Grid\n                            container\n                            direction='row'\n                            alignItems='flex-start'\n                            spacing={1}\n                        >\n                            <Grid item>\n                                <Button onClick={this.handleNo} color='primary'>\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.APIDefinition.btn.no'\n                                        defaultMessage='CANCEL'\n                                    />\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <CustomSplitButton\n                                    advertiseInfo={api.advertiseInfo}\n                                    api={api}\n                                    handleSave={this.handleSave}\n                                    handleSaveAndDeploy={this.handleSaveAndDeploy}\n                                    isUpdating={isUpdating}\n                                />\n                            </Grid>\n                        </Grid>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nAPIDefinition.contextType = AppContext;\nAPIDefinition.propTypes = {\n    classes: PropTypes.shape({\n        button: PropTypes.shape({}),\n        popupHeader: PropTypes.shape({}),\n        buttonIcon: PropTypes.shape({}),\n        root: PropTypes.shape({}),\n        topBar: PropTypes.shape({}),\n        titleWrapper: PropTypes.shape({}),\n        mainTitle: PropTypes.shape({}),\n        converterWrapper: PropTypes.shape({}),\n        dropzone: PropTypes.shape({}),\n        downloadLink: PropTypes.shape({}),\n    }).isRequired,\n    api: PropTypes.shape({\n        updateSwagger: PropTypes.func,\n        getSwagger: PropTypes.func,\n        id: PropTypes.string,\n        apiType: PropTypes.oneOf([API.CONSTS.API, API.CONSTS.APIProduct]),\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.shape({}),\n    }).isRequired,\n    resourceNotFountMessage: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n    updateAPI: PropTypes.func.isRequired,\n};\nexport default withRouter(injectIntl(withStyles(styles, { withTheme: true })(APIDefinition)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport API from 'AppData/api';\nimport PropTypes from 'prop-types';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Button from '@material-ui/core/Button';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { CircularProgressbarWithChildren } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles, createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport { Line } from 'rc-progress';\nimport Progress from 'AppComponents/Shared/Progress';\nimport { withRouter } from 'react-router';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\n\nimport MUIDataTable from 'mui-datatables';\n\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport MonacoEditor from 'react-monaco-editor';\n\nconst styles = (theme) => ({\n    rootPaper: {\n        padding: theme.spacing(3),\n        margin: theme.spacing(2),\n    },\n    inlineDecoration: {\n        background: '#FF0000',\n    },\n    contentLine: {\n        background: '#add8e6',\n    },\n    htmlToolTip: {\n        backgroundColor: '#f5f5f9',\n        color: 'rgba(0, 0, 0, 0.87)',\n        maxWidth: 220,\n        fontSize: theme.typography.pxToRem(14),\n        border: '1px solid #dadde9',\n        '& b': {\n            fontWeight: theme.typography.fontWeightMedium,\n        },\n    },\n    helpButton: {\n        padding: 0,\n        minWidth: 20,\n        'margin-left': 10,\n    },\n    helpIcon: {\n        fontSize: 16,\n    },\n    tableRow: {\n        'background-color': '#d3d3d3',\n    },\n    referenceErrorTypography: {\n        width: '70%',\n        marginTop: '15%',\n    },\n    referenceTypography: {\n        width: '70%',\n    },\n    subheadingTypography: {\n        paddingTop: 30,\n        paddingLeft: 20,\n    },\n    paperDiv: {\n        marginTop: 30,\n    },\n    sectionHeadingTypography: {\n        marginBottom: 18,\n    },\n    auditSummaryDiv: {\n        display: 'flex',\n        marginTop: 25,\n    },\n    auditSummarySubDiv: {\n        width: 250,\n        marginLeft: 40,\n        marginRight: 40,\n        display: 'table',\n    },\n    circularProgressBarScore: {\n        fontSize: 70,\n        color: '#3d98c7',\n        marginTop: 18,\n    },\n    circularProgressBarScoreFooter: {\n        fontSize: 18,\n        marginTop: 10,\n    },\n    auditSummaryDivRight: {\n        flexGrow: 1,\n        marginLeft: 200,\n        marginTop: 10,\n    },\n    columnOne: {\n        display: 'block',\n        width: '50%',\n        float: 'left',\n    },\n    columnTwo: {\n        width: '40%',\n        float: 'right',\n    },\n    head: {\n        fontWeight: 200,\n        marginBottom: 20,\n    },\n    linkText: {\n        float: 'right',\n    },\n});\n\n/**\n * This Component hosts the API Security Audit Component\n * More specifically, rendering of the Security Audit\n * Report.\n */\nclass APISecurityAudit extends Component {\n    /**\n     * @inheritdoc\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            report: null,\n            overallScore: 0,\n            numErrors: 0,\n            externalApiId: null,\n            loading: false,\n            apiDefinition: null,\n        };\n        this.criticalityObject = {\n            1: 'INFO',\n            2: 'LOW',\n            3: 'MEDIUM',\n            4: 'HIGH',\n            5: 'CRITICAL',\n        };\n        this.searchTerm = null;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    componentDidMount() {\n        this.setState({ loading: true });\n        const { apiId, history, intl } = this.props;\n        const currentApi = new API();\n        const promisedDefinition = currentApi.getSwagger(apiId);\n        promisedDefinition.then((response) => {\n            this.setState({\n                apiDefinition: JSON.stringify(response.obj, null, 1),\n            });\n        })\n            .catch((error) => {\n                console.log(error);\n            });\n\n        currentApi.getSecurityAuditReport(apiId)\n            .then((response) => {\n                this.setState({\n                    report: response.body.report,\n                    overallScore: response.body.grade,\n                    numErrors: response.body.numErrors,\n                    externalApiId: response.body.externalApiId,\n                    loading: false,\n                });\n            })\n            .catch((error) => {\n                console.log(error);\n                this.setState({ loading: false });\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.AuditApi.GetReportError',\n                    defaultMessage: 'Something went wrong while retrieving the API Security Report',\n                }));\n                const redirectUrl = '/apis/' + apiId + '/api definition';\n                history.push(redirectUrl);\n            });\n    }\n\n    getMuiTheme = () => createMuiTheme({\n        typography: {\n            useNextVariants: true,\n        },\n        overrides: {\n            MUIDataTableBodyCell: {\n                root: {\n                    width: '30%',\n                },\n            },\n            MUIDataTableSelectCell: {\n                root: {\n                    display: 'none',\n                },\n            },\n            MUIDataTableToolbarSelect: {\n                title: {\n                    display: 'none',\n                },\n            },\n        },\n    });\n\n    getErrorMuiTheme = () => createMuiTheme({\n        typography: {\n            useNextVariants: true,\n        },\n        overrides: {\n            MUIDataTableBodyCell: {\n                root: {\n                    width: '100%',\n                },\n            },\n            MUIDataTableSelectCell: {\n                root: {\n                    display: 'none',\n                },\n            },\n            MUIDataTableToolbarSelect: {\n                title: {\n                    display: 'none',\n                },\n            },\n        },\n    });\n\n    /**\n     * Get Row data for MUI Table\n     * @param {*} issues Issues array\n     * @param {String} category The category of the issue\n     * @param {*} rowType The type of row - normal or error\n     * @return {*} dataObject The dataObject array\n     */\n    getRowData(issues, category, rowType) {\n        const dataObject = [];\n        for (const item in issues) {\n            if ({}.hasOwnProperty.call(issues, item)) {\n                for (let i = 0; i < issues[item].issues.length; i++) {\n                    const rowObject = [];\n                    if (rowType === 'error') {\n                        if (issues[item].issues[i].specificDescription) {\n                            rowObject.push(\n                                issues[item].issues[i].specificDescription, issues[item].issues[i].pointer,\n                                category, rowType, item,\n                            );\n                        } else {\n                            rowObject.push(\n                                issues[item].description, issues[item].issues[i].pointer,\n                                category, rowType, item,\n                            );\n                        }\n                    } else if (rowType === 'normal') {\n                        if (issues[item].issues[i].specificDescription) {\n                            rowObject.push(\n                                this.criticalityObject[issues[item].criticality],\n                                issues[item].issues[i].specificDescription,\n                                this.roundScore(issues[item].issues[i].score), issues[item].issues[i].pointer,\n                                issues[item].issues[i].tooManyImpacted,\n                                issues[item].issues[i].pointersAffected, category, issues[item].tooManyError,\n                                rowType, item,\n                            );\n                        } else {\n                            rowObject.push(\n                                this.criticalityObject[issues[item].criticality],\n                                issues[item].description, this.roundScore(issues[item].issues[i].score),\n                                issues[item].issues[i].pointer, issues[item].issues[i].tooManyImpacted,\n                                issues[item].issues[i].pointersAffected, category, issues[item].tooManyError,\n                                rowType, item,\n                            );\n                        }\n                    }\n                    dataObject.push(rowObject);\n                }\n            }\n        }\n        return dataObject;\n    }\n\n    /**\n     * Method to get the URL to display for each issue\n     * @param {*} category Category of the issue\n     * @returns {*} String URL\n     */\n    getMoreDetailUrl(category) {\n        const baseUrl = 'https://apisecurity.io/ref/';\n        let url = '';\n\n        switch (category) {\n            case 'OpenAPI Format Requirements':\n                url = baseUrl + 'oasconformance/';\n                break;\n            case 'Security':\n                url = baseUrl + 'security/';\n                break;\n            case 'Data Validation':\n                url = baseUrl + 'datavalidation/datavalidation/';\n                break;\n            default:\n                url = baseUrl;\n        }\n        return url;\n    }\n\n    /**\n     * editorDidMount method for Monaco Editor\n     * @param {*} editor Monaco Editor editor\n     * @param {*} monaco Monaco Editor monaco\n     * @param {String} searchTerm SearchTerm for pointer\n     */\n    editorDidMount = (editor, monaco, searchTerm) => {\n        const { classes } = this.props;\n        if (searchTerm !== '') {\n            const lastTerms = [];\n            const termObject = searchTerm.split('/');\n            const regexPatterns = [];\n            for (let i = 0; i < termObject.length; i++) {\n                if (termObject[i] !== '' && termObject[i] !== '0') {\n                    let appendedString = '\"' + termObject[i] + '\":';\n                    if (appendedString.includes('~1')) {\n                        appendedString = appendedString.replace(/~1/i, '/');\n                    }\n                    regexPatterns.push(appendedString);\n                }\n            }\n\n            for (let j = 0; j < regexPatterns.length; j++) {\n                if (regexPatterns[j] !== '') {\n                    if (j !== 0 && lastTerms.length !== 0 && lastTerms[lastTerms.length - 1] !== null) {\n                        lastTerms.push(editor.getModel().findNextMatch(\n                            regexPatterns[j],\n                            { lineNumber: lastTerms[lastTerms.length - 1].range.endLineNumber, column: 1 },\n                            true, true, null, false,\n                        ));\n                    } else {\n                        lastTerms.push(editor.getModel().findNextMatch(regexPatterns[j], 1, true, true, null, true));\n                    }\n                }\n            }\n            const finalMatchIndex = lastTerms.length - 1;\n            if (lastTerms[finalMatchIndex] != null) {\n                editor.revealLineInCenter(lastTerms[finalMatchIndex].range.startLineNumber);\n                editor.deltaDecorations([], [\n                    {\n                        range: new monaco.Range(\n                            lastTerms[finalMatchIndex].range.startLineNumber,\n                            lastTerms[finalMatchIndex].range.startColumn,\n                            lastTerms[finalMatchIndex].range.endLineNumber,\n                            lastTerms[finalMatchIndex].range.endColumn,\n                        ),\n                        options: {\n                            isWholeLine: true,\n                            className: classes.inlineDecoration,\n                            glyphMarginClassName: classes.contentLine,\n                        },\n                    },\n                ]);\n            }\n        }\n    }\n\n    /**\n     * Method to round off the score of a section of the report\n     * @param {*} score Score of section\n     * @returns {*} roundScore Rounded off score\n     */\n    roundScore(score) {\n        if (score !== 0) {\n            return Math.round(score * 100) / 100;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const { classes } = this.props;\n        const {\n            report, overallScore, numErrors, externalApiId, loading, apiDefinition,\n        } = this.state;\n\n        const reportObject = JSON.parse(report);\n        const linkToDetailedReport = 'https://platform.42crunch.com/apis/' + externalApiId + '/security-audit-report';\n        if (loading) {\n            return (\n                <div>\n                    <InlineMessage type='info' height={140}>\n                        <div className={classes.contentWrapper}>\n                            <Typography\n                                variant='h5'\n                                component='h3'\n                                className={classes.head}\n                            >\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.AuditApi.WaitForReport'\n                                    defaultMessage='Please wait...'\n                                />\n                            </Typography>\n                            <Typography component='p' className={classes.content}>\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.AuditApi.WaitForReport.Content'\n                                    defaultMessage='Auditing an API for the first time will take some time'\n                                />\n                            </Typography>\n                        </div>\n                    </InlineMessage>\n                    <Progress />\n                </div>\n            );\n        }\n        const columns = [\n            {\n                name: 'Severity',\n                options: {\n                    filter: true,\n                    sort: true,\n                },\n            },\n            {\n                name: 'Description',\n                options: {\n                    filter: true,\n                    sort: true,\n                },\n            },\n            {\n                name: 'Score Impact',\n                options: {\n                    filter: true,\n                    sort: true,\n                },\n            },\n            {\n                name: 'Pointer',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'Too Many Impacted',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'Pointers Affected',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'Issue Category',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'Too Many Errors',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'isError',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'ReferenceUrl',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n        ];\n\n        const errorColumns = [\n            {\n                name: 'Description',\n                options: {\n                    filter: true,\n                    sort: true,\n                },\n            },\n            {\n                name: 'Pointer',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'Issue Category',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'isError',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'ReferenceUrl',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n        ];\n\n        const editorOptions = {\n            selectOnLineNumbers: true,\n            readOnly: true,\n            smoothScrolling: true,\n            wordWrap: 'on',\n            glyphMargin: true,\n        };\n\n        const options = {\n            filterType: 'dropdown',\n            responsive: 'stacked',\n            print: false,\n            download: false,\n            selectableRows: false,\n            expandableRows: true,\n            expandableRowsOnClick: true,\n            renderExpandableRow: (rowData) => {\n                let searchTerm = null;\n                if (rowData[3] === 'error') {\n                    searchTerm = reportObject.index[rowData[1]];\n\n                    return (\n                        <TableRow className={classes.tableRow}>\n                            <TableCell className={classes.columnOne}>\n                                <MonacoEditor\n                                    height='250px'\n                                    theme='vs-dark'\n                                    value={apiDefinition}\n                                    options={editorOptions}\n                                    editorDidMount={(editor, monaco) => this.editorDidMount(editor, monaco, searchTerm)}\n                                />\n                            </TableCell>\n                            <TableCell className={classes.columnTwo}>\n                                <Typography variant='body1' className={classes.referenceErrorTypography}>\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.AuditApi.ReferenceSection'\n                                        description='Link to visit for detail on how to remedy issue'\n                                        defaultMessage='Visit this {link} to view a detailed description, possible\n                                        exploits and remediation for this issue.'\n                                        values={{\n                                            link: (\n                                                <strong>\n                                                    <a\n                                                        href={this.getMoreDetailUrl(rowData[2])}\n                                                        target='_blank'\n                                                        rel='noopener noreferrer'\n                                                    >\n                                                        link\n                                                    </a>\n                                                </strong>),\n                                        }}\n                                    />\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    );\n                } else {\n                    searchTerm = reportObject.index[rowData[3]];\n                    return (\n                        <TableRow className={classes.tableRow}>\n                            <TableCell colSpan='2'>\n                                <MonacoEditor\n                                    width='85%'\n                                    height='250px'\n                                    theme='vs-dark'\n                                    value={apiDefinition}\n                                    options={editorOptions}\n                                    editorDidMount={(editor, monaco) => this.editorDidMount(editor, monaco, searchTerm)}\n                                />\n                            </TableCell>\n                            <TableCell>\n                                <Typography variant='body1' className={classes.referenceTypography}>\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.AuditApi.ReferenceSection'\n                                        description='Link to visit for detail on how to remedy issue'\n                                        defaultMessage='Visit this {link} to view a detailed description, possible\n                                        exploits and remediation for this issue.'\n                                        values={{\n                                            link: (\n                                                <strong>\n                                                    <a\n                                                        href={this.getMoreDetailUrl(rowData[6])}\n                                                        target='_blank'\n                                                        rel='noopener noreferrer'\n                                                    >\n                                                        link\n                                                    </a>\n                                                </strong>),\n                                        }}\n                                    />\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    );\n                }\n            },\n        };\n        return (\n            <div>\n                {report && (\n                    <div\n                        width='100%'\n                        height='calc(100vh - 51px)'\n                    >\n                        <Typography variant='h4' className={classes.subheadingTypography}>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.AuditApi.ApiSecurityAuditReport'\n                                defaultMessage='API Security Audit Report'\n                            />\n                        </Typography>\n                        <div className={classes.paperDiv}>\n                            <Paper elevation={1} className={classes.rootPaper}>\n                                <div>\n                                    <Typography variant='h5' className={classes.sectionHeadingTypography}>\n                                        <FormattedMessage\n                                            id='Apis.Details.APIDefinition.AuditApi.AuditScoreSummary'\n                                            defaultMessage='Audit Score and Summary'\n                                        />\n                                    </Typography>\n                                    <Typography variant='body1' className={classes.linkText}>\n                                        <FormattedMessage\n                                            id='Apis.Details.APIDefinition.AuditApi.LinkToDetailedReport'\n                                            defaultMessage='{linkToDetailedReportText} {link} {afterLinkText}'\n                                            values={{\n                                                linkToDetailedReportText: 'Check out the ',\n                                                link: (\n                                                    <b>\n                                                        <a\n                                                            href={linkToDetailedReport}\n                                                            target='_blank'\n                                                            rel='noopener noreferrer'\n                                                        >\n                                                            detailed Report\n                                                        </a>\n                                                    </b>),\n                                                afterLinkText: ' from 42Crunch',\n                                            }}\n                                        />\n                                    </Typography>\n                                    <div className={classes.auditSummaryDiv}>\n                                        <div className={classes.auditSummarySubDiv}>\n                                            <CircularProgressbarWithChildren\n                                                value={overallScore}\n                                            >\n                                                <Typography\n                                                    variant='body1'\n                                                    className={classes.circularProgressBarScore}\n                                                >\n                                                    <FormattedMessage\n                                                        id='Apis.Details.APIDefinition.AuditApi\n                                                                    .OverallScoreProgress'\n                                                        defaultMessage='{overallScore}'\n                                                        values={{\n                                                            overallScore: (\n                                                                <strong>{Math.round(overallScore)}</strong>\n                                                            ),\n                                                        }}\n                                                    />\n                                                </Typography>\n                                                <Typography\n                                                    variant='body1'\n                                                    className={classes.circularProgressBarScoreFooter}\n                                                >\n                                                    <FormattedMessage\n                                                        id='Apis.Details.APIDefinition.AuditApi.ScoreFooter'\n                                                        defaultMessage='out of 100'\n                                                    />\n                                                </Typography>\n                                            </CircularProgressbarWithChildren>\n                                        </div>\n                                        <div className={classes.auditSummaryDivRight}>\n                                            {{}.hasOwnProperty.call(reportObject, 'score')\n                                                && (\n                                                    <Typography variant='body1'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.APIDefinition.AuditApi.overallScore'\n                                                            defaultMessage='{overallScoreText} {overallScore} / 100'\n                                                            values={{\n                                                                overallScoreText: <strong>Overall Score:</strong>,\n                                                                overallScore: this.roundScore(overallScore),\n                                                            }}\n                                                        />\n                                                    </Typography>\n                                                )}\n                                            {numErrors !== null\n                                                && (\n                                                    <Typography variant='body1'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.APIDefinition.AuditApi.TotalNumOfErrors'\n                                                            defaultMessage='{totalNumOfErrorsText} {totalNumOfErrors}'\n                                                            values={{\n                                                                totalNumOfErrorsText: (\n                                                                    <strong>Total Number of Errors: </strong>\n                                                                ),\n                                                                totalNumOfErrors: numErrors,\n                                                            }}\n                                                        />\n                                                    </Typography>\n                                                )}\n                                            {{}.hasOwnProperty.call(reportObject, 'criticality')\n                                                && (\n                                                    <>\n                                                        <Typography variant='body1'>\n                                                            <FormattedMessage\n                                                                id={'Apis.Details.APIDefinition'\n                                                                + '.AuditApi.OverallCriticality'}\n                                                                defaultMessage={'{overallCriticalityText}'\n                                                                + ' {overallCriticality}'}\n                                                                values={{\n                                                                    overallCriticalityText: (\n                                                                        <strong>Overall Severity:</strong>\n                                                                    ),\n                                                                    overallCriticality: (\n                                                                        this.criticalityObject[reportObject.criticality]\n                                                                    ),\n                                                                }}\n                                                            />\n                                                            <Tooltip\n                                                                placement='right'\n                                                                classes={{\n                                                                    tooltip: classes.htmlTooltip,\n                                                                }}\n                                                                title={(\n                                                                    <>\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.severity'}\n                                                                            defaultMessage='Severity ranges from: '\n                                                                        />\n                                                                        <br />\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.info'}\n                                                                            defaultMessage='1. INFO'\n                                                                        />\n                                                                        <br />\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.low'}\n                                                                            defaultMessage='2. LOW'\n                                                                        />\n                                                                        <br />\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.medium'}\n                                                                            defaultMessage='3. MEDIUM'\n                                                                        />\n                                                                        <br />\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.high'}\n                                                                            defaultMessage='4. HIGH'\n                                                                        />\n                                                                        <br />\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.critical'}\n                                                                            defaultMessage='5. CRITICAL'\n                                                                        />\n                                                                        <br />\n                                                                    </>\n                                                                )}\n                                                            >\n                                                                <Button className={classes.helpButton}>\n                                                                    <HelpOutline className={classes.helpIcon} />\n                                                                </Button>\n                                                            </Tooltip>\n                                                        </Typography>\n                                                    </>\n                                                )}\n                                            <hr />\n                                            {{}.hasOwnProperty.call(reportObject, 'security')\n                                                && (\n                                                    <Typography variant='body1'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.APIDefinition.AuditApi.SecuritySummary'\n                                                            defaultMessage='{securitySummary}'\n                                                            values={{\n                                                                securitySummary: (\n                                                                    <strong>\n                                                                        Security -\n                                                                        (\n                                                                        {\n                                                                            this.roundScore(reportObject.security.score)\n                                                                        }\n                                                                        {' '}\n                                                                        / 30)\n                                                                    </strong>\n                                                                ),\n                                                            }}\n                                                        />\n                                                        <Line\n                                                            percent={((this.roundScore(reportObject.security.score)\n                                                                / 30\n                                                            ) * 100)}\n                                                            strokeColor='#3d98c7'\n                                                        />\n                                                    </Typography>\n                                                )}\n                                            {{}.hasOwnProperty.call(reportObject, 'data')\n                                                && (\n                                                    <Typography variant='body1'>\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.APIDefinition'\n                                                            + '.AuditApi.DataValidationSummary'}\n                                                            defaultMessage='{dataValidationSummary}'\n                                                            values={{\n                                                                dataValidationSummary: (\n                                                                    <strong>\n                                                                        Data Validation -\n                                                                        (\n                                                                        {this.roundScore(reportObject.data.score)}\n                                                                        {' '}\n                                                                        / 70)\n                                                                    </strong>\n                                                                ),\n                                                            }}\n                                                        />\n                                                        <Line\n                                                            percent={((this.roundScore(reportObject.data.score) / 70\n                                                            ) * 100)}\n                                                            strokeColor='#3d98c7'\n                                                        />\n                                                    </Typography>\n                                                )}\n                                            {{}.hasOwnProperty.call(reportObject, 'validationErrors')\n                                                && (\n                                                    <InlineMessage type='warning' height={140}>\n                                                        <div className={classes.contentWrapper}>\n                                                            <Typography\n                                                                variant='h5'\n                                                                component='h3'\n                                                                className={classes.head}\n                                                            >\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                    + '.AuditApi.FailedToValidate.Heading'}\n                                                                    defaultMessage='Failed to Validate OpenAPI File'\n                                                                />\n                                                            </Typography>\n                                                            <Typography component='p' className={classes.content}>\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                    + '.AuditApi.FailedToValidate.Content'}\n                                                                    defaultMessage={'Fix the critical errors '\n                                                                    + 'shown below and run the audit again.'}\n                                                                />\n                                                            </Typography>\n                                                        </div>\n                                                    </InlineMessage>\n                                                )}\n                                        </div>\n                                    </div>\n                                </div>\n                            </Paper>\n                        </div>\n                        {\n                            <div className={classes.paperDiv}>\n                                <Paper elevation={1} className={classes.rootPaper}>\n                                    <div>\n                                        <Typography variant='h5' className={classes.sectionHeadingTypography}>\n                                            <FormattedMessage\n                                                id='Apis.Details.APIDefinition.AuditApi.OpenApiFormatRequirements'\n                                                defaultMessage='OpenAPI Format Requirements'\n                                            />\n                                        </Typography>\n                                        {{}.hasOwnProperty.call(reportObject, 'semanticErrors')\n                                            && (\n                                                <>\n                                                    <div>\n                                                        <Typography variant='body1'>\n                                                            <MuiThemeProvider theme={this.getMuiTheme()}>\n                                                                <MUIDataTable\n                                                                    title='Semantic Errors'\n                                                                    data={this.getRowData(\n                                                                        reportObject.semanticErrors.issues,\n                                                                        'OpenAPI Format Requirements',\n                                                                        'error',\n                                                                    )}\n                                                                    columns={errorColumns}\n                                                                    options={options}\n                                                                />\n                                                            </MuiThemeProvider>\n                                                        </Typography>\n                                                    </div>\n                                                </>\n                                            )}\n                                        {{}.hasOwnProperty.call(reportObject, 'validationErrors')\n                                            && (\n                                                <>\n                                                    <div>\n                                                        <Typography variant='body1'>\n                                                            <MuiThemeProvider theme={this.getErrorMuiTheme()}>\n                                                                <MUIDataTable\n                                                                    title='Structural Errors'\n                                                                    data={this.getRowData(\n                                                                        reportObject.validationErrors.issues,\n                                                                        'OpenAPI Format Requirements',\n                                                                        'error',\n                                                                    )}\n                                                                    columns={errorColumns}\n                                                                    options={options}\n                                                                />\n                                                            </MuiThemeProvider>\n                                                        </Typography>\n                                                    </div>\n                                                </>\n                                            )}\n                                        {{}.hasOwnProperty.call(reportObject, 'warnings')\n                                            && (\n                                                <>\n                                                    <div>\n                                                        <Typography variant='body1'>\n                                                            <MuiThemeProvider theme={this.getErrorMuiTheme()}>\n                                                                <MUIDataTable\n                                                                    title='Best Practices Issues'\n                                                                    data={this.getRowData(\n                                                                        reportObject.warnings.issues,\n                                                                        'OpenAPI Format Requirements',\n                                                                        'error',\n                                                                    )}\n                                                                    columns={errorColumns}\n                                                                    options={options}\n                                                                />\n                                                            </MuiThemeProvider>\n                                                        </Typography>\n                                                    </div>\n                                                </>\n                                            )}\n                                        {!{}.hasOwnProperty.call(reportObject, 'validationErrors')\n                                        && !{}.hasOwnProperty.call(reportObject, 'semanticErrors')\n                                        && !{}.hasOwnProperty.call(reportObject, 'warnings')\n                                        && (\n                                            <Typography variant='body1'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.OASNoIssuesFound'\n                                                    defaultMessage='No Issues Found'\n                                                />\n                                            </Typography>\n                                        )}\n                                    </div>\n                                </Paper>\n                            </div>\n                        }\n                        {{}.hasOwnProperty.call(reportObject, 'security')\n                            && (\n                                <div className={classes.paperDiv}>\n                                    <Paper elevation={1} className={classes.rootPaper}>\n                                        <div>\n                                            <Typography variant='h5' className={classes.sectionHeadingTypography}>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.Security'\n                                                    defaultMessage='Security'\n                                                />\n                                            </Typography>\n                                            <Typography variant='body1'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.SecurityNumOfIssues'\n                                                    defaultMessage='{securityNumOfIssuesText} {securityNumOfIssues}'\n                                                    values={{\n                                                        securityNumOfIssuesText: (\n                                                            <strong>Number of Issues:</strong>\n                                                        ),\n                                                        securityNumOfIssues: reportObject.security.issueCounter,\n                                                    }}\n                                                />\n                                            </Typography>\n                                            <Typography variant='body1'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.SecurityScore'\n                                                    defaultMessage='{securityScoreText} {securityScore}  / 30'\n                                                    values={{\n                                                        securityScoreText: (\n                                                            <strong>Score:</strong>\n                                                        ),\n                                                        securityScore: (\n                                                            (Math.round(reportObject.security.score * 100) / 100)\n                                                        ),\n                                                    }}\n                                                />\n                                            </Typography>\n                                            <>\n                                                <Typography variant='body1'>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.APIDefinition.AuditApi.securityCriticality'\n                                                        defaultMessage='{securityCriticalityText} {securityCriticality}'\n                                                        values={{\n                                                            securityCriticalityText: (\n                                                                <strong>Severity:</strong>\n                                                            ),\n                                                            securityCriticality: (\n                                                                // eslint-disable-next-line max-len\n                                                                this.criticalityObject[reportObject.security.criticality]\n                                                            ),\n                                                        }}\n                                                    />\n                                                    <Tooltip\n                                                        placement='right'\n                                                        classes={{\n                                                            tooltip: classes.htmlTooltip,\n                                                        }}\n                                                        title={(\n                                                            <>\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.severity'}\n                                                                    defaultMessage='Severity ranges from: '\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.info'}\n                                                                    defaultMessage='1. INFO'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.low'}\n                                                                    defaultMessage='2. LOW'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.medium'}\n                                                                    defaultMessage='3. MEDIUM'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.high'}\n                                                                    defaultMessage='4. HIGH'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.critical'}\n                                                                    defaultMessage='5. CRITICAL'\n                                                                />\n                                                                <br />\n                                                            </>\n                                                        )}\n                                                    >\n                                                        <Button className={classes.helpButton}>\n                                                            <HelpOutline className={classes.helpIcon} />\n                                                        </Button>\n                                                    </Tooltip>\n                                                </Typography>\n                                            </>\n                                            {(reportObject.security.issueCounter !== 0)\n                                            && (\n                                                <div>\n                                                    <hr />\n                                                    <Typography variant='body1'>\n                                                        <MuiThemeProvider theme={this.getMuiTheme()}>\n                                                            <MUIDataTable\n                                                                title='Issues'\n                                                                data={this.getRowData(\n                                                                    reportObject.security.issues,\n                                                                    'Security',\n                                                                    'normal',\n                                                                )}\n                                                                columns={columns}\n                                                                options={options}\n                                                            />\n                                                        </MuiThemeProvider>\n                                                    </Typography>\n                                                </div>\n                                            )}\n                                        </div>\n                                    </Paper>\n                                </div>\n                            )}\n                        {{}.hasOwnProperty.call(reportObject, 'data')\n                            && (\n                                <div className={classes.paperDiv}>\n                                    <Paper elevation={1} className={classes.rootPaper}>\n                                        <div>\n                                            <Typography variant='h5' className={classes.sectionHeadingTypography}>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.DataValidation'\n                                                    defaultMessage='Data Validation'\n                                                />\n                                            </Typography>\n                                            <Typography variant='body1'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.DataValidationNumOfIssues'\n                                                    defaultMessage='{dataNumOfIssuesText} {dataNumOfIssues}'\n                                                    values={{\n                                                        dataNumOfIssuesText: (\n                                                            <strong>Number of Issues:</strong>\n                                                        ),\n                                                        dataNumOfIssues: reportObject.data.issueCounter,\n                                                    }}\n                                                />\n                                            </Typography>\n                                            <Typography variant='body1'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.DataValidationScore'\n                                                    defaultMessage='{dataScoreText} {dataScore}  / 70'\n                                                    values={{\n                                                        dataScoreText: (\n                                                            <strong>Score:</strong>\n                                                        ),\n                                                        dataScore: (\n                                                            (Math.round(reportObject.data.score * 100) / 100)\n                                                        ),\n                                                    }}\n                                                />\n                                            </Typography>\n                                            <>\n                                                <Typography variant='body1'>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.APIDefinition.AuditApi.dataCriticality'\n                                                        defaultMessage='{dataCriticalityText} {dataCriticality}'\n                                                        values={{\n                                                            dataCriticalityText: (\n                                                                <strong>Severity:</strong>\n                                                            ),\n                                                            dataCriticality: (\n                                                                this.criticalityObject[reportObject.data.criticality]\n                                                            ),\n                                                        }}\n                                                    />\n                                                    <Tooltip\n                                                        placement='right'\n                                                        classes={{\n                                                            tooltip: classes.htmlTooltip,\n                                                        }}\n                                                        title={(\n                                                            <>\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.severity'}\n                                                                    defaultMessage='Severity ranges from: '\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.info'}\n                                                                    defaultMessage='1. INFO'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.low'}\n                                                                    defaultMessage='2. LOW'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.medium'}\n                                                                    defaultMessage='3. MEDIUM'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.high'}\n                                                                    defaultMessage='4. HIGH'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.critical'}\n                                                                    defaultMessage='5. CRITICAL'\n                                                                />\n                                                                <br />\n                                                            </>\n                                                        )}\n                                                    >\n                                                        <Button className={classes.helpButton}>\n                                                            <HelpOutline className={classes.helpIcon} />\n                                                        </Button>\n                                                    </Tooltip>\n                                                </Typography>\n                                            </>\n                                            {(reportObject.data.issueCounter !== 0)\n                                            && (\n                                                <div>\n                                                    <hr />\n                                                    <Typography variant='body1'>\n                                                        <MuiThemeProvider theme={this.getMuiTheme()}>\n                                                            <MUIDataTable\n                                                                title='Issues'\n                                                                data={this.getRowData(\n                                                                    reportObject.data.issues,\n                                                                    'Data Validation',\n                                                                    'normal',\n                                                                )}\n                                                                columns={columns}\n                                                                options={options}\n                                                            />\n                                                        </MuiThemeProvider>\n                                                    </Typography>\n                                                </div>\n                                            )}\n                                        </div>\n                                    </Paper>\n                                </div>\n                            )}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nAPISecurityAudit.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    apiId: PropTypes.string.isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.func.isRequired,\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nexport default withRouter(injectIntl(withStyles(styles)(APISecurityAudit)));\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Suspense, lazy } from 'react';\nimport AppContext from 'AppComponents/Shared/AppContext';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport CloudDownloadRounded from '@material-ui/icons/CloudDownloadRounded';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Progress } from 'AppComponents/Shared';\nimport Typography from '@material-ui/core/Typography';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport API from 'AppData/api.js';\nimport { withRouter } from 'react-router';\nimport { isRestricted } from 'AppData/AuthManager';\nimport Utils from 'AppData/Utils';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ResourceNotFound from '../../../Base/Errors/ResourceNotFound';\nimport ImportDefinition from './ImportDefinition';\nimport DefinitionOutdated from './DefinitionOutdated';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"APIDefMonacoEditor\" */));\n\nconst styles = (theme) => ({\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    swaggerEditorWrapper: {\n        height: '100vh',\n        overflowY: 'auto',\n    },\n    buttonIcon: {\n        marginRight: 10,\n    },\n    topBar: {\n        display: 'flex',\n        flexDirection: 'row',\n        marginBottom: theme.spacing(2),\n    },\n    converterWrapper: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        flex: '1',\n        fontSize: '0.6964285714285714rem',\n    },\n    downloadLink: {\n        color: 'black',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    buttonWarningColor: {\n        color: theme.palette.warning.light,\n    },\n});\n\n/**\n * This component holds the functionality of viewing the WSDL content of an api. The view is a\n * read-only representation of the WSDL file. If the API has a WSDL ZIP archive, the preview will not be\n * available and it will be indicated in the UI.\n * Users can upload a new api definition file by clicking 'Import WSDL'.\n *\n * @class WSDL\n * @extends {Component}\n * */\nclass WSDL extends React.Component {\n    /**\n     * @inheritDoc\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            isArchive: false,\n            wsdl: null,\n        };\n        this.loadWSDLInEditor = this.loadWSDLInEditor.bind(this);\n        this.handleDownloadWSDLZip = this.handleDownloadWSDLZip.bind(this);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    componentDidMount() {\n        const { api, intl } = this.props;\n        const promisedWSDLInfo = api.getWSDLInfo(api.id);\n        promisedWSDLInfo\n            .then((response) => {\n                const wsdlType = response.obj.type;\n                if (wsdlType === 'WSDL') {\n                    this.loadWSDLInEditor(api);\n                } else {\n                    this.setState({ isArchive: true, wsdl: null });\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.WSDL.error.loading.wsdl.info',\n                        defaultMessage: 'Error loading WSDL',\n                    }));\n                }\n            });\n    }\n\n    /**\n     * Downloads and loads the API's WSDL in the editor. If the WSDL is ZIP, the operation is skipped\n     * and it is indicated in the UI.\n     *\n     *  @param {boolean} isArchive states whether the WSDL is a ZIP\n     */\n    setSchemaDefinition = (isArchive) => {\n        this.setState({ isArchive, wsdl: null });\n        if (!isArchive) {\n            const { api } = this.props;\n            this.loadWSDLInEditor(api);\n        }\n    }\n\n    /**\n     * Downloads WSDL ZIP file.\n     *\n     */\n    handleDownloadWSDLZip() {\n        const { api, intl } = this.props;\n        const wsdlZipContent = api.getWSDL(api.id);\n        wsdlZipContent.then((response) => {\n            Utils.forceDownload(response);\n        })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.WSDL.download.error',\n                    defaultMessage: 'Error downloading WSDL ZIP file',\n                }));\n            });\n    }\n\n    /**\n     * Downloads and loads the API's WSDL in the editor.\n     *\n     * @param {*} api API\n     */\n    loadWSDLInEditor(api) {\n        const { intl } = this.props;\n        const promisedApi = api.getWSDL(api.id);\n\n        promisedApi\n            .then((response) => {\n                response.data.text().then((text) => {\n                    this.setState({\n                        isArchive: false,\n                        wsdl: text,\n                    });\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.WSDL.error.loading.wsdl',\n                        defaultMessage: 'Error loading WSDL',\n                    }));\n                }\n            });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            wsdl, notFound, isArchive,\n        } = this.state;\n        const { classes, resourceNotFountMessage, api } = this.props;\n\n        const editorOptions = {\n            selectOnLineNumbers: true,\n            readOnly: true,\n            smoothScrolling: true,\n            wordWrap: 'on',\n            cursorStyle: 'line-thin',\n        };\n\n        if (notFound) {\n            return <ResourceNotFound message={resourceNotFountMessage} />;\n        }\n\n        if (!isArchive && !wsdl) {\n            return <Progress />;\n        }\n\n        let downloadWidget;\n        const downloadButtonContent = (\n            <>\n                <CloudDownloadRounded className={classes.buttonIcon} />\n                <FormattedMessage\n                    id='Apis.Details.APIDefinition.WSDL.download.definition'\n                    defaultMessage='Download WSDL'\n                />\n            </>\n        );\n        if (!isArchive) {\n            const downloadLink = 'data:text/xml;charset=utf-8,' + encodeURIComponent(wsdl);\n            const fileName = api.name + '-' + api.version + '.wsdl';\n            downloadWidget = (\n                <a className={classes.downloadLink} href={downloadLink} download={fileName}>\n                    <Button size='small' className={classes.button}>\n                        {downloadButtonContent}\n                    </Button>\n                </a>\n            );\n        } else {\n            downloadWidget = (\n                <Button size='small' className={classes.button} onClick={this.handleDownloadWSDLZip}>\n                    {downloadButtonContent}\n                </Button>\n            );\n        }\n\n        return (\n            <>\n                <div className={classes.topBar}>\n                    <div className={classes.titleWrapper}>\n                        <Typography variant='h4'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.WSDL.wsdl.definition'\n                                defaultMessage='WSDL Definition'\n                            />\n                        </Typography>\n                        <ImportDefinition setSchemaDefinition={this.setSchemaDefinition} />\n                        {api.serviceInfo && api.serviceInfo.outdated && api.type === 'SOAP' && (\n                            <DefinitionOutdated\n                                api={api}\n                                classes={classes}\n                            />\n                        )}\n                        {downloadWidget}\n                        {isRestricted(['apim:api_create'], api) && (\n                            <Typography variant='body2' color='primary'>\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.WSDL.update.not.allowed'\n                                    defaultMessage='Unauthorized: Insufficient permissions to update WSDL Definition'\n                                />\n                            </Typography>\n                        )}\n                    </div>\n                </div>\n                <div>\n                    <Suspense fallback={<Progress />}>\n                        {isArchive ? (\n                            <InlineMessage type='info' height={80} className={classes.emptyBox}>\n                                <div className={classes.contentWrapper}>\n                                    <Typography component='p' className={classes.content}>\n                                        <FormattedMessage\n                                            id='Apis.Details.APIDefinition.WSDL.preview.not.available'\n                                            defaultMessage='The API has a WSDL ZIP hence the preview is not available.'\n                                        />\n                                    </Typography>\n                                </div>\n                            </InlineMessage>\n                        ) : (\n                            <MonacoEditor\n                                language='xml'\n                                width='100%'\n                                height='calc(100vh - 51px)'\n                                theme='vs-dark'\n                                value={wsdl}\n                                options={editorOptions}\n                            />\n                        )}\n\n                    </Suspense>\n                </div>\n            </>\n        );\n    }\n}\n\nWSDL.contextType = AppContext;\nWSDL.propTypes = {\n    classes: PropTypes.shape({\n        button: PropTypes.shape({}),\n        popupHeader: PropTypes.shape({}),\n        buttonIcon: PropTypes.shape({}),\n        root: PropTypes.shape({}),\n        topBar: PropTypes.shape({}),\n        titleWrapper: PropTypes.shape({}),\n        mainTitle: PropTypes.shape({}),\n        converterWrapper: PropTypes.shape({}),\n        dropzone: PropTypes.shape({}),\n        downloadLink: PropTypes.shape({}),\n    }).isRequired,\n    api: PropTypes.shape({\n        updateSwagger: PropTypes.func,\n        getSwagger: PropTypes.func,\n        id: PropTypes.string,\n        apiType: PropTypes.oneOf([API.CONSTS.API, API.CONSTS.APIProduct]),\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.shape({}),\n    }).isRequired,\n    resourceNotFountMessage: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\nexport default withRouter(injectIntl(withStyles(styles, { withTheme: true })(WSDL)));\n","/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Utils from 'AppData/Utils';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport CloudDownloadRounded from '@material-ui/icons/CloudDownloadRounded';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Link, useHistory } from 'react-router-dom';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport { useAppContext, usePublisherSettings } from 'AppComponents/Shared/AppContext';\nimport { useRevisionContext } from 'AppComponents/Shared/RevisionContext';\nimport ThumbnailView from 'AppComponents/Apis/Listing/components/ImageGenerator/ThumbnailView';\nimport VerticalDivider from 'AppComponents/Shared/VerticalDivider';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport GoTo from 'AppComponents/Apis/Details/GoTo/GoTo';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport API from 'AppData/api';\nimport MUIAlert from 'AppComponents/Shared/MuiAlert';\nimport DeleteApiButton from './DeleteApiButton';\nimport CreateNewVersionButton from './CreateNewVersionButton';\n\nconst styles = (theme) => ({\n    root: {\n        height: theme.custom.apis.topMenu.height,\n        background: theme.palette.background.paper,\n        borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        display: 'flex',\n        alignItems: 'center',\n    },\n    backLink: {\n        alignItems: 'center',\n        textDecoration: 'none',\n        display: 'contents',\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    backIcon: {\n        color: theme.palette.primary.main,\n        fontSize: 56,\n        cursor: 'pointer',\n    },\n    backText: {\n        color: theme.palette.primary.main,\n        cursor: 'pointer',\n        fontFamily: theme.typography.fontFamily,\n    },\n    viewInStoreLauncher: {\n        display: 'flex',\n        flexDirection: 'column',\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        textAlign: 'center',\n        justifyContent: 'center',\n        height: 70,\n    },\n    linkText: {\n        fontSize: theme.typography.fontSize,\n    },\n    dateWrapper: {\n        flex: 1,\n        alignSelf: 'center',\n    },\n    lastUpdatedTypography: {\n        display: 'inline-block',\n        minWidth: 30,\n    },\n    apiName: {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n    },\n    downloadApi: {\n        display: 'flex',\n        flexDirection: 'column',\n        textAlign: 'center',\n        justifyContent: 'center',\n        cursor: 'pointer',\n        height: 70,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    downloadApiFlex: {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    revisionWrapper: {\n        paddingRight: theme.spacing(2),\n    },\n    topRevisionStyle: {\n        marginLeft: theme.spacing(1),\n        maxWidth: 500,\n    },\n    readOnlyStyle: {\n        color: 'red',\n    },\n    active: {\n        background: theme.custom.revision.activeRevision.background,\n        width: 8,\n        height: 8,\n        borderRadius: '50%',\n        alignItems: 'center',\n    },\n});\n\nconst APIDetailsTopMenu = (props) => {\n    const {\n        classes, theme, api, isAPIProduct, imageUpdate, intl, openPageSearch, setOpenPageSearch,\n    } = props;\n    const history = useHistory();\n    const prevLocation = history.location.pathname;\n    const lastIndex = prevLocation.split('/')[3];\n    const [revisionId, setRevisionId] = useState(api.id);\n    let lifecycleState;\n    let isVisibleInStore;\n    if (isAPIProduct) {\n        lifecycleState = api.state === 'PROTOTYPED' ? 'PRE-RELEASED' : api.state;\n        isVisibleInStore = ['PROTOTYPED', 'PUBLISHED'].includes(api.state);\n    } else {\n        lifecycleState = api.lifeCycleStatus === 'PROTOTYPED' ? 'PRE-RELEASED' : api.lifeCycleStatus;\n        isVisibleInStore = ['PROTOTYPED', 'PUBLISHED'].includes(api.lifeCycleStatus);\n    }\n    /**\n         * The component for advanced endpoint configurations.\n         * @param {string} name The name of the\n         * @param {string} version Version of the API\n         * @param {string} provider Provider of the API\n         * @param {string} format Weather to recive files in YALM of JSON format\n         * @returns {zip} Zpi file containing the API directory.\n     */\n    function exportAPI() {\n        return api.export().then((zipFile) => {\n            return Utils.forceDownload(zipFile);\n        }).catch((error) => {\n            console.error(error);\n            if (error.response) {\n                Alert.error(error.response.body.description);\n            } else {\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.components.APIDetailsTopMenu.error',\n                    defaultMessage: 'Something went wrong while downloading the API.',\n                }));\n            }\n        });\n    }\n\n    const handleChange = (event) => {\n        setRevisionId(event.target.value);\n    };\n\n    /**\n     * Update the state when new props are available\n     */\n    useEffect(() => {\n        setRevisionId(api.id);\n    }, [api.id]);\n\n    const isDownloadable = [API.CONSTS.API, API.CONSTS.APIProduct].includes(api.apiType);\n    const { user } = useAppContext();\n    const { data: settings } = usePublisherSettings();\n    const { allRevisions, allEnvRevision } = useRevisionContext();\n    const { tenantList } = useContext(ApiContext);\n    const userNameSplit = user.name.split('@');\n    const tenantDomain = userNameSplit[userNameSplit.length - 1];\n    let devportalUrl = settings ? `${settings.devportalUrl}/apis/${api.id}/overview` : '';\n    if (tenantList && tenantList.length > 0) {\n        devportalUrl = settings ? `${settings.devportalUrl}/apis/${api.id}/overview?tenant=${tenantDomain}` : '';\n    }\n\n    function getDeployments(revisionKey) {\n        const array = [];\n        allEnvRevision.filter(\n            (env) => env.id === revisionKey,\n        )[0].deploymentInfo.map((environment) => array.push(environment.name));\n        return array.join(', ');\n    }\n\n    // todo: need to support rev proxy ~tmkb\n    return (\n        <div className={classes.root}>\n            <Link\n                to={isAPIProduct\n                    ? `/api-products/${api.id}/overview`\n                    : `/apis/${api.id}/overview`}\n                className={classes.backLink}\n            >\n                <Box width={70} height={50} marginLeft={1}>\n                    <ThumbnailView api={api} width={70} height={50} imageUpdate={imageUpdate} />\n                </Box>\n                <div style={{ marginLeft: theme.spacing(1), maxWidth: 500 }}>\n                    <Link\n                        to={isAPIProduct\n                            ? `/api-products/${api.id}/overview`\n                            : `/apis/${api.id}/overview`}\n                        className={classes.backLink}\n                    >\n                        <Typography id='itest-api-name-version' variant='h4' component='h1' className={classes.apiName}>\n                            {api.name}\n                            {' '}\n                            {isAPIProduct ? '' : ':' + api.version}\n                        </Typography>\n                        <Typography variant='caption' gutterBottom align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.components.APIDetailsTopMenu.created.by'\n                                defaultMessage='Created by:'\n                            />\n                            {' '}\n                            {api.provider}\n                        </Typography>\n                    </Link>\n                </div>\n            </Link>\n            <VerticalDivider height={70} />\n            <div className={classes.infoItem}>\n                <Typography component='div' variant='subtitle1'>\n                    {lifecycleState}\n                </Typography>\n                <Typography variant='caption' align='left'>\n                    <FormattedMessage\n                        id='Apis.Details.components.APIDetailsTopMenu.state'\n                        defaultMessage='State'\n                    />\n                </Typography>\n            </div>\n\n            <div className={classes.dateWrapper} />\n            {api.isRevision && (\n                <MUIAlert\n                    variant='outlined'\n                    severity='warning'\n                    icon={false}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.components.APIDetailsTopMenu.read.only.label'\n                        defaultMessage='Read only'\n                    />\n                </MUIAlert>\n            )}\n            <div className={classes.dateWrapper} />\n            {(api.advertiseInfo && api.advertiseInfo.advertised) && (\n                <MUIAlert\n                    variant='outlined'\n                    severity='warning'\n                    icon={false}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.components.APIDetailsTopMenu.advertise.only.label'\n                        defaultMessage='Third Party'\n                    />\n                </MUIAlert>\n            )}\n            {(!api.advertiseInfo || !api.advertiseInfo.advertised) && (\n                <div className={classes.topRevisionStyle}>\n                    <TextField\n                        id='revision-selector'\n                        value={revisionId}\n                        select\n                        SelectProps={{\n                            MenuProps: {\n                                anchorOrigin: {\n                                    vertical: 'bottom',\n                                    horizontal: 'left',\n                                },\n                                getContentAnchorEl: null,\n                            },\n                        }}\n                        name='selectRevision'\n                        onChange={handleChange}\n                        margin='dense'\n                        variant='outlined'\n                    >\n                        {!isAPIProduct ? (\n                            <MenuItem\n                                value={api.isRevision ? api.revisionedApiId : api.id}\n                                component={Link}\n                                to={'/apis/' + (api.isRevision ? api.revisionedApiId : api.id) + '/' + lastIndex}\n                            >\n                                <FormattedMessage\n                                    id='Apis.Details.components.APIDetailsTopMenu.current.api'\n                                    defaultMessage='Current API'\n                                />\n                            </MenuItem>\n                        ) : (\n                            <MenuItem\n                                value={api.isRevision ? api.revisionedApiProductId : api.id}\n                                component={Link}\n                                to={'/api-products/' + (api.isRevision\n                                    ? api.revisionedApiProductId : api.id) + '/' + lastIndex}\n                            >\n                                <FormattedMessage\n                                    id='Apis.Details.components.APIDetailsTopMenu.current.api'\n                                    defaultMessage='Current API'\n                                />\n                            </MenuItem>\n                        )}\n                        {allRevisions && !isAPIProduct && allRevisions.map((item) => (\n                            <MenuItem value={item.id} component={Link} to={'/apis/' + item.id + '/' + lastIndex}>\n                                <Grid\n                                    container\n                                    direction='row'\n                                    alignItems='center'\n                                >\n                                    <Grid item>\n                                        {item.displayName}\n                                    </Grid>\n                                    {allEnvRevision && allEnvRevision.find((env) => env.id === item.id) && (\n                                        <Grid item>\n                                            <Box ml={2}>\n                                                <Tooltip\n                                                    title={getDeployments(item.id)}\n                                                    placement='bottom'\n                                                >\n                                                    <Grid className={classes.active} />\n                                                </Tooltip>\n                                            </Box>\n                                        </Grid>\n                                    )}\n                                </Grid>\n                            </MenuItem>\n                        ))}\n                        {allRevisions && isAPIProduct && allRevisions.map((item) => (\n                            <MenuItem\n                                value={item.id}\n                                component={Link}\n                                to={'/api-products/' + item.id + '/' + lastIndex}\n                            >\n                                <Grid\n                                    container\n                                    direction='row'\n                                    alignItems='center'\n                                >\n                                    <Grid item>\n                                        {item.displayName}\n                                    </Grid>\n                                    {allEnvRevision && allEnvRevision.find((env) => env.id === item.id) && (\n                                        <Grid item>\n                                            <Box ml={2}>\n                                                <Tooltip\n                                                    title={getDeployments(item.id)}\n                                                    placement='bottom'\n                                                >\n                                                    <Grid className={classes.active} />\n                                                </Tooltip>\n                                            </Box>\n                                        </Grid>\n                                    )}\n                                </Grid>\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                </div>\n            )}\n\n            <VerticalDivider height={70} />\n            <GoTo\n                setOpenPageSearch={setOpenPageSearch}\n                openPageSearch={openPageSearch}\n                api={api}\n                isAPIProduct={isAPIProduct}\n            />\n            {(isVisibleInStore) && <VerticalDivider height={70} />}\n            {(isVisibleInStore) && (\n                <a\n                    target='_blank'\n                    rel='noopener noreferrer'\n                    href={devportalUrl}\n                    className={classes.viewInStoreLauncher}\n                    style={{ minWidth: 90 }}\n                >\n                    <div>\n                        <LaunchIcon />\n                    </div>\n                    <Typography variant='caption'>\n                        <FormattedMessage\n                            id='Apis.Details.components.APIDetailsTopMenu.view.in.portal'\n                            defaultMessage='View in Dev Portal'\n                        />\n                    </Typography>\n                </a>\n            )}\n            {/* Page error banner */}\n            {/* end of Page error banner */}\n            {isAPIProduct || api.isRevision\n                ? null : <CreateNewVersionButton buttonClass={classes.viewInStoreLauncher} api={api} />}\n            {(isDownloadable) && <VerticalDivider height={70} />}\n            <div className={classes.downloadApi}>\n                {(isDownloadable) && (\n                    <a\n                        onClick={exportAPI}\n                        onKeyDown={null}\n                        className={classes.downloadApiFlex}\n                        id='download-api-btn'\n                    >\n                        <div>\n                            <CloudDownloadRounded />\n                        </div>\n                        <Typography variant='caption' align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDetailsTopMenu.download.api'\n                                defaultMessage='Download API'\n                            />\n                        </Typography>\n                    </a>\n                )}\n            </div>\n            {api.isRevision || isRestricted(['apim:api_create'], api)\n                ? (<div className={classes.revisionWrapper} />)\n                : (<DeleteApiButton buttonClass={classes.viewInStoreLauncher} api={api} isAPIProduct={isAPIProduct} />)}\n        </div>\n    );\n};\n\nAPIDetailsTopMenu.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    isAPIProduct: PropTypes.bool.isRequired,\n    imageUpdate: PropTypes.number.isRequired,\n};\n\n// export default withStyles(styles, { withTheme: true })(APIDetailsTopMenu);\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(APIDetailsTopMenu));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint object-shorthand: 0 */\n/* eslint jsx-a11y/click-events-have-key-events: 0 */\n\n/* eslint no-unused-expressions: 0 */\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Downshift from 'downshift';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@material-ui/core/Icon';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport SearchIcon from '@material-ui/icons/Search';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport GoToSuggestions from 'AppComponents/Apis/Details/GoTo/Components/GoToSuggestions';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        height: 250,\n    },\n    container: {\n        flexGrow: 1,\n        position: 'relative',\n    },\n    paper: {\n        position: 'absolute',\n        zIndex: theme.zIndex.goToSearch,\n        marginTop: theme.spacing(2),\n        padding: theme.spacing(1),\n        left: 0,\n        right: 0,\n    },\n    chip: {\n        margin: theme.spacing(0.5, 0.25),\n    },\n    inputRoot: {\n        flexWrap: 'wrap',\n    },\n    inputInput: {\n        width: 'auto',\n        flexGrow: 1,\n        fontSize: '20px',\n    },\n    divider: {\n        height: theme.spacing(2),\n    },\n    linkButton: {\n        display: 'grid',\n        alignItems: 'center',\n        flexDirection: 'column',\n        padding: 10,\n        cursor: 'pointer',\n        minWidth: 30,\n    },\n    goToWrapper: {\n        position: 'relative',\n    },\n    downshiftWrapper: {\n        padding: theme.spacing(1),\n        background: theme.palette.background.paper,\n        borderRadius: 10,\n        width: '70vw',\n        marginBottom: '20%',\n        boxShadow: '0px 0px 20px 3px rgb(0 0 0 / 56%)',\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n        backdropFilter: 'blur(1px)',\n    },\n}));\n\n/**\n * Method to render the input of the user\n * @param {*} inputProps inputProps\n * @returns {*} TextField\n */\nfunction renderInput(inputProps) {\n    const {\n        InputProps, classes, ref, ...other\n    } = inputProps;\n\n    return (\n        <TextField\n            variant='outlined'\n            autoFocus\n            InputProps={{\n                inputRef: ref,\n                autoFocus: true,\n                classes: {\n                    root: classes.inputRoot,\n                    input: classes.inputInput,\n                },\n                startAdornment: (\n                    <InputAdornment position='start'>\n                        <SearchIcon color='disabled' fontSize='large' />\n                    </InputAdornment>\n                ),\n                ...InputProps,\n            }}\n            {...other}\n        />\n    );\n}\n\nrenderInput.propTypes = {\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes: PropTypes.shape({}).isRequired,\n    InputProps: PropTypes.shape({}).isRequired,\n};\n\n/**\n * Method to render the GoTo search feature\n * @param {*} props props param\n * @returns {*} Downshift element\n */\nfunction GoTo(props) {\n    const {\n        isAPIProduct, api, openPageSearch, setOpenPageSearch,\n    } = props;\n    const classes = useStyles();\n    const [showSearch, setShowSearch] = useState(openPageSearch);\n    const intl = useIntl();\n    useEffect(() => {\n        setShowSearch(openPageSearch);\n    }, [openPageSearch]);\n    let isGraphQL = false;\n\n    if (api.type === 'GRAPHQL') {\n        isGraphQL = true;\n    }\n    const toggleSearch = () => {\n        setShowSearch(!showSearch);\n    };\n    const handleClickAway = () => {\n        setShowSearch(false);\n        setOpenPageSearch(false);\n    };\n\n    return (\n        <div className={classes.goToWrapper}>\n            <Button className={classes.linkButton} onClick={toggleSearch}>\n                <Icon>find_in_page</Icon>\n                <Typography variant='caption'>\n                    <FormattedMessage id='Apis.Details.GoTo.GoTo.btn' defaultMessage='Go To' />\n                </Typography>\n            </Button>\n            <Backdrop className={classes.backdrop} open={showSearch} onClick={handleClickAway}>\n                <div onClick={(e) => { e.stopPropagation(); e.preventDefault(); }} className={classes.downshiftWrapper}>\n                    {showSearch && (\n                        <Downshift id='page-search'>\n                            {({\n                                getInputProps,\n                                getItemProps,\n                                getLabelProps,\n                                getMenuProps,\n                                highlightedIndex,\n                                inputValue,\n                                isOpen,\n                                selectedItem,\n                            }) => {\n                                const { onBlur, onFocus, ...inputProps } = getInputProps({\n                                    placeholder: intl.formatMessage({\n                                        id: 'Apis.Details.GoTo.button.placeholder',\n                                        defaultMessage: 'Page Search',\n                                    }),\n                                });\n\n                                return (\n                                    <div className={classes.container}>\n                                        {renderInput({\n                                            fullWidth: true,\n                                            classes,\n                                            InputLabelProps: getLabelProps({ shrink: true }),\n                                            InputProps: { onBlur, onFocus },\n                                            inputProps,\n                                        })}\n\n                                        <div {...getMenuProps()}>\n                                            {isOpen ? (\n                                                <GoToSuggestions\n                                                    inputValue={inputValue}\n                                                    isAPIProduct={isAPIProduct}\n                                                    isGraphQL={isGraphQL}\n                                                    getItemProps={getItemProps}\n                                                    highlightedIndex={highlightedIndex}\n                                                    selectedItem={selectedItem}\n                                                    handleClickAway={handleClickAway}\n                                                    apiId={api.id}\n                                                />\n                                            ) : null}\n                                        </div>\n                                    </div>\n                                );\n                            }}\n                        </Downshift>\n                    )}\n                </div>\n            </Backdrop>\n        </div>\n    );\n}\n\nGoTo.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    isAPIProduct: PropTypes.bool.isRequired,\n};\n\nexport default GoTo;\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport deburr from 'lodash/deburr';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\n\nimport suggestions from 'AppComponents/Apis/Details/GoTo/RouteMappings';\nimport GoToSuggestion from 'AppComponents/Apis/Details/GoTo/Components/GoToSuggestion';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position: 'absolute',\n        zIndex: theme.zIndex.goToSearch,\n        marginTop: theme.spacing(2),\n        padding: theme.spacing(1),\n        left: 0,\n        right: 0,\n        maxHeight: '60vh',\n        overflowY: 'scroll',\n    },\n}));\n\n/**\n * Method to retrieve suggestions\n * @param {*} value Value of suggestion\n * @param {*} isAPIProduct Boolean to check if it is an APIProduct\n * @param {*} param2 showEmpty\n * @returns {*} filter\n */\nfunction getSuggestions(value, isAPIProduct, isGraphQL, { showEmpty = false } = {}) {\n    const inputValue = deburr(value.trim()).toLowerCase();\n    const inputLength = inputValue.length;\n    let count = 0;\n    const newSuggestions = [...suggestions.common];\n\n    if (isAPIProduct) {\n        newSuggestions.push(...suggestions.productOnly);\n    } else if (isGraphQL) {\n        newSuggestions.push(...suggestions.graphqlOnly);\n    } else {\n        newSuggestions.push(...suggestions.apiOnly);\n    }\n\n    return inputLength === 0 && !showEmpty\n        ? []\n        : newSuggestions.filter((suggestion) => {\n            const keep = count < 15 && suggestion.label.match(new RegExp(inputValue, 'gi'));\n\n            if (keep) {\n                count += 1;\n            }\n\n            return keep;\n        });\n}\n\n\nconst GoToSuggestions = (props) => {\n    const {\n        inputValue, isAPIProduct, isGraphQL, getItemProps, highlightedIndex, selectedItem, handleClickAway, apiId,\n    } = props;\n    const classes = useStyles();\n    const currentSuggestions = getSuggestions(inputValue, isAPIProduct, isGraphQL);\n    return (\n        <Paper className={classes.paper} square>\n            {currentSuggestions.length > 0\n                ? currentSuggestions.map((suggestion, index) => (\n                    <GoToSuggestion\n                        suggestion={suggestion}\n                        index={index}\n                        itemProps={getItemProps({ item: suggestion.label })}\n                        highlightedIndex={highlightedIndex}\n                        selectedItem={selectedItem}\n                        handleClickAway={handleClickAway}\n                        apiId={apiId}\n                    />\n                ))\n                : (\n                    <Box\n                        m={3}\n                        color='text.secondary'\n                        fontSize='h5.fontSize'\n                        fontFamily='fontFamily'\n                        display='flex'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.GoTo.Components.GoToSuggestions.no.result'\n                            defaultMessage='There are no results for this query'\n                        />\n                    </Box>\n                )}\n        </Paper>\n    );\n};\n\n\nexport default GoToSuggestions;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nconst suggestions = {\n    common: [\n        {\n            label: 'comments',\n            route: 'comments',\n        },\n        {\n            label: 'Gateway URLs',\n            route: 'deployments',\n        },\n        {\n            label: 'Overview',\n            route: 'overview',\n        },\n        {\n            label: 'MetaData',\n            route: 'overview',\n        },\n        {\n            label: 'Runtime Configurations',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Transport Level Security',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Mutual SSL',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Design Configurations',\n            route: 'configuration',\n        },\n        {\n            label: 'Manage SSL Certificates',\n            route: 'configuration',\n        },\n        {\n            label: 'HTTP HTTPS enable disable',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Application Level Security',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Enable/Disable OAuth2',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Enable/Disable Basic Auth',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Enable/Disable Api Key',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Authorization Headers',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'CORS Configuration',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Backend Throughput',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Message Mediation',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Response',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Request',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Backend',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Access Control Allow Origins',\n            route: 'configuration',\n        },\n        {\n            label: 'Access Control Allow Headers',\n            route: 'configuration',\n        },\n        {\n            label: 'Access Control Allow Credentials',\n            route: 'configuration',\n        },\n        {\n            label: 'Response caching',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Publisher Access Control',\n            route: 'configuration',\n        },\n        {\n            label: 'Developer Portal Visibility',\n            route: 'configuration',\n        },\n        {\n            label: 'Tags',\n            route: 'configuration',\n        },\n        {\n            label: 'Default Version',\n            route: 'configuration',\n        },\n        {\n            label: 'Image',\n            route: 'configuration',\n        },\n        {\n            label: 'Thumbnail',\n            route: 'configuration',\n        },\n        {\n            label: 'Description',\n            route: 'configuration',\n        },\n        {\n            label: 'Documents',\n            route: 'documents',\n        },\n        {\n            label: 'Add New Documents',\n            route: 'documents',\n        },\n        {\n            label: 'API Help',\n            route: 'documents',\n        },\n        {\n            label: 'Markdown Documents',\n            route: 'documents',\n        },\n        {\n            label: 'Business Information',\n            route: 'business info',\n        },\n        {\n            label: 'Business Owner',\n            route: 'business info',\n        },\n        {\n            label: 'Technical Owner',\n            route: 'business info',\n        },\n        {\n            label: 'Properties',\n            route: 'business info',\n        },\n        {\n            label: 'Subscriptions',\n            route: 'subscriptions',\n        },\n        {\n            label: 'Subscription Policies',\n            route: 'subscriptions',\n        },\n        {\n            label: 'Subscription Availability',\n            route: 'subscriptions',\n        },\n        {\n            label: 'Revisions',\n            route: 'deployments',\n        },\n        {\n            label: 'VHosts',\n            route: 'deployments',\n        },\n    ],\n    apiOnly: [\n        {\n            label: 'API Gateways',\n            route: 'deployments',\n        },\n        {\n            label: 'Environments',\n            route: 'deployments',\n        },\n        {\n            label: 'Deployments',\n            route: 'deployments',\n        },\n        {\n            label: 'Lifecycle',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Publish API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Block API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Depricate API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Change Lifecycle',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Deploy as a Prototype API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Requirements',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Mediation Policies',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Monetization',\n            route: 'monetization',\n        },\n        {\n            label: 'Monetization Properties',\n            route: 'monetization',\n        },\n        {\n            label: 'Commercial Policies',\n            route: 'monetization',\n        },\n        {\n            label: 'Create New Version',\n            route: 'new_version',\n        },\n        {\n            label: 'Prototyped API',\n            route: 'endpoints',\n        },\n        {\n            label: 'AWS Lambda Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'HTTP/HTTPS Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'HTTP/SOAP Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'Dynamic Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'Endpoint Security',\n            route: 'endpoints',\n        },\n        {\n            label: 'Certificates',\n            route: 'endpoints',\n        },\n        {\n            label: 'Production Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Sandbox Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Failover Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Load Balance Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Import API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Download API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'Import Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'Download Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'Import OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'Download OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Import OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Download OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Resources',\n            route: 'resources',\n        },\n        {\n            label: 'Resources Configuration',\n            route: 'resources',\n        },\n        {\n            label: 'Rate Limiting',\n            route: 'resources',\n        },\n        {\n            label: 'Operation Governance',\n            route: 'resources',\n        },\n        {\n            label: 'Scopes',\n            route: 'scopes',\n        },\n        {\n            label: 'Add New Scope',\n            route: 'scopes',\n        },\n        {\n            label: 'Schema validation',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Fault',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Endpoints',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Properties',\n            route: 'properties',\n        },\n        {\n            label: 'Policies',\n            route: 'policies'\n        }\n    ],\n    productOnly: [\n        {\n            label: 'Product only feature',\n            route: 'configuration',\n        },\n        {\n            label: 'API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Import API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Download API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'Import Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'Download Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'Import OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'Download OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Import OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Download OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Resources',\n            route: 'resources',\n        },\n        {\n            label: 'Resources Configuration',\n            route: 'resources',\n        },\n        {\n            label: 'Rate Limiting',\n            route: 'resources',\n        },\n        {\n            label: 'Operation Governance',\n            route: 'resources',\n        },\n        {\n            label: 'Schema validation',\n            route: 'runtime-configuration',\n        },\n    ],\n    graphqlOnly: [\n        {\n            label: 'Operations',\n            route: 'operations',\n        },\n        {\n            label: 'Operation Type',\n            route: 'operations',\n        },\n        {\n            label: 'Operations Configuration',\n            route: 'operations',\n        },\n        {\n            label: 'Rate Limiting',\n            route: 'operations',\n        },\n        {\n            label: 'Schema Definition',\n            route: 'schema definition',\n        },\n        {\n            label: 'Scopes',\n            route: 'scopes',\n        },\n        {\n            label: 'Add New Scope',\n            route: 'scopes',\n        },\n        {\n            label: 'Fault',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Endpoints',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Environments',\n            route: 'deployments',\n        },\n        {\n            label: 'Deployments',\n            route: 'deployments',\n        },\n        {\n            label: 'API Gateways',\n            route: 'deployments',\n        },\n        {\n            label: 'Lifecycle',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Publish API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Block API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Depricate API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Change Lifecycle',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Deploy as a Prototype API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Requirements',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Monetization',\n            route: 'monetization',\n        },\n        {\n            label: 'Monetization Properties',\n            route: 'monetization',\n        },\n        {\n            label: 'Commercial Policies',\n            route: 'monetization',\n        },\n        {\n            label: 'Create New Version',\n            route: 'new_version',\n        },\n        {\n            label: 'Prototyped API',\n            route: 'endpoints',\n        },\n        {\n            label: 'AWS Lambda Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'HTTP/HTTPS Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'HTTP/SOAP Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'Dynamic Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'Endpoint Security',\n            route: 'endpoints',\n        },\n        {\n            label: 'Certificates',\n            route: 'endpoints',\n        },\n        {\n            label: 'Production Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Sandbox Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Failover Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Load Balance Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'Fault',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Endpoints',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Properties',\n            route: 'properties',\n        },\n    ],\n};\nexport default suggestions;\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Link as RouterLink } from 'react-router-dom';\nimport Link from '@material-ui/core/Link';\nimport PropTypes from 'prop-types';\n\n/**\n * Method to render the suggestions\n * @param {*} suggestionProps suggestionProps\n * @returns {*} ListItem list of suggestions\n */\nfunction RenderSuggestion(suggestionProps) {\n    const {\n        suggestion, index, itemProps, highlightedIndex, isAPIProduct, handleClickAway, apiId,\n    } = suggestionProps;\n    const isHighlighted = highlightedIndex === index;\n\n    const route = (isAPIProduct\n        ? (`/api-products/${apiId}/${suggestion.route}`)\n        : (`/apis/${apiId}/${suggestion.route}`));\n    return (\n        <Link\n            component={RouterLink}\n            to={route}\n            underline='none'\n            onClick={handleClickAway}\n        >\n            <ListItem\n                key={suggestion.label}\n                {...itemProps}\n                selected={isHighlighted}\n                button\n                aria-haspopup='true'\n                aria-controls='lock-menu'\n                aria-label='when device is locked'\n            >\n                <ListItemText primary={suggestion.label} secondary={suggestion.route} />\n            </ListItem>\n        </Link>\n    );\n}\n\nRenderSuggestion.propTypes = {\n    highlightedIndex: PropTypes.oneOfType([PropTypes.oneOf([null]), PropTypes.number]).isRequired,\n    index: PropTypes.number.isRequired,\n    itemProps: PropTypes.shape({}).isRequired,\n    selectedItem: PropTypes.string.isRequired,\n    suggestion: PropTypes.shape({\n        label: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nexport default RenderSuggestion;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\n\nimport LibraryAdd from '@material-ui/icons/LibraryAdd';\nimport PropTypes from 'prop-types';\nimport { Link, withRouter } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\n\nimport { resourceMethod, resourcePath, ScopeValidation } from 'AppData/ScopeValidation';\nimport VerticalDivider from 'AppComponents/Shared/VerticalDivider';\n\nconst styles = (theme) => ({\n    root: {\n        height: 70,\n        background: theme.palette.background.paper,\n        borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        display: 'flex',\n        alignItems: 'center',\n    },\n    backLink: {\n        alignItems: 'center',\n        textDecoration: 'none',\n        display: 'flex',\n    },\n    backIcon: {\n        color: theme.palette.primary.main,\n        fontSize: 56,\n        cursor: 'pointer',\n    },\n    backText: {\n        color: theme.palette.primary.main,\n        cursor: 'pointer',\n        fontFamily: theme.typography.fontFamily,\n    },\n    createNewVersionWrapper: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    createNewVersion: {\n        display: 'flex',\n        flexDirection: 'column',\n        textAlign: 'center',\n        justifyContent: 'center',\n        cursor: 'pointer',\n        color: theme.custom.createNewVersionButtonColor || 'inherit',\n    },\n    linkText: {\n        fontSize: theme.typography.fontSize,\n    },\n});\n\n/**\n *\n * Function to create a 'CreateNewVersion' button\n *\n * @param {any} props props\n * @returns {*} React CreateNewVersion function component\n * @constructor\n */\nfunction CreateNewVersionButton(props) {\n    const { api, classes } = props;\n    return (\n        <>\n            {/* allowing create new version based on scopes */}\n            <ScopeValidation resourceMethod={resourceMethod.POST} resourcePath={resourcePath.API_COPY}>\n                <div className={classes.createNewVersionWrapper} id='create-new-version-btn'>\n                    <VerticalDivider height={70} />\n                    <Link\n                        className={classes.createNewVersion}\n                        to={'/apis/' + api.id + '/new_version'}\n                        style={{ minWidth: 95 }}\n                    >\n\n                        <div>\n                            <LibraryAdd />\n                        </div>\n                        <Typography variant='caption'>\n                            <FormattedMessage\n                                id='Apis.Details.components.CreateNewVersionButton.create.new.version'\n                                defaultMessage='Create New Version'\n                            />\n                        </Typography>\n                    </Link>\n                </div>\n            </ScopeValidation>\n        </>\n    );\n}\n\nCreateNewVersionButton.propTypes = {\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    history: PropTypes.shape({ push: PropTypes.func }).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nexport default withRouter(withStyles(styles, { withTheme: true })(CreateNewVersionButton));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { FormattedMessage } from 'react-intl';\nimport API from 'AppData/api.js';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIValidation from 'AppData/APIValidation';\n\nconst styles = (theme) => ({\n    FormControl: {\n        padding: 0,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormControlOdd: {\n        padding: 0,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    buttonWrapper: {\n        paddingTop: 20,\n    },\n    paperRoot: {\n        padding: 20,\n        marginTop: 20,\n    },\n});\n\n/**\n *\n *\n * @class BusinessInformation\n * @extends {React.Component}\n */\nclass BusinessInformation extends React.Component {\n    /**\n     *Creates an instance of BusinessInformation.\n     * @param {*} props\n     * @memberof BusinessInformation\n     */\n    constructor(props) {\n        super(props);\n        const {\n            businessOwner,\n            businessOwnerEmail,\n            technicalOwner,\n            technicalOwnerEmail,\n        } = this.props.api.businessInformation;\n        this.state = {\n            businessOwner,\n            businessOwnerEmail,\n            technicalOwner,\n            technicalOwnerEmail,\n        };\n        this.isFormUpdated = false;\n        this.isValidBusinessOwnerEmail = true;\n        this.isValidTechnicalOwnerEmail = true;\n    }\n\n    handleChange = (name) => (event) => {\n        let { value } = event.target;\n        const { checked } = event.target;\n        if (name === 'accessControlRoles' || name === 'visibleRoles') {\n            value = value.split(',');\n        } else if (name === 'isDefaultVersion') {\n            value = value === 'yes';\n        } else if (name === 'responseCaching') {\n            value = checked ? 'Enabled' : 'Disabled';\n        }\n        // Validate whether given email addresses are valid.\n        if (name === 'businessOwnerEmail') {\n            const emailStatus = APIValidation.email.validate(value).error;\n            this.isValidBusinessOwnerEmail = (emailStatus === null || value === '');\n        }\n        if (name === 'technicalOwnerEmail') {\n            const emailStatus = APIValidation.email.validate(value).error;\n            this.isValidTechnicalOwnerEmail = (emailStatus === null || value === '');\n        }\n        this.isFormUpdated = true;\n        this.setState({ [name]: value });\n    };\n\n    isValid = () => {\n        return (this.isValidBusinessOwnerEmail && this.isValidTechnicalOwnerEmail && this.isFormUpdated);\n    }\n\n    /**\n     *\n     *\n     * @param {*} oldAPI\n     * @param {*} updateAPI\n     * @memberof BusinessInformation\n     */\n    handleSubmit(updateAPI) {\n        const {\n            businessOwner, businessOwnerEmail, technicalOwner, technicalOwnerEmail,\n        } = this.state;\n        const businessInformation = {\n            businessOwner, businessOwnerEmail, technicalOwner, technicalOwnerEmail,\n        };\n        updateAPI({ businessInformation });\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @returns\n     * @memberof BusinessInformation\n     */\n    render() {\n        const { classes, api, updateAPI } = this.props;\n        const {\n            businessOwner, businessOwnerEmail, technicalOwner, technicalOwnerEmail,\n        } = this.state;\n\n        return (\n            <>\n                <Container maxWidth='md'>\n                    <Box mb={3}>\n                        <Typography id='itest-api-details-bushiness-info-head' variant='h4' component='h2'>\n                            <FormattedMessage\n                                id='Apis.Details.BusinessInformation.BusinessInformation.business.info'\n                                defaultMessage='Business Information'\n                            />\n                        </Typography>\n                        {api.apiType === API.CONSTS.APIProduct\n                            ? (\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        id='Apis.Details.BusinessInformation.BusinessInformation.APIProduct.sub.heading'\n                                        defaultMessage='Business Information of the API Product'\n                                    />\n                                </Typography>\n                            )\n                            : (\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        id='Apis.Details.BusinessInformation.BusinessInformation.sub.heading'\n                                        defaultMessage='Business Information of the API'\n                                    />\n                                </Typography>\n                            )}\n                    </Box>\n                    <Paper elevation={0}>\n                        <Box px={8} py={5}>\n                            <form noValidate autoComplete='off'>\n                                <TextField\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    fullWidth\n                                    id='name'\n                                    label={(\n                                        <>\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                    + '.business.owner.name'\n                                                }\n                                                defaultMessage='Business Owner'\n                                            />\n                                        </>\n                                    )}\n                                    helperText={(\n                                        <FormattedMessage\n                                            id={\n                                                'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.business.owner.name.helper.text'\n                                            }\n                                            defaultMessage='Provide the name of the business owner'\n                                        />\n                                    )}\n                                    type='text'\n                                    name='name'\n                                    margin='normal'\n                                    variant='outlined'\n                                    value={businessOwner}\n                                    onChange={this.handleChange('businessOwner')}\n                                    autoFocus\n                                />\n                                <TextField\n                                    error={!this.isValidBusinessOwnerEmail}\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    fullWidth\n                                    id='Email'\n                                    label={(\n                                        <>\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation.'\n                                                    + 'business.owner.email'\n                                                }\n                                                defaultMessage='Business Owner Email'\n                                            />\n                                        </>\n                                    )}\n                                    helperText={this.isValidBusinessOwnerEmail\n                                        ? (\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.business.owner.email.helper.text'\n                                                }\n                                                defaultMessage='Provide the email of the business owner'\n                                            />\n                                        )\n                                        : (\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.business.owner.email.helper.text'\n                                                + '.error'\n                                                }\n                                                defaultMessage='Please enter a valid email address'\n                                            />\n                                        )}\n                                    type='email'\n                                    name='name'\n                                    margin='normal'\n                                    value={businessOwnerEmail}\n                                    onChange={this.handleChange('businessOwnerEmail')}\n                                    variant='outlined'\n                                />\n                                <TextField\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    fullWidth\n                                    id='TOname'\n                                    label={(\n                                        <>\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                    + '.technical.owner.name'\n                                                }\n                                                defaultMessage='Technical Owner'\n                                            />\n                                        </>\n                                    )}\n                                    helperText={(\n                                        <FormattedMessage\n                                            id={\n                                                'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.technical.owner.name.helper.text'\n                                            }\n                                            defaultMessage='Provide the name of the technical owner'\n                                        />\n                                    )}\n                                    type='text'\n                                    name='name'\n                                    margin='normal'\n                                    value={technicalOwner}\n                                    onChange={this.handleChange('technicalOwner')}\n                                    variant='outlined'\n                                />\n                                <TextField\n                                    error={!this.isValidTechnicalOwnerEmail}\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    fullWidth\n                                    id='TOemail'\n                                    label={(\n                                        <FormattedMessage\n                                            id={\n                                                'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.technical.owner.email'\n                                            }\n                                            defaultMessage='Technical Owner Email'\n                                        />\n                                    )}\n                                    helperText={this.isValidTechnicalOwnerEmail\n                                        ? (\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.technical.owner.email.helper.text'\n                                                }\n                                                defaultMessage='Provide the email of the technical owner'\n                                            />\n                                        )\n                                        : (\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.technical.owner.email.helper.text'\n                                                + '.error'\n                                                }\n                                                defaultMessage='Please enter a valid email address'\n                                            />\n                                        )}\n                                    type='email'\n                                    name='name'\n                                    margin='normal'\n                                    value={technicalOwnerEmail}\n                                    onChange={this.handleChange('technicalOwnerEmail')}\n                                    variant='outlined'\n                                />\n                            </form>\n                            <div className={classes.buttonWrapper}>\n                                <Grid\n                                    container\n                                    direction='row'\n                                    alignItems='flex-start'\n                                    spacing={1}\n                                    className={classes.buttonSection}\n                                >\n                                    <Grid item>\n                                        <div>\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                onClick={() => this.handleSubmit(updateAPI)}\n                                                disabled={\n                                                    isRestricted(['apim:api_create', 'apim:api_publish'], api)\n                                                    || !this.isValid() || api.isRevision\n                                                }\n                                                id='business-info-save'\n                                            >\n                                                <FormattedMessage id='save' defaultMessage='Save' />\n                                            </Button>\n                                        </div>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button\n                                            component={Link}\n                                            to={\n                                                (api.apiType === API.CONSTS.APIProduct ? '/api-products/' : '/apis/')\n                                                + api.id\n                                                + '/overview'\n                                            }\n                                        >\n                                            <FormattedMessage id='cancel' defaultMessage='Cancel' />\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                        </Box>\n                    </Paper>\n                </Container>\n            </>\n        );\n    }\n}\n\nBusinessInformation.propTypes = {\n    state: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n        businessInformation: PropTypes.shape({\n            businessOwner: PropTypes.string,\n            businessOwnerEmail: PropTypes.string,\n            technicalOwner: PropTypes.string,\n            technicalOwnerEmail: PropTypes.string,\n            apiType: PropTypes.oneOf([API.CONSTS.API, API.CONSTS.APIProduct]),\n        }).isRequired,\n    }).isRequired,\n    updateAPI: PropTypes.func.isRequired,\n};\n\nexport default withAPI(withStyles(styles)(BusinessInformation));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\n/* eslint-disable react/jsx-no-bind */\n\nimport React, { useState, useContext } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport cloneDeep from 'lodash.clonedeep';\nimport isEmpty from 'lodash.isempty';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Box from '@material-ui/core/Box';\nimport APIContext, { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api.js';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport { isRestricted } from 'AppData/AuthManager';\nimport Alert from 'AppComponents/Shared/Alert';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport EditableRow from './EditableRow';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        paddingTop: 0,\n        paddingLeft: 0,\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    FormControl: {\n        padding: 0,\n        width: '100%',\n        marginTop: 0,\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    FormControlOdd: {\n        padding: 0,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    buttonWrapper: {\n        paddingTop: theme.spacing(3),\n    },\n    paperRoot: {\n        padding: theme.spacing(3),\n        marginTop: theme.spacing(3),\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n    },\n    addProperty: {\n        marginRight: theme.spacing(2),\n    },\n    buttonIcon: {\n        marginRight: theme.spacing(1),\n    },\n    link: {\n        cursor: 'pointer',\n    },\n    messageBox: {\n        marginTop: 20,\n    },\n    actions: {\n        padding: '20px 0',\n        '& button': {\n            marginLeft: 0,\n        },\n    },\n    head: {\n        fontWeight: 200,\n        marginBottom: 20,\n    },\n    marginRight: {\n        marginRight: theme.spacing(1),\n    },\n    helpText: {\n        paddingTop: theme.spacing(1),\n    },\n    checkBoxStyles: {\n        whiteSpace: 'nowrap',\n        marginLeft: 10,\n    },\n    tableHead: {\n        fontWeight: 600,\n    },\n    table: {\n        '& th': {\n            fontWeight: 600,\n        },\n    },\n}));\n\n/**\n *\n *\n * @class Properties\n * @extends {React.Component}\n */\nfunction Properties(props) {\n    /**\n     * @inheritdoc\n     * @param {*} props properties\n     */\n    const { intl } = props;\n    const classes = useStyles();\n    const history = useHistory();\n    const { api, updateAPI } = useContext(APIContext);\n    const additionalPropertiesTemp = cloneDeep(api.additionalProperties);\n\n    if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'github_repo')) {\n        delete additionalPropertiesTemp.github_repo;\n    }\n    if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'slack_url')) {\n        delete additionalPropertiesTemp.slack_url;\n    }\n\n    const [additionalProperties, setAdditionalProperties] = useState(additionalPropertiesTemp);\n    const [showAddProperty, setShowAddProperty] = useState(false);\n    const [propertyKey, setPropertyKey] = useState(null);\n    const [propertyValue, setPropertyValue] = useState(null);\n    const [isUpdating, setUpdating] = useState(false);\n    const [editing, setEditing] = useState(false);\n    const [isAdditionalPropertiesStale, setIsAdditionalPropertiesStale] = useState(false);\n    const [isVisibleInStore, setIsVisibleInStore] = useState(false);\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n\n    const keywords = ['provider', 'version', 'context', 'status', 'description',\n        'subcontext', 'doc', 'lcstate', 'name', 'tags'];\n\n    const toggleAddProperty = () => {\n        setShowAddProperty(!showAddProperty);\n    };\n    const handleChange = (name) => (event) => {\n        const { value } = event.target;\n        if (name === 'propertyKey') {\n            setPropertyKey(value);\n        } else if (name === 'propertyValue') {\n            setPropertyValue(value);\n        }\n    };\n\n    /**\n     *\n     *\n     * @param {*} itemValue\n     * @returns\n     * @memberof Properties\n     */\n    const validateEmpty = function (itemValue) {\n        if (itemValue === null) {\n            return false;\n        } else if (!isVisibleInStore && itemValue === '') {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    const isKeyword = (itemValue) => {\n        if (itemValue === null) {\n            return false;\n        }\n        return keywords.includes(itemValue.toLowerCase());\n    };\n    const hasWhiteSpace = (itemValue) => {\n        if (itemValue === null) {\n            return false;\n        }\n        const whitespaceChars = [' ', '\\t', '\\n'];\n        return Array.from(itemValue).some((char) => whitespaceChars.includes(char));\n    };\n    /**\n     *\n     *\n     * @param {*} oldAPI\n     * @param {*} updateAPI\n     * @memberof Properties\n     */\n    const handleSave = () => {\n        setUpdating(true);\n        if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'github_repo')) {\n            additionalProperties.github_repo = api.additionalProperties.github_repo;\n        }\n        if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'slack_url')) {\n            additionalProperties.slack_url = api.additionalProperties.slack_url;\n        }\n        const additionalPropertiesCopyForMap = cloneDeep(additionalProperties);\n        const additionalPropertiesMap = {};\n        additionalPropertiesCopyForMap.map((property) => {\n            additionalPropertiesMap[property.name] = property;\n            return additionalPropertiesMap;\n        });\n        const updatePromise = updateAPI({ additionalProperties, additionalPropertiesMap });\n        updatePromise\n            .then(() => {\n                setUpdating(false);\n            })\n            .catch((error) => {\n                setUpdating(false);\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    };\n\n\n    const handleSaveAndDeploy = () => {\n        setUpdating(true);\n        if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'github_repo')) {\n            additionalProperties.github_repo = api.additionalProperties.github_repo;\n        }\n        if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'slack_url')) {\n            additionalProperties.slack_url = api.additionalProperties.slack_url;\n        }\n        const additionalPropertiesCopyForMap = cloneDeep(additionalProperties);\n        const additionalPropertiesMap = {};\n        additionalPropertiesCopyForMap.map((property) => {\n            additionalPropertiesMap[property.name] = property;\n            return additionalPropertiesMap;\n        });\n        const updatePromise = updateAPI({ additionalProperties, additionalPropertiesMap });\n        updatePromise\n            .then(() => {\n                setUpdating(false);\n            })\n            .catch((error) => {\n                setUpdating(false);\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 401) {\n                    doRedirectToLogin();\n                }\n            })\n            .finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n    };\n\n    /**\n     *\n     *\n     * @param {*} apiAdditionalProperties\n     * @param {*} oldKey\n     * @memberof Properties\n     */\n    const handleDelete = (oldKey) => {\n        let additionalPropertiesCopy = cloneDeep(additionalProperties);\n        additionalPropertiesCopy = additionalPropertiesCopy.filter((property) => property.name !== oldKey);\n        setAdditionalProperties(additionalPropertiesCopy);\n\n        if (additionalPropertiesCopy !== additionalProperties) {\n            setIsAdditionalPropertiesStale(true);\n        }\n    };\n    const validateBeforeAdd = (fieldKey, fieldValue, additionalPropertiesCopy, action = 'add', oldKey) => {\n        if (additionalPropertiesCopy != null && action === 'add') {\n            let valid = true;\n            additionalPropertiesCopy.forEach((property) => {\n                if (property.name === fieldKey) {\n                    Alert.warning(intl.formatMessage({\n                        id: `Apis.Details.Properties.Properties.\n                            property.name.exists`,\n                        defaultMessage: 'Property name already exists',\n                    }));\n                    valid = false;\n                }\n            });\n            return valid;\n        } else if (additionalPropertiesCopy != null && action === 'update' && oldKey === fieldKey) {\n            let valid = true;\n            additionalPropertiesCopy.forEach((property) => {\n                if (property.name === fieldKey) {\n                    Alert.warning(intl.formatMessage({\n                        id: `Apis.Details.Properties.Properties.\n                                property.name.exists`,\n                        defaultMessage: 'Property name already exists',\n                    }));\n                    valid = false;\n                }\n            });\n            return valid;\n        } else if (validateEmpty(fieldKey) || validateEmpty(fieldValue)) {\n            Alert.warning(intl.formatMessage({\n                id: `Apis.Details.Properties.Properties.\n                    property.name.empty.error`,\n                defaultMessage: 'Property name/value can not be empty',\n            }));\n            return false;\n        } else if (isKeyword(fieldKey)) {\n            Alert.warning(intl.formatMessage({\n                id:\n                `Apis.Details.Properties.Properties.\n                    property.name.keyword.error`,\n                defaultMessage:\n                'Property name can not be a system reserved keyword',\n            }));\n            return false;\n        } else if (hasWhiteSpace(fieldKey)) {\n            Alert.warning(intl.formatMessage({\n                id:\n                    `Apis.Details.Properties.Properties.\n                    property.name.has.whitespaces`,\n                defaultMessage:\n                    'Property name can not have any whitespaces in it',\n            }));\n            return false;\n        } else {\n            return true;\n        }\n    };\n    /**\n     *\n     *\n     * @param {*} apiAdditionalProperties\n     * @param {*} oldRow\n     * @param {*} newRow\n     * @memberof Properties\n     */\n    const handleUpdateList = (oldRow, newRow) => {\n        const additionalPropertiesCopy = cloneDeep(additionalProperties);\n\n        const { oldKey, oldValue, isDisplayInStore } = oldRow;\n        const { newKey, newValue, display } = newRow;\n        if (oldKey === newKey && oldValue === newValue && isDisplayInStore === display) {\n            Alert.warning(intl.formatMessage({\n                id: `Apis.Details.Properties.Properties.\n                    no.changes.to.save`,\n                defaultMessage: 'No changes to save',\n            }));\n            return false;\n        }\n        if (!validateBeforeAdd(newKey, newValue, additionalPropertiesCopy, 'update')) {\n            return false;\n        }\n\n        const newProperty = {\n            name: newKey,\n            value: newValue,\n            display,\n        };\n        let newPropertiesList = additionalPropertiesCopy.map((property) => {\n            if (property.name === newKey) {\n                return newProperty;\n            }\n            return property;\n        });\n        if (oldKey !== newKey) {\n            newPropertiesList = newPropertiesList.filter((property) => property.name !== oldKey);\n            newPropertiesList = [...newPropertiesList, newProperty];\n        }\n        setAdditionalProperties(newPropertiesList);\n        return true;\n    };\n    /**\n     *\n     *\n     * @param {*} apiAdditionalProperties\n     * @memberof Properties\n     */\n    const handleAddToList = () => {\n        const additionalPropertiesCopy = cloneDeep(additionalProperties);\n        if (validateBeforeAdd(propertyKey, propertyValue, additionalPropertiesCopy, 'add')) {\n            const newProperty = {\n                name: propertyKey,\n                value: propertyValue,\n                display: isVisibleInStore,\n            };\n            setAdditionalProperties([...additionalPropertiesCopy, newProperty]);\n            setPropertyKey(null);\n            setPropertyValue(null);\n        }\n    };\n\n    /**\n     *\n     *\n     * @memberof Properties\n     */\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            handleAddToList();\n        }\n    };\n\n    const handleChangeVisibleInStore = (event) => {\n        setIsVisibleInStore(event.target.checked);\n    };\n    /**\n     *\n     *\n     * @param {*} additionalProperties\n     * @param {*} apiAdditionalProperties\n     * @returns\n     * @memberof Properties\n     */\n    const renderAdditionalProperties = () => {\n        const items = additionalProperties.map((property) => {\n            return (\n                <EditableRow\n                    oldKey={property.name}\n                    oldValue={property.value}\n                    isDisplayInStore={property.display}\n                    handleUpdateList={handleUpdateList}\n                    handleDelete={handleDelete}\n                    apiAdditionalProperties={additionalProperties}\n                    {...props}\n                    setEditing={setEditing}\n                    isRestricted={isRestricted}\n                    api={api}\n                    validateEmpty={validateEmpty}\n                    isKeyword={isKeyword}\n                />\n            );\n        });\n        return items;\n    };\n    const getKeyValue = () => {\n        if (propertyKey === null) {\n            return '';\n        } else {\n            return propertyKey;\n        }\n    };\n    /**\n     *\n     *\n     * @returns\n     * @memberof Properties\n     */\n    return (\n        <>\n            <div className={classes.titleWrapper}>\n                {api.apiType === API.CONSTS.APIProduct\n                    ? (\n                        <Typography\n                            id='itest-api-details-api-products-properties-head'\n                            variant='h4'\n                            component='h2'\n                            align='left'\n                            className={classes.mainTitle}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Properties.Properties.api.product.properties'\n                                defaultMessage='API Product Properties'\n                            />\n                        </Typography>\n                    )\n                    : (\n                        <Typography\n                            id='itest-api-details-api-properties-head'\n                            variant='h4'\n                            component='h2'\n                            align='left'\n                            className={classes.mainTitle}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Properties.Properties.api.properties'\n                                defaultMessage='API Properties'\n                            />\n                        </Typography>\n                    )}\n\n                {(!isEmpty(additionalProperties) || showAddProperty) && (\n                    <Box ml={1}>\n                        <Button\n                            id='add-new-property'\n                            variant='outlined'\n                            color='primary'\n                            size='small'\n                            onClick={toggleAddProperty}\n                            disabled={showAddProperty\n                            || isRestricted(['apim:api_create', 'apim:api_publish'], api) || api.isRevision}\n                        >\n                            <AddCircle className={classes.buttonIcon} />\n                            <FormattedMessage\n                                id='Apis.Details.Properties.Properties.add.new.property'\n                                defaultMessage='Add New Property'\n                            />\n                        </Button>\n                    </Box>\n                )}\n            </div>\n            <Typography variant='caption' component='div' className={classes.helpText}>\n                <FormattedMessage\n                    id='Apis.Details.Properties.Properties.help.main'\n                    defaultMessage={`Usually, APIs have a pre-defined set of properties such as \n                        the name, version, context, etc. API Properties allows you to \n                         add specific custom properties to the API.`}\n                />\n            </Typography>\n            {isEmpty(additionalProperties) && !isAdditionalPropertiesStale && !showAddProperty && (\n                <div className={classes.messageBox}>\n                    <InlineMessage type='info' height={140}>\n                        <div className={classes.contentWrapper}>\n                            <Typography variant='h5' component='h3' className={classes.head}>\n                                <FormattedMessage\n                                    id='Apis.Details.Properties.Properties.add.new.property.message.title'\n                                    defaultMessage='Create Additional Properties'\n                                />\n                            </Typography>\n                            {api.apiType === API.CONSTS.APIProduct\n                                ? (\n                                    <Typography component='p' className={classes.content}>\n                                        <FormattedMessage\n                                            id='Apis.Details.Properties.Properties.APIProduct.\n                                            add.new.property.message.content'\n                                            defaultMessage={\n                                                'Add specific custom properties to your '\n                                        + 'API here.'\n                                            }\n                                        />\n                                    </Typography>\n                                )\n                                : (\n                                    <Typography component='p' className={classes.content}>\n                                        <FormattedMessage\n                                            id='Apis.Details.Properties.Properties.add.new.property.message.content'\n                                            defaultMessage={\n                                                'Add specific custom properties to your '\n                                        + 'API here.'\n                                            }\n                                        />\n                                    </Typography>\n                                )}\n                            <div className={classes.actions}>\n                                <Button\n                                    id='add-new-property'\n                                    variant='outlined'\n                                    color='primary'\n                                    onClick={toggleAddProperty}\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)\n                                        || api.isRevision}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Properties.Properties.add.new.property'\n                                        defaultMessage='Add New Property'\n                                    />\n                                </Button>\n                            </div>\n                        </div>\n                    </InlineMessage>\n                </div>\n            )}\n            {(!isEmpty(additionalProperties) || showAddProperty || isAdditionalPropertiesStale) && (\n                <Grid container spacing={7}>\n                    <Grid item xs={12}>\n                        <Paper className={classes.paperRoot}>\n                            <Table className={classes.table}>\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>\n                                            <FormattedMessage\n                                                id='Apis.Details.Properties.Properties.add.new.property.table'\n                                                defaultMessage='Property Name'\n                                            />\n                                        </TableCell>\n                                        <TableCell>\n                                            <FormattedMessage\n                                                id='Apis.Details.Properties.Properties.add.new.property.value'\n                                                defaultMessage='Property Value'\n                                            />\n                                        </TableCell>\n                                        <TableCell>\n                                            <FormattedMessage\n                                                id='Apis.Details.Properties.Properties.add.new.property.visibility'\n                                                defaultMessage='Visibility'\n                                            />\n                                        </TableCell>\n                                        <TableCell>\n                                            <Typography variant='srOnly'>\n                                                Action\n                                            </Typography>\n                                        </TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {showAddProperty && (\n                                        <>\n                                            <TableRow>\n                                                <TableCell>\n                                                    <TextField\n                                                        fullWidth\n                                                        required\n                                                        id='property-name'\n                                                        label={intl.formatMessage({\n                                                            id: `Apis.Details.Properties.Properties.\n                                                                show.add.property.property.name`,\n                                                            defaultMessage: 'Name',\n                                                        })}\n                                                        margin='dense'\n                                                        variant='outlined'\n                                                        className={classes.addProperty}\n                                                        value={getKeyValue()}\n                                                        onChange={handleChange('propertyKey')}\n                                                        onKeyDown={handleKeyDown('propertyKey')}\n                                                        helperText={validateEmpty(propertyKey) ? ''\n                                                            : iff((isKeyword(propertyKey)\n                                                                || hasWhiteSpace(propertyKey)), intl.formatMessage({\n                                                                id: `Apis.Details.Properties.Properties.\n                                                                    show.add.property.invalid.error`,\n                                                                defaultMessage: 'Invalid property name',\n                                                            }), '')}\n                                                        error={validateEmpty(propertyKey) || isKeyword(propertyKey)\n                                                        || hasWhiteSpace(propertyKey)}\n                                                        disabled={isRestricted(\n                                                            ['apim:api_create', 'apim:api_publish'],\n                                                            api,\n                                                        )}\n                                                    />\n                                                </TableCell>\n                                                <TableCell>\n                                                    <TextField\n                                                        fullWidth\n                                                        required\n                                                        id='property-value'\n                                                        label={intl.formatMessage({\n                                                            id: 'Apis.Details.Properties.Properties.property.value',\n                                                            defaultMessage: 'Value',\n                                                        })}\n                                                        margin='dense'\n                                                        variant='outlined'\n                                                        className={classes.addProperty}\n                                                        value={propertyValue === null ? '' : propertyValue}\n                                                        onChange={handleChange('propertyValue')}\n                                                        onKeyDown={handleKeyDown('propertyValue')}\n                                                        error={validateEmpty(propertyValue)}\n                                                        disabled={isRestricted(\n                                                            ['apim:api_create', 'apim:api_publish'],\n                                                            api,\n                                                        )}\n                                                    />\n                                                </TableCell>\n                                                <TableCell>\n                                                    <FormControlLabel\n                                                        control={(\n                                                            <Checkbox\n                                                                checked={isVisibleInStore}\n                                                                onChange={handleChangeVisibleInStore}\n                                                                name='checkedB'\n                                                                color='primary'\n                                                            />\n                                                        )}\n                                                        label={intl.formatMessage({\n                                                            id: `Apis.Details.Properties.\n                                                            Properties.editable.show.in.devporal`,\n                                                            defaultMessage: 'Show in devportal',\n                                                        })}\n                                                        className={classes.checkBoxStyles}\n                                                    />\n                                                </TableCell>\n                                                <TableCell align='right'>\n                                                    <Box display='flex'>\n                                                        <Button\n                                                            id='properties-add-btn'\n                                                            variant='contained'\n                                                            color='primary'\n                                                            disabled={\n                                                                !propertyValue\n                                                            || !propertyKey\n                                                            || isRestricted(\n                                                                ['apim:api_create', 'apim:api_publish'], api,\n                                                            )\n                                                            }\n                                                            onClick={handleAddToList}\n                                                            className={classes.marginRight}\n                                                        >\n                                                            <Typography variant='caption' component='div'>\n                                                                <FormattedMessage\n                                                                    id='Apis.Details.Properties.Properties.add'\n                                                                    defaultMessage='Add'\n                                                                />\n                                                            </Typography>\n                                                        </Button>\n\n                                                        <Button onClick={toggleAddProperty}>\n                                                            <Typography variant='caption' component='div'>\n                                                                <FormattedMessage\n                                                                    id='Apis.Details.Properties.Properties.cancel'\n                                                                    defaultMessage='Cancel'\n                                                                />\n                                                            </Typography>\n                                                        </Button>\n                                                    </Box>\n                                                </TableCell>\n                                            </TableRow>\n                                            <TableRow>\n                                                <TableCell colSpan={4}>\n                                                    <Typography variant='caption'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.Properties.Properties.help'\n                                                            defaultMessage={\n                                                                'Property name should be unique, should not contain '\n                                                                + 'spaces, cannot be more than 80 chars '\n                                                                + 'and cannot be any of the following '\n                                                                + 'reserved keywords : '\n                                                                + 'provider, version, context, status, description, '\n                                                                + 'subcontext, doc, lcState, name, tags.'\n                                                            }\n                                                        />\n                                                    </Typography>\n                                                </TableCell>\n                                            </TableRow>\n                                        </>\n                                    )}\n                                    {renderAdditionalProperties()}\n                                </TableBody>\n                            </Table>\n                        </Paper>\n                        <div className={classes.buttonWrapper}>\n                            <Grid\n                                container\n                                direction='row'\n                                alignItems='flex-start'\n                                spacing={1}\n                                className={classes.buttonSection}\n                            >\n                                <Grid item id='save-api-properties'>\n                                    <div>\n                                        {editing || api.isRevision || (isEmpty(additionalProperties)\n                                            && !isAdditionalPropertiesStale)\n                                            || isRestricted(['apim:api_create', 'apim:api_publish'], api) ? (\n                                                <Button\n                                                    id='save-api-properties'\n                                                    disabled\n                                                    type='submit'\n                                                    variant='contained'\n                                                    color='primary'\n                                                >\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Configuration.Configuration.save'\n                                                        defaultMessage='Save'\n                                                    />\n                                                </Button>\n                                            ) : (\n                                                <CustomSplitButton\n                                                    advertiseInfo={api.advertiseInfo}\n                                                    api={api}\n                                                    handleSave={handleSave}\n                                                    handleSaveAndDeploy={handleSaveAndDeploy}\n                                                    isUpdating={isUpdating}\n                                                />\n                                            )}\n                                    </div>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        component={Link}\n                                        to={'/apis/' + api.id + '/overview'}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Properties.Properties.cancel'\n                                            defaultMessage='Cancel'\n                                        />\n                                    </Button>\n                                </Grid>\n                                {isRestricted(['apim:api_create', 'apim:api_publish'], api) && (\n                                    <Grid item xs={12}>\n                                        <Typography variant='body2' color='primary'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Properties.Properties.update.not.allowed'\n                                                defaultMessage='*You are not authorized to update properties of\n                                                    the API due to insufficient permissions'\n                                            />\n                                        </Typography>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </div>\n                    </Grid>\n                </Grid>\n            )}\n        </>\n    );\n}\n\nProperties.propTypes = {\n    state: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\nexport default withAPI(injectIntl(Properties));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\n/* eslint-disable react/jsx-no-bind */\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport EditIcon from '@material-ui/icons/Edit';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport IconButton from '@material-ui/core/IconButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\n\nconst useStyles = makeStyles(() => ({\n    link: {\n        cursor: 'pointer',\n    },\n    checkBoxStyles: {\n        whiteSpace: 'nowrap',\n        marginLeft: 0,\n        paddingLeft: 0,\n    },\n    colorPrimary: {\n        marginLeft: 0,\n        paddingLeft: 0,\n    },\n    cancelButton: {\n        marginLeft: 4,\n    },\n}));\n\n/**\n *\n * @param {*} props properties\n */\nfunction EditableRow(props) {\n    const {\n        oldKey, oldValue, handleUpdateList, handleDelete, intl, setEditing, isRestricted, api,\n        isDisplayInStore, isKeyword, validateEmpty,\n    } = props;\n    const [newKey, setKey] = useState(oldKey);\n    const [newValue, setValue] = useState(oldValue);\n    const [editMode, setEditMode] = useState(false);\n    const [isVisibleInStore, setIsVisibleInStore] = useState(isDisplayInStore);\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n\n    const resetText = () => {\n        setIsVisibleInStore(isDisplayInStore);\n        setKey(oldKey);\n        setValue(oldValue);\n    };\n    useEffect(() => {\n        resetText();\n    }, [oldKey, oldValue]);\n\n    const updateEditMode = () => {\n        setEditMode(!editMode);\n        setEditing(true);\n        resetText();\n    };\n    const handleKeyChange = (event) => {\n        const { value } = event.target;\n        setKey(value);\n    };\n    const handleValueChange = (event) => {\n        const { value } = event.target;\n        setValue(value);\n    };\n    const saveRow = () => {\n        const oldRow = { oldKey, oldValue, isDisplayInStore };\n        const newRow = { newKey, newValue, display: isVisibleInStore };\n        if (handleUpdateList(oldRow, newRow)) {\n            setEditMode(false);\n            setEditing(false);\n        }\n    };\n    const deleteRow = () => {\n        handleDelete(oldKey);\n    };\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            saveRow();\n        }\n    };\n    const handleChangeVisibleInStore = (event) => {\n        setIsVisibleInStore(event.target.checked);\n    };\n    const classes = useStyles();\n\n    return (\n        <TableRow>\n            {editMode ? (\n                <TableCell>\n                    <TextField\n                        fullWidth\n                        required\n                        id='property-name-edit'\n                        label={intl.formatMessage({\n                            id: 'Apis.Details.Properties.Properties.editable.row.property.name',\n                            defaultMessage: 'Property Name',\n                        })}\n                        margin='dense'\n                        variant='outlined'\n                        className={classes.addProperty}\n                        value={newKey}\n                        onChange={handleKeyChange}\n                        onKeyDown={handleKeyDown}\n                        helperText={validateEmpty(newKey) ? ''\n                            : iff(isKeyword(newKey), intl.formatMessage({\n                                id: `Apis.Details.Properties.Properties.\n                                show.add.property.invalid.error`,\n                                defaultMessage: 'Invalid property name',\n                            }), '')}\n                        error={validateEmpty(newKey) || isKeyword(newKey)}\n                    />\n                </TableCell>\n            ) : (\n                <TableCell>\n                    {oldKey}\n                </TableCell>\n            )}\n            {editMode ? (\n                <>\n                    <TableCell>\n                        <TextField\n                            fullWidth\n                            required\n                            id='property-value-edit'\n                            label={intl.formatMessage({\n                                id: 'Apis.Details.Properties.Properties.editable.row.edit.mode.property.value',\n                                defaultMessage: 'Property Value',\n                            })}\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.addProperty}\n                            value={newValue}\n                            onChange={handleValueChange}\n                            onKeyDown={handleKeyDown}\n                            error={validateEmpty(newValue)}\n                        />\n                    </TableCell>\n                    <TableCell>\n                        <FormControlLabel\n                            control={(\n                                <Checkbox\n                                    checked={isVisibleInStore}\n                                    onChange={handleChangeVisibleInStore}\n                                    name='checkedB'\n                                    color='primary'\n                                />\n                            )}\n                            label={intl.formatMessage({\n                                id: 'Apis.Details.Properties.Properties.editable.show.in.devporal',\n                                defaultMessage: 'Show in devportal',\n                            })}\n                            classes={{ root: classes.checkBoxStyles, colorPrimary: classes.colorPrimary }}\n                        />\n                    </TableCell>\n                </>\n            ) : (\n                <>\n                    <TableCell>\n                        <Box display='inline-block' minWidth={150}>\n                            {oldValue}\n                        </Box>\n                    </TableCell>\n                    <TableCell>\n                        {isVisibleInStore && (\n                            <Box display='flex' alignItems='center'>\n                                <VisibilityIcon />\n                                <Box ml={1} display='inline-block'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Properties.Properties.editable.visible.in.store'\n                                        defaultMessage='Visible in devportal'\n                                    />\n                                </Box>\n                            </Box>\n                        )}\n                    </TableCell>\n                </>\n            )}\n            <TableCell align='right'>\n                {editMode ? (\n                    <>\n                        <Button\n                            color='primary'\n                            onClick={saveRow}\n                            onKeyDown={() => { }}\n                            variant='contained'\n                            aria-label={'Update ' + oldKey}\n                        >\n                            <Typography variant='caption' component='div'>\n                                <FormattedMessage\n                                    id='Apis.Details.Properties.Properties.editable.update'\n                                    defaultMessage='Update'\n                                />\n                            </Typography>\n                        </Button>\n                        <Button onClick={updateEditMode} className={classes.cancelButton}>\n                            <Typography variant='caption' component='div'>\n                                <FormattedMessage\n                                    id='Apis.Details.Properties.Properties.editable.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Typography>\n                        </Button>\n\n                    </>\n                ) : (\n                    <IconButton\n                        className={classes.link}\n                        aria-label={'Edit ' + oldKey}\n                        onClick={updateEditMode}\n                        onKeyDown={() => { }}\n                        color='inherit'\n                        disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                    >\n                        <EditIcon className={classes.buttonIcon} />\n                    </IconButton>\n                )}\n                <IconButton\n                    className={classes.link}\n                    aria-label={'Remove ' + oldKey}\n                    onClick={deleteRow}\n                    onKeyDown={() => { }}\n                    color='inherit'\n                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                >\n                    <DeleteForeverIcon className={classes.buttonIcon} />\n                </IconButton>\n            </TableCell>\n        </TableRow>\n    );\n}\nEditableRow.propTypes = {\n    oldKey: PropTypes.shape({}).isRequired,\n    oldValue: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    handleUpdateList: PropTypes.shape({}).isRequired,\n    handleDelete: PropTypes.shape({}).isRequired,\n    apiAdditionalProperties: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    setEditing: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(EditableRow);\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport PropTypes from 'prop-types';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Grid, Paper, Typography } from '@material-ui/core';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { withRouter } from 'react-router';\nimport { Progress } from 'AppComponents/Shared';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport { isRestricted } from 'AppData/AuthManager';\n\nimport BusinessPlans from './BusinessPlans';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    margin: {\n        margin: theme.spacing(),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'left',\n        color: theme.palette.text.secondary,\n        paddingBottom: '10px',\n    },\n    grid: {\n        paddingLeft: '10px',\n        paddingRight: '10px',\n        paddingBottom: '10px',\n        minWidth: '50%',\n    },\n    button: {\n        margin: theme.spacing(),\n    },\n});\n\n/**\n *\n *\n * @class Monetization\n * @extends {Component}\n */\nclass Monetization extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            monetizationAttributes: [],\n            monStatus: null,\n            property: {},\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        this.getMonetizationData();\n    }\n\n    getMonetizationData() {\n        const { api } = this.props;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            const apiProduct = new APIProduct(api.name, api.context, api.policies);\n            apiProduct.getSettings().then((settings) => {\n                if (settings.monetizationAttributes != null) {\n                    this.setState({ monetizationAttributes: settings.monetizationAttributes });\n                }\n            });\n            apiProduct.getMonetization(this.props.api.id).then((status) => {\n                this.setState({ monStatus: status.enabled });\n            });\n        } else {\n            api.getSettings().then((settings) => {\n                if (settings.monetizationAttributes != null) {\n                    this.setState({ monetizationAttributes: settings.monetizationAttributes });\n                }\n            });\n            api.getMonetization(this.props.api.id).then((status) => {\n                this.setState({ monStatus: status.enabled });\n            });\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({ monStatus: event.target.checked });\n    };\n\n    handleInputChange = (event) => {\n        const { name, value } = event.target;\n        this.setState((oldState) => {\n            const { property } = oldState;\n            property[name] = value;\n            return { property };\n        });\n    };\n\n    /**\n     * Handles the submit action for configuring monetization\n     */\n    handleSubmit() {\n        const { api, intl } = this.props;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            const properties = this.state.property;\n            const enabled = this.state.monStatus;\n            const body = {\n                enabled,\n                properties,\n            };\n            const apiProduct = new APIProduct(api.name, api.context, api.policies);\n            const promisedMonetization = apiProduct.configureMonetizationToApiProduct(api.id, body);\n            promisedMonetization.then((response) => {\n                const status = JSON.parse(response.data);\n                if (status.enabled) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.monetization.configured.successfully',\n                        defaultMessage: 'Monetization Enabled Successfully',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.monetization.disabled.successfully',\n                        defaultMessage: 'Monetization Disabled Successfully',\n                    }));\n                }\n                this.setState((cState) => ({ monStatus: !cState.monStatus }));\n            }).catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.something.went.wrong.while.configuring.monetization',\n                        defaultMessage: 'Something went wrong while configuring monetization',\n                    }));\n                }\n            });\n        } else {\n            const properties = this.state.property;\n            const enabled = this.state.monStatus;\n            const body = {\n                enabled,\n                properties,\n            };\n            const promisedMonetizationConf = api.configureMonetizationToApi(this.props.api.id, body);\n            promisedMonetizationConf.then((response) => {\n                const status = JSON.parse(response.data);\n                if (status.enabled) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.monetization.configured.successfully',\n                        defaultMessage: 'Monetization Enabled Successfully',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.monetization.disabled.successfully',\n                        defaultMessage: 'Monetization Disabled Successfully',\n                    }));\n                }\n                this.setState((cState) => ({ monStatus: !cState.monStatus }));\n            }).catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.something.went.wrong.while.configuring.monetization',\n                        defaultMessage: 'Something went wrong while configuring monetization',\n                    }));\n                }\n            });\n        }\n    }\n\n    render() {\n        const { api, classes } = this.props;\n        const { monetizationAttributes, monStatus } = this.state;\n        if (api && isRestricted(['apim:api_publish'], api)) {\n            return (\n                <Grid\n                    container\n                    direction='row'\n                    alignItems='center'\n                    spacing={4}\n                    style={{ marginTop: 20 }}\n                >\n                    <Grid item>\n                        <Typography variant='body2' color='primary'>\n                            <FormattedMessage\n                                id='Apis.Details.Monetization.Index.update.not.allowed'\n                                defaultMessage={'* You are not authorized to update API monetization'\n                                    + ' due to insufficient permissions'}\n                            />\n                        </Typography>\n                    </Grid>\n                </Grid>\n            );\n        }\n        if (!monetizationAttributes || monStatus === null) {\n            return <Progress />;\n        }\n        return (\n            <form method='post' onSubmit={this.handleSubmit}>\n                <Grid container xs={6} spacing={2}>\n                    <Grid item xs={12}>\n                        <Typography id='itest-api-details-api-monetization-head' variant='h4' component='h2'>\n                            <FormattedMessage\n                                id='Apis.Details.Monetization.Index.monetization'\n                                defaultMessage='Monetization'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FormControlLabel\n                            control={(\n                                <Checkbox\n                                    disabled={isRestricted(['apim:api_publish'], api)}\n                                    id='monStatus'\n                                    name='monStatus'\n                                    checked={monStatus}\n                                    onChange={this.handleChange}\n                                    value={monStatus}\n                                    color='primary'\n                                />\n                            )}\n                            label='Enable Monetization'\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Paper className={classes.root}>\n                            <Grid item xs={12} className={classes.grid}>\n                                <Typography className={classes.heading} variant='h6' component='h3'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Monetization.Index.monetization.properties'\n                                        defaultMessage='Monetization Properties'\n                                    />\n                                </Typography>\n                                {\n                                    (monetizationAttributes.length > 0) ? (\n                                        (monetizationAttributes.map((monetizationAttribute, i) => (\n                                            <TextField\n                                                disabled={!monStatus || isRestricted(['apim:api_publish'], api)}\n                                                fullWidth\n                                                id={'attribute' + i}\n                                                label={monetizationAttribute.displayName}\n                                                placeholder={monetizationAttribute.displayName}\n                                                name={monetizationAttribute.name}\n                                                type='text'\n                                                margin='normal'\n                                                variant='outlined'\n                                                required={monetizationAttribute.required}\n                                                onChange={this.handleInputChange}\n                                                autoFocus\n                                            />\n                                        )))\n                                    ) : (\n                                        <Typography>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Monetization.Index.there.are.no'\n                                                   + ' .monetization.properties.configured'}\n                                                defaultMessage='There are no monetization properties configured'\n                                            />\n                                        </Typography>\n                                    )\n                                }\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Paper className={classes.root}>\n                            <Grid item xs={12} className={classes.grid}>\n                                <BusinessPlans api={api} monStatus={monStatus} />\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Button\n                            onClick={this.handleSubmit}\n                            color='primary'\n                            variant='contained'\n                            className={classes.button}\n                            disabled={api.isRevision}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Monetization.Index.save'\n                                defaultMessage='Save'\n                            />\n                        </Button>\n                        <Button\n                            component={Link}\n                            to={'/apis/' + api.id + '/overview'}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Monetization.Index.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                    </Grid>\n                </Grid>\n            </form>\n        );\n    }\n}\n\nMonetization.propTypes = {\n    api: PropTypes.instanceOf(API).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nexport default injectIntl(withRouter(withStyles(styles)(Monetization)));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { Grid, Typography } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport API from 'AppData/api';\nimport Banner from 'AppComponents/Shared/Banner';\nimport { Progress } from 'AppComponents/Shared';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        paddingBottom: '10px',\n    },\n    margin: {\n        margin: theme.spacing(),\n    },\n    rightDataColumn: {\n        display: 'flex',\n        flex: 1,\n    },\n    grid: {\n        marginTop: '10px',\n        paddingRight: '10px',\n        paddingBottom: '10px',\n    },\n    box: {\n        display: 'block',\n    },\n    tableCel: {\n        width: 50,\n    },\n    table: {\n        width: '100%',\n        border: 'solid 1px #ccc',\n    },\n    tableHeadCell: {\n        color: 'black',\n        background: theme.palette.grey[200],\n    },\n    stateWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    tableHeadTitle: {\n        flex: 1,\n        fontWeight: 'bold',\n    },\n});\n\n/**\n *\n *\n * @class BusinessPlans\n * @extends {Component}\n */\nclass BusinessPlans extends Component {\n    /**\n     *Creates an instance of BusinessPlans.\n     * @param {Object} props\n     * @memberof BusinessPlans\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            policies: [],\n            monetizedPolices: null,\n        };\n        this.monetizationQuery = this.monetizationQuery.bind(this);\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @memberof BusinessPlans\n     */\n    componentDidMount() {\n        const { api } = this.props;\n        api.getSubscriptionPolicies(api.id).then((policies) => {\n            const filteredPolicies = policies.filter((policy) => policy.tierPlan === 'COMMERCIAL');\n            this.setState({ policies: filteredPolicies });\n        });\n        api.getMonetization(api.id).then((status) => {\n            this.setState({ monetizedPolices: status.properties });\n        });\n    }\n\n    monetizationQuery(policyName) {\n        const { monetizedPolices } = this.state;\n        return policyName in monetizedPolices;\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @returns {React.Component} Policies / Business plans list\n     * @memberof BusinessPlans\n     */\n    render() {\n        const { policies, monetizedPolices } = this.state;\n        const { classes } = this.props;\n        if (monetizedPolices === null) {\n            return <Progress />;\n        }\n        const policiesList = policies.map((policy) => (\n            <Grid item xs={12}>\n                <Table className={classes.table}>\n                    <TableRow>\n                        <TableCell variant='head' colSpan={2} className={classes.tableHeadCell}>\n                            <Box display='flex'>\n                                <Typography component='div' className={classes.tableHeadTitle} variant='subtitle1'>\n                                    {policy.name}\n                                </Typography>\n                                {\n                                    this.monetizationQuery(policy.name) ? (\n                                        <div className={classes.stateWrapper}>\n                                            <div><CheckIcon color='primary' /></div>\n                                            <Typography component='div'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Monetization.BusinessPlans.monetized'\n                                                    defaultMessage='Monetized'\n                                                />\n                                            </Typography>\n                                        </div>\n                                    ) : (\n                                        <div className={classes.stateWrapper}>\n                                            <div><CloseIcon color='error' /></div>\n                                            <Typography component='div'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Monetization.BusinessPlans.not.monetized'\n                                                    defaultMessage='Not Monetized'\n                                                />\n                                            </Typography>\n                                        </div>\n                                    )\n                                }\n                            </Box>\n                        </TableCell>\n                    </TableRow>\n                    {Object.keys(policy.monetizationAttributes).map((key) => {\n                        if (policy.monetizationAttributes[key] !== null) {\n                            return (\n                                <TableRow>\n                                    <TableCell className={classes.tableCel} align='left'>\n                                        <Typography component='p' variant='subtitle2'>\n                                            {key}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell align='left'>\n                                        {policy.monetizationAttributes[key]}\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        } else {\n                            return false;\n                        }\n                    })}\n\n                </Table>\n            </Grid>\n        ));\n        return (\n            <Grid container spacing={1}>\n                <Grid item xs={12}>\n                    <Typography variant='h6' component='h3'>\n                        <FormattedMessage\n                            id='Apis.Details.Monetization.BusinessPlans.commercial.policies'\n                            defaultMessage='Commercial Policies'\n                        />\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container direction='row' spacing={3}>\n                        {policiesList}\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    {\n                        (policies.length > 0) ? (\n                            <Banner\n                                disableActions\n                                dense\n                                paperProps={{ elevation: 1 }}\n                                type='info'\n                                message='Click Save to monetize all unmonetized policies'\n                            />\n                        ) : (\n                            <Banner\n                                disableActions\n                                dense\n                                paperProps={{ elevation: 1 }}\n                                type='info'\n                                message='No commercial policies to monetize'\n                            />\n                        )\n                    }\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nBusinessPlans.propTypes = {\n    api: PropTypes.instanceOf(API).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles)(BusinessPlans);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport { isRestricted } from 'AppData/AuthManager';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\n\nimport 'react-tagsinput/react-tagsinput.css';\nimport { FormattedMessage, useIntl, defineMessages } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport API from '../../../../data/api';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: theme.custom.contentAreaWidth,\n        marginTop: theme.spacing(3),\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 650,\n    },\n    viewInExStoreLink: {\n        color: theme.palette.common.black,\n        textDecoration: 'underline',\n    },\n}));\n\n/**\n * Renders an External Store list\n * @class ExternalStores\n * @extends {React.Component}\n */\nexport default function ExternalStores() {\n    const { api } = useContext(APIContext);\n    const { settings } = useAppContext();\n    const [allExternalStores, setAllExternalStores] = useState([]);\n    const [publishedExternalStores, setPublishedExternalStores] = useState([]);\n    const [isUpdating, setUpdating] = useState(false);\n    const classes = useStyles();\n    const intl = useIntl();\n    if (!settings.externalStoresEnabled) {\n        const resourceNotFoundMessageText = defineMessages({\n            titleMessage: {\n                id: 'Apis.Details.ExternalStores.ExternalStores.external.stores.not.found.title',\n                defaultMessage: 'External Developert Portals not found for the API : {apiUUID}',\n            },\n            bodyMessage: {\n                id: 'Apis.Details.ExternalStores.ExternalStores.external.stores.not.found.body',\n                defaultMessage: 'No External Developer Portals configured for the current tenant',\n            },\n        });\n        const resourceNotFountMessage = {\n            title: intl.formatMessage(resourceNotFoundMessageText.titleMessage, {\n                apiUUID: `${api.id}`,\n            }),\n            body: intl.formatMessage(resourceNotFoundMessageText.bodyMessage),\n        };\n        return <ResourceNotFound message={resourceNotFountMessage} />;\n    }\n\n    /**\n     * Gets published external stores\n     */\n    function getPublishedExternalStores() {\n        API.getPublishedExternalStores(api.id)\n            .then((response) => {\n                const publishedStoreIds = response.body.list.map((store) => store.id);\n                setPublishedExternalStores(publishedStoreIds);\n            })\n            .catch((error) => {\n                const response = error.response && error.response.obj;\n                const reason = response && ('[' + response.message + '] ' + response.description);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.ExternalStores.ExternalStores.error.getting.published.external.stores',\n                    defaultMessage: 'Error while getting published external developer portals!! {reason}',\n                }, { reason }));\n            });\n    }\n\n    useEffect(() => {\n        API.getAllExternalStores().then((response) => {\n            setAllExternalStores([...response.body.list]);\n        });\n        getPublishedExternalStores();\n    }, []);\n\n    /**\n     * Handle publish to external store button action\n     */\n    function updateStores() {\n        setUpdating(true);\n        API.publishAPIToExternalStores(api.id, publishedExternalStores)\n            .then((response) => {\n                const successfulStores = response.body.list.map((store) => store.id);\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.ExternalStores.ExternalStores.successfully.published.to.external.stores',\n                    defaultMessage: 'Successfully Published to external developer portals: {successfulStores}',\n                }, { successfulStores }));\n            })\n            .catch((error) => {\n                const response = error.response && error.response.obj;\n                const reason = response && ('[' + response.message + '] ' + response.description);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.ExternalStores.ExternalStores.error.while.updating.external.stores',\n                    defaultMessage: 'Error while updating external developer portals!! {reason}',\n                }, { reason }));\n            })\n            .finally(() => {\n                setUpdating(false);\n                getPublishedExternalStores();\n            });\n    }\n\n    return (\n        <div>\n            <div>\n                <Typography variant='h4' align='left'>\n                    <FormattedMessage\n                        id='Apis.Details.ExternalStores.ExternalStores.external-stores'\n                        defaultMessage='External Developer Portals'\n                    />\n                </Typography>\n                <Paper className={classes.root}>\n                    <Table className={classes.table}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell />\n                                <TableCell>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ExternalStores.ExternalStores.name'\n                                            defaultMessage='Name'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ExternalStores.ExternalStores.type'\n                                            defaultMessage='Type'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ExternalStores.ExternalStores.endpoint'\n                                            defaultMessage='Endpoint'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {allExternalStores.map((row) => (\n                                <TableRow key={row.id}>\n                                    <TableCell padding='checkbox'>\n                                        <Checkbox\n                                            checked={publishedExternalStores.includes(row.id)}\n                                            disabled={api.lifeCycleStatus !== 'PUBLISHED'\n                                                || isRestricted(['apim:api_publish'], api)}\n                                            onChange={\n                                                (event) => {\n                                                    const { checked, name } = event.target;\n                                                    if (checked) {\n                                                        if (!publishedExternalStores.includes(name)) {\n                                                            setPublishedExternalStores([\n                                                                ...publishedExternalStores, name]);\n                                                        }\n                                                    } else {\n                                                        setPublishedExternalStores(publishedExternalStores\n                                                            .filter((store) => store !== name));\n                                                    }\n                                                }\n                                            }\n                                            name={row.id}\n                                            color='primary'\n                                        />\n                                    </TableCell>\n                                    <TableCell component='th' scope='row'>\n                                        <Typography>\n                                            {' '}\n                                            {row.displayName}\n                                            {' '}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        {' '}\n                                        <Typography>{row.type}</Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <a\n                                            target='_blank'\n                                            rel='noopener noreferrer'\n                                            href={row.endpoint}\n                                            className={classes.viewInExStoreLink}\n                                        >\n                                            <Typography>\n                                                {row.endpoint}\n                                            </Typography>\n                                        </a>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </Paper>\n                <Grid container>\n                    <Grid\n                        container\n                        direction='row'\n                        alignItems='center'\n                        spacing={4}\n                        style={{ marginTop: 20 }}\n                    >\n                        <Grid item>\n                            <Button\n                                type='submit'\n                                variant='contained'\n                                color='primary'\n                                disabled={isUpdating || api.lifeCycleStatus !== 'PUBLISHED'\n                                    || isRestricted(['apim:api_publish'], api)}\n                                onClick={updateStores}\n                            >\n                                <FormattedMessage\n                                    id='Apis.Details.ExternalStores.ExternalStores.save'\n                                    defaultMessage='Save'\n                                />\n                                {isUpdating && <CircularProgress size={20} />}\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Link to={'/apis/' + api.id + '/overview'}>\n                                <Button>\n                                    <FormattedMessage\n                                        id='Apis.Details.ExternalStores.ExternalStores.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                            </Link>\n                        </Grid>\n                        {(isRestricted(['apim:api_publish'], api))\n                            && (\n                                <Grid item>\n                                    <Typography variant='body2' color='primary'>\n                                        <FormattedMessage\n                                            id='Apis.Details.ExternalStores.ExternalStores.update.not.allowed'\n                                            defaultMessage={'* You are not authorized to publish the API'\n                                                + ' to external developer portals due to insufficient permissions'}\n                                        />\n                                    </Typography>\n                                </Grid>\n                            )}\n                    </Grid>\n                </Grid>\n            </div>\n        </div>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport FormControl from '@material-ui/core/FormControl';\nimport ServiceCatalog from 'AppData/ServiceCatalog';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst styles = (theme) => ({\n    FormControl: {\n        padding: 0,\n        width: '100%',\n        marginTop: 20,\n    },\n    FormControlOdd: {\n        padding: 0,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormLabel: {\n        transform: 'translate(0, 1.5px) scale(0.75)',\n        transformOrigin: 'top left',\n    },\n    buttonWrapper: {\n        paddingTop: 20,\n    },\n    root: {\n        padding: 20,\n        marginTop: 20,\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    helpButton: {\n        padding: 0,\n        minWidth: 20,\n    },\n    helpIcon: {\n        fontSize: 16,\n    },\n    htmlTooltip: {\n        backgroundColor: '#f5f5f9',\n        color: 'rgba(0, 0, 0, 0.87)',\n        maxWidth: 220,\n        fontSize: theme.typography.pxToRem(14),\n        border: '1px solid #dadde9',\n        '& b': {\n            fontWeight: theme.typography.fontWeightMedium,\n        },\n    },\n});\n\n/**\n * React component to create a new version of an API\n * @class CreateNewVersion\n * @extends {Component}\n */\nclass CreateNewVersion extends React.Component {\n    /**\n     * Creates an instance of CreateNewVersion.\n     * @param {any} props @inheritDoc\n     * @memberof CreateNewVersion\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            isDefaultVersion: 'no',\n            serviceVersion: null,\n            versionList: [],\n            valid: {\n                version: {\n                    empty: false,\n                    alreadyExists: false,\n                    hasSpecialChars: false,\n                    MaxLengthExceeds: false,\n                },\n            },\n        };\n    }\n\n    componentDidMount() {\n        const { api } = this.props;\n        if (api.serviceInfo !== null) {\n            const promisedServices = ServiceCatalog.getServiceByName(api.serviceInfo);\n            promisedServices.then((data) => {\n                const array = data.list.map((item) => item.version);\n                this.setState({ versionList: array });\n            }).catch((error) => {\n                console.error(error);\n                Alert.error('Error while loading services version');\n            });\n        }\n    }\n\n    handleDefaultVersionChange = () => (event) => {\n        const { value } = event.target;\n        this.setState({\n            isDefaultVersion: value,\n        });\n    };\n\n    handleServiceVersionChange = () => (event) => {\n        const { value } = event.target;\n        this.setState({\n            serviceVersion: value,\n        });\n    };\n\n    handleVersionChange = () => (event) => {\n        const { value } = event.target;\n        this.setState({\n            newVersion: value,\n            valid: {\n                version: {\n                    empty: !value,\n                    alreadyExists: false,\n                    hasSpecialChars: this.hasSpecialChars(value),\n                    MaxLengthExceeds: this.isMaxLengthExceeds(value),\n                },\n            },\n        });\n    };\n\n    /**\n     * Handles the submit action for new version creation\n     *\n     * @param {API} api current API\n     * @param {string} newVersion new version to create\n     * @param {string} isDefaultVersion specifies whether the new API should be marked as default version ('yes' | 'no')\n     */\n    handleSubmit(api, newVersion, isDefaultVersion, serviceVersion) {\n        if (!newVersion) {\n            this.setState({ valid: { version: { empty: true } } });\n            return;\n        }\n        const isDefaultVersionBool = isDefaultVersion === 'yes';\n        const { intl } = this.props;\n        api.createNewAPIVersion(newVersion, isDefaultVersionBool, serviceVersion)\n            .then((response) => {\n                this.setState({\n                    redirectToReferrer: true,\n                    apiId: response.obj.id,\n                });\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.NewVersion.NewVersion.success',\n                    defaultMessage: 'Successfully created new version ',\n                }) + newVersion);\n            })\n            .catch((error) => {\n                if (error.status === 409) {\n                    this.setState({ valid: { version: { alreadyExists: true } } });\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.NewVersion.NewVersion.error',\n                        defaultMessage: 'Something went wrong while creating a new version!. Error: ',\n                    }) + error.status);\n                }\n            });\n    }\n\n    /**\n     *\n     * @param {String} value String to be checked for special characters\n     * @returns {Boolean} Has special character or not\n     */\n    hasSpecialChars(value) {\n        if (/^[^~!@#;:%^*()+={}|\\\\<>\"',&/$]+$/.test(value)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    isMaxLengthExceeds(value) {\n        if (value.length > 30) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Renders the CreateNewVersion component.\n     * Once new version is created, redirects to the overview page of the new API.\n     * @returns {*} CreateNewVersion component\n     */\n    render() {\n        const { classes, api } = this.props;\n        const {\n            isDefaultVersion, newVersion, redirectToReferrer, apiId, valid, serviceVersion, versionList,\n        } = this.state;\n        if (redirectToReferrer) {\n            return <Redirect to={'/apis/' + apiId + '/overview'} />;\n        }\n\n        let helperText = '';\n        if (valid.version.empty) {\n            helperText = 'This field cannot be empty';\n        } else if (valid.version.alreadyExists) {\n            helperText = 'An API with version \"' + newVersion + '\" already exists.';\n        } else if (valid.version.hasSpecialChars) {\n            helperText = 'API Version should not contain special characters';\n        } else if (valid.version.MaxLengthExceeds) {\n            helperText = 'API version exceeds maximum length of 30 characters';\n        }\n\n        return (\n            <>\n                <Container maxWidth='md'>\n                    <div className={classes.titleWrapper}>\n                        <Typography variant='h4' component='h2' align='left' className={classes.mainTitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewVersion.NewVersion.create.new.version'\n                                defaultMessage='Create New Version'\n                            />\n                        </Typography>\n                    </div>\n                    <Grid container spacing={7}>\n                        <Grid item xs={12}>\n                            <Paper className={classes.root} elevation={0}>\n                                <FormControl margin='normal' className={classes.FormControlOdd}>\n                                    <TextField\n                                        fullWidth\n                                        id='newVersion'\n                                        error={\n                                            valid.version.empty\n                                            || valid.version.alreadyExists\n                                            || valid.version.hasSpecialChars\n                                            || valid.version.MaxLengthExceeds\n                                        }\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.NewVersion.NewVersion.new.version'\n                                                defaultMessage='New Version'\n                                            />\n                                        )}\n                                        helperText={\n                                            helperText\n                                        }\n                                        type='text'\n                                        name='newVersion'\n                                        placeholder='Eg: 2.0.0'\n                                        value={newVersion}\n                                        variant='outlined'\n                                        onChange={this.handleVersionChange()}\n                                        margin='normal'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        autoFocus\n                                    />\n                                </FormControl>\n                                {api.serviceInfo && (\n                                    <FormControl margin='normal' className={classes.FormControlOdd}>\n                                        <TextField\n                                            id='version-selector'\n                                            select\n                                            label={(\n                                                <FormattedMessage\n                                                    id='Apis.Details.NewVersion.NewVersion.service.version'\n                                                    defaultMessage='Service Version'\n                                                />\n                                            )}\n                                            name='selectVersion'\n                                            onChange={this.handleServiceVersionChange()}\n                                            margin='dense'\n                                            variant='outlined'\n                                        >\n                                            {versionList && versionList.map((item) => (\n                                                <MenuItem value={item}>\n                                                    {item}\n                                                </MenuItem>\n                                            ))}\n                                        </TextField>\n                                    </FormControl>\n                                )}\n                                <FormControl margin='normal' className={classes.FormControl}>\n                                    <FormLabel className={classes.FormLabel} component='legend'>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewVersion.NewVersion.default'\n                                            defaultMessage='Make this the default version'\n                                        />\n                                        <Tooltip\n                                            placement='top'\n                                            classes={{\n                                                tooltip: classes.htmlTooltip,\n                                            }}\n                                            title={(\n                                                <>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.NewVersion.NewVersion.tooltip'\n                                                        defaultMessage={\n                                                            'Indicates if this is the default version of the API. '\n                                                            + 'If an API is invoked without specifying a version, '\n                                                            + 'the API Gateway will route the request to the default '\n                                                            + 'version of the API.'\n                                                        }\n                                                    />\n                                                </>\n                                            )}\n                                            interactive\n                                            aria-label='Default Version Selector'\n                                            tabIndex='-1'\n                                        >\n                                            <Button className={classes.helpButton}>\n                                                <HelpOutline className={classes.helpIcon} />\n                                            </Button>\n                                        </Tooltip>\n                                    </FormLabel>\n                                    <RadioGroup\n                                        name='isDefaultVersion'\n                                        id='isDefaultVersion'\n                                        className={classes.group}\n                                        value={isDefaultVersion}\n                                        onChange={this.handleDefaultVersionChange()}\n                                    >\n                                        <FormControlLabel value='yes' control={<Radio color='primary' />} label='Yes' />\n                                        <FormControlLabel value='no' control={<Radio color='primary' />} label='No' />\n                                    </RadioGroup>\n                                </FormControl>\n                                <div className={classes.buttonWrapper}>\n                                    <Grid\n                                        container\n                                        direction='row'\n                                        alignItems='flex-start'\n                                        spacing={1}\n                                        className={classes.buttonSection}\n                                    >\n                                        <Grid item>\n                                            <div>\n                                                <Button\n                                                    variant='contained'\n                                                    color='primary'\n                                                    id='createBtn'\n                                                    onClick={() => this.handleSubmit(api, newVersion, isDefaultVersion,\n                                                        serviceVersion)}\n                                                    disabled={\n                                                        valid.version.empty\n                                                        || valid.version.alreadyExists\n                                                        || valid.version.hasSpecialChars\n                                                        || valid.version.MaxLengthExceeds\n                                                        || api.isRevision\n                                                    }\n                                                >\n                                                    <FormattedMessage\n                                                        id='Apis.Details.NewVersion.NewVersion.create'\n                                                        defaultMessage='Create'\n                                                    />\n                                                </Button>\n                                            </div>\n                                        </Grid>\n                                        <Grid item>\n                                            <Link to={'/apis/' + api.id + '/overview'}>\n                                                <Button id='cancelBtn'>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.NewVersion.NewVersion.cancel'\n                                                        defaultMessage='Cancel'\n                                                    />\n                                                </Button>\n                                            </Link>\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </>\n        );\n    }\n}\n\nCreateNewVersion.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nexport default injectIntl(withAPI(withStyles(styles)(CreateNewVersion)));\n","/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport 'swagger-ui-react/swagger-ui.css';\n\nimport React, {\n    Suspense,\n    lazy,\n    useCallback,\n    useEffect,\n    useMemo,\n    useReducer,\n    useState,\n} from 'react';\n\nimport Alert from 'AppComponents/Shared/MuiAlert';\nimport Api from 'AppData/api';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport CONSTS from 'AppData/Constants';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Utils from 'AppData/Utils';\nimport cloneDeep from 'lodash.clonedeep';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { usePublisherSettings } from 'AppComponents/Shared/AppContext';\nimport { isRestricted } from 'AppData/AuthManager';\nimport AdvertiseDetailsPanel from \"AppComponents/Apis/Details/TryOut/AdvertiseDetailsPanel\";\n\n// disabled because webpack magic comment for chunk name require to be in the same line\n// eslint-disable-next-line max-len\nconst SwaggerUI = lazy(() => import('AppComponents/Apis/Details/TryOut/SwaggerUI' /* webpackChunkName: \"TryoutConsoleSwaggerUI\" */));\n\n/**\n * @inheritdoc\n * @param {*} theme theme\n */\nconst useStyles = makeStyles((theme) => ({\n    centerItems: {\n        margin: 'auto',\n    },\n    tryoutHeading: {\n        paddingTop: '20px',\n        fontWeight: 400,\n        display: 'block',\n    },\n    menuItem: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    tokenType: {\n        margin: 'auto',\n        display: 'flex',\n        '& .MuiButton-contained.Mui-disabled span.MuiButton-label': {\n            color: '#6d6d6d',\n        },\n    },\n}));\n\ndayjs.extend(relativeTime);\n\nconst tasksReducer = (state, action) => {\n    const { name, status } = action;\n    // In the case of a key collision, the right-most (last) object's value wins out\n    return { ...state, [name]: { ...state[name], ...status } };\n};\n\n/**\n * @class TryOutConsole\n * @extends {React.Component}\n */\nconst TryOutConsole = () => {\n    const classes = useStyles();\n    const [api] = useAPI();\n    const [apiKey, setAPIKey] = useState('');\n    const [deployments, setDeployments] = useState([]);\n    const [selectedDeployment, setSelectedDeployment] = useState();\n    const [oasDefinition, setOasDefinition] = useState();\n    const [advAuthHeader, setAdvAuthHeader] = useState('Authorization');\n    const [advAuthHeaderValue, setAdvAuthHeaderValue] = useState('');\n    const [selectedEndpoint, setSelectedEndpoint] = useState('PRODUCTION');\n    const { data: publisherSettings } = usePublisherSettings();\n\n    const [tasksStatus, tasksStatusDispatcher] = useReducer(tasksReducer, {\n        generateKey: { inProgress: false, completed: false, error: false },\n        getOAS: { inProgress: false, completed: false, error: false },\n        getDeployments: { inProgress: false, completed: false, error: false },\n    });\n\n    const generateInternalKey = useCallback(() => {\n        tasksStatusDispatcher({ name: 'generateKey', status: { inProgress: true } });\n        Api.generateInternalKey(api.id).then((keyResponse) => {\n            const { apikey } = keyResponse.body;\n            setAPIKey(apikey);\n            tasksStatusDispatcher({ name: 'generateKey', status: { inProgress: false, completed: true } });\n        }).catch((error) => tasksStatusDispatcher({ name: 'generateKey', status: { error, inProgress: false } }));\n    }, [api.id]);\n    useEffect(generateInternalKey, []); // Auto generate API Key on page load\n    useEffect(() => {\n        tasksStatusDispatcher({ name: 'getDeployments', status: { inProgress: true } });\n        if (publisherSettings) {\n            api.getDeployedRevisions(api.id).then((deploymentsResponse) => {\n                tasksStatusDispatcher({ name: 'getDeployments', status: { inProgress: false, completed: true } });\n                const currentDeployments = deploymentsResponse.body;\n                const currentDeploymentsWithDisplayName = currentDeployments.map((deploy) => {\n                    const gwEnvironment = publisherSettings.environment.find((e) => e.name === deploy.name);\n                    const displayName = (gwEnvironment ? gwEnvironment.displayName : deploy.name);\n                    return { ...deploy, displayName };\n                });\n                setDeployments(currentDeploymentsWithDisplayName);\n                if (currentDeploymentsWithDisplayName && currentDeploymentsWithDisplayName.length > 0) {\n                    const [initialDeploymentSelection] = currentDeploymentsWithDisplayName;\n                    setSelectedDeployment(initialDeploymentSelection);\n                }\n            }).catch(\n                (error) => tasksStatusDispatcher({ name: 'getDeployments', status: { inProgress: false, error } }),\n            );\n            api.getSwagger().then((swaggerResponse) => setOasDefinition(swaggerResponse.body));\n        }\n    }, [publisherSettings]);\n\n    const isAPIProduct = api.type === 'APIPRODUCT';\n    const isAdvertised = api.advertiseInfo && api.advertiseInfo.advertised;\n    const setServersSpec = (spec, serverUrl) => {\n        let schemes;\n        const [protocol, host] = serverUrl.split('://');\n        if (protocol === 'http') {\n            schemes = ['http'];\n        } else if (protocol === 'https') {\n            schemes = ['https'];\n        }\n        return {\n            ...spec,\n            schemes,\n            host,\n        };\n    };\n    const updatedOasDefinition = useMemo(() => {\n        let oasCopy;\n        if (selectedDeployment && oasDefinition) {\n            const selectedGWEnvironment = publisherSettings.environment\n                .find((env) => env.name === selectedDeployment.name);\n            let selectedDeploymentVhost = selectedGWEnvironment.vhosts\n                .find((vhost) => vhost.host === selectedDeployment.vhost);\n            if (!selectedDeploymentVhost) {\n                selectedDeploymentVhost = { ...CONSTS.DEFAULT_VHOST, host: selectedDeployment.vhost };\n            }\n            let pathSeparator = '';\n            if (selectedDeploymentVhost.httpContext && !selectedDeploymentVhost.httpContext.startsWith('/')) {\n                pathSeparator = '/';\n            }\n            oasCopy = cloneDeep(oasDefinition); // If not we are directly mutating the state\n            if (oasDefinition.openapi) { // Assumed as OAS 3.x definition\n                const servers = api.transport.map((transport) => {\n                    const transportPort = selectedDeploymentVhost[`${transport}Port`];\n                    if (!transportPort) {\n                        console.error(`Can't find ${transport}Port `\n                            + `in selected deployment ( ${selectedDeploymentVhost.name} )`);\n                    }\n                    const baseURL = `${transport}://${selectedDeployment.vhost}:${transportPort}`;\n                    let url;\n                    if (isAPIProduct) {\n                        url = `${baseURL}${pathSeparator}`\n                            + `${selectedDeploymentVhost.httpContext}${api.context}`;\n                    } else {\n                        url = `${baseURL}${pathSeparator}`\n                            + `${selectedDeploymentVhost.httpContext}${api.context}/${api.version}`\n                                .replace('{version}', `${api.version}`);\n                    }\n                    return { url };\n                });\n                oasCopy.servers = servers.sort((a, b) => ((a.url > b.url) ? -1 : 1));\n            } else { // Assume the API definition is Swagger 2\n                let transportPort = selectedDeploymentVhost.httpsPort;\n                if (api.transport.length === 1 && !api.transport.includes('https')) {\n                    transportPort = selectedDeploymentVhost.httpPort;\n                } else if (api.transport.length > 1) {\n                    // TODO: fix When both HTTP and HTTPs transports are available can't switch the port between them\n                    // ~tmkb\n                    console.warn('HTTPS transport port will be used for all other transports');\n                }\n                const host = `${selectedDeploymentVhost.host}:${transportPort}`;\n                let basePath;\n                if (isAPIProduct) {\n                    basePath = `${pathSeparator}${selectedDeploymentVhost.httpContext}${api.context}`;\n                } else {\n                    basePath = `${pathSeparator}${selectedDeploymentVhost.httpContext}${api.context}/${api.version}`\n                        .replace('{version}', `${api.version}`);\n                }\n                oasCopy.schemes = api.transport.slice().sort((a, b) => ((a > b) ? -1 : 1));\n                oasCopy.basePath = basePath;\n                oasCopy.host = host;\n            }\n        } else if (oasDefinition) {\n            // If no deployment just show the OAS definition\n            oasCopy = oasDefinition;\n        }\n        if (oasCopy && isAdvertised) {\n            if (oasCopy.openapi) {\n                // Assume the API definition is an OAS 3.x definition\n                if (selectedEndpoint === 'PRODUCTION') {\n                    oasCopy = {\n                        ...oasCopy,\n                        servers: [\n                            { url: api.advertiseInfo.apiExternalProductionEndpoint },\n                        ]\n                    };\n                } else {\n                    oasCopy = {\n                        ...oasCopy,\n                        servers: [\n                            { url: api.advertiseInfo.apiExternalSandboxEndpoint },\n                        ]\n                    };\n                }\n            } else if (selectedEndpoint === 'PRODUCTION') {\n                // Assume the API definition is Swagger 2\n                oasCopy = setServersSpec(oasCopy, api.advertiseInfo.apiExternalProductionEndpoint);\n            } else {\n                oasCopy = setServersSpec(oasCopy, api.advertiseInfo.apiExternalSandboxEndpoint);\n            }\n        }\n        return oasCopy;\n    }, [selectedEndpoint, selectedDeployment, oasDefinition, publisherSettings]);\n\n    /**\n     *\n     * @param {React.SyntheticEventn} event\n     */\n    const deploymentSelectionHandler = (event) => {\n        const selectedGWEnvironment = event.target.value;\n        const currentSelection = deployments.find((deployment) => deployment.name === selectedGWEnvironment);\n        setSelectedDeployment(currentSelection);\n    };\n    const decodedJWT = useMemo(() => Utils.decodeJWT(apiKey), [apiKey]);\n    const isAPIRetired = api.lifeCycleStatus === 'RETIRED';\n\n    const accessTokenProvider = () => {\n        if (isAdvertised) {\n            return advAuthHeaderValue;\n        }\n        return apiKey;\n    };\n\n    const getAuthorizationHeader = () => {\n        if (isAdvertised) {\n            return advAuthHeader;\n        }\n        return 'Internal-Key';\n    };\n\n    return (\n        <>\n            <Typography id='itest-api-details-try-out-head' variant='h4' component='h2'>\n                <FormattedMessage id='Apis.Details.ApiConsole.ApiConsole.title' defaultMessage='Try Out' />\n            </Typography>\n            <Paper elevation={0}>\n                {(!api.advertiseInfo || !api.advertiseInfo.advertised) ? (\n                    <>\n                        <Box display='flex' justifyContent='center'>\n                            <Grid xs={11} md={6} item>\n                                <Typography variant='h5' component='h3' color='textPrimary'>\n                                    <FormattedMessage\n                                        id='api.console.security.heading'\n                                        defaultMessage='Security'\n                                    />\n                                </Typography>\n                                <TextField\n                                    fullWidth\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.TryOutConsole.token.label'\n                                            defaultMessage='Internal API Key'\n                                        />\n                                    )}\n                                    type='password'\n                                    value={apiKey}\n                                    helperText={decodedJWT ? (\n                                        <Box color='success.main'>\n                                            {`Expires ${dayjs.unix(decodedJWT.payload.exp).fromNow()}`}\n                                        </Box>\n                                    ) : 'Generate or provide an internal API Key'}\n                                    margin='normal'\n                                    variant='outlined'\n                                    name='internal'\n                                    multiline\n                                    rows={4}\n                                    onChange={(e) => setAPIKey(e.target.value)}\n                                    disabled={isAPIRetired}\n                                />\n                                <Button\n                                    onClick={generateInternalKey}\n                                    variant='contained'\n                                    color='primary'\n                                    disabled={tasksStatus.generateKey.inProgress || isAPIRetired\n                                    || isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.ApiConsole.generate.test.key'\n                                        defaultMessage='Generate Key'\n                                    />\n                                </Button>\n                                {tasksStatus.generateKey.inProgress\n                                && (\n                                    <Box\n                                        display='inline'\n                                        position='absolute'\n                                        mt={1}\n                                        ml={-8}\n                                    >\n                                        <CircularProgress size={24} />\n                                    </Box>\n                                )}\n                            </Grid>\n                        </Box>\n                        <Box my={3} display='flex' justifyContent='center'>\n                            <Grid xs={11} md={6} item>\n                                {(tasksStatus.getDeployments.completed && !deployments.length && !isAPIRetired) && (\n                                    <Alert variant='outlined' severity='error'>\n                                        <FormattedMessage\n                                            id='Apis.Details.ApiConsole.deployments.no'\n                                            defaultMessage={'{artifactType} is not deployed yet! Please deploy '\n                                            + 'the {artifactType} before trying out'}\n                                            values={{ artifactType: api.isRevision ? 'Revision' : 'API' }}\n                                        />\n                                        <Link to={'/apis/' + api.id + '/deployments'}>\n                                            <LaunchIcon\n                                                color='primary'\n                                                fontSize='small'\n                                            />\n                                        </Link>\n                                    </Alert>\n                                )}\n                                {isAPIRetired && (\n                                    <Alert variant='outlined' severity='error'>\n                                        <FormattedMessage\n                                            id='Apis.Details.ApiConsole.deployments.isAPIRetired'\n                                            defaultMessage='Can not Try Out retired APIs!'\n                                        />\n                                    </Alert>\n                                )}\n                                {((deployments && deployments.length > 0))\n                                && (\n                                    <>\n                                        <Typography\n                                            variant='h5'\n                                            component='h3'\n                                            color='textPrimary'\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.deployments.api.gateways'\n                                                defaultMessage='API Gateways'\n                                            />\n                                        </Typography>\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            label={(\n                                                <FormattedMessage\n                                                    defaultMessage='Environment'\n                                                    id='Apis.Details.ApiConsole.environment'\n                                                />\n                                            )}\n                                            value={(selectedDeployment && selectedDeployment.name) || ''}\n                                            name='selectedEnvironment'\n                                            onChange={deploymentSelectionHandler}\n                                            margin='normal'\n                                            variant='outlined'\n                                            SelectProps={{\n                                                MenuProps: {\n                                                    anchorOrigin: {\n                                                        vertical: 'bottom',\n                                                        horizontal: 'left',\n                                                    },\n                                                    getContentAnchorEl: null,\n                                                },\n                                            }}\n                                        >\n                                            {deployments.map((deployment) => (\n                                                <MenuItem\n                                                    value={deployment.name}\n                                                    key={deployment.name}\n                                                >\n                                                    {deployment.displayName}\n                                                </MenuItem>\n                                            ))}\n                                        </TextField>\n                                    </>\n                                )}\n                            </Grid>\n                        </Box>\n                    </>\n                ) : (\n                    <AdvertiseDetailsPanel\n                        classes={classes}\n                        advAuthHeader={advAuthHeader}\n                        setAdvAuthHeader={setAdvAuthHeader}\n                        advAuthHeaderValue={advAuthHeaderValue}\n                        setAdvAuthHeaderValue={setAdvAuthHeaderValue}\n                        selectedEndpoint={selectedEndpoint}\n                        setSelectedEndpoint={setSelectedEndpoint}\n                        advertiseInfo={api.advertiseInfo}\n                    />\n                )}\n                {updatedOasDefinition ? (\n                    <Suspense\n                        fallback={(\n                            <CircularProgress />\n                        )}\n                    >\n                        <SwaggerUI\n                            api={api}\n                            accessTokenProvider={accessTokenProvider}\n                            spec={updatedOasDefinition}\n                            authorizationHeader={getAuthorizationHeader()}\n                        />\n                    </Suspense>\n                ) : <CircularProgress />}\n            </Paper>\n        </>\n    );\n};\nTryOutConsole.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        grid: PropTypes.string.isRequired,\n        userNotificationPaper: PropTypes.string.isRequired,\n        buttonIcon: PropTypes.string.isRequired,\n        lcState: PropTypes.shape({}).isRequired,\n        theme: PropTypes.shape({}).isRequired,\n        intl: PropTypes.shape({\n            formatMessage: PropTypes.func,\n        }).isRequired,\n    }).isRequired,\n};\n\nexport default withStyles(makeStyles)(TryOutConsole);\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst AdvertiseDetailsPanel = (props) => {\n    const {\n        classes, advAuthHeader, setAdvAuthHeader, advAuthHeaderValue, setAdvAuthHeaderValue, selectedEndpoint,\n        setSelectedEndpoint, advertiseInfo,\n    } = props;\n\n    return (\n        <>\n            <Box display='block' justifyContent='center'>\n                <Grid x={12} md={6} className={classes.centerItems}>\n                    <Typography\n                        variant='h6'\n                        component='label'\n                        id='key-type'\n                        color='textSecondary'\n                        className={classes.tryoutHeading}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.ApiConsole.authentication.heading'\n                            defaultMessage='Authentication'\n                        />\n                    </Typography>\n                </Grid>\n                <Grid container spacing={2} x={8} md={6} direction='row' className={classes.tokenType}>\n                    <Grid xs={6} md={4} style={{ paddingLeft: 0 }} item>\n                        <TextField\n                            margin='normal'\n                            variant='outlined'\n                            id='advAuthHeader'\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.ApiConsole.adv.auth.header'\n                                    defaultMessage='Authorization Header'\n                                />\n                            )}\n                            name='advAuthHeader'\n                            onChange={(event) => { setAdvAuthHeader(event.target.value); }}\n                            value={advAuthHeader || ''}\n                            fullWidth\n                        />\n                    </Grid>\n                    <Grid xs={6} md={8} style={{ paddingRight: 0 }} item>\n                        <TextField\n                            margin='normal'\n                            variant='outlined'\n                            id='advAuthHeaderValue'\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.ApiConsole.adv.auth.header.value'\n                                    defaultMessage='Authorization Header Value'\n                                />\n                            )}\n                            name='advAuthHeaderValue'\n                            onChange={(event) => { setAdvAuthHeaderValue(event.target.value); }}\n                            value={advAuthHeaderValue || ''}\n                            fullWidth\n                        />\n                    </Grid>\n                </Grid>\n            </Box>\n            <Box display='flex' justifyContent='center'>\n                <Grid x={12} md={6} className={classes.centerItems}>\n                    <Typography\n                        variant='h6'\n                        component='label'\n                        id='key-type'\n                        color='textSecondary'\n                        className={classes.tryoutHeading}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.ApiConsole.enpoint.heading'\n                            defaultMessage='API Endpoint'\n                        />\n                    </Typography>\n                    <TextField\n                        fullWidth\n                        select\n                        id='selectedEndpoint'\n                        label={(\n                            <FormattedMessage\n                                defaultMessage='Endpoint type'\n                                id='Apis.Details.ApiConsole.endpoint'\n                            />\n                        )}\n                        value={selectedEndpoint}\n                        name='selectedEndpoint'\n                        onChange={(event) => { setSelectedEndpoint(event.target.value); }}\n                        helperText={(\n                            <FormattedMessage\n                                defaultMessage='Please select an endpoint type'\n                                id='Apis.Details.ApiConsole.endpoint.help'\n                            />\n                        )}\n                        margin='normal'\n                        variant='outlined'\n                    >\n                        {advertiseInfo.apiExternalProductionEndpoint && (\n                            <MenuItem\n                                value='PRODUCTION'\n                                className={classes.menuItem}\n                            >\n                                Production\n                            </MenuItem>\n                        )}\n                        {advertiseInfo.apiExternalSandboxEndpoint && (\n                            <MenuItem\n                                value='SANDBOX'\n                                className={classes.menuItem}\n                            >\n                                Sandbox\n                            </MenuItem>\n                        )}\n                    </TextField>\n                </Grid>\n            </Box>\n        </>\n    );\n}\n\nexport default AdvertiseDetailsPanel;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, FC, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    Grid,\n    Typography,\n    Button,\n    TextField,\n    CircularProgress,\n    Box,\n    FormControlLabel,\n    Checkbox,\n    Select,\n    InputLabel,\n    FormControl,\n    FormHelperText,\n} from '@material-ui/core';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Progress } from 'AppComponents/Shared';\nimport { PolicySpec, ApiPolicy, AttachedPolicy, Policy, PolicySpecAttribute } from '../Types';\nimport ApiOperationContext from \"../ApiOperationContext\";\n\nconst useStyles = makeStyles(theme => ({\n    resetBtn: {\n        display: 'flex',\n        justifyContent: 'right',\n        alignItems: 'center',\n    },\n    btn: {\n        marginRight: '1em',\n    },\n    drawerInfo: {\n        marginBottom: '1em',\n    },\n    mandatoryStar: {\n        color: theme.palette.error.main,\n        marginLeft: theme.spacing(0.1),\n    },\n    formControl: {\n        width: '80%',\n    },\n}));\n\ninterface GeneralProps {\n    policyObj: AttachedPolicy | null;\n    setDroppedPolicy?: React.Dispatch<React.SetStateAction<Policy | null>>;\n    currentFlow: string;\n    target: string;\n    verb: string;\n    apiPolicy: ApiPolicy;\n    policySpec: PolicySpec;\n    handleDrawerClose: () => void;\n    isEditMode: boolean;\n}\n\nconst General: FC<GeneralProps> = ({\n    policyObj, setDroppedPolicy, currentFlow, target, verb, apiPolicy, policySpec, handleDrawerClose, isEditMode\n}) => {\n    const intl = useIntl();\n    const classes = useStyles();\n    const [saving, setSaving] = useState(false);\n    const [applyToAll, setApplyToAll] = useState(false);\n    const initState: any = {};\n    const { updateApiOperations, updateAllApiOperations } = useContext<any>(ApiOperationContext);\n    policySpec.policyAttributes.forEach(attr => { initState[attr.name] = null });\n    const [state, setState] = useState(initState);\n\n    if (!policyObj) {\n        return <Progress />\n    }\n\n    const onInputChange = (event: any, specType: string) => {\n        if (specType.toLowerCase() === 'boolean') {\n            setState({ ...state, [event.target.name]: event.target.checked });\n        } else if (\n            specType.toLowerCase() === 'string'\n            || specType.toLowerCase() === 'integer'\n            || specType.toLowerCase() === 'enum'\n        ) {\n            setState({ ...state, [event.target.name]: event.target.value });\n        }\n    }\n\n    const getValueOfPolicyParam = (policyParamName: string) => {\n        return apiPolicy.parameters[policyParamName];\n    }\n\n    /**\n     * This function is triggered when the form is submitted for save\n     * @param {React.FormEvent<HTMLFormElement>} event Form submit event\n     */\n    const submitForm = async (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        setSaving(true);\n        const updateCandidates: any = {};\n        Object.keys(state).forEach((key) => {\n            const value = state[key];\n            const attributeSpec = policySpec.policyAttributes.find(\n                (attribute: PolicySpecAttribute) => attribute.name === key,\n            );\n            if (value === null && getValueOfPolicyParam(key) && getValueOfPolicyParam(key) !== '') {\n                updateCandidates[key] = getValueOfPolicyParam(key);\n            } else if (value === null && attributeSpec?.defaultValue && attributeSpec?.defaultValue !==  null) {\n                updateCandidates[key] = attributeSpec.defaultValue;\n            } else {\n                updateCandidates[key] = value;\n            }\n        });\n\n        // Saving field changes to backend\n        const apiPolicyToSave = {...apiPolicy};\n        apiPolicyToSave.parameters = updateCandidates;\n        if (!applyToAll) {\n            updateApiOperations(apiPolicyToSave, target, verb, currentFlow);\n        } else {\n            // Apply the same attached policy to all the resources\n            updateAllApiOperations(apiPolicyToSave, currentFlow);\n            setApplyToAll(false);\n        }\n\n        if (setDroppedPolicy) setDroppedPolicy(null);\n        setSaving(false);\n        handleDrawerClose();\n    };\n\n    /**\n     * Function to get the error string, if there are any errors. Empty string to indicate the absence of errors.\n     * @param {PolicySpecAttribute} specInCheck The policy attribute that needs to be checked for any errors.\n     * @returns {string} String with the error message, where empty string indicates that there are no errors. \n     */\n    const getError = (specInCheck: PolicySpecAttribute) => {\n        let error = '';\n        const value = state[specInCheck.name];\n        if (value !== null) {\n            if (specInCheck.required && value === '') {\n                error = intl.formatMessage({\n                    id: 'Apis.Details.Policies.AttachedPolicyForm.General.required.error',\n                    defaultMessage: 'Required field is empty',\n                });\n            } else if (\n                value !== '' &&\n                specInCheck.validationRegex &&\n                !(!specInCheck.validationRegex || specInCheck.validationRegex === '')\n            ) {\n                // To check if the regex is a valid regex\n                try {\n                    if (!new RegExp(specInCheck.validationRegex).test(value)) {\n                        error = intl.formatMessage({\n                            id: 'Apis.Details.Policies.AttachedPolicyForm.General.regex.error',\n                            defaultMessage: 'Please enter a valid input',\n                        });\n                    }\n                } catch(e) {\n                    console.error(e);\n                }\n            }\n        }\n        return error;\n    }\n\n    const getValue = (spec: PolicySpecAttribute) => {\n        const specName = spec.name;\n        const previousVal = getValueOfPolicyParam(specName);\n        if (state[specName] !== null) {\n            return state[specName];\n        } else if (previousVal !== null && previousVal !== undefined) {\n            if (spec.type.toLowerCase() === 'integer') return parseInt(previousVal, 10);\n            else if (spec.type.toLowerCase() === 'boolean') return (previousVal.toString() === 'true');\n            else return previousVal;\n        } else if (spec.defaultValue !== null && spec.defaultValue !== undefined) {\n            if (spec.type.toLowerCase() === 'integer') return parseInt(spec.defaultValue, 10);\n            else if (spec.type.toLowerCase() === 'boolean') return (spec.defaultValue.toString() === 'true');\n            else return spec.defaultValue;\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * Reset the input fields\n     */\n    const resetAll = () => {\n        setState(initState);\n    }\n\n    /**\n     * Function to check whether there are any errors in the form.\n     * If there are errors, we disable the save button.\n     * @returns {boolean} Boolean value indicating whether or not the form has any errors.\n     */\n    const formHasErrors = () => {\n        let formHasAnError = false;\n        policySpec.policyAttributes.forEach((spec) => {\n            if(getError(spec) !== '') {\n                formHasAnError = true\n            }\n        })\n        return formHasAnError;\n    }\n\n    /**\n     * Function to check if the form content is in state that needs to be saved.\n     * @returns {boolean} Whether or not the save button should be disabled.\n     */\n    const isSaveDisabled = () => {\n        if (!isEditMode) {\n            let isDisabled = false;\n            policySpec.policyAttributes.forEach((spec) => {\n                if (spec.type !== 'Boolean') {\n                    const currentState = state[spec.name];\n                    const currentVal = getValue(spec);\n                    if (spec.required && !(currentState || currentVal)) {\n                        isDisabled = true;\n                    }\n                }\n            });\n            return isDisabled;\n        } else {\n            let isDisabled = true;\n            policySpec.policyAttributes.forEach((spec) => {\n                if (spec.type !== 'Boolean') {\n                    const currentState = state[spec.name];\n                    if (currentState !== null) {\n                        isDisabled = false;\n                    }\n                } else {\n                    const currentState = state[spec.name];\n                    if (\n                        currentState !== null &&\n                        (currentState.toString() === 'true' ||\n                            currentState.toString() === 'false')\n                    ) {\n                        isDisabled = false;\n                    }\n                }\n            });\n            return isDisabled;\n        }\n    };\n\n    /**\n     * Toggle the apply to all option on initial policy drop.\n     */\n    const toggleApplyToAll = () => {\n        setApplyToAll(!applyToAll);\n    }\n\n    const hasAttributes = policySpec.policyAttributes.length !== 0;\n    const resetDisabled = Object.values(state).filter((value: any) => \n        (value !== null && (value.toString() !== 'true' || value.toString() !== 'false')) || !!value\n    ).length === 0;\n\n    if (!policySpec) {\n        return <CircularProgress />\n    }\n\n    return (\n        <Box p={2}>\n            <form onSubmit={submitForm}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} className={classes.drawerInfo}>\n                        {hasAttributes && (\n                            <div className={classes.resetBtn}>\n                                <Button variant='outlined' color='primary' disabled={resetDisabled} onClick={resetAll}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Policies.AttachedPolicyForm.General.reset'\n                                        defaultMessage='Reset'\n                                    />\n                                </Button>\n                            </div>\n                        )}\n                        <div>\n                            <Typography variant='subtitle2' color='textPrimary'>\n                                <FormattedMessage\n                                    id='Apis.Details.Policies.AttachedPolicyForm.General.description.title'\n                                    defaultMessage='Description'\n                                />\n                            </Typography>\n                            <Typography variant='caption' color='textPrimary'>\n                                {policySpec.description ? (\n                                    <FormattedMessage\n                                        id='Apis.Details.Policies.AttachedPolicyForm.General.description.value.provided'\n                                        defaultMessage='{description}'\n                                        values={{ description: policySpec.description }}\n                                    />\n                                ) : (\n                                    <FormattedMessage\n                                        id={\n                                            'Apis.Details.Policies.AttachedPolicyForm.General.description.value.' +\n                                            'not.provided'\n                                        }\n                                        defaultMessage='Oops! Looks like this policy does not have a description'\n                                    />\n                                )}                            \n                            </Typography>\n                        </div>\n                    </Grid>\n                    {policySpec.policyAttributes && policySpec.policyAttributes.map((spec: PolicySpecAttribute) => (\n                        <Grid item xs={12}>\n\n                            {/* When the attribute type is string or integer */}\n                            {(spec.type.toLowerCase() === 'string'\n                            || spec.type.toLowerCase() === 'integer') && (\n                                <TextField\n                                    id={spec.name}\n                                    label={(\n                                        <>\n                                            {spec.displayName}\n                                            {spec.required && (\n                                                <sup className={classes.mandatoryStar}>*</sup>\n                                            )}\n                                        </>\n                                    )}\n                                    helperText={getError(spec) === '' ? spec.description : getError(spec)}\n                                    error={getError(spec) !== ''}\n                                    variant='outlined'\n                                    name={spec.name}\n                                    type={spec.type.toLowerCase() === 'integer' ? 'number' : 'text'}\n                                    value={getValue(spec)}\n                                    onChange={(e) => onInputChange(e, spec.type)}\n                                    fullWidth\n                                />\n                            )}\n\n                            {/* When the attribute type is enum */}\n                            {spec.type.toLowerCase() === 'enum' && (\n                                <>\n                                    <FormControl\n                                        variant='outlined'\n                                        className={classes.formControl}\n                                        error={getError(spec) !== ''}\n                                    >\n                                        <InputLabel htmlFor={'enum-label-' + spec.name}>\n                                            <>\n                                                {spec.displayName}\n                                                {spec.required && (\n                                                    <sup className={classes.mandatoryStar}>*</sup>\n                                                )}\n                                            </>\n                                        </InputLabel>\n                                        <Select \n                                            native\n                                            value={getValue(spec)}\n                                            onChange={(e) => onInputChange(e, spec.type)}\n                                            label={(\n                                                <>\n                                                    {spec.displayName}\n                                                    {spec.required && (\n                                                        <sup className={classes.mandatoryStar}>*</sup>\n                                                    )}\n                                                </>\n                                            )}\n                                            inputProps={{\n                                                name: spec.name,\n                                                id: `enum-label-${spec.name}`\n                                            }}\n                                        >\n                                            <option aria-label='None' value='' />\n                                            {spec.allowedValues && spec.allowedValues.map((enumVal) => (\n                                                <option value={enumVal}>{enumVal}</option>\n                                            ))}                                           \n                                        </Select>\n                                        <FormHelperText>\n                                            {getError(spec) === '' ? spec.description : getError(spec)}\n                                        </FormHelperText>\n                                    </FormControl>\n                                </>\n                            )}\n\n                            {/* When attribute type is boolean */}\n                            {spec.type.toLowerCase() === 'boolean' && (\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            checked={getValue(spec)}\n                                            onChange={(e) => onInputChange(e, spec.type)}\n                                            name={spec.name}\n                                            color='primary'\n                                        />\n                                    }\n                                    label={(\n                                        <>\n                                            {spec.displayName}\n                                            {spec.required && (\n                                                <sup className={classes.mandatoryStar}>*</sup>\n                                            )}\n                                        </>\n                                    )}\n                                />\n                            )}\n                        </Grid>\n                    ))}\n                    {setDroppedPolicy && (\n                        <Grid item container justify='flex-start' xs={12}>\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        id='checkbox-apply-dropped-policy-to-all'\n                                        checked={applyToAll}\n                                        color='primary'\n                                        name='applyPolicyToAll'\n                                        onChange={toggleApplyToAll}\n                                    />\n                                }\n                                label={(\n                                    <Typography variant='subtitle1' color='textPrimary'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Policies.AttachedPolicyForm.General.apply.to.all.resources'\n                                            defaultMessage='Apply to all resources'\n                                        />\n                                    </Typography>\n                                )}\n                            />\n                        </Grid>\n                    )}\n                    <Grid item container justify='flex-end' xs={12}>\n                        <Button\n                            variant='outlined'\n                            color='primary'\n                            onClick={handleDrawerClose}\n                            className={classes.btn}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Policies.AttachedPolicyForm.General.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                        <Button\n                            variant='contained'\n                            type='submit'\n                            color='primary'\n                            disabled={ isSaveDisabled() || formHasErrors() || saving}\n                        >\n                            {saving\n                                ? <>\n                                    <CircularProgress size='small' />\n                                    <FormattedMessage\n                                        id='Apis.Details.Policies.AttachedPolicyForm.General.saving'\n                                        defaultMessage='Saving'\n                                    />\n                                </>\n                                : <>\n                                    <FormattedMessage\n                                        id='Apis.Details.Policies.AttachedPolicyForm.General.save'\n                                        defaultMessage='Save'\n                                    />\n                                </>\n                            }\n                        </Button>\n                    </Grid>\n                </Grid>\n            </form>\n        </Box>\n    );\n};\n\n\nexport default General;\n","/* eslint-disable */\n/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { FC, useEffect, useContext, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@material-ui/core/Box';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {\n    Drawer,\n    makeStyles,\n    ListItemIcon,\n    Theme,\n    Typography,\n} from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Settings, Close } from '@material-ui/icons';\nimport Divider from '@material-ui/core/Divider';\nimport General from './AttachedPolicyForm/General';\nimport type { PolicySpec, ApiPolicy, AttachedPolicy } from './Types';\nimport ApiContext from '../components/ApiContext';\nimport ApiOperationContext from './ApiOperationContext';\nimport API from 'AppData/api';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    drawerPaper: {\n        backgroundColor: 'white',\n        width: '30%',\n    },\n    iconSize: {\n        height: '1.2em',\n        width: '1.2em',\n        color: theme.palette.grey[700],\n    },\n}));\n\ninterface PolicyConfigurationEditDrawerProps {\n    policyObj: AttachedPolicy | null;\n    currentFlow: string;\n    target: string;\n    verb: string;\n    drawerOpen: boolean;\n    setDrawerOpen: React.Dispatch<React.SetStateAction<boolean>>;\n    allPolicies: PolicySpec[] | null;\n}\n\n/**\n * Renders the policy configuration edit drawer.\n * @param {JSON} props Input props from parent components.\n * @returns {TSX} Right drawer for policy configuration.\n */\nconst PolicyConfigurationEditDrawer: FC<PolicyConfigurationEditDrawerProps> = ({\n    policyObj,\n    currentFlow,\n    target,\n    verb,\n    allPolicies,\n    drawerOpen,\n    setDrawerOpen,\n}) => {\n    const classes = useStyles();\n    const { api } = useContext<any>(ApiContext);\n    const { apiOperations } = useContext<any>(ApiOperationContext);\n    const [policySpec, setPolicySpec] = useState<PolicySpec>();\n\n    useEffect(() => {\n        (async () => {\n            if (policyObj) {\n                let policySpecVal = allPolicies?.find(\n                    (policy: PolicySpec) => policy.name === policyObj.name,\n                );\n\n                // If this policy is a deleted common policy we need to do an API call to get the policy specification\n                if (!policySpecVal) {\n                    const policyResponse = await API.getOperationPolicy(\n                        policyObj.id,\n                        api.id,\n                    );\n                    policySpecVal = policyResponse.body;\n                }\n\n                setPolicySpec(policySpecVal);\n                setDrawerOpen(true);\n            }\n        })();\n    }, [policyObj]);\n\n    const operationInAction = apiOperations.find(\n        (op: any) =>\n            op.target === target &&\n            op.verb.toLowerCase() === verb.toLowerCase(),\n    );\n    const operationFlowPolicy = operationInAction.operationPolicies[\n        currentFlow\n    ].find((policy: any) => policy.uuid === policyObj?.uniqueKey);\n\n    const apiPolicy: ApiPolicy = operationFlowPolicy || {\n        policyName: policyObj?.name,\n        policyId: policyObj?.id,\n        parameters: {},\n    };\n\n    const handleDrawerClose = () => {\n        setDrawerOpen(false);\n    };\n\n    return (\n        <Drawer\n            anchor='right'\n            open={drawerOpen}\n            onClose={handleDrawerClose}\n            classes={{ paper: classes.drawerPaper }}\n        >\n            <Box role='presentation'>\n                <List>\n                    <ListItem key='policy-config'>\n                        <ListItemIcon>\n                            <Settings className={classes.iconSize} />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={\n                                <Typography variant='subtitle2'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Policies.PolicyConfigurationEditDrawer.title'\n                                        defaultMessage='Configure {policy} Policy'\n                                        values={{\n                                            policy: policyObj?.displayName,\n                                        }}\n                                    />\n                                </Typography>\n                            }\n                        />\n                        <ListItemIcon>\n                            <IconButton onClick={handleDrawerClose}>\n                                <Close className={classes.iconSize} />\n                            </IconButton>\n                        </ListItemIcon>\n                    </ListItem>\n                </List>\n                <Divider light />\n                {policySpec && (\n                    <General\n                        policyObj={policyObj}\n                        currentFlow={currentFlow}\n                        target={target}\n                        verb={verb}\n                        policySpec={policySpec}\n                        apiPolicy={apiPolicy}\n                        handleDrawerClose={handleDrawerClose}\n                        isEditMode\n                    />\n                )}\n            </Box>\n        </Drawer>\n    );\n};\n\nexport default PolicyConfigurationEditDrawer;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { CSSProperties, FC, useContext, useState } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { Alert } from 'AppComponents/Shared';\nimport { makeStyles } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport API from 'AppData/api.js';\nimport Utils from 'AppData/Utils';\nimport { FormattedMessage } from 'react-intl';\nimport ApiContext from '../components/ApiContext';\nimport type { AttachedPolicy, PolicySpec } from './Types';\nimport PolicyConfigurationEditDrawer from './PolicyConfigurationEditDrawer';\nimport ApiOperationContext from './ApiOperationContext';\n\nconst useStyles = makeStyles(() => ({\n    actionsBox: {\n        display: 'flex',\n        flexDirection: 'column',\n        marginTop: '1em',\n    },\n}));\n\ninterface AttachedPolicyCardProps {\n    policyObj: AttachedPolicy;\n    currentPolicyList: AttachedPolicy[];\n    setCurrentPolicyList: React.Dispatch<React.SetStateAction<AttachedPolicy[]>>;\n    currentFlow: string;\n    verb: string;\n    target: string;\n    allPolicies: PolicySpec[] | null;\n}\n\n/**\n * Renders a single sortable policy card.\n * @param {any} AttachedPolicyCardProps Input props from parent components.\n * @returns {TSX} Sortable attached policy card UI.\n */\nconst AttachedPolicyCard: FC<AttachedPolicyCardProps> = ({\n    policyObj,\n    currentPolicyList,\n    setCurrentPolicyList,\n    currentFlow,\n    verb,\n    target,\n    allPolicies,\n}) => {\n    const classes = useStyles();\n    const { api } = useContext<any>(ApiContext);\n    const { deleteApiOperation } = useContext<any>(ApiOperationContext);\n    const [drawerOpen, setDrawerOpen] = useState(false);\n    const policyColor = Utils.stringToColor(policyObj.displayName);\n    const policyBackgroundColor = drawerOpen\n        ? `rgba(${Utils.hexToRGB(policyColor)}, 0.2)`\n        : 'rgba(0, 0, 0, 0)';\n    const {\n        attributes,\n        listeners,\n        setNodeRef,\n        transform,\n        transition,\n        isDragging,\n    } = useSortable({ id: policyObj.uniqueKey.toString() });\n    const style: CSSProperties = {\n        transform: CSS.Transform.toString(transform),\n        transition,\n        border: '2px solid',\n        height: '90%',\n        cursor: 'move',\n        borderRadius: '0.3em',\n        padding: '0.2em',\n        borderColor: policyColor,\n        marginLeft: '0.2em',\n        marginRight: '0.2em',\n        backgroundColor: policyBackgroundColor,\n        opacity: isDragging ? 0.5 : 1,\n    };\n\n    /**\n     * Handle policy delete\n     * @param {React.MouseEvent<HTMLButtonElement, MouseEvent>} event event\n     */\n    const handleDelete = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        const filteredList = currentPolicyList.filter(\n            (policy) => policy.uniqueKey !== policyObj.uniqueKey,\n        );\n        const policyToDelete = currentPolicyList.find(\n            (policy) => policy.uniqueKey === policyObj.uniqueKey,\n        );\n        setCurrentPolicyList(filteredList);\n        deleteApiOperation(\n            policyToDelete?.uniqueKey,\n            target,\n            verb,\n            currentFlow,\n        );\n        event.stopPropagation();\n        event.preventDefault();\n    };\n\n    /**\n     * Handle policy download\n     * @param {React.MouseEvent<HTMLButtonElement, MouseEvent>} event event\n     */\n    const handlePolicyDownload = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        event.stopPropagation();\n        event.preventDefault();\n        if (policyObj.isAPISpecific) {\n            const apiPolicyContentPromise = API.getOperationPolicyContent(\n                policyObj.id,\n                api.id,\n            );\n            apiPolicyContentPromise\n                .then((apiPolicyResponse) => {\n                    Utils.forceDownload(apiPolicyResponse);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    Alert.error(\n                        <FormattedMessage\n                            id='Apis.Details.Policies.AttachedPolicyCard.apiSpecificPolicy.download.error'\n                            defaultMessage='Something went wrong while downloading the policy'\n                        />,\n                    );\n                });\n        } else {\n            const commonPolicyContentPromise = API.getCommonOperationPolicyContent(\n                policyObj.id,\n            );\n            commonPolicyContentPromise\n                .then((commonPolicyResponse) => {\n                    Utils.forceDownload(commonPolicyResponse);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    Alert.error(\n                        <FormattedMessage\n                            id='Apis.Details.Policies.AttachedPolicyCard.commonPolicy.download.error'\n                            defaultMessage='Something went wrong while downloading the policy'\n                        />,\n                    );\n                });\n        }\n    };\n\n    const handleDrawerOpen = () => {\n        if (policyObj.id !== '') {\n            // Drawer will only appear for policies that have an ID\n            // Note that a migrated policy will have an empty string as the ID at the initial stage\n            setDrawerOpen(true);\n        }\n    };\n\n    return (\n        <>\n            <div\n                ref={setNodeRef}\n                style={style}\n                {...attributes}\n                {...listeners}\n                onClick={handleDrawerOpen}\n                onKeyDown={handleDrawerOpen}\n            >\n                <Tooltip\n                    key={policyObj.id}\n                    title={policyObj.displayName}\n                    placement='top'\n                >\n                    <Avatar\n                        style={{\n                            margin: '0.2em',\n                            backgroundColor: policyColor,\n                        }}\n                    >\n                        {Utils.stringAvatar(\n                            policyObj.displayName.toUpperCase(),\n                        )}\n                    </Avatar>\n                </Tooltip>\n                <Box className={classes.actionsBox}>\n                    <IconButton\n                        key={`${policyObj.id}-download`}\n                        aria-label='Download policy'\n                        size='small'\n                        onClick={handlePolicyDownload}\n                        disableFocusRipple\n                        disableRipple\n                        disabled={policyObj.id === ''} // Disabling policy download for migrated policy\n                    >\n                        <CloudDownloadIcon />\n                    </IconButton>\n                    <IconButton\n                        key={`${policyObj.id}-delete`}\n                        aria-label='delete attached policy'\n                        size='small'\n                        onClick={handleDelete}\n                        disableFocusRipple\n                        disableRipple\n                    >\n                        <DeleteIcon />\n                    </IconButton>\n                </Box>\n            </div>\n            {drawerOpen && (\n                <PolicyConfigurationEditDrawer\n                    policyObj={policyObj}\n                    drawerOpen={drawerOpen}\n                    setDrawerOpen={setDrawerOpen}\n                    currentFlow={currentFlow}\n                    target={target}\n                    verb={verb}\n                    allPolicies={allPolicies}\n                />\n            )}\n        </>\n    );\n};\n\nexport default AttachedPolicyCard;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { FC, useContext } from 'react';\nimport {\n    DndContext,\n    closestCenter,\n    PointerSensor,\n    useSensor,\n    useSensors,\n    DragEndEvent,\n} from '@dnd-kit/core';\nimport {\n    horizontalListSortingStrategy,\n    SortableContext,\n} from '@dnd-kit/sortable';\n\nimport AttachedPolicyCard from './AttachedPolicyCard';\nimport type { AttachedPolicy, PolicySpec } from './Types';\nimport ApiOperationContext from './ApiOperationContext';\n\ninterface AttachedPolicyListProps {\n    currentPolicyList: AttachedPolicy[];\n    setCurrentPolicyList: React.Dispatch<React.SetStateAction<AttachedPolicy[]>>;\n    policyDisplayStartDirection: string;\n    currentFlow: string;\n    target: string;\n    verb: string;\n    allPolicies: PolicySpec[] | null;\n}\n\n/**\n * Renders the Gateway selection section.\n * @param {JSON} props Input props from parent components.\n * @returns {TSX} Radio group for the API Gateway.\n */\nconst AttachedPolicyList: FC<AttachedPolicyListProps> = ({\n    currentPolicyList,\n    setCurrentPolicyList,\n    policyDisplayStartDirection,\n    currentFlow,\n    target,\n    verb,\n    allPolicies,\n}) => {\n    const reversedPolicyList = [...currentPolicyList].reverse();\n    const policyListToDisplay =\n        policyDisplayStartDirection === 'left'\n            ? currentPolicyList\n            : reversedPolicyList;\n    const { rearrangeApiOperations } = useContext<any>(ApiOperationContext);\n\n    const sensors = useSensors(\n        useSensor(PointerSensor, {\n            activationConstraint: {\n                distance: 5,\n            },\n        }),\n    );\n\n    const handleDragEnd = (event: DragEndEvent) => {\n        const { active, over } = event;\n\n        if (active.id !== over?.id) {\n            const policyListCopy = [...currentPolicyList];\n            const oldIndex = policyListCopy.findIndex(\n                (item) => item.uniqueKey === active.id,\n            );\n            const newIndex = policyListCopy.findIndex(\n                (item) => item.uniqueKey === over?.id,\n            );\n\n            rearrangeApiOperations(\n                oldIndex,\n                newIndex,\n                target,\n                verb,\n                currentFlow,\n            );\n        }\n    };\n\n    return (\n        <>\n            <DndContext\n                sensors={sensors}\n                collisionDetection={closestCenter}\n                onDragEnd={handleDragEnd}\n            >\n                <SortableContext\n                    items={currentPolicyList.map((item) => item.uniqueKey)}\n                    strategy={horizontalListSortingStrategy}\n                >\n                    {policyListToDisplay.map((policy: AttachedPolicy) => (\n                        <AttachedPolicyCard\n                            key={policy.uniqueKey}\n                            policyObj={policy}\n                            currentPolicyList={currentPolicyList}\n                            setCurrentPolicyList={setCurrentPolicyList}\n                            currentFlow={currentFlow}\n                            target={target}\n                            verb={verb}\n                            allPolicies={allPolicies}\n                        />\n                    ))}\n                </SortableContext>\n            </DndContext>\n        </>\n    );\n};\n\nexport default AttachedPolicyList;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { FC, useEffect, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@material-ui/core/Box';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {\n    Drawer,\n    makeStyles,\n    ListItemIcon,\n    Theme,\n    Typography,\n} from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Settings, Close } from '@material-ui/icons';\nimport Divider from '@material-ui/core/Divider';\nimport { Progress } from 'AppComponents/Shared';\nimport General from './AttachedPolicyForm/General';\nimport { PolicySpec, ApiPolicy, Policy } from './Types';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    drawerPaper: {\n        backgroundColor: 'white',\n        width: '30%',\n    },\n    iconSize: {\n        height: '1.2em',\n        width: '1.2em',\n        color: theme.palette.grey[700],\n    },\n}));\n\ninterface PolicyConfiguringDrawerProps {\n    policyObj: Policy | null;\n    setDroppedPolicy: React.Dispatch<React.SetStateAction<Policy | null>>;\n    currentFlow: string;\n    target: string;\n    verb: string;\n    allPolicies: PolicySpec[] | null;\n}\n\n/**\n * Renders the policy configuring drawer.\n * @param {JSON} props Input props from parent components.\n * @returns {TSX} Right drawer for policy configuration.\n */\nconst PolicyConfiguringDrawer: FC<PolicyConfiguringDrawerProps> = ({\n    policyObj,\n    setDroppedPolicy,\n    currentFlow,\n    target,\n    verb,\n    allPolicies,\n}) => {\n    const classes = useStyles();\n    const [drawerOpen, setDrawerOpen] = useState(!!policyObj);\n    const [policySpec, setPolicySpec] = useState<PolicySpec>();\n\n    useEffect(() => {\n        if (policyObj) {\n            setPolicySpec(\n                allPolicies?.find(\n                    (policy: PolicySpec) => policy.id === policyObj.id,\n                ),\n            );\n            setDrawerOpen(true);\n        }\n    }, [policyObj]);\n\n    if (!policySpec) {\n        return <Progress />;\n    }\n\n    const apiPolicy: ApiPolicy = {\n        policyName: policyObj?.name,\n        policyId: policyObj?.id,\n        parameters: {},\n    };\n\n    const handleDrawerClose = () => {\n        setDrawerOpen(false);\n        setDroppedPolicy(null);\n    };\n\n    /**\n     * Converts the PolicyObj prop of type Policy to AttachedPolicy\n     * @returns {AttachedPolicy} Returns a policy object of type AttachedPolicy\n     */\n    const getPolicyOfTypeAttachedPolicy = () => {\n        if (policyObj) {\n            return {\n                id: policyObj?.id,\n                name: policyObj?.name,\n                displayName: policyObj?.displayName,\n                applicableFlows: policyObj?.applicableFlows,\n                uniqueKey: '',\n            };\n        } else {\n            return null;\n        }\n    };\n\n    return (\n        <Drawer\n            anchor='right'\n            open={drawerOpen}\n            onClose={handleDrawerClose}\n            classes={{ paper: classes.drawerPaper }}\n        >\n            <Box role='presentation'>\n                <List>\n                    <ListItem key='policy-config'>\n                        <ListItemIcon>\n                            <Settings className={classes.iconSize} />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={\n                                <Typography variant='subtitle2'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Policies.PolicyConfiguringDrawer.title'\n                                        defaultMessage='Configure {policy} Policy'\n                                        values={{\n                                            policy: policyObj?.displayName,\n                                        }}\n                                    />\n                                </Typography>\n                            }\n                        />\n                        <ListItemIcon>\n                            <IconButton onClick={handleDrawerClose}>\n                                <Close className={classes.iconSize} />\n                            </IconButton>\n                        </ListItemIcon>\n                    </ListItem>\n                </List>\n                <Divider light />\n                <General\n                    policyObj={getPolicyOfTypeAttachedPolicy()}\n                    setDroppedPolicy={setDroppedPolicy}\n                    currentFlow={currentFlow}\n                    target={target}\n                    verb={verb}\n                    policySpec={policySpec}\n                    apiPolicy={apiPolicy}\n                    handleDrawerClose={handleDrawerClose}\n                    isEditMode={false}\n                />\n            </Box>\n        </Drawer>\n    );\n};\n\nexport default PolicyConfiguringDrawer;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { FC, useState } from 'react';\nimport { Grid, makeStyles, Theme, Typography } from '@material-ui/core';\nimport { useDrop } from 'react-dnd';\nimport green from '@material-ui/core/colors/green';\nimport red from '@material-ui/core/colors/red';\nimport clsx from 'clsx';\nimport type { AttachedPolicy, Policy, PolicySpec } from './Types';\nimport AttachedPolicyList from './AttachedPolicyList';\nimport PolicyConfiguringDrawer from './PolicyConfiguringDrawer';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    dropzoneDiv: {\n        border: '1px dashed',\n        borderColor: theme.palette.primary.main,\n        height: '8rem',\n        padding: '0.8rem',\n        width: '100%',\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        textAlign: 'center',\n        borderRadius: '0.3em',\n        display: 'flex',\n        alignItems: 'center',\n        overflowX: 'scroll',\n    },\n    acceptDrop: {\n        backgroundColor: green[50],\n        borderColor: 'green',\n    },\n    rejectDrop: {\n        backgroundColor: red[50],\n        borderColor: 'red',\n    },\n    alignLeft: {\n        justifyContent: 'left',\n    },\n    alignRight: {\n        justifyContent: 'right',\n    },\n    alignCenter: {\n        justifyContent: 'center',\n    },\n}));\n\ninterface PolicyDropzoneProps {\n    policyDisplayStartDirection: string;\n    currentPolicyList: AttachedPolicy[];\n    setCurrentPolicyList: React.Dispatch<\n        React.SetStateAction<AttachedPolicy[]>\n    >;\n    droppablePolicyList: string[];\n    currentFlow: string;\n    target: string;\n    verb: string;\n    allPolicies: PolicySpec[] | null;\n}\n\n/**\n * Renders the dropzone which accepts policy cards that are dragged and dropped.\n * @param {JSON} props Input props from parent components.\n * @returns {TSX} List of policies local to the API segment.\n */\nconst PolicyDropzone: FC<PolicyDropzoneProps> = ({\n    policyDisplayStartDirection,\n    currentPolicyList,\n    setCurrentPolicyList,\n    droppablePolicyList,\n    currentFlow,\n    target,\n    verb,\n    allPolicies,\n}) => {\n    const classes = useStyles();\n    const [droppedPolicy, setDroppedPolicy] = useState<Policy | null>(null);\n\n    const [{ canDrop }, drop] = useDrop({\n        accept: droppablePolicyList,\n        drop: (item: any) => setDroppedPolicy(item.droppedPolicy),\n        collect: (monitor) => ({\n            canDrop: monitor.canDrop(),\n        }),\n    });\n\n    return (\n        <>\n            <Grid container>\n                <div\n                    ref={drop}\n                    className={clsx({\n                        [classes.dropzoneDiv]: true,\n                        [classes.acceptDrop]: canDrop,\n                        [classes.alignCenter]: currentPolicyList.length === 0,\n                        [classes.alignLeft]:\n                            currentPolicyList.length !== 0 &&\n                            policyDisplayStartDirection === 'left',\n                        [classes.alignRight]:\n                            currentPolicyList.length !== 0 &&\n                            policyDisplayStartDirection === 'right',\n                    })}\n                >\n                    {currentPolicyList.length === 0 ? (\n                        <Typography>Drag and drop policies here</Typography>\n                    ) : (\n                        <AttachedPolicyList\n                            currentPolicyList={currentPolicyList}\n                            setCurrentPolicyList={setCurrentPolicyList}\n                            policyDisplayStartDirection={\n                                policyDisplayStartDirection\n                            }\n                            currentFlow={currentFlow}\n                            target={target}\n                            verb={verb}\n                            allPolicies={allPolicies}\n                        />\n                    )}\n                </div>\n            </Grid>\n            {droppedPolicy && (\n                <PolicyConfiguringDrawer\n                    policyObj={droppedPolicy}\n                    setDroppedPolicy={setDroppedPolicy}\n                    currentFlow={currentFlow}\n                    target={target}\n                    verb={verb}\n                    allPolicies={allPolicies}\n                />\n            )}\n        </>\n    );\n};\n\nexport default PolicyDropzone;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { FC } from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport Box from '@material-ui/core/Box';\n\nconst useStyles = makeStyles(() => ({\n    arrowColor: {\n        backgroundColor: 'black',\n        opacity: 0.4,\n    },\n    iconSize: {\n        fontSize: '2em',\n        color: 'black',\n        opacity: 0.4,\n    }\n}));\n\ninterface FlowArrowProps {\n    arrowDirection: string;\n}\n\n/**\n * Tab panel component to render content of a particular tab.\n * Renders the available policy list under the relevant flow related tab (i.e. request, response or fault).\n * @param {JSON} props Input props from parent components.\n * @returns {TSX} Tab panel.\n */\nconst FlowArrow: FC<FlowArrowProps> = ({ arrowDirection }) => {\n    const classes = useStyles();\n\n    return (\n        <>\n            {arrowDirection === 'left'\n                ?  (\n                    <Box display='flex' flexDirection='row' alignItems='center' pl={2} pt={1}>\n                        <Box width='90%' mb={0.5} height={4} className={classes.arrowColor} />\n                        <Box width='10%'>\n                            <ArrowForwardIosIcon className={classes.iconSize} />\n                        </Box>\n                    </Box>\n                ) : (\n                    <Box display='flex' flexDirection='row' alignItems='center' pr={2} pl={3} pt={1}>\n                        <Box width='5%'>\n                            <ArrowBackIosIcon className={classes.iconSize} />\n                        </Box>\n                        <Box width='90%' mb={0.5} height={4} className={classes.arrowColor} />\n                    </Box>\n                )\n            }\n        </>\n    );\n}\n\nexport default FlowArrow;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { FC, useContext, useEffect, useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\nimport PolicyDropzone from './PolicyDropzone';\nimport type { AttachedPolicy, Policy, PolicySpec } from './Types';\nimport FlowArrow from './components/FlowArrow';\nimport ApiOperationContext from './ApiOperationContext';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    flowSpecificPolicyAttachGrid: {\n        marginTop: theme.spacing(1),\n        overflowX: 'scroll',\n    },\n}));\n\nconst defaultPolicyForMigration = {\n    id: '',\n    category: 'Mediation',\n    name: '',\n    displayName: '',\n    description: '',\n    applicableFlows: [],\n    supportedGateways: ['Synapse'],\n    supportedApiTypes: ['HTTP'],\n    policyAttributes: [],\n    isAPISpecific: true,\n};\n\ninterface PoliciesExpansionProps {\n    target: any;\n    verb: string;\n    allPolicies: PolicySpec[] | null;\n    isChoreoConnectEnabled: boolean;\n    policyList: Policy[];\n}\n\nconst PoliciesExpansion: FC<PoliciesExpansionProps> = ({\n    target,\n    verb,\n    allPolicies,\n    isChoreoConnectEnabled,\n    policyList,\n}) => {\n    // Policies attached for each request, response and fault flow\n    const [requestFlowPolicyList, setRequestFlowPolicyList] = useState<AttachedPolicy[]>([]);\n    const [responseFlowPolicyList, setResponseFlowPolicyList] = useState<AttachedPolicy[]>([]);\n    const [faultFlowPolicyList, setFaultFlowPolicyList] = useState<AttachedPolicy[]>([]);\n\n    // Droppable policy identifier list for each request, response and fault flow\n    const [requestFlowDroppablePolicyList, setRequestFlowDroppablePolicyList] = useState<string[]>([]);\n    const [responseFlowDroppablePolicyList, setResponseFlowDroppablePolicyList] = useState<string[]>([]);\n    const [faultFlowDroppablePolicyList, setFaultFlowDroppablePolicyList] = useState<string[]>([]);\n\n    const classes = useStyles();\n    const { apiOperations } = useContext<any>(ApiOperationContext);\n    const { api } = useContext<any>(APIContext);\n\n    useEffect(() => {\n        const requestList = [];\n        const responseList = [];\n        const faultList = [];\n        for (const policy of policyList) {\n            if (policy.applicableFlows.includes('request')) {\n                requestList.push(`policyCard-${policy.id}`);\n            }\n            if (policy.applicableFlows.includes('response')) {\n                responseList.push(`policyCard-${policy.id}`);\n            }\n            if (policy.applicableFlows.includes('fault')) {\n                faultList.push(`policyCard-${policy.id}`);\n            }\n        }\n        setRequestFlowDroppablePolicyList(requestList);\n        setResponseFlowDroppablePolicyList(responseList);\n        setFaultFlowDroppablePolicyList(faultList);\n    }, [policyList]);\n\n    useEffect(() => {\n        (async () => {\n            let operationInAction = null;\n            if (!isChoreoConnectEnabled) {\n                operationInAction = apiOperations.find(\n                    (op: any) =>\n                        op.target === target &&\n                        op.verb.toLowerCase() === verb.toLowerCase(),\n                );\n            } else {\n                operationInAction = apiOperations.find(\n                    (op: any) => op.target === target,\n                );\n            }\n\n            // Populate request flow attached policy list\n            const requestFlowList: AttachedPolicy[] = [];\n            const requestFlow = operationInAction.operationPolicies.request;\n            for (const requestFlowAttachedPolicy of requestFlow) {\n                const { policyId, policyName, uuid } =\n                    requestFlowAttachedPolicy;\n                if (policyId === null) {\n                    // Handling migration flow\n                    requestFlowList.push({\n                        ...defaultPolicyForMigration,\n                        name: policyName,\n                        displayName: policyName,\n                        applicableFlows: ['request'],\n                        uniqueKey: uuid,\n                    });\n                } else {\n                    const policyObj = allPolicies?.find(\n                        (policy: PolicySpec) => policy.name === policyName,\n                    );\n                    if (policyObj) {\n                        requestFlowList.push({ ...policyObj, uniqueKey: uuid });\n                    } else {\n                        try {\n                            // eslint-disable-next-line no-await-in-loop\n                            const policyResponse = await API.getOperationPolicy(\n                                policyId,\n                                api.id,\n                            );\n                            if (policyResponse)\n                                requestFlowList.push({\n                                    ...policyResponse.body,\n                                    uniqueKey: uuid,\n                                });\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    }\n                }\n            }\n            setRequestFlowPolicyList(requestFlowList);\n\n            // Populate response flow attached policy list\n            const responseFlowList: AttachedPolicy[] = [];\n            const responseFlow = operationInAction.operationPolicies.response;\n            for (const responseFlowAttachedPolicy of responseFlow) {\n                const { policyId, policyName, uuid } =\n                    responseFlowAttachedPolicy;\n                if (policyId === null) {\n                    // Handling migration flow\n                    responseFlowList.push({\n                        ...defaultPolicyForMigration,\n                        name: policyName,\n                        displayName: policyName,\n                        applicableFlows: ['response'],\n                        uniqueKey: uuid,\n                    });\n                } else {\n                    const policyObj = allPolicies?.find(\n                        (policy: PolicySpec) => policy.name === policyName,\n                    );\n                    if (policyObj) {\n                        responseFlowList.push({ ...policyObj, uniqueKey: uuid });\n                    } else {\n                        try {\n                            // eslint-disable-next-line no-await-in-loop\n                            const policyResponse = await API.getOperationPolicy(\n                                policyId,\n                                api.id,\n                            );\n                            if (policyResponse)\n                                responseFlowList.push({\n                                    ...policyResponse.body,\n                                    uniqueKey: uuid,\n                                });\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    }   \n                }\n            }\n            setResponseFlowPolicyList(responseFlowList);\n\n            if (!isChoreoConnectEnabled) {\n                // Populate fault flow attached policy list\n                const faultFlowList: AttachedPolicy[] = [];\n                const faultFlow = operationInAction.operationPolicies.fault;\n                for (const faultFlowAttachedPolicy of faultFlow) {\n                    const { policyId, policyName, uuid } =\n                        faultFlowAttachedPolicy;\n                    if (policyId === null) {\n                        // Handling migration flow\n                        faultFlowList.push({\n                            ...defaultPolicyForMigration,\n                            name: policyName,\n                            displayName: policyName,\n                            applicableFlows: ['fault'],\n                            uniqueKey: uuid,\n                        });\n                    } else {\n                        const policyObj = allPolicies?.find(\n                            (policy: PolicySpec) => policy.name === policyName,\n                        );\n                        if (policyObj) {\n                            faultFlowList.push({ ...policyObj, uniqueKey: uuid });\n                        } else {\n                            try {\n                                // eslint-disable-next-line no-await-in-loop\n                                const policyResponse = await API.getOperationPolicy(\n                                    policyId,\n                                    api.id,\n                                );\n                                if (policyResponse)\n                                    faultFlowList.push({\n                                        ...policyResponse.body,\n                                        uniqueKey: uuid,\n                                    });\n                            } catch (error) {\n                                console.error(error);\n                            }\n                        }\n                    }\n                }\n                setFaultFlowPolicyList(faultFlowList);\n            }\n        })();\n    }, [apiOperations]);\n\n    return (\n        <ExpansionPanelDetails>\n            <Grid\n                spacing={2}\n                container\n                direction='row'\n                justify='flex-start'\n                alignItems='flex-start'\n            >\n                <Grid item xs={12} md={12}>\n                    <Box className={classes.flowSpecificPolicyAttachGrid}>\n                        <Typography variant='subtitle2' align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Policies.PoliciesExpansion.request.flow.title'\n                                defaultMessage='Request Flow'\n                            />\n                        </Typography>\n                        <FlowArrow arrowDirection='left' />\n                        <PolicyDropzone\n                            policyDisplayStartDirection='left'\n                            currentPolicyList={requestFlowPolicyList}\n                            setCurrentPolicyList={setRequestFlowPolicyList}\n                            droppablePolicyList={requestFlowDroppablePolicyList}\n                            currentFlow='request'\n                            target={target}\n                            verb={verb}\n                            allPolicies={allPolicies}\n                        />\n                    </Box>\n                    <Box className={classes.flowSpecificPolicyAttachGrid}>\n                        <Typography variant='subtitle2' align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Policies.PoliciesExpansion.response.flow.title'\n                                defaultMessage='Response Flow'\n                            />\n                        </Typography>\n                        <FlowArrow arrowDirection='right' />\n                        <PolicyDropzone\n                            policyDisplayStartDirection='right'\n                            currentPolicyList={responseFlowPolicyList}\n                            setCurrentPolicyList={setResponseFlowPolicyList}\n                            droppablePolicyList={\n                                responseFlowDroppablePolicyList\n                            }\n                            currentFlow='response'\n                            target={target}\n                            verb={verb}\n                            allPolicies={allPolicies}\n                        />\n                    </Box>\n                    {!isChoreoConnectEnabled && (\n                        <Box className={classes.flowSpecificPolicyAttachGrid}>\n                            <Typography variant='subtitle2' align='left'>\n                                <FormattedMessage\n                                    id='Apis.Details.Policies.PoliciesExpansion.fault.flow.title'\n                                    defaultMessage='Fault Flow'\n                                />\n                            </Typography>\n                            <FlowArrow arrowDirection='right' />\n                            <PolicyDropzone\n                                policyDisplayStartDirection='right'\n                                currentPolicyList={faultFlowPolicyList}\n                                setCurrentPolicyList={setFaultFlowPolicyList}\n                                droppablePolicyList={\n                                    faultFlowDroppablePolicyList\n                                }\n                                currentFlow='fault'\n                                target={target}\n                                verb={verb}\n                                allPolicies={allPolicies}\n                            />\n                        </Box>\n                    )}\n                </Grid>\n            </Grid>\n        </ExpansionPanelDetails>\n    );\n};\n\nexport default PoliciesExpansion;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { FC } from 'react';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Utils from 'AppData/Utils';\nimport Badge from '@material-ui/core/Badge';\nimport ReportProblemOutlinedIcon from '@material-ui/icons/ReportProblemOutlined';\nimport { FormattedMessage } from 'react-intl';\nimport PoliciesExpansion from './PoliciesExpansion';\nimport type { Policy, PolicySpec } from './Types'\n\ninterface OperationPolicyProps {\n    target: string;\n    verb: string;\n    operation: any;\n    highlight: any;\n    api: any;\n    disableUpdate: any;\n    expandedResource: string | null;\n    setExpandedResource: React.Dispatch<React.SetStateAction<string | null>>;\n    policyList: Policy[];\n    allPolicies: PolicySpec[] | null;\n    isChoreoConnectEnabled: boolean;\n}\n\nconst OperationPolicy: FC<OperationPolicyProps> = ({\n    operation, highlight, api, target, verb, expandedResource, setExpandedResource,\n    policyList, allPolicies, isChoreoConnectEnabled\n}) => {\n    const useStyles = makeStyles((theme: any) => {\n        const backgroundColor = theme.custom.resourceChipColors[verb];\n        return {\n            customButton: {\n                '&:hover': { backgroundColor },\n                backgroundColor,\n                width: theme.spacing(12),\n                color: theme.palette.getContrastText(backgroundColor),\n            },\n            paperStyles: {\n                border: `1px solid ${backgroundColor}`,\n                borderBottom: '',\n                width: '100%',\n            },\n            customDivider: {\n                backgroundColor,\n            },\n            highlightSelected: {\n                backgroundColor: Utils.hexToRGBA(backgroundColor, 0.1),\n            },\n            contentNoMargin: {\n                margin: theme.spacing(0),\n            },\n            targetText: {\n                maxWidth: 300,\n                margin: '0px 20px',\n                overflow: 'hidden',\n                whiteSpace: 'nowrap',\n                textOverflow: 'ellipsis',\n                display: 'inline-block',\n            },\n            operationSummaryGrid: {\n                display: 'flex',\n                alignItems: 'center',\n                flexBasis: '100%',\n                maxWidth: '100%',\n            }\n        };\n    });\n\n    const classes = useStyles();\n\n    const apiOperation = api.operations[target] && api.operations[target][verb.toUpperCase()];\n    const isUsedInAPIProduct = apiOperation && Array.isArray(\n        apiOperation.usedProductIds,\n    ) && apiOperation.usedProductIds.length;\n\n    const handleExpansion = (panel: string) => (event: any, isExpanded: boolean) => {\n        setExpandedResource(isExpanded ? panel : null);\n    };\n\n    const renderUsedInApiProducts = () => {\n        return (isUsedInAPIProduct) ? (\n            <Grid item md={3}>\n                <Box display='flex' justifyContent='center'>\n                    <ReportProblemOutlinedIcon fontSize='small' />\n                    <Box display='flex' ml={1} mt={1 / 4} fontSize='caption.fontSize'>\n                        <FormattedMessage\n                            id='Apis.Details.Policies.OperationPolicy.operation.used.in.products'\n                            defaultMessage='This operation is used in {isUsedInAPIProduct} API product(s)'\n                            values={{ isUsedInAPIProduct }}\n                        />\n                    </Box>\n                </Box>\n            </Grid>\n        ) : (\n            <Grid item md={3} />\n        );\n    }\n\n    return (\n        <>\n            <ExpansionPanel\n                expanded={expandedResource === verb + target}\n                onChange={handleExpansion(verb + target)}\n                disabled={false}\n                className={classes.paperStyles}\n            >\n                {isChoreoConnectEnabled ?\n                    <Grid container direction='row' justify='space-between' alignItems='center' spacing={0}>\n                        <Grid item md={4} className={classes.operationSummaryGrid}>\n                            <Badge\n                                invisible={!operation['x-wso2-new']}\n                                color='error'\n                                variant='dot'\n                                style={{ display: 'inline-block' }}\n                            >\n                                <Button\n                                    disableFocusRipple\n                                    variant='contained'\n                                    aria-label={'HTTP verb ' + verb}\n                                    size='small'\n                                    className={classes.customButton}\n                                >\n                                    {verb}\n                                </Button>\n                            </Badge>\n                            <Typography\n                                display='inline'\n                                variant='h6'\n                                gutterBottom\n                                className={classes.targetText}\n                                title={target}\n                            >\n                                {target}\n                                {(operation.summary && operation.summary !== '') && (\n                                    <Typography\n                                        display='inline'\n                                        style={{ margin: '0px 30px' }}\n                                        variant='caption'\n                                        gutterBottom\n                                    >\n                                        {operation.summary}\n                                    </Typography>\n                                )}\n                            </Typography>\n                        </Grid>\n                        {renderUsedInApiProducts}\n                    </Grid>\n                    :\n                    <ExpansionPanelSummary\n                        className={highlight ? classes.highlightSelected : ''}\n                        disableRipple\n                        disableTouchRipple\n                        expandIcon={<ExpandMoreIcon />}\n                        id={verb + target}\n                        classes={{ content: classes.contentNoMargin }}\n                    >\n                        <Grid container direction='row' justify='space-between' alignItems='center' spacing={0}>\n                            <Grid item md={4} className={classes.operationSummaryGrid}>\n                                <Badge\n                                    invisible={!operation['x-wso2-new']}\n                                    color='error'\n                                    variant='dot'\n                                    style={{ display: 'inline-block' }}\n                                >\n                                    <Button\n                                        disableFocusRipple\n                                        variant='contained'\n                                        aria-label={'HTTP verb ' + verb}\n                                        size='small'\n                                        className={classes.customButton}\n                                    >\n                                        {verb}\n                                    </Button>\n                                </Badge>\n                                <Typography\n                                    display='inline'\n                                    variant='h6'\n                                    gutterBottom\n                                    className={classes.targetText}\n                                    title={target}\n                                >\n                                    {target}\n                                    {(operation.summary && operation.summary !== '') && (\n                                        <Typography\n                                            display='inline'\n                                            style={{ margin: '0px 30px' }}\n                                            variant='caption'\n                                            gutterBottom\n                                        >\n                                            {operation.summary}\n                                        </Typography>\n                                    )}\n                                </Typography>\n                            </Grid>\n                            {renderUsedInApiProducts}\n                        </Grid>\n                    </ExpansionPanelSummary>\n                }\n                <Divider light className={classes.customDivider} />\n                {!isChoreoConnectEnabled && (\n                    <PoliciesExpansion\n                        target={target}\n                        verb={verb}\n                        allPolicies={allPolicies}\n                        isChoreoConnectEnabled={isChoreoConnectEnabled}\n                        policyList={policyList}\n                    />\n                )}\n            </ExpansionPanel>\n        </>\n    );\n};\n\nexport default OperationPolicy;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { FC } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\ninterface OperationButtonProps {\n    verb: string;\n}\n\nconst getStyles = (verb: string) => {\n    const useStyles = makeStyles((theme: any) => {\n        const backgroundColor = theme.custom.resourceChipColors[verb];\n        return {\n            customButton: {\n                '&:hover': { backgroundColor },\n                backgroundColor,\n                width: theme.spacing(12),\n                color: theme.palette.getContrastText(backgroundColor),\n            }\n        };\n    })();\n    return useStyles;\n}\n\nconst OperationButton: FC<OperationButtonProps> = ({ verb }) => {\n\n    const classes = getStyles(verb);\n    return (\n        <Button\n            disableFocusRipple\n            variant='contained'\n            aria-label={'HTTP verb ' + verb}\n            size='small'\n            className={classes.customButton}\n        >\n            {verb}\n        </Button>\n    );\n};\n\nexport default OperationButton;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { FC } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Box } from '@material-ui/core';\nimport CONSTS from 'AppData/Constants';\nimport OperationButton from './OperationButton';\n\nconst useStyles = makeStyles((theme) => ({\n    tagClass: {\n        maxWidth: 1000,\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        [theme.breakpoints.down('md')]: {\n            maxWidth: 800,\n        },\n    },\n}));\n\ninterface OperationGroupProps {\n    openAPI: any;\n    children: any;\n    tag: string;\n    isChoreoConnectEnabled: boolean;\n    verbObject: any;\n}\n\nconst OperationGroup: FC<OperationGroupProps> = ({\n    openAPI, children, tag, isChoreoConnectEnabled, verbObject\n}) => {\n    const classes = useStyles();\n    const currentTagInfo = openAPI.tags && openAPI.tags.find((tagInfo: any) => tagInfo.name === tag);\n    let borderColor = \"\";\n    if (isChoreoConnectEnabled) {\n        borderColor = 'grey';\n    }\n\n    return (\n        <Box m={1} p={0.1} mt={1.5} sx={{ boxShadow: 0.5, bgcolor: borderColor, borderRadius: 1 }}>\n            <ExpansionPanel defaultExpanded>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} id={tag}>\n                    <Typography\n                        variant='h4'\n                        className={classes.tagClass}\n                        title={tag}\n                    >\n                        {tag}\n                    </Typography>\n                    <Typography style={{ margin: '0px 10px' }} variant='caption'>\n                        {' '}\n                    </Typography>\n                    {isChoreoConnectEnabled ?\n                        <Box display='flex' flexDirection='column wrap' gridRowGap={10} gridColumnGap={5}>\n\n                            {Object.entries(verbObject).map(([verb]) => {\n                                return CONSTS.HTTP_METHODS.includes(verb) ? (\n                                    <>\n                                        <OperationButton\n                                            verb={verb}\n                                        />\n                                    </>\n                                ) : null;\n                            })}\n                        </Box>\n                        : null}\n                    {currentTagInfo && (\n                        <Typography style={{ margin: '0px 30px' }} variant='caption'>\n                            {currentTagInfo.description}\n                        </Typography>\n                    )}\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>{children}</ExpansionPanelDetails>\n            </ExpansionPanel>\n        </Box>\n    );\n};\n\nexport default OperationGroup;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { Progress } from 'AppComponents/Shared';\nimport API from 'AppData/api';\nimport type { Policy, PolicySpec } from './Types';\nimport ApiContext from '../components/ApiContext';\nimport PolicyViewForm from './PolicyForm/PolicyViewForm';\n\ninterface ViewPolicyProps {\n    handleDialogClose: () => void;\n    dialogOpen: boolean;\n    policyObj: Policy;\n    isLocalToAPI: boolean;\n}\n\n/**\n * Renders the UI to view a policy selected from the policy list.\n * @param {JSON} props Input props from parent components.\n * @returns {TSX} Policy view UI.\n */\nconst ViewPolicy: React.FC<ViewPolicyProps> = ({\n    handleDialogClose,\n    dialogOpen,\n    policyObj,\n    isLocalToAPI,\n}) => {\n    const { api } = useContext<any>(ApiContext);\n    const [policySpec, setPolicySpec] = useState<PolicySpec | null>(null);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (dialogOpen && isLocalToAPI) {\n            setLoading(true);\n            const promisedPolicyGet = API.getOperationPolicy(\n                policyObj.id,\n                api.id,\n            );\n            promisedPolicyGet\n                .then((response) => {\n                    setPolicySpec(response.body);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while retrieving policy details');\n                    }\n                })\n                .finally(() => {\n                    setLoading(false);\n                });\n        } else if (dialogOpen && !isLocalToAPI) {\n            const promisedCommonPolicyGet = API.getCommonOperationPolicy(\n                policyObj.id,\n            );\n            promisedCommonPolicyGet\n                .then((response) => {\n                    setPolicySpec(response.body);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while retrieving policy details');\n                    }\n                })\n                .finally(() => {\n                    setLoading(false);\n                });\n        }\n    }, [dialogOpen]);\n\n    const stopPropagation = (\n        e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    ) => {\n        e.stopPropagation();\n    };\n\n    const toggleOpen = () => {\n        handleDialogClose();\n    };\n\n    if (loading) {\n        return <Progress />;\n    }\n\n    if (!policySpec) {\n        return <></>;\n    }\n\n    return (\n        <>\n            <Dialog\n                maxWidth='md'\n                open={dialogOpen}\n                aria-labelledby='form-dialog-title'\n                onClose={handleDialogClose}\n                onClick={stopPropagation}\n                fullWidth\n            >\n                <Box\n                    display='flex'\n                    justifyContent='space-between'\n                    alignItems='center'\n                    flexDirection='row'\n                    px={3}\n                    pt={3}\n                >\n                    <Box display='flex'>\n                        <Typography variant='h4' component='h2'>\n                            {policyObj.displayName}\n                        </Typography>\n                    </Box>\n                    <Box display='flex'>\n                        <IconButton\n                            color='inherit'\n                            onClick={toggleOpen}\n                            aria-label='Close'\n                        >\n                            <Icon>close</Icon>\n                        </IconButton>\n                    </Box>\n                </Box>\n                <DialogContent>\n                    <Box my={2}>\n                        <DialogContentText>\n                            <PolicyViewForm\n                                policySpec={policySpec}\n                                onDone={toggleOpen}\n                            />\n                        </DialogContentText>\n                    </Box>\n                </DialogContent>\n            </Dialog>\n        </>\n    );\n};\n\nexport default ViewPolicy;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, FC, useContext } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Button from '@material-ui/core/Button';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\n\ninterface DeletePolicyProps {\n    policyId: string;\n    policyName: string;\n    fetchPolicies: () => void;\n}\n\n/**\n * Renders the policy configuring drawer.\n * @param {JSON} props Input props from parent components.\n * @returns {TSX} Right drawer for policy configuration.\n */\nconst DeletePolicy: FC<DeletePolicyProps> = ({\n    policyId,\n    policyName,\n    fetchPolicies,\n}) => {\n    const { api } = useContext<any>(ApiContext);\n    const [open, setOpen] = useState(false);\n    const setOpenLocal = setOpen; // Need to copy this to access inside the promise.then\n    const toggleOpen = () => {\n        setOpen(!open);\n    };\n\n    const handleDelete = () => {\n        const promisedCommonPolicyDelete = API.deleteOperationPolicy(\n            api.id,\n            policyId,\n        );\n        promisedCommonPolicyDelete\n            .then(() => {\n                Alert.info(`${policyName} policy deleted successfully!`);\n                setOpenLocal(!open);\n                fetchPolicies();\n            })\n            .catch((error) => {\n                console.error(error);\n                Alert.error('Error occurred while deleteting policy');\n                setOpenLocal(!open);\n            });\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <>\n            <Tooltip\n                placement='top'\n                title={\n                    <FormattedMessage\n                        id='Apis.Details.Policies.DeletePolicy.delete.title'\n                        defaultMessage='Delete'\n                    />\n                }\n            >\n                <IconButton\n                    onClick={toggleOpen}\n                    aria-label={'delete ' + policyName}\n                >\n                    <DeleteIcon />\n                </IconButton>\n            </Tooltip>\n            <Dialog\n                onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                }}\n                open={open}\n                onClose={handleClose}\n            >\n                <DialogTitle>\n                    <FormattedMessage\n                        id='Apis.Details.Policies.DeletePolicy.delete.confirm'\n                        defaultMessage='Confirm Delete'\n                    />\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <FormattedMessage\n                            id='Apis.Details.Policies.DeletePolicy.delete.confirm.content'\n                            defaultMessage='Are you sure you want to delete {policy} policy ?'\n                            values={{ policy: policyName }}\n                        />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        id={'cancel-delete-' + policyId}\n                        onClick={handleClose}\n                        color='primary'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Policies.DeletePolicy.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button\n                        id={'delete-' + policyId}\n                        onClick={handleDelete}\n                        color='primary'\n                        variant='outlined'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Policies.DeletePolicy.confirm'\n                            defaultMessage='Delete'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n};\n\nexport default DeletePolicy;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { CSSProperties, useMemo, useState } from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Utils from 'AppData/Utils';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport IconButton from '@material-ui/core/IconButton';\nimport { FormattedMessage } from 'react-intl';\nimport { useDrag } from 'react-dnd';\nimport type { Policy } from './Types';\nimport ViewPolicy from './ViewPolicy';\nimport DeletePolicy from './DeletePolicy';\n\nconst useStyles = makeStyles(() => ({\n    policyCardText: {\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n    },\n    listItem: {\n        maxHeight: '100%',\n        overflow: 'auto',\n    },\n    policyActions: {\n        visibility: 'hidden',\n        '&:hover': {\n            visibility: 'inherit',\n        },\n    },\n}));\n\nconst style: CSSProperties = {\n    border: '2px solid',\n    marginTop: '0.4rem',\n    cursor: 'move',\n    borderRadius: '0.3em',\n};\n\ninterface DraggablePolicyCardProps {\n    policyObj: Policy;\n    showCopyIcon?: boolean;\n    isLocalToAPI: boolean;\n    fetchPolicies: () => void;\n}\n\n/**\n * Renders a single draggable policy block.\n * @param {any} DraggablePolicyCardProps Input props from parent components.\n * @returns {TSX} Draggable Policy card UI.\n */\nconst DraggablePolicyCard: React.FC<DraggablePolicyCardProps> = ({\n    policyObj,\n    showCopyIcon,\n    isLocalToAPI,\n    fetchPolicies,\n}) => {\n    const classes = useStyles();\n    const [hovered, setHovered] = useState(false);\n    const [dialogOpen, setDialogOpen] = useState(false);\n\n    const [{ isDragging }, drag] = useDrag(\n        () => ({\n            type: `policyCard-${policyObj.id}`,\n            item: { droppedPolicy: policyObj },\n            options: {\n                dropEffect: showCopyIcon ? 'copy' : 'move',\n            },\n            collect: (monitor) => ({\n                isDragging: monitor.isDragging(),\n            }),\n        }),\n        [showCopyIcon],\n    );\n\n    const containerStyle = useMemo(\n        () => ({\n            ...style,\n            opacity: isDragging ? 0.4 : 1,\n            borderColor: Utils.stringToColor(policyObj.displayName),\n            width: '100%',\n        }),\n        [isDragging],\n    );\n\n    const handleViewPolicy = () => {\n        setDialogOpen(true);\n    };\n\n    const handleViewPolicyClose = () => {\n        setDialogOpen(false);\n    };\n\n    return (\n        <>\n            <Box display='flex' flexDirection='row' alignItems='center'>\n                <div ref={drag} style={containerStyle}>\n                    <ListItem\n                        key={policyObj.id}\n                        className={classes.listItem}\n                        onMouseOver={() => setHovered(true)}\n                        onMouseOut={() => setHovered(false)}\n                    >\n                        <ListItemAvatar>\n                            <Avatar\n                                style={{\n                                    backgroundColor: Utils.stringToColor(\n                                        policyObj.displayName,\n                                    ),\n                                }}\n                            >\n                                {Utils.stringAvatar(\n                                    policyObj.displayName.toUpperCase(),\n                                )}\n                            </Avatar>\n                        </ListItemAvatar>\n                        <ListItemText\n                            id={policyObj.displayName}\n                            primary={policyObj.displayName}\n                            classes={{\n                                primary: classes.policyCardText,\n                            }}\n                        />\n                        <Box\n                            display='flex'\n                            justifyContent='flex-end'\n                            className={!hovered ? classes.policyActions : ''}\n                        >\n                            <Tooltip\n                                placement='top'\n                                title={\n                                    <FormattedMessage\n                                        id='Apis.Details.Policies.DraggablePolicyCard.policy.view'\n                                        defaultMessage='View'\n                                    />\n                                }\n                            >\n                                <IconButton\n                                    onClick={handleViewPolicy}\n                                    aria-label={'view-' + policyObj.name}\n                                >\n                                    <VisibilityIcon />\n                                </IconButton>\n                            </Tooltip>\n                            {isLocalToAPI && (\n                                <DeletePolicy\n                                    policyId={policyObj.id}\n                                    policyName={policyObj.displayName}\n                                    fetchPolicies={fetchPolicies}\n                                />\n                            )}\n                        </Box>\n                    </ListItem>\n                </div>\n            </Box>\n            <ViewPolicy\n                dialogOpen={dialogOpen}\n                handleDialogClose={handleViewPolicyClose}\n                policyObj={policyObj}\n                isLocalToAPI={isLocalToAPI}\n            />\n        </>\n    );\n};\n\nexport default DraggablePolicyCard;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Box } from '@material-ui/core';\nimport React, { FC } from 'react';\nimport DraggablePolicyCard from '../DraggablePolicyCard';\nimport type { Policy } from '../Types';\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: number;\n    policyList: Policy[];\n    selectedTab: number;\n    fetchPolicies: () => void;\n}\n\n/**\n * Tab panel component to render content of a particular tab.\n * Renders the available policy list under the relevant flow related tab (i.e. request, response or fault).\n * @param {JSON} props Input props from parent components.\n * @returns {TSX} Tab panel.\n */\nconst TabPanel: FC<TabPanelProps> = ({\n    index,\n    policyList,\n    selectedTab,\n    fetchPolicies,\n}) => {\n    const flowNames = ['request', 'response', 'fault'];\n    const currentFlow = flowNames[index];\n\n    return (\n        <div\n            role='tabpanel'\n            hidden={selectedTab !== index}\n            id={`${currentFlow}-tabpanel`}\n            aria-labelledby={`${currentFlow}-tab`}\n        >\n            <Box py={1} px={3}>\n                {selectedTab === index &&\n                    policyList?.map((singlePolicy: Policy) => {\n                        return (\n                            <DraggablePolicyCard\n                                key={singlePolicy.id}\n                                policyObj={singlePolicy}\n                                showCopyIcon\n                                isLocalToAPI={singlePolicy.isAPISpecific}\n                                fetchPolicies={fetchPolicies}\n                            />\n                        );\n                    })}\n            </Box>\n        </div>\n    );\n};\n\nexport default TabPanel;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext, useState } from 'react';\nimport { Typography, makeStyles, Theme } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport { Link } from 'react-router-dom';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { FormattedMessage } from 'react-intl';\nimport API from 'AppData/api.js';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport CONSTS from 'AppData/Constants';\nimport type { CreatePolicySpec } from './Types';\nimport PolicyCreateForm from './PolicyForm/PolicyCreateForm';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    link: {\n        color: theme.palette.primary.dark,\n        marginLeft: theme.spacing(2),\n        display: 'inline',\n    },\n}));\n\ninterface CreatePolicyProps {\n    handleDialogClose: () => void;\n    dialogOpen: boolean;\n    fetchPolicies: () => void;\n}\n\n/**\n * Renders the UI to create a new policy.\n * @param {JSON} props Input props from parent components.\n * @returns {TSX} Policy create UI.\n */\nconst CreatePolicy: React.FC<CreatePolicyProps> = ({\n    handleDialogClose,\n    dialogOpen,\n    fetchPolicies,\n}) => {\n    const classes = useStyles();\n    const { api } = useContext<any>(ApiContext);\n    const [saving, setSaving] = useState(false);\n    const [synapsePolicyDefinitionFile, setSynapsePolicyDefinitionFile] = useState<any[]>([]);\n    const [ccPolicyDefinitionFile, setCcPolicyDefinitionFile] = useState<any[]>([]);\n\n    const savePolicy = (\n        policySpecContent: CreatePolicySpec,\n        synapsePolicyDefinition: any,\n        ccPolicyDefinition: any,\n    ) => {\n        setSaving(true);\n        const promisedCommonPolicyAdd = API.addOperationPolicy(\n            policySpecContent,\n            api.id,\n            synapsePolicyDefinition,\n            ccPolicyDefinition,\n        );\n        promisedCommonPolicyAdd\n            .then(() => {\n                Alert.info('Policy created successfully!');\n                setSynapsePolicyDefinitionFile([]);\n                setCcPolicyDefinitionFile([]);\n                handleDialogClose();\n                fetchPolicies();\n            })\n            .catch((error) => {\n                handleDialogClose();\n                console.error(error);\n                Alert.error('Something went wrong while creating policy');\n            })\n            .finally(() => {\n                setSaving(false);\n            });\n    };\n\n    const onSave = (policySpecification: CreatePolicySpec) => {\n        const synapseFile = synapsePolicyDefinitionFile.length !== 0 ? synapsePolicyDefinitionFile : null;\n        const ccFile = ccPolicyDefinitionFile.length !== 0 ? ccPolicyDefinitionFile : null;\n        savePolicy(\n            policySpecification,\n            synapseFile,\n            ccFile,\n        );\n        handleDialogClose();\n    };\n\n    const stopPropagation = (\n        e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    ) => {\n        e.stopPropagation();\n    };\n\n    return (\n        <>\n            <Dialog\n                maxWidth='md'\n                open={dialogOpen}\n                aria-labelledby='form-dialog-title'\n                onClose={handleDialogClose}\n                onClick={stopPropagation}\n                fullWidth\n            >\n                <Box\n                    display='flex'\n                    justifyContent='space-between'\n                    alignItems='center'\n                    flexDirection='row'\n                    px={3}\n                    pt={3}\n                >\n                    <Box display='flex'>\n                        <Typography variant='h4' component='h2'>\n                            <FormattedMessage\n                                id='Apis.Details.Policies.CreatePolicy.create.new.policy'\n                                defaultMessage='Create New Policy'\n                            />\n                        </Typography>\n                    </Box>\n                    <Box display='flex'>\n                        <IconButton\n                            color='inherit'\n                            onClick={handleDialogClose}\n                            aria-label='Close'\n                        >\n                            <Icon>close</Icon>\n                        </IconButton>\n                    </Box>\n                </Box>\n                <DialogContent>\n                    <Box my={2}>\n                        <DialogContentText>\n                            <PolicyCreateForm\n                                onSave={onSave}\n                                synapsePolicyDefinitionFile={synapsePolicyDefinitionFile}\n                                setSynapsePolicyDefinitionFile={setSynapsePolicyDefinitionFile}\n                                ccPolicyDefinitionFile={ccPolicyDefinitionFile}\n                                setCcPolicyDefinitionFile={setCcPolicyDefinitionFile}\n                                onCancel={handleDialogClose}\n                                saving={saving}\n                            />\n                        </DialogContentText>\n                    </Box>\n                </DialogContent>\n                <Box\n                    display='flex'\n                    flexDirection='row'\n                    justifyContent='right'\n                    px={3}\n                    pb={3}\n                >\n                    <Link to={CONSTS.PATH_TEMPLATES.COMMON_POLICIES}>\n                        <Typography className={classes.link} variant='caption'>\n                            Want to create a common policy that will be visible to all APIs instead?\n                            <LaunchIcon\n                                style={{ marginLeft: '2px' }}\n                                fontSize='small'\n                            />\n                        </Typography>\n                    </Link>\n                </Box>\n            </Dialog>\n        </>\n    );\n};\n\nexport default CreatePolicy;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, FC } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport CardContent from '@material-ui/core/CardContent';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport { AddCircle } from '@material-ui/icons';\nimport { Button, makeStyles, Theme } from '@material-ui/core';\nimport CONSTS from 'AppData/Constants';\nimport type { Policy } from './Types';\nimport TabPanel from './components/TabPanel';\nimport CreatePolicy from './CreatePolicy';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    flowTabs: {\n        '& button': {\n            minWidth: 50,\n        },\n    },\n    flowTab: {\n        fontSize: 'smaller',\n    },\n    addPolicyBtn: {\n        marginLeft: 'auto',\n    },\n    buttonIcon: {\n        marginRight: theme.spacing(1),\n    },\n    paperPosition: {\n        // position: 'fixed',\n    },\n}));\n\ninterface PolicyListPorps {\n    policyList: Policy[];\n    fetchPolicies: () => void;\n    isChoreoConnectEnabled: boolean;\n}\n\n/**\n * Renders the local policy list.\n * @param {JSON} props Input props from parent components.\n * @returns {TSX} List of policies local to the API segment.\n */\nconst PolicyList: FC<PolicyListPorps> = ({policyList, fetchPolicies, isChoreoConnectEnabled}) => {\n    const classes = useStyles();\n    const [selectedTab, setSelectedTab] = useState(0); // Request flow related tab is active by default\n    const [dialogOpen, setDialogOpen] = React.useState(false);\n    let gatewayType = CONSTS.GATEWAY_TYPE.synapse;\n\n    const handleAddPolicy = () => {\n        setDialogOpen(true);\n    };\n\n    const handleAddPolicyClose = () => {\n        setDialogOpen(false);\n    };\n\n    if (isChoreoConnectEnabled) {\n        gatewayType = CONSTS.GATEWAY_TYPE.choreoConnect;\n    }\n\n    return (\n        <Paper className={classes.paperPosition}>\n            <Card variant='outlined'>\n                <CardContent>\n                    <Box display='flex'>\n                        <Typography variant='subtitle2'>\n                            <FormattedMessage\n                                id='Apis.Details.Policies.PolicyList.title'\n                                defaultMessage='Policy List'\n                            />\n                        </Typography>\n                        <Button\n                            onClick={handleAddPolicy}\n                            disabled={false}\n                            variant='outlined'\n                            color='primary'\n                            size='small'\n                            className={classes.addPolicyBtn}\n                        >\n                            <AddCircle className={classes.buttonIcon} />\n                            <FormattedMessage\n                                id='Apis.Details.Policies.PolicyList.add.new.policy'\n                                defaultMessage='Add New Policy'\n                            />\n                        </Button>\n                    </Box>\n                    <Box>\n                        <Tabs\n                            value={selectedTab}\n                            onChange={(event, tab) => setSelectedTab(tab)}\n                            indicatorColor='primary'\n                            textColor='primary'\n                            variant='standard'\n                            aria-label='Policies local to API'\n                            className={classes.flowTabs}\n                        >\n                            <Tab\n                                label={<span className={classes.flowTab}>Request</span>}\n                                id='request-tab'\n                                aria-controls='request-tabpanel'\n                            />\n                            <Tab\n                                label={<span className={classes.flowTab}>Response</span>}\n                                id='response-tab'\n                                aria-controls='response-tabpanel'\n                            />\n                            {!isChoreoConnectEnabled && (\n                                <Tab\n                                    label={<span className={classes.flowTab}>Fault</span>}\n                                    id='fault-tab'\n                                    aria-controls='fault-tabpanel'\n                                />)\n                            }\n                        </Tabs>\n                        <Box height='60vh' pt={1} overflow='scroll'>\n                            <TabPanel\n                                policyList={policyList.filter(\n                                    (policy) =>\n                                        policy.applicableFlows.includes(\n                                            'request',\n                                        ) &&\n                                        policy.supportedGateways.includes(\n                                            gatewayType,\n                                        ),\n                                )}\n                                index={0}\n                                selectedTab={selectedTab}\n                                fetchPolicies={fetchPolicies}\n                            />\n                            <TabPanel\n                                policyList={policyList.filter(\n                                    (policy) =>\n                                        policy.applicableFlows.includes(\n                                            'response',\n                                        ) &&\n                                        policy.supportedGateways.includes(\n                                            gatewayType,\n                                        ),\n                                )}\n                                index={1}\n                                selectedTab={selectedTab}\n                                fetchPolicies={fetchPolicies}\n                            />\n                            {!isChoreoConnectEnabled && (\n                                <TabPanel\n                                    policyList={policyList.filter((policy) =>\n                                        policy.applicableFlows.includes('fault'),\n                                    )}\n                                    index={2}\n                                    selectedTab={selectedTab}\n                                    fetchPolicies={fetchPolicies}\n                                />\n                            )}\n                        </Box>\n                    </Box>\n                </CardContent>\n            </Card>\n            <CreatePolicy\n                dialogOpen={dialogOpen}\n                handleDialogClose={handleAddPolicyClose}\n                fetchPolicies={fetchPolicies}\n            />\n        </Paper>\n    );\n};\n\nexport default PolicyList;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { FC, useState } from 'react';\nimport { HelpOutline } from '@material-ui/icons';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    Button,\n    DialogActions,\n    Radio,\n} from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { FormattedMessage } from 'react-intl';\n\nconst SupportedGatewayTypes = {\n    REGULAR: 'Regular Gateway',\n    CC: 'Choreo Connect',\n};\n\ninterface GatewaySelectorProps {\n    setIsChangedToCCGatewayType: (isCCEnabled: boolean) => void;\n    isChoreoConnectEnabled: boolean;\n    removeAPIPoliciesForGatewayChange: () => void;\n}\n\n/**\n * Renders the Gateway selection section.\n * @param {JSON} props Input props from parent components.\n * @returns {TSX} Radio group for the API Gateway.\n */\nconst GatewaySelector: FC<GatewaySelectorProps> = ({\n    setIsChangedToCCGatewayType,\n    isChoreoConnectEnabled,\n    removeAPIPoliciesForGatewayChange\n}) => {\n    const [apiFromContext] = useAPI();\n    let selectedGatewayType;\n\n    const [isDialogBoxVisible, setIsDialogBoxVisible] = useState(false);\n    // This state is maintained until user gived approval for gateway change.\n    // Without this state radio buttons will switch even user disagrees to proceed gateway change.\n    const [isCCSelected, setIsCCSelected] = useState(false);\n\n    const saveAfterGatewayChange = () => {\n        if (isCCSelected) {\n            setIsChangedToCCGatewayType(true); \n        } else {\n            setIsChangedToCCGatewayType(false);\n        }\n        removeAPIPoliciesForGatewayChange();\n        setIsDialogBoxVisible(false);\n    }\n\n    if (isChoreoConnectEnabled) {\n        selectedGatewayType = SupportedGatewayTypes.CC;\n    } else {\n        selectedGatewayType = SupportedGatewayTypes.REGULAR;\n    }\n\n    /**\n     * Handles accepted gateway type change after approving dialog box.\n     * @param {event: React.ChangeEvent<HTMLInputElement>} event Indicates gateway type radio button change event.\n     */\n    const handleDialogBox = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if(event.target.value === SupportedGatewayTypes.CC) {\n            setIsCCSelected(true)\n        } else {\n            setIsCCSelected(false);\n        }\n        setIsDialogBoxVisible(true);\n    }\n\n    /**\n     * Handles discarded gateway type change after cancelling dialog box.\n     */\n    const handleDiscardedGatewayChange = () => {\n        setIsDialogBoxVisible(false);\n    };\n\n    return (\n        <Paper>\n            <Grid container direction='row' spacing={3}>\n                <Grid item md={12} xs={12}>\n                    <Box\n                        display='flex'\n                        flexDirection='row'\n                        justifyContent='space-between'\n                        alignItems='center'\n                        ml={3}\n                        mr={5}\n                    >\n                        <Box>\n                            <Typography\n                                variant='subtitle1'\n                                component='h3'\n                                gutterBottom\n                            >\n                                API Gateway\n                                <Tooltip\n                                    title='Policy list is dependant on the selected Gateway'\n                                    placement='right-start'\n                                    interactive\n                                >\n                                    <IconButton aria-label='API Gateway selector help text'>\n                                        <HelpOutline />\n                                    </IconButton>\n                                </Tooltip>\n                            </Typography>\n                        </Box>\n                        <Box>\n                            <FormControl component='fieldset'>\n                                <RadioGroup\n                                    row\n                                    name='gateway-selector-radio-buttons-group'\n                                    value={selectedGatewayType}\n                                    onChange={handleDialogBox}\n                                >\n                                    <FormControlLabel\n                                        value={SupportedGatewayTypes.REGULAR}\n                                        control={\n                                            <Radio\n                                                color='primary'\n                                                defaultChecked\n                                                id='regularGateway'\n                                                disabled={isRestricted(\n                                                    ['apim:api_create'],\n                                                    apiFromContext,\n                                                )}\n                                                inputProps={{\n                                                    'aria-label': 'Regular Gateway',\n                                                }}\n                                            />\n                                        }\n                                        label='Regular Gateway'\n                                        labelPlacement='end'\n                                    />\n                                    <FormControlLabel\n                                        value={SupportedGatewayTypes.CC}\n                                        control={\n                                            <Radio\n                                                color='primary'\n                                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                                inputProps={{\n                                                    'aria-label': 'Choreo Connect',\n                                                }}\n                                            />\n                                        }\n                                        label='Choreo Connect'\n                                        labelPlacement='end'\n                                    />\n                                </RadioGroup>\n                            </FormControl>\n                        </Box>\n                    </Box>\n                </Grid>\n            </Grid>\n            <Dialog\n                open={isDialogBoxVisible}\n                maxWidth='xl'\n            >\n                <DialogTitle>\n                    <Typography variant='subtitle2'>\n                        <FormattedMessage\n                            id='Apis.Details.Policies.GatewaySelector.change.gateway.confirm.title'\n                            defaultMessage='Change Gateway Type'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <Typography>\n                        <FormattedMessage\n                            id='Apis.Details.Policies.GatewaySelector.change.gateway.confirm.content'\n                            defaultMessage={\n                                'Changing the gateway type will remove all existing policies ' +\n                                'added to the API'\n                            }\n                        />\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        onClick={handleDiscardedGatewayChange}\n                        color='primary'\n                        variant='outlined'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Policies.GatewaySelector.change.gateway.confirm.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button\n                        onClick={saveAfterGatewayChange}\n                        color='primary'\n                        variant='contained'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Policies.GatewaySelector.change.gateway.confirm.proceed'\n                            defaultMessage='Proceed'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Paper>\n    );\n};\n\nexport default GatewaySelector;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { useHistory } from 'react-router-dom';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { FormattedMessage } from 'react-intl';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport ApiContext from '../components/ApiContext';\n\ninterface SaveOperationPoliciesProps {\n    saveApi: () => void;\n    updating: boolean;\n}\n\n/**\n * Renders the save button (with Save option & Save and deploy option).\n * @param {JSON} props Input props from parent components.\n * @returns {TSX} Policies page save button.\n */\nconst SaveOperationPolicies: React.FC<SaveOperationPoliciesProps> = ({\n    saveApi, updating\n}) => {\n    const { api } = useContext<any>(ApiContext);\n    const history = useHistory();\n\n    /**\n     * Handle save button event\n     *\n     */\n    const handleSave = () => {\n        saveApi();\n    }\n\n    /**\n     * Handle save and deploy button event\n     * \n     */\n    const handleSaveAndDeploy = () => {\n        saveApi();\n        history.push({\n            pathname: `/apis/${api.id}/deployments`,\n            state: 'deploy',\n        });\n    }\n\n    return (\n        <Grid container direction='row' spacing={1}>\n            <Grid item>\n                <Box p={1} mt={3}>\n                    {api.isRevision || isRestricted(['apim:api_create'], api) ? (\n                        <Button\n                            disabled\n                            type='submit'\n                            variant='contained'\n                            color='primary'\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Policies.SaveOperationPolicies.save'\n                                defaultMessage='Save'\n                            />\n                        </Button>\n                    ) : (\n                        <CustomSplitButton\n                            handleSave={handleSave}\n                            api={api}\n                            handleSaveAndDeploy={handleSaveAndDeploy}\n                            isUpdating={updating}\n                        />\n                    )}\n                </Box>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default SaveOperationPolicies;\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {\n    Grid, makeStyles, Typography,\n} from '@material-ui/core';\nimport Alert from 'AppComponents/Shared/Alert';\nimport React, { useState, useEffect, useMemo } from 'react';\nimport cloneDeep from 'lodash.clonedeep';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport { DndProvider } from 'react-dnd';\nimport { FormattedMessage } from 'react-intl';\nimport CONSTS from 'AppData/Constants';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { mapAPIOperations } from 'AppComponents/Apis/Details/Resources/operationUtils';\nimport API from 'AppData/api';\nimport { Progress } from 'AppComponents/Shared';\nimport { arrayMove } from '@dnd-kit/sortable';\nimport OperationPolicy from './OperationPolicy';\nimport OperationsGroup from './OperationsGroup';\nimport PolicyList from './PolicyList';\nimport type { ApiPolicy, Policy, PolicySpec } from './Types';\nimport GatewaySelector from './GatewaySelector';\nimport { ApiOperationContextProvider } from './ApiOperationContext';\nimport { uuidv4 } from './Utils';\nimport SaveOperationPolicies from './SaveOperationPolicies';\nimport PoliciesExpansion from './PoliciesExpansion';\n\nconst useStyles = makeStyles(() => ({\n    gridItem: {\n        display: 'flex',\n        width: '100%',\n    },\n    operationListingBox: {\n        overflowY: 'scroll',\n    },\n    paper: {\n        padding:'2px'\n    },\n    ccTypography: {\n        paddingLeft:'10px', \n        marginTop:'20px'\n    }\n}));\n\n/**\n * Renders the policy management page.\n * @returns {TSX} Policy management page to render.\n */\nconst Policies: React.FC = () => {\n    const classes = useStyles();\n    const [api, updateAPI] = useAPI();\n    const [updating, setUpdating] = useState(false);\n    const [policies, setPolicies] = useState<Policy[] | null>(null);\n    const [allPolicies, setAllPolicies] = useState<PolicySpec[] | null>(null);\n    const [expandedResource, setExpandedResource] = useState<string | null>(null);\n    const [isChoreoConnectEnabled, setIsChoreoConnectEnabled] = useState(api.gatewayType === 'wso2/choreo-connect');\n\n    // If Choreo Connect radio button is selected in GatewaySelector, it will pass \n    // value as true to render other UI changes specific to the Choreo Connect.\n    const setIsChangedToCCGatewayType = (isCCEnabled: boolean) => {\n        setIsChoreoConnectEnabled(isCCEnabled);\n    }\n\n    /**\n     * Function to get the initial state of all the operation policies from the API object.\n     * We are setting a unique ID for all the operation policies solely for UI specific operations.\n     * We use this UUID for edit and delete operations.\n     * Before saving to backend, we are removing this UUID.\n     * @returns {Object} The operations object which is cloned from the API object with an additional UUID.\n     */\n    const getInitState = () => {\n        const clonedOperations = cloneDeep(api.operations);\n        clonedOperations.forEach((operation: any) => {\n            if (operation.operationPolicies) {\n                const { operationPolicies } = operation;\n\n                // Iterating through the policy list of request flow, response flow and fault flow\n                for (const flow in operationPolicies) {\n                    if (Object.prototype.hasOwnProperty.call(operationPolicies, flow)) {\n                        const policyArray = operationPolicies[flow];\n                        policyArray.forEach((policyItem: ApiPolicy) => {\n                            // eslint-disable-next-line no-param-reassign\n                            policyItem.uuid = uuidv4();\n                        });\n                    }\n                }\n            }\n        });\n        return clonedOperations;\n    }\n\n    const [apiOperations, setApiOperations] = useState<any>(getInitState);\n    const [openAPISpec, setOpenAPISpec] = useState<any>(null);\n\n    useEffect(() => {\n        const currentOperations = getInitState();\n        setApiOperations(currentOperations);\n    }, [api]);\n\n    /**\n     * Fetches all common policies & API specific policies.\n     * Sets the allPolicies state: this allPolicies state is used to get policies from any given policy ID.\n     * Sets the policies state: policy state is used to display the available policies that are draggable.\n     */\n    const fetchPolicies = () => {\n        const apiPoliciesPromise = API.getOperationPolicies(api.id);\n        const commonPoliciesPromise = API.getCommonOperationPolicies();\n        Promise.all([apiPoliciesPromise, commonPoliciesPromise]).then((response) => {\n            const [apiPoliciesResponse, commonPoliciesResponse] = response;\n            const apiSpecificPolicies = apiPoliciesResponse.body.list;\n            const commonPolicies = commonPoliciesResponse.body.list;\n            const mergedList = [...commonPolicies, ...apiSpecificPolicies];\n\n            // Get all common policies and API specific policies\n            setAllPolicies(mergedList);\n\n            // Get the union of policies depending on the policy display name\n            const unionByPolicyDisplayName = [...mergedList\n                .reduce((map, obj) => map.set(obj.name, obj), new Map()).values()];\n            unionByPolicyDisplayName.sort(\n                (a: Policy, b: Policy) => a.name.localeCompare(b.name))\n            \n            let filteredList = null;\n            if (!isChoreoConnectEnabled) {\n                // Get synpase gateway supported policies\n                filteredList = unionByPolicyDisplayName.filter(\n                    (policy: Policy) => policy.supportedGateways.includes('Synapse'));\n            } else {\n                // Get CC gateway supported policies\n                filteredList = unionByPolicyDisplayName.filter(\n                    (policy: Policy) => policy.supportedGateways.includes('ChoreoConnect'));\n            }\n\n            setPolicies(filteredList);\n\n        }).catch((error) => {\n            console.error(error);\n            Alert.error('Error occurred while retrieving the policy list');\n        });\n    }\n\n    const removeAPIPoliciesForGatewayChange = () => {\n        const newApiOperations: any = cloneDeep(apiOperations);\n        // Set operation policies to the API object\n        newApiOperations.forEach((operation: any) => {\n            if (operation.operationPolicies) {\n                const { operationPolicies } = operation;\n\n                // Iterating through the policy list of request flow, response flow and fault flow\n                for (const flow in operationPolicies) {\n                    if (Object.prototype.hasOwnProperty.call(operationPolicies, flow)) {\n\n                        operationPolicies[flow] = [];\n\n                    }\n                }\n            }\n        });\n        setApiOperations(newApiOperations);\n    }\n\n    useEffect(() => {\n        fetchPolicies();\n    }, [isChoreoConnectEnabled])\n\n    useEffect(() => {\n        // Update the Swagger spec object when API object gets changed\n        api.getSwagger()\n            .then((response: any) => {\n                const retrievedSpec = response.body;\n                setOpenAPISpec(retrievedSpec);\n\n                // To expand the first operation by default on page render\n                const [target, verbObject]: [string, any] = Object.entries(retrievedSpec.paths)[0];\n                const verb = Object.keys(verbObject)[0]\n                setExpandedResource(verb + target)\n            })\n            .catch((error: any) => {\n                console.error(error);\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                }\n            });\n    }, [api.id]);\n\n    const localAPI = useMemo(\n        () => ({\n            id: api.id,\n            operations: api.isAPIProduct() ? {} : mapAPIOperations(api.operations),\n        }),\n        [api],\n    );\n\n    /**\n     * To update the API Operations object and maintain the current state of attached policies.\n     * Note that this function does not perform an API object update, rather, just a state update.\n     * @param {any} updatedOperation updated operation of API object\n     * @param {string} target target that needs to be updated\n     * @param {string} verb verb of the operation that neeeds to be updated\n     * @param {string} currentFlow depicts which flow needs to be udpated: request, response or fault\n     */\n    const updateApiOperations = (\n        updatedOperation: any, target: string, verb: string, currentFlow: string,\n    ) => {\n        let operationInAction = null;\n        const newApiOperations: any = cloneDeep(apiOperations);\n        if (isChoreoConnectEnabled) {\n            operationInAction = newApiOperations.find((op: any) => op.target === target);\n        } else {\n            operationInAction = newApiOperations.find((op: any) =>\n                op.target === target && op.verb.toLowerCase() === verb.toLowerCase());\n        }\n        const operationFlowPolicy =\n            operationInAction.operationPolicies[currentFlow].find((p: any) => (p.policyId === updatedOperation.policyId\n                && p.uuid === updatedOperation.uuid));\n\n        if (operationFlowPolicy) {\n            // Edit operation policy\n            operationFlowPolicy.parameters = { ...updatedOperation.parameters };\n        } else {\n            // Add new operation policy\n            const uuid = uuidv4();\n            operationInAction.operationPolicies[currentFlow].push({ ...updatedOperation, uuid });\n        }\n\n        // Finally update the state\n        setApiOperations(newApiOperations);\n    }\n\n    /**\n     * To update all API Operations with the provided policy.\n     * Note that this function does not perform an API object update, rather, just a state update.\n     * @param {any} updatedOperation updated operation of API object\n     * @param {string} currentFlow depicts which flow needs to be udpated: request, response or fault\n     */\n    const updateAllApiOperations = (updatedOperation: any, currentFlow: string) => {\n        const newApiOperations: any = cloneDeep(apiOperations);\n\n        // Add attached policy to the same flow of all the operations\n        newApiOperations.forEach((operation: any) => {\n            const uuid = uuidv4();\n            operation.operationPolicies[currentFlow].push({ ...updatedOperation, uuid });\n        });\n\n        // Finally update the state\n        setApiOperations(newApiOperations);\n    }\n\n    /**\n     * To delete one API Operation from the apiOperations object\n     * Note that this function does not perform an API object update, rather, just a state update.\n     * @param {string} uuid operation uuid\n     * @param {string} target target that needs to be updated\n     * @param {string} verb verb of the operation that neeeds to be updated\n     * @param {string} currentFlow depicts which flow needs to be udpated: request, response or fault\n     */\n    const deleteApiOperation = (uuid: string, target: string, verb: string, currentFlow: string) => {\n        const newApiOperations: any = cloneDeep(apiOperations);\n        const operationInAction = newApiOperations.find((op: any) =>\n            op.target === target && op.verb.toLowerCase() === verb.toLowerCase());\n        // Find the location of the element using the following logic\n        /*\n        [{a:'1'},{a:'2'},{a:'1'}].map( i => i.a) will output ['1', '2', '1']\n        [{a:'1'},{a:'2'},{a:'1'}].map( i => i.a).indexOf('2') will output the location of '2'\n        */\n        const index = operationInAction.operationPolicies[currentFlow].map((p: any) => p.uuid).indexOf(uuid);\n        // delete the element\n        operationInAction.operationPolicies[currentFlow].splice(index, 1);\n\n        // Finally update the state\n        setApiOperations(newApiOperations);\n    }\n\n    /**\n     * Function to rearrange the API Operation ordering\n     * @param {string} oldIndex original index of the policy\n     * @param {string} newIndex new index of the policy\n     * @param {string} target target that needs to be updated\n     * @param {string} verb verb of the operation that neeeds to be updated\n     * @param {string} currentFlow depicts which flow needs to be udpated: request, response or fault\n     */\n    const rearrangeApiOperations = (\n        oldIndex: number, newIndex: number, target: string, verb: string, currentFlow: string,\n    ) => {\n        const newApiOperations: any = cloneDeep(apiOperations);\n        let operationInAction = null;\n\n        if (!isChoreoConnectEnabled) {\n            operationInAction = newApiOperations.find((op: any) =>\n                op.target === target && op.verb.toLowerCase() === verb.toLowerCase());\n        } else {\n            operationInAction = newApiOperations.find((op: any) => op.target === target);\n        }\n        const policyArray = operationInAction.operationPolicies[currentFlow];\n        operationInAction.operationPolicies[currentFlow] = arrayMove(policyArray, oldIndex, newIndex);\n        \n        // Finally update the state\n        setApiOperations(newApiOperations);\n    }\n\n    /**\n     * To update the API object with the attached policies on Save.\n     */\n    const saveApi = () => {\n        setUpdating(true);\n        const newApiOperations: any = cloneDeep(apiOperations);\n        let getewayTypeForPolicies = \"wso2/synapse\";\n        const getewayVendorForPolicies = \"wso2\";\n        // holds previous target name to handle resource level policies for CC\n        let previousPolicyTargetForCC =  \"\";\n        // holds previous policies common to a given resource\n        let previousPoliciesForCC: any; \n\n        // Set operation policies to the API object\n        newApiOperations.forEach((operation: any, index: any, array: any) => {\n\n            // handles CC related policies commonly in\n            if(previousPolicyTargetForCC === operation.target && isChoreoConnectEnabled) {\n                array[index].operationPolicies = previousPoliciesForCC;\n            }\n\n            if (operation.operationPolicies) {\n                const { operationPolicies } = operation;\n\n                // Iterating through the policy list of request flow, response flow and fault flow\n                for (const flow in operationPolicies) {\n                    if (Object.prototype.hasOwnProperty.call(operationPolicies, flow)) {\n                        const policyArray = operationPolicies[flow];\n                        policyArray.forEach((policyItem: ApiPolicy) => {\n                            if (policyItem.uuid) {\n                                // eslint-disable-next-line no-param-reassign\n                                delete policyItem.uuid;\n                            }\n                        });\n                    }\n                }\n                previousPoliciesForCC = operationPolicies;\n            }\n            previousPolicyTargetForCC = operation.target;\n        });\n\n        // Handles normal policy savings for choreo connect gateway type.\n        if(isChoreoConnectEnabled) {\n            getewayTypeForPolicies = \"wso2/choreo-connect\";\n        }\n\n        const updatePromise = updateAPI({ \n            operations: newApiOperations, \n            gatewayVendor: getewayVendorForPolicies, \n            gatewayType: getewayTypeForPolicies});\n        updatePromise\n            .finally(() => {\n                setUpdating(false);\n            });\n    }\n\n    // handles operations (verbs) for CC policy expansion.\n    const handleVerbsForCC = (verbObject: any) => {\n        const array = Object.entries(verbObject).map(([verb]) => {\n            return verb;\n        })\n        // returns the first element since CC handles resource level policies only.\n        // therefore returning only the first verb (operation) here for the resource.\n        return array[0]\n    }\n\n    /**\n     * To memoize the value passed into ApiOperationContextProvider\n     */\n    const providerValue = useMemo(() => ({\n        apiOperations,\n        updateApiOperations,\n        updateAllApiOperations,\n        deleteApiOperation,\n        rearrangeApiOperations,\n    }), [apiOperations, updateApiOperations, updateAllApiOperations, deleteApiOperation, rearrangeApiOperations])\n\n    if (!policies || !openAPISpec || updating) {\n        return <Progress per={90} message='Loading Policies ...' />\n    }\n\n    return (\n        <ApiOperationContextProvider value={providerValue}>\n            <DndProvider backend={HTML5Backend}>\n                <Box mb={4}>\n                    <Typography id='itest-api-details-resources-head' variant='h4' component='h2' gutterBottom>\n                        <FormattedMessage\n                            id='Apis.Details.Policies.Policies.title'\n                            defaultMessage='Policies'\n                        />\n                    </Typography>\n                </Box>\n                <Box mb={4} px={1}>\n                    <GatewaySelector\n                        setIsChangedToCCGatewayType={setIsChangedToCCGatewayType}\n                        isChoreoConnectEnabled={isChoreoConnectEnabled}\n                        removeAPIPoliciesForGatewayChange={removeAPIPoliciesForGatewayChange}\n                    />\n                </Box>\n                {isChoreoConnectEnabled ?\n                    <Box display='flex' flexDirection='row'>\n                        <Box width='65%' pr={1} height='85vh' className={classes.operationListingBox}>\n                            <Paper className={classes.paper}>\n                                <Typography\n                                    id='cc-specific-message'\n                                    variant='h6'\n                                    component='h2'\n                                    gutterBottom\n                                    className={classes.ccTypography}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Policies.Policies.cc.info.title'\n                                        defaultMessage={\n                                            'Choreo Connect supports resource level ' +\n                                            'request and response flow policies only.'\n                                        }\n                                    />\n                                </Typography>\n                                {Object.entries(openAPISpec.paths).map(([target, verbObject]: [string, any]) => (\n                                    <Grid key={target} item xs={12}>\n                                        <OperationsGroup\n                                            openAPI={openAPISpec}\n                                            tag={target}\n                                            isChoreoConnectEnabled={isChoreoConnectEnabled}\n                                            verbObject={verbObject}\n                                        >\n                                            <Grid\n                                                container\n                                                direction='column'\n                                                justify='flex-start'\n                                                spacing={1}\n                                                alignItems='stretch'\n                                            >\n                                                <PoliciesExpansion\n                                                    target={target}\n                                                    verb={handleVerbsForCC(verbObject)}\n                                                    allPolicies={allPolicies}\n                                                    isChoreoConnectEnabled={isChoreoConnectEnabled}\n                                                    policyList={policies}\n                                                />\n                                            </Grid>\n                                        </OperationsGroup>\n                                    </Grid>\n                                ))}\n                            </Paper>\n                        </Box>\n                        <Box width='35%' pl={1}>\n                            <PolicyList\n                                policyList={policies}\n                                fetchPolicies={fetchPolicies}\n                                isChoreoConnectEnabled={isChoreoConnectEnabled}\n                            />\n                        </Box>\n                    </Box>\n                    :\n                    <Box display='flex' flexDirection='row'>\n                        <Box width='65%' p={1} height='115vh' className={classes.operationListingBox}>\n                            <Paper className={classes.paper}>\n                                {Object.entries(openAPISpec.paths).map(([target, verbObject]: [string, any]) => (\n\n                                    <Grid key={target} item xs={12}>\n                                        <OperationsGroup\n                                            openAPI={openAPISpec}\n                                            tag={target}\n                                            isChoreoConnectEnabled={isChoreoConnectEnabled}\n                                            verbObject={null}\n                                        >\n                                            <Grid\n                                                container\n                                                direction='column'\n                                                justify='flex-start'\n                                                spacing={1}\n                                                alignItems='stretch'\n                                            >\n                                                {Object.entries(verbObject).map(([verb, operation]) => {\n                                                    return CONSTS.HTTP_METHODS.includes(verb) ? (\n                                                        <Grid\n                                                            key={`${target}/${verb}`}\n                                                            item className={classes.gridItem}\n                                                        >\n                                                            <OperationPolicy\n                                                                target={target}\n                                                                verb={verb}\n                                                                highlight\n                                                                operation={operation}\n                                                                api={localAPI}\n                                                                disableUpdate={isRestricted(['apim:api_create'], api)}\n                                                                expandedResource={expandedResource}\n                                                                setExpandedResource={setExpandedResource}\n                                                                policyList={policies}\n                                                                allPolicies={allPolicies}\n                                                                isChoreoConnectEnabled={isChoreoConnectEnabled}\n                                                            />\n                                                        </Grid>\n                                                    ) : null;\n                                                })}\n                                            </Grid>\n                                        </OperationsGroup>\n                                    </Grid>\n                                ))}\n                            </Paper>\n                        </Box>\n                        <Box width='35%' p={1}>\n                            <PolicyList\n                                policyList={policies}\n                                fetchPolicies={fetchPolicies}\n                                isChoreoConnectEnabled={isChoreoConnectEnabled}\n                            />\n                        </Box>\n                    </Box>\n                }\n            </DndProvider>\n            <SaveOperationPolicies\n                saveApi={saveApi}\n                updating={updating}\n            />\n        </ApiOperationContextProvider>\n    );\n};\n\nexport default Policies;\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\n\nconst options = ['Save and deploy', 'Save'];\n\n/**\n *\n * @returns\n */\nexport default function CustomSplitButton(props) {\n    const [open, setOpen] = React.useState(false);\n    const {\n        advertiseInfo, handleSave, handleSaveAndDeploy, isUpdating, api, id,\n    } = props;\n    const anchorRef = React.useRef(null);\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\n    const securityScheme = [...api.securityScheme];\n    const isMutualSslOnly = securityScheme.length === 2 && securityScheme.includes('mutualssl')\n    && securityScheme.includes('mutualssl_mandatory');\n    const isEndpointAvailable = api.endpointConfig !== null;\n    const isTierAvailable = api.policies.length !== 0;\n\n    const isDeployButtonDisabled = (((api.type !== 'WEBSUB' && !isEndpointAvailable))\n    || (!isMutualSslOnly && !isTierAvailable)\n    || api.workflowStatus === 'CREATED');\n\n    const handleClick = (event, index) => {\n        setSelectedIndex(index);\n        setOpen(false);\n        if (`${options[index]}` === 'Save') {\n            handleSave();\n        } else {\n            handleSaveAndDeploy();\n        }\n    };\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen);\n    };\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    return (\n        <Grid container direction='column' alignItems='center'>\n            {(advertiseInfo && advertiseInfo.advertised) ? (\n                <Grid item xs={12}>\n                    <Button\n                        onClick={handleSave}\n                        variant='contained'\n                        color='primary'\n                    >\n                        {options[1]}\n                    </Button>\n                </Grid>\n            ) : (\n                <Grid item xs={12}>\n                    <ButtonGroup\n                        variant='contained'\n                        color='primary'\n                        ref={anchorRef}\n                        aria-label='split button'\n                        disabled={isUpdating}\n                        style={{ width: '200px' }}\n                    >\n                        <Button\n                            onClick={(event) => handleClick(event, selectedIndex)}\n                            disabled={isUpdating}\n                            style={{ width: '200px' }}\n                            id={id}\n                        >\n                            {options[selectedIndex]}\n                            {isUpdating && <CircularProgress size={24} />}\n                        </Button>\n                        <Button\n                            color='primary'\n                            size='small'\n                            aria-controls={open ? 'split-button-menu' : undefined}\n                            aria-expanded={open ? 'true' : undefined}\n                            aria-label='select merge strategy'\n                            aria-haspopup='menu'\n                            onClick={handleToggle}\n                        >\n                            <ArrowDropDownIcon />\n                        </Button>\n                    </ButtonGroup>\n                    <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n                        {({ TransitionProps, placement }) => (\n                            <Grow\n                                {...TransitionProps}\n                                style={{\n                                    transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\n                                }}\n                            >\n                                <Paper>\n                                    <ClickAwayListener onClickAway={handleClose}>\n                                        <MenuList id='split-button-menu'>\n                                            {options.map((option, index) => (\n                                                <MenuItem\n                                                    key={option}\n                                                    selected={index === selectedIndex}\n                                                    onClick={(event) => handleClick(event, index)}\n                                                    disabled={(option === 'Save and deploy' && isDeployButtonDisabled)}\n                                                >\n                                                    {option}\n                                                </MenuItem>\n                                            ))}\n                                        </MenuList>\n                                    </ClickAwayListener>\n                                </Paper>\n                            </Grow>\n                        )}\n                    </Popper>\n                </Grid>\n            )}\n        </Grid>\n    );\n}\n\nCustomSplitButton.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    handleSave: PropTypes.shape({}).isRequired,\n    handleSaveAndDeploy: PropTypes.shape({}).isRequired,\n    isUpdating: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Icon from '@material-ui/core/Icon';\nimport { amber } from '@material-ui/core/colors';\nimport VerticalDivider from './VerticalDivider';\n\nconst styles = (theme) => ({\n    root: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingLeft: theme.spacing(2),\n        borderRadius: theme.shape.borderRadius,\n        border: 'solid 1px ' + theme.palette.primary.main,\n        '& span.material-icons.info': {\n            fontSize: 80,\n            color: theme.palette.primary.dark,\n        },\n        '& span.material-icons.warning': {\n            fontSize: 80,\n            color: amber[700],\n        },\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    content: {\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n    },\n});\n\n/**\n *\n *\n * @class InlineMessage\n * @extends {React.Component}\n */\nclass InlineMessage extends React.Component {\n    handleExpandClick = () => {\n        this.setState((state) => ({ expanded: !state.expanded }));\n    };\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof InlineMessage\n     * @inheritdoc\n     */\n    render() {\n        const {\n            classes, height, type, children,\n        } = this.props;\n        return (\n            <Paper className={classes.root} {...this.props}>\n                <Icon className={type}>{type}</Icon>\n                <VerticalDivider height={height} />\n                <div className={classes.content}>{children}</div>\n            </Paper>\n        );\n    }\n}\n\nInlineMessage.propTypes = {\n    classes: PropTypes.shape({\n        root: PropTypes.string,\n        iconItem: PropTypes.string,\n        content: PropTypes.string,\n    }).isRequired,\n    height: PropTypes.number,\n    type: PropTypes.string,\n    children: PropTypes.shape({}).isRequired,\n};\nInlineMessage.defaultProps = {\n    height: 100,\n    type: 'info',\n};\nexport default withStyles(styles)(InlineMessage);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nconst VERSIONS = {\n    V3: ['3.0.0', '3.0.1', '3.0.2'],\n    V2: ['2.0'],\n};\n/**\n *\n *\n * @param {*} apiProduct\n */\nfunction getAPIProductTaggedOperations(apiProduct, openAPI) {\n    const taggedOperations = { Default: [] };\n    apiProduct.apis.map((apiOperations) => {\n        return apiOperations.operations.map((operation) => {\n            const { target, verb } = operation;\n            // TODO: WARN! `toLowerCase` could cause a case sensitive issues\n            // in `verb` if definition has mixed case verbs\n            const openAPIOperation = openAPI.paths[target] && openAPI.paths[target][verb.toLowerCase()];\n            if (!openAPIOperation) {\n                console.warn(`Could not find target = ${target} `\n                        + `verb (lower cased) = ${verb.toLowerCase()} operation in OpenAPI definition`);\n                // Skipping not found operations\n                return null;\n            }\n            const operationInfo = { spec: openAPIOperation, ...operation };\n\n            if (!taggedOperations[apiOperations.name]) {\n                taggedOperations[apiOperations.name] = [];\n            }\n            taggedOperations[apiOperations.name].push(operationInfo);\n            return operationInfo;\n        });\n    });\n    return taggedOperations;\n}\n\n/**\n *\n *\n */\nfunction getTaggedOperations(api, openAPI) {\n    const taggedOperations = { Default: [] };\n    if (api.isAPIProduct()) {\n        return getAPIProductTaggedOperations(api, openAPI);\n    } else {\n        api.operations.map((apiOperation) => {\n            const { target, verb } = apiOperation;\n            // TODO: WARN! `toLowerCase` could cause a case sensitive\n            // issues in `verb` if definition has mixed case verbs\n            const openAPIOperation = openAPI.paths[target] && openAPI.paths[target][verb.toLowerCase()];\n            if (!openAPIOperation) {\n                console.warn(`Could not find target = ${target} `\n                        + `verb (lower cased) = ${verb.toLowerCase()} operation in OpenAPI definition`);\n                // Skipping not found operations\n                return null;\n            }\n            const operationInfo = { spec: openAPIOperation, ...apiOperation };\n            if (openAPIOperation.tags) {\n                openAPIOperation.tags.map((tag) => {\n                    if (!taggedOperations[tag]) {\n                        taggedOperations[tag] = [];\n                    }\n                    taggedOperations[tag].push(operationInfo);\n                    return operationInfo; // Just to satisfy an es-lint rule or could use `for ... of ...`\n                });\n            } else {\n                taggedOperations.Default.push(operationInfo);\n            }\n            return operationInfo; // Just to satisfy an es-lint rule or could use `for ... of ...`\n        });\n        return taggedOperations;\n    }\n}\n\n/**\n * Return the definition version given the parsed spec object\n *\n * @param {SwaggerObject} spec\n * @returns {String} version\n */\nfunction getVersion(spec) {\n    return spec.openapi || spec.swagger;\n}\n/**\n *Extract the path parameters from URI template. User has to give the Open API spec version as well\n * https://github.com/OAI/OpenAPI-Specification/tree/master/versions\n * @param {String} target URI template\n * @param {String} openAPIVersion Should be a valid Open API specification version (i:e \"2.0\", \"3.0.0\")\n * @returns {Array} List of parameter objects according to the given spec version\n */\nfunction extractPathParameters(target, spec) {\n    const regEx = /[^{}]+(?=})/g;\n    const params = target.match(regEx) || [];\n    let parameters = [];\n    const openAPIVersion = getVersion(spec);\n    if (VERSIONS.V3.includes(openAPIVersion)) {\n        parameters = params.map((para) => {\n            const paraObj = {};\n            paraObj.name = para;\n            paraObj.in = 'path';\n            paraObj.required = true;\n            paraObj.schema = {\n                type: 'string',\n                format: 'string',\n            };\n            return paraObj;\n        });\n    } else if (VERSIONS.V2.includes(openAPIVersion)) {\n        parameters = params.map((para) => {\n            const paraObj = {};\n            paraObj.name = para;\n            paraObj.in = 'path';\n            paraObj.required = true;\n            paraObj.type = 'string';\n            paraObj.format = 'string';\n            return paraObj;\n        });\n    }\n\n    return parameters;\n}\n\n/**\n * Extract AsyncAPI path parameters from the channel name.\n * @param {*} target\n */\nfunction extractAsyncAPIPathParameters(target) {\n    const regEx = /[^{}]+(?=})/g;\n    const params = target.match(regEx) || [];\n    const parameters = { };\n    params.forEach((param) => {\n        parameters[param] = {\n            description: '',\n            schema: {\n                type: 'string',\n            },\n        };\n    });\n    return parameters;\n}\n\n/**\n *\n * Return the WSO2 specific scopes array (currently only use the first element of the array)\n * @param {*} operation\n * @param {*} openAPIVersion\n * @returns {Array} Scopes of the `default` security scheme\n */\nfunction getOperationScopes(operation, spec) {\n    const openAPIVersion = getVersion(spec);\n    let scopes = [];\n    if (VERSIONS.V3.includes(openAPIVersion)) {\n        if (Array.isArray(operation.security) && operation.security.find((item) => item.default)) {\n            scopes = operation.security.find((item) => item.default).default;\n        } else if (operation['x-scope']) {\n            scopes = [operation['x-scope']];\n        }\n    } else if (VERSIONS.V2.includes(openAPIVersion)) {\n        if (Array.isArray(operation.security) && operation.security.find((item) => item.default)) {\n            scopes = operation.security.find((item) => item.default).default;\n        } else if (operation['x-scope']) {\n            scopes = [operation['x-scope']];\n        }\n    }\n    return scopes;\n}\n\n/**\n * Return AsyncAPI operation scopes array.\n * @param {*} operation\n * @param {*} spec\n */\nfunction getAsyncAPIOperationScopes(operation) {\n    const scopes = [];\n    if (operation['x-scopes']) {\n        // eslint-disable-next-line no-unused-vars\n        Object.entries(operation['x-scopes']).forEach(([k, v]) => {\n            scopes.push(v);\n        });\n    }\n    return scopes;\n}\n\n/**\n * Map the api.operations array to swagger paths like object\n * @param {Array} operations Operations in API DTO\n * @returns {Object} Mapped operations object\n */\nfunction mapAPIOperations(operations) {\n    const temp = {};\n    for (const operation of operations) {\n        const { target, verb, ...rest } = operation;\n        if (!temp[target]) {\n            temp[target] = {\n                [verb]: rest,\n            };\n        } else {\n            temp[target][verb] = rest;\n        }\n    }\n    return temp;\n}\n\n/**\n *\n *\n * @param {*} selectedOperations\n * @param {*} operations\n * @returns\n */\nfunction isSelectAll(selectedOperations, operations) {\n    for (const path in operations) {\n        if (Object.prototype.hasOwnProperty.call(operations, path)) {\n            const verbs = operations[path];\n            if (\n                !selectedOperations[path]\n                || Object.keys(selectedOperations[path]).length !== Object.keys(verbs).length\n            ) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n/**\n * Check whether the provided object is a Ref object.\n *\n * @param {object} content : The object that needs to be checked.\n * @return {boolean} true if Ref, false otherwise.\n * */\nfunction isRef(content) {\n    let isReference = false;\n    if (typeof content === 'object') {\n        Object.keys(content).map((name) => {\n            isReference = name === '$ref';\n            return name;\n        });\n    }\n    return isReference;\n}\n\nexport {\n    mapAPIOperations,\n    getTaggedOperations,\n    getAPIProductTaggedOperations,\n    extractPathParameters,\n    extractAsyncAPIPathParameters,\n    getOperationScopes,\n    getAsyncAPIOperationScopes,\n    isSelectAll,\n    getVersion,\n    VERSIONS,\n    isRef,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport { updateUserLocalStorage, getUserLocalStorage } from 'AppData/UserStateUtils';\n\nconst WrappedExpansionPanel = (props) => {\n    const { id } = props;\n    const [expanded, setExpanded] = useState(getUserLocalStorage(`${id}-expanded`));\n    const setExpandState = (event, expandedState) => {\n        updateUserLocalStorage(`${id}-expanded`, expandedState);\n        setExpanded(expandedState);\n    };\n    return (<ExpansionPanel expanded={expanded} {...props} onChange={setExpandState} />);\n};\nWrappedExpansionPanel.muiName = 'ExpansionPanel';\n\nexport default WrappedExpansionPanel;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// Check this file for more info  <CARBON_APIMGT>/components/apimgt/org.wso2.carbon.apimgt.impl\n// /src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java\n\nconst DEFAULT_API_SECURITY_OAUTH2 = 'oauth2';\nconst API_SECURITY_BASIC_AUTH = 'basic_auth';\nconst API_SECURITY_API_KEY = 'api_key';\nconst API_SECURITY_MUTUAL_SSL = 'mutualssl';\nconst API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY = 'oauth_basic_auth_api_key_mandatory';\nconst API_SECURITY_MUTUAL_SSL_MANDATORY = 'mutualssl_mandatory';\n\nexport {\n    DEFAULT_API_SECURITY_OAUTH2,\n    API_SECURITY_BASIC_AUTH,\n    API_SECURITY_API_KEY,\n    API_SECURITY_MUTUAL_SSL,\n    API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY,\n    API_SECURITY_MUTUAL_SSL_MANDATORY,\n};\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext } from 'react';\n\nconst ApiOperationContext = React.createContext({});\nexport const useApiOperationContext = () => useContext(ApiOperationContext);\nexport const ApiOperationContextProvider = ApiOperationContext.Provider;\nexport default ApiOperationContext;\n"],"sourceRoot":""}